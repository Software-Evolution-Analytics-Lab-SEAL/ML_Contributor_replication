twiecki(2020-04-10 08:23:26):Thanks @canyon289!
twiecki(2020-04-10 08:23:51)::+1: 
dfm(2020-04-09 15:30:11):PS. I'll squash all those travis-debugging commits when the time comes :)
dfm(2020-04-09 16:47:51):#9 should be merged first.
dfm(2020-04-09 18:53:10):I should also mention that this solves #6 
twiecki(2020-04-10 08:22:42):This is great!

@brandonwillard I went ahead and squash-merged using the github functionality.
brandonwillard(2020-04-10 00:58:15):Do we want to keep the same doc-building setup across all the PyMC projects?  I figured we would at least update the formatting and linting on this project to match the other PyMC projects, but that can be justified by the state of this code base alone.  

Regardless, if RTD makes things simpler, then I'm fine with it.  @twiecki, any thoughts?
twiecki(2020-04-10 08:19:55):Thanks @dfm!

@brandonwillard I think we should go the path of least resistance here and start by just taking over everything we can. But certainly style changes to the code as well as dropping python 2 support are things we can and should do.
dfm(2020-04-10 12:28:30):Thanks all!

@brandonwillard: My thought with this was: I was under the impression that the PyMC3 docs are currently built and deployed manually and avoiding that seemed like a good idea if possible. Happy with whatever others would prefer!
twiecki(2020-04-10 15:21:46):Yeah we never got readthedocs to work, that's pretty much the only reason we don't use it.
brandonwillard(2020-07-05 20:35:24):I would like to get this PR through before the [`black` formatting one](https://github.com/pymc-devs/Theano-PyMC/pull/13).  @ColCarroll, want me to rebase this?
ColCarroll(2020-07-05 22:07:15):Keep an eye on #14 instead
twiecki(2020-07-06 08:41:30):Thank! Should wait for CI to be set up so that we know this didn't break anything.
brandonwillard(2020-07-06 16:17:59):> Thank! Should wait for CI to be set up so that we know this didn't break anything.

It was passing in CI before the rebase and recent commits.  I'll put it in draft-mode for now, though.
twiecki(2020-07-06 16:36:54):If you run tests locally and they pass then we should merge, these kind of PRs get stale quick.
dfm(2020-07-06 17:55:54):I'm finding some unit test failures on this branch that I wasn't finding before so I'll try to diagnose and report back!
brandonwillard(2020-07-06 18:02:41):> I'm finding some unit test failures on this branch that I wasn't finding before so I'll try to diagnose and report back!

Yeah, I'm still rebasing here and there, so keep an eye out for that.
dfm(2020-07-06 19:17:57):@brandonwillard: sounds good! Let me know if there's anything that I can do to help and when it's ready!
brandonwillard(2020-07-08 02:54:56):All right, the standard tests seem to be in order, but I can't say much about the GPU-requiring ones.
ColCarroll(2020-07-05 23:47:07):This now works. You'll want to reinstate some linting afterwards!
dfm(2020-07-06 12:31:03):I missed all the fun over the weekend!! This is really awesome!! 🎉 
brandonwillard(2020-07-06 16:22:41):> I missed all the fun over the weekend!! This is really awesome!!

Oh, there's plenty more to be had over [here](https://github.com/pymc-devs/Theano-PyMC/pull/13)!
ColCarroll(2020-07-20 13:48:46):Thanks! Keep 'em coming! :D 
junpenglao(2020-09-26 05:57:20):Interestingly I found a small differences between the gradient from theano-jax and native jax in the code snippet example:
```python
dlogpt = theano.grad(cost=model.logpt, wrt=model.free_RVs)
dlogp_logp_fn = theano.function(inputs=model.free_RVs, outputs=[model.logpt] + dlogpt)
dlogp_logp_fn(**model.test_point)

# [DeviceArray(-2.74961873, dtype=float64),
#  DeviceArray(0.30685282, dtype=float64),
#  DeviceArray(4.4408921e-16, dtype=float64),
#  DeviceArray(0., dtype=float64)]

fgraph = theano.gof.FunctionGraph(model.free_RVs, [model.logpt])
logp_fn_jax = jax_funcify(fgraph)[0]
dlogp_logp_fn = jax.value_and_grad(logp_fn_jax, argnums=range(len(model.free_RVs)))
dlogp_logp_fn(
    model.test_point['a_log__'],
    model.test_point['b_log__'],
    model.test_point['x'])

# (DeviceArray(-2.74961873, dtype=float64),
#  (DeviceArray(0.30685282, dtype=float64),
#   DeviceArray(2.22044605e-16, dtype=float64),
#   DeviceArray(-0., dtype=float64)))
```

https://gist.github.com/junpenglao/fe5e1b451c076cc7b4ca16acdd7d6472
brandonwillard(2020-09-26 06:34:31):I'm glad they're so similar, though!

Those `1e-16` values?  The JAX value appears to be half the Theano value.  Perhaps there's a step in there somewhere that's reducing precision.  Regardless, those are both within common effectively-zero ranges, so it's probably not an error.
junpenglao(2020-09-26 09:55:40):that makes sense - Jax is by default float32, and to enable float64 there are a bit more steps: https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#Double-(64bit)-precision

twiecki(2020-09-26 12:05:26):As this is basically functional (even if basic) I propose we merge this and start doing individual PRs against this.
brandonwillard(2020-09-26 23:24:25):I just pushed some major fixes that should add functionality and coverage for all the `*Subtensor*` `Op`s (i.e. all varieties of array indexing).
twiecki(2020-09-27 08:17:14):I can now sample with jax 0.2.0.
junpenglao(2020-09-27 08:46:53):I am getting an error of `Identity` lacking `nfunc_spec` attr, could be fixed with adding the below to `jaxify.py`

```
@jax_funcify.register(Identity)
def jax_funcify_Identity(op):
    def identity(x):
        return x

    return identity
```
twiecki(2020-09-27 08:54:25):I think I'll merge, it's a bit of a nuisance we can't PR into this.
twiecki(2020-09-27 10:10:38):OK damn, I was hoping it was only the syntax error (which I fixed on master) but other tests are failing too :-/.
brandonwillard(2020-08-27 22:02:29):Looks like `black` might've been updated, causing that test to fail.  I'll check it out.
brandonwillard(2020-08-28 01:45:04):If you rebase this, the `black` errors should be fixed.
bridgeland(2020-08-31 11:08:19):@dfm : thanks. Done
dfm(2020-08-31 11:26:59):@bridgeland: Thanks! Unfortunately that isn't quite right, the string needs to be on the same line as the return (`return """...` - they do call black "uncompromising" after all :/). I know this is annoying and I might be able to push to this branch directly to debug it later today, if you'd prefer! But, I think that after changing that, we should be able to get the other tests running. Thanks and sorry about the hoops!
bridgeland(2020-08-31 14:06:46):Wups! 

Fixed.
brandonwillard(2020-08-31 17:17:36):To fix these kinds of formatting issues, you should only need to run `black theano/ tests/ setup.py`.   

Otherwise, these commits need to be squashed/rebased, and this change needs a test that highlights/demonstrates the bug that it's addressing.
bridgeland(2020-09-01 22:01:09):@brandonwillard I squashed and rebased. But I cannot create a test, for two reasons. 
First I was not able to get the existing theano tests to pass: 654 errors, 28 failures. 
Obviously there is some problem with my installation, perhaps with Xcode. 

Second, I am not sure how to write an automated test for this change. My original 
[hand test](https://github.com/pymc-devs/Theano-PyMC/issues/29) still exhibits ~15 divergences (versus ~600 previously), since
occasionally a value is generated that exceeds the now greater limits.

brandonwillard(2020-09-02 21:07:28):From the looks of it, you could add/modify a test to confirm that the operator computes values outside of the previous cut-offs.  The existing tests are [here](https://github.com/pymc-devs/Theano-PyMC/blob/master/tests/tensor/nnet/test_sigm.py#L33), so that's where any changes and additions would go.

I don't know much about Xcode, but I don't think it should be involved.  If you create a clean Conda environment and install the requirements (see [here](https://github.com/pymc-devs/Theano-PyMC/blob/master/.travis.yml#L62)), then the tests should run fine from the command line (e.g. `pytest tests`).  If they don't, then that's a separate problem; one that would be worth addressing on its own.

Also, since there are a lot of tests, it's often more efficient to simply run the new/altered test(s) and any others that might be affected by your changes.  You can specify very specific tests&mdash;or a single test module/file&mdash;in the `pytest` command line options.  After confirming that your new test(s) pass&mdash;and that related ones don't break&mdash;locally, you can push the changes to this branch and let CI perform the other tests.
bridgeland(2020-09-02 23:35:59):@brandonwillard Hmm. Perhaps my mistake was to run tests using **nosetest tests** instead of **pytest tests**.

I am still getting some failures, and a lot of skipped tests.

![image](https://user-images.githubusercontent.com/5245697/92047502-4857bf00-ed53-11ea-837e-1c4ff60b576e.png)

Is this expected? Also should it take 90 minutes to run all the tests?



brandonwillard(2020-09-02 23:54:35):It looks like everything passed in that output.  If you're referring to `6 xfailed`, those are _expected_ failures.

Unfortunately, 90 minutes to run all of the tests is not surprising.  That's why I recommend running only the relevant test modules.
bridgeland(2020-09-03 21:51:21):I am stuck. As you suggested, **tests/tensor/nnet/test_sigm.py** --- or its imports --- 
would seem to be a good place to put a new test of this situation. So I tried this 
addition, in **tests/tensor/test_basic.py**:

![image](https://user-images.githubusercontent.com/5245697/92176525-9da3d700-ee0c-11ea-94d3-524b341980bc.png)

That caused the expected failure, without the **c_code()** fix in place:

![image](https://user-images.githubusercontent.com/5245697/92175357-7d731880-ee0a-11ea-992b-898fbd27b3ed.png)

Sadly the same failure occurs with the fix in place. A bit of logging within
**ScalarSigmoid.c_code()** reveals that the fixed function is never invoked
in the new test case, and in fact is only invoked three times in  

     $ pytest -s tests/tensor/nnet/test_sigm.py::TestSigmoidBroadcast

corresponding to these integer test cases:

![image](https://user-images.githubusercontent.com/5245697/92176471-8533bc80-ee0c-11ea-9103-8bf5e3aa834e.png)

So I am at a loss. Despite much experimentation, I cannot write a test case
that exercises this fix.

Summary:
1. The fix works, as demonstrated by the changed behavior of the pymc3 beta 
non-automated test
2. My attempted test case does not  exercise the fix, as **ScalarSigmoid.c_code()**  
is never invoked.
3. I don't understand the conditions under which **ScalarSigmoid.c_code()**  is 
invoked. 

bridgeland(2020-09-04 12:32:39):A bit more explanation. 

The correct test to modify seems to be here, in **tests/tensor/nnet/test_sigm.py**:

![image](https://user-images.githubusercontent.com/5245697/92239254-ae922e00-ee88-11ea-9d93-003aa78fd118.png)

That test uses the dict **_good_broadcast_unary_normal_no_complex**, imported from
**tests/tensor/test_basic.py**, which lists a bunch of different cases to test:

![image](https://user-images.githubusercontent.com/5245697/92239372-e305ea00-ee88-11ea-9b79-c2de8353146f.png)

Experimentation reveals that the cases that test ints generate C code,
and the cases that test floats do not. 

Why? Is there a way to change that, to force C to be emitted? I looked for an option
on **makeTester()** (in **tests/tensor/test_basic.py**) but did not find one. Perhaps
I missed it.

@dfm @brandonwillard : do either of you understand the theano code generation?




brandonwillard(2020-09-04 18:59:24):@bridgeland, there is a code/compilation caching mechanism that might be affecting your measurements.  For instance, I don't think `ScalarSigma.c_code` will be called twice if/when the cache is used; however, the C code/linker will still be used at runtime (if compilation was successful).

You can check whether or not `theano.config.cxx` is non-empty, because&mdash;if it is empty&mdash;the C code won't be used.  Otherwise, I don't see any parameters in `makeBroadcastTester` and `makeTester` that specifically set the C/Python linker, so the remaining options that would affect the choice between the C/Python operator code are most likely environmental (e.g. environment variables like `FAST_COMPILE` and others used in [the Travis setup](https://github.com/pymc-devs/Theano-PyMC/blob/master/.travis.yml#L76)).
bridgeland(2020-09-04 19:48:05):@brandonwillard  A cached compilation would explain the behavior I am seeing, but 
only if the cache is persisted in the file system. A cache in memory would presumably
be cleared with a new invocation of **pytest**. **pytest** is exhibiting  no calls to 
`ScalarSigmoid.c_code()` for any float tests, which would seem to be incompatible
with an in-memory cache. 

`theano.config.cxx` does not seem to be involved, as it has a value of `'/usr/bin/clang++'`
both for the int cases where `c_code() `is called and the float cases where it is not called.
bridgeland(2020-09-04 20:15:25):Aha! Clearing the cache solves all my problems:

>     $ theano-cache clear

(Well not all my problems. For example, the DC music clubs are still closed due to the
virus. But at least this theano problem is solved.)
brandonwillard(2020-09-04 20:19:10):> (Well not all my problems. For example, the DC music clubs are still closed due to the
> virus. But at least this theano problem is solved.)

By solving Theano problems we can solve PyMC3 problems, and by solving PyMC3 problems we can solve modeling problems, and by solving modeling problems we can solve virus problems...
bridgeland(2020-09-04 22:00:11):Arg. It looks like my new test case failed lint.
bridgeland(2020-09-04 22:41:46):Hmm. I fixed the earlier lint issues: unwanted whitespace. 

Now I have new lint issues, but I can't find the description of
what is wrong.
twiecki(2020-09-05 12:57:25):Did you run black?
```
black -t py36 --check theano/ tests/ setup.py

would reformat /home/travis/build/pymc-devs/Theano-PyMC/tests/tensor/nnet/test_sigm.py

would reformat /home/travis/build/pymc-devs/Theano-PyMC/tests/tensor/test_basic.py
```
bridgeland(2020-09-06 13:12:06):@twiecki Just ran black and updated two files in the fix.

Note to self: run black as part of my normal python dev process
bridgeland(2020-09-06 21:22:43):Hmm. It seems that at least of the tests — **tests/theano/tensor/nnet/test_nnet.py::test_argmax_pushdown**
— depends on the existence of the deleted `ScalarSigmoid.c_code()`: it fails when that method is removed
but passes when that method is present even if it does nothing.

The test does not look sound:

```
        # print 'AFTER'
        # for node in fgraph.toposort():
        # print node.op
        assert len(fgraph.toposort()) == 3    # bridgeland: why 3?
        assert isinstance(fgraph.toposort()[0].op, tensor.Elemwise)
        assert isinstance(fgraph.toposort()[1].op, Softmax)
        assert isinstance(fgraph.toposort()[2].op, tensor.CAReduce)
        assert isinstance(fgraph.toposort()[2].op.scalar_op, theano.scalar.Maximum)
```

But I am reluctant to change the test as I do not really understand it.

Will try again with a noop `ScalarSigmoid.c_code()`
brandonwillard(2020-09-06 21:32:45):I changed this PR into a draft, just in case you were testing changes via the CI.
bridgeland(2020-09-07 11:32:17):This time I ran all the tests locally before pushing, not just the 35 tests in 
**tests/tensor/nnet/test_sigm.py**. (They all pass.)

@brandonwillard I appreciate that deleting the C implementation of `SigmoidScalar` causes
some tests to fail. But why should anything fail, given that the C implementation is identical
to what is calculated without it? Either some tests are unnecessarily fussy, or (more likely)
I am misunderstanding something.
twiecki(2020-09-07 12:24:50):without a c implementation it will be very slow.

On Mon, Sep 7, 2020, 13:32 David M Bridgeland <notifications@github.com>
wrote:

> This time I ran all the tests locally before pushing, not just the 35
> tests in
> *tests/tensor/nnet/test_sigm.py*. (They all pass.)
>
> @brandonwillard <https://github.com/brandonwillard> I appreciate that
> deleting the C implementation of SigmoidScalar causes
> some tests to fail. But why should anything fail, given that the C
> implementation is identical
> to what is calculated without it? Either some tests are unnecessarily
> fussy, or (more likely)
> I am misunderstanding something.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/pymc-devs/Theano-PyMC/pull/32#issuecomment-688266043>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAFETGE63K2GW4YWBB6JKODSETAFDANCNFSM4QOPFIYQ>
> .
>

bridgeland(2020-09-07 12:39:36):I am down to one failed test in the CI: **tests/tensor/nnet/test_sigm.py::TestSigmoidBroadcast::test_good**

That test passes locally in my test environment

![image](https://user-images.githubusercontent.com/5245697/92388482-5441d900-f0e5-11ea-9ffe-2b5881e98d58.png)

Not sure why it fails in the CI.
bridgeland(2020-09-07 23:28:36):Note that the error message for the failed test does not help us much:

![image](https://user-images.githubusercontent.com/5245697/92420156-cb0bc000-f13f-11ea-9ee7-82aa3c8938ee.png)

I suspect that the expected and the got (actual) differ in some small way
that rounds up to 1.0 when displayed. Is there a way to do 

```
     numpy.set_printoptions(precision=20)
```

for the CI?

bridgeland(2020-09-07 23:31:00):But the larger question is: why would this test pass in my local environment 
but fail in the CI?

Is there a way to determine the version of packages loaded in the CI?
bridgeland(2020-09-08 11:21:59):> But the larger question is: why would this test pass in my local environment
> but fail in the CI?
> 
> Is there a way to determine the version of packages loaded in the CI?

Never mind. I found it in the Travis results.
bridgeland(2020-09-08 17:48:12):I attempted to recreate the exact environment in the failing CI test, using the 
commands in the failing CI test. The attempt was mostly successful—the
environments mostly match, with the exceptions listed below. But despite 
recreating the environment (mostly), I could not replicate the failure. So I 
suspect one of these environment differences:

1. A somewhat older version of **mkl** is installed in my local environment
than in the CI: 2019.4 versus 2020.2. When I attempt to install version 
2020.2 explicitly, conda fails, reporting many conflicts.

2. A somewhat older version of **intel-openmp** is installed in my local
environment than in the CI: 2019.4 versus 2020.2. When I attempt
to install the new version explicitly, conda fails, reporting many
conflicts.

3. There are several packages that are installed in the CI but not
installed in my local environment. These packages look like either
linux dependencies or gcc dependencies, not needed for running 
on macos: **_libgcc_mutex**, **ld_impl_linux-64**, **libgcc-ng**, 
**libtool**, **libxcb**.

4. The fortran library installed in my local environment is completely
different from the one installed in the CI: **libgfortran** (v3.0.1) versus
**libgfortran-ng** (v7.3.0)

5. The C++ library installed in my local environment is different from
the one installed in the CI: **libcxx** (v1.16) vs. **libstdcxx-ng** (v7.3.0).
Seems unlikely to be the problem.

6. The text conversion library **libiconv** (v1.16) is installed in my 
local environment but not in the CI. Seems unlikely to be the problem.

7.  My local environment has the package **gettext** installed (v 0.19.8.1),
but the CI does not. **gettext** was installed as a dependency of 
graphviz. Seems unlikely to be the problem.
bridgeland(2020-09-09 00:34:02):A clue: the CI tests with PART="tests/tensor/nnet --ignore-glob='*/test_abstract_conv.py'"
has a failure in Python 3.6, but the same PART does not cause a CI test to fail in Python 3.7.
bridgeland(2020-09-09 11:13:46):CI job 126.12 fails on **tests/tensor/nnet/test_sigm.py::TestSigmoidBroadcast::test_good**
CI job 126.6 has no failing tests. The two jobs run the same tests, and have almost identical
environments, differing only in two ways:

1. Job 126.12 uses python 3.6.10 while job 126.6 uses python 3.7.9

2. The environment for job 126.12 includes the package **dataclasses**, while job 126.6 
does not. **dataclasses** is a backport to python 3.6 of the new python 3.7 feature for data
classes. (Note to self: useful new feature.)

Neither environmental difference seems likely to be the cause of the failure/non-failure
difference. So I no longer suspect an environmental difference.

Instead I am mystified. I cannot replicate the bug even when I (almost) replicate the environment
in macos. And I don't see any difference between job 126.12 and job 126.6 that would cause
the former to fail but not the latter.

Short of standing up my own local linux box and experimenting, I don't know where to go next.

@brandonwillard @twiecki @dfm @aseyboldt   Help?
brandonwillard(2020-09-09 16:57:40):@bridgeland, are you running this test locally under the same configuration as CI (e.g. with the same `FAST_COMPILE` and `FLOAT32` values)?
bridgeland(2020-09-09 17:40:11):> @bridgeland, are you running this test locally under the same configuration as CI (e.g. with the same `FAST_COMPILE` and `FLOAT32` values)?

Not sure. $FLOAT32 and $FAST_COMPILE are both blank in my local config. Where do I see what they are in
job 126.12? 
brandonwillard(2020-09-09 18:55:36):These lines in the [`.travis.yml`](https://github.com/pymc-devs/Theano-PyMC/blob/master/.travis.yml#L76) determine the CI test config, and they're applied to the CI environment [here](https://travis-ci.org/github/pymc-devs/Theano-PyMC/jobs/725056984#L406).

Looking at that failure, CI appears to be using `float64`&mdash;so make sure you're using that setting locally&mdash;and the computed/expected results differ somewhere near the `1e-9` range, while the actual `eps` used for comparison is probably set to `1e-10`.  Other environment variables are set there, as well, and those&mdash;along with broader system-specific conditions and version differences&mdash;could affect Python implementation and C compilation choices such that both end up having slightly different ranges of significant digits (e.g. changes in the order of operations and/or precision of intermediate steps).  See [here](https://gcc.gnu.org/wiki/FloatingPointMath) for some relevant settings on the C side.

I would first try to determine whether or not `1e-10` is actually within the range of significant digits for this function, precision, and test values.  If you can determine that it isn't, then the fix is easy: lower the `eps` tolerance.  Otherwise, if you can determine that it is, then we need to find out which implementation is producing the correct result and fix the other one (or fix the test framework/utilities).
bridgeland(2020-09-09 19:15:11):@brandonwillard I missed that. Will investigate.
bridgeland(2020-09-09 21:27:39):$FLOAT32 and $FAST_COMPILE are not the problem. They are set to 1—in various combinations—
in the Python 3.7 CI tests, but remain unset in the Python 3.6 CI tests. 

![image](https://user-images.githubusercontent.com/5245697/92644033-b3a01480-f2b0-11ea-8edd-0524ffa0ee23.png)

(Although looking at the travis.yml, I don't see how that specification indicates
to set $FLOAT32 and $FAST_COMPILE for Python 3.7 and not for Python 3.6,
unless `normaltest` means for the first python (3.7) and for no others.

![image](https://user-images.githubusercontent.com/5245697/92645519-f6fb8280-f2b2-11ea-9369-92a64889bd11.png)

float64 is in fact set locally, or at least that is my interpretation of the results of 
`print(theano.config.__str__(print_doc=False))`:

![image](https://user-images.githubusercontent.com/5245697/92644459-63758200-f2b1-11ea-87df-978b059cfbfe.png)

I'll investigate `eps`.

bridgeland(2020-09-09 21:28:40):Just pushed a branch that only increases the numpy print precision,
to investigate eps. Will remove once we better understand.
bridgeland(2020-09-09 22:47:02):Wow! Lint failed (note to self), but this test build passes all tests, even
though the only change was adding the line

```
                np.set_printoptions(precision=20)
```

to print out the error values with more precision. 

I do not understand, but I will try again, dropping that line and see
if that caused the changed behavior.
bridgeland(2020-09-10 15:39:56):Hmm. The CI passed now. Not clear why it passed now and failed before. 
Does it matter?

The test coverage has decreased a bit. This is surprising since the only
lines I changed are still covered, and the changes to the tests add a case
but don't mess with existing cases. 

@brandonwillard Any explanation?
bridgeland(2020-09-11 15:06:00):For example, in the file **theano/tensor/nnet/sigm.py**, there are many lines
that are not covered by tests, and marked in red. A few of those lines have a
little red UNCOV marking on the left, which I take to mean that they are newly
uncovered by this change.  For example, there are four such uncovered lines in 
`UltraFastScalarSigmoid.c_code()`, and in fact that method is entirely uncovered:

![image](https://user-images.githubusercontent.com/5245697/92940851-9ccb0080-f41d-11ea-8fec-3ab74e98d42d.png)

How did this method get uncovered by my change? I have no idea.
Neither the small fix I made nor the additional test case affects UltraFastScalarSigmoid
AFAIK. It would seem to be unaffected by the few changes I made.

Perhaps I am misreading the results, and there is some other test coverage
problem that I am missing.
bridgeland(2020-09-14 20:44:37):@brandonwillard @dfm @twiecki @aseyboldt Any ideas on what would account for this
decrease in test coverage? Any suggestions for how to investigate?

FWIW, I ran one of the test jobs locally (130.4), and examined the test coverage that
resulted from that test run. The results are somewhat different from that reported by
Travis CI. For example, for source file **theano/tensor/nnet/sigm.py** on this job, both
the local test and CI miss most statements. (Presumably this source file is better 
covered by other test configurations.) But there are 11 lines that are somehow
covered by the test locally and not covered by the CI running the same configuration.
bridgeland(2020-09-14 20:48:46):Or maybe the decline in test coverage does not matter? Should I mark as 
ready for review?
twiecki(2020-09-15 09:09:56):@bridgeland Yes, that doesn't matter, there's always noise with code coverage. This looks good to me but I'll wait for @brandonwillard and potentially @dfm to merge. Thanks for the contribution and sorry for all the troubles you ran into.
dfm(2020-08-31 00:57:09):The style unit test are failing and the fix should be as easy as changing this line to

```python
            return """%(z)s = 1.0f /(1.0f + exp(-%(x)s));""" % locals()
```

instead of the multi-line version to be consistent with [black](https://github.com/psf/black).
dfm(2020-08-31 00:57:41):Similarly, this one should be:
```python
            return """%(z)s = 1.0 /(1.0+exp(-%(x)s));""" % locals()
```
to get the tests to pass.
twiecki(2020-09-05 11:19:22):Is this a test?
bridgeland(2020-09-06 12:44:08):No. I added a case to the existing tests with the changes to **tests/tensor/test_basic.py** and **tests/tensor/nnet/test_sigm.py**.

The change to **theano/tensor/nnet/sigm.py** was to completely delete the errant optimization. 
twiecki(2020-09-06 13:13:12):I see, thanks.
brandonwillard(2020-09-06 21:26:58):I don't understand; the C implementation shouldn't be removed.
brandonwillard(2020-09-15 18:11:38):Mind adding some spacing around the `1.0+exp` in the latter C string and an extra space after the `/(1.0` in both?  This isn't an important/functional change, but it is the best time to make such changes.
bridgeland(2020-09-15 19:32:43):done
dfm(2020-09-15 22:31:32):@brandonwillard: Good point! That probably is the relevant number in principle, but as far as I can tell it's actually never used. The only place it appears in the code base is [here](https://github.com/pymc-devs/Theano-PyMC/blob/e53c4879b248c9ea668500bb6c4603c247e011d6/theano/configdefaults.py#L1221), but then that variable is immediately overwritten [here](https://github.com/pymc-devs/Theano-PyMC/blob/e53c4879b248c9ea668500bb6c4603c247e011d6/theano/configdefaults.py#L1232-L1235).
brandonwillard(2020-09-26 00:44:08):Currently, I'm stuck considering whether or not we should attempt to use `tt.nonzero` to convert boolean indices into "regular" non-boolean indices.  This seems to work rather well and cuts down the amount of boolean-specific logic need in the `*Subtensor*` `Op`s (it also entirely obviates some `Subtensor` `Op`s); however, it has one distinct disadvantage: it doesn't produce the same (runtime) errors as NumPy.

This can arise when `nonzero` reduces the dimension size of the boolean indices so that they actually match an indexed array with smaller dimensions.  When this happens, the `Op.perform` will succeed without error, yet the corresponding NumPy operation would fail.

We could use an `Assert` node that would raise an exception when the dimensions of the boolean indices and the indexed array do not match, but, unfortunately, this exception wouldn't match NumPy's exception type.  Also, `Assert` nodes can be removed during certain forms of optimization, and we wouldn't ever want to remove these ones.
twiecki(2020-09-26 04:42:58):I don't see the numpy-incompatibility here as a blocker and the assert node (even with a different exception) is a reasonable solution.
brandonwillard(2020-10-12 01:20:38):This PR has grown to include quite a few independently important changes that were needed along the way&mdash;as well as some helpful refactoring.  Due to the general importance of these changes, I'm going to consider this PR finished once the tests pass and continue the boolean indexing changes in another PR.
brandonwillard(2020-10-12 01:40:32):Well, this recent run included the removal of constant caching (i.e. #99), and I don't see any noticeable changes in the speed of the tests.  The claim was that that it would speed up the `MergeOptimizer` (with no measures attached to said claim), so&mdash;worst case scenario&mdash;I was expecting a slowdown that would at least be noticeable in the aggregate.  Alas, I've observed no such slowdown in the tests.

Locally, I'm also not seeing any real changes in memory use.  It obviously wouldn't hurt to directly profile this change, but, given the simplicity now provided by the removal of constant caching, I believe we should move forward with this change.
twiecki(2020-09-27 11:49:30):Test?
junpenglao(2020-09-28 07:54:07):Yeah this one confused me a bit as there is not theano ops call `tt.identity`, I have not completely understand how and where it is used but it does fix some bug with it.
brandonwillard(2020-09-28 17:32:47):> Yeah this one confused me a bit as there is not theano ops call `tt.identity`

This operator is in `theano.scalar.basic` and it likely appears due to composite operators like `theano.tensor.basic.tensor_copy` (i.e. an `Elemwise` with `identity` as the scalar `Op`).
junpenglao(2020-09-29 08:44:25):Since this is (almost) a non-Op, I think I will merge this @twiecki 
twiecki(2020-09-29 08:49:50):@junpenglao Well go ahead and try ;).
brandonwillard(2020-09-29 13:51:13):I cannot emphasize enough how we absolutely **cannot** merge PRs without tests (or letting the tests finish)!
brandonwillard(2020-09-29 14:07:08):Also, given the original error (`AttributeError: 'Identity' object has no attribute 'nfunc_spec'`) it looks like the best solution would've been to add an `nfunc_spec` to the `Identity` `Op`  (if there's a NumPy identity function, that is).  That way we wouldn't need to include a separate dispatch function for a specific subclass of `Scalar`.
twiecki(2020-09-28 07:02:07):Thanks, how do I handle kwargs?
brandonwillard(2020-09-28 17:42:42):> Thanks, how do I handle kwargs?

Which kwargs?  For the `jax` functions?

In general, the `jax` function arguments are going to come from either the arguments to the JAX closure/function constructed in the `Op` dispatch function (e.g. `jax_funcify_ExtractDiag`)&mdash;which themselves are determined by the arguments passed to the `inputs` argument of the `Op`'s `perform` method&mdash;or from fields on the `Op` instance itself.  In the latter case, those fields simply need to be added to the constructed closure/function via reference to the original `Op` object or&mdash;more preferably&mdash;by use of default keyword values in the closure/function (e.g. `def jax_funcify_ExtractDiag(..., axis=op_axis_value)`) where `op_axis_value = op.axis` preceding the function definition).
brandonwillard(2020-09-28 21:30:51):Just pushed some changes.  Needs a few more tests, though.
twiecki(2020-09-29 08:07:55):Added more tests, I think this covers everything. Not sure why the `lower=False` doesn't work.
twiecki(2020-09-29 08:15:23):OK, figured out lower.
twiecki(2020-09-29 17:45:38):Dang, messed up some commits when rebasing. Closing in favor of #59.
brandonwillard(2020-09-29 18:13:39):I think it would be easier if we just wait for the test on this one to finish, merge it, then rebase #59; especially since #59 is behind this branch.
twiecki(2020-09-28 06:59:00):Great stuff, this cleans up *a lot*.

```python
sts/test_2nd_order_grads.py:5: in <module>

    import theano

theano/__init__.py:94: in <module>

    from theano.configdefaults import config

theano/configdefaults.py:623: in <module>

    "mode", "Default compilation mode", ConfigParam("Mode", filter_mode), in_c_key=False

theano/configparser.py:301: in AddConfigVar

    configparam.__get__(root, type(root), delete_key=True)

theano/configparser.py:347: in __get__

    self.__set__(cls, val_str)

theano/configparser.py:359: in __set__

    self.val = self.filter(val)

theano/configdefaults.py:607: in filter_mode

    or val in theano.compile.mode.predefined_modes

E   AttributeError: module 'theano' has no attribute 'compile'
```
brandonwillard(2020-09-28 14:11:26):Ha, yeah, this is the result of #45.
brandonwillard(2020-09-29 16:36:56):Superceded by #58.
twiecki(2020-09-29 07:24:07):How does this fix the circular import issue?
michaelosthege(2020-09-29 12:33:32):The CI tests look like the import problem appears just on Python 3.6
brandonwillard(2020-09-29 14:34:48):Yes, the problem definitely appears to be in Python 3.6 only.  I've simply reverted the import changes in `opt_uncanonicalize.py` and that appears to work; however, the imports in this library are a complete mess and must be addressed ASAP (see #45).
twiecki(2020-09-29 16:41:08):Nice!!
XZLeo(2023-09-07 15:31:58):I got the same error with python 3.10. I don't understand the answer above. Can someone explain to me how to fix it? Many thanks!
allisonmcampbell(2023-10-03 20:14:26):I also got this error, now with python 3.11
ObigerTo(2023-10-07 14:45:57):I also got the error with my python 3.12. Working in VSC and can't find the solution for it.
Is there a Code which solves the importing Problem?
dalesmith8(2023-10-24 19:48:21):Same error as above, with 3.11.5 - what is going on with this program? I'd really rather not switch back to Stan...
StefanoDamato(2023-10-24 20:29:15):I am having the same error, using Python 3.9.18 and PyMC3 3.11.4
brandonwillard(2023-10-24 22:52:58):Sorry folks, Aesara is not affiliated with PyMC, so any errors you're having related to PyMC need to be addressed to that project.  

Otherwise, feel free to [open an issue](https://github.com/aesara-devs/aesara/issues/new/choose) for any problems related to the use of Aesara alone.
brandonwillard(2020-09-29 17:36:10):Wait, I'm confused; why don't we make these changes in #50?
twiecki(2020-09-29 17:43:54):@brandonwillard Just because #50 should be ready to merge and this is still WIP.
brandonwillard(2020-09-29 18:16:29):FYI: This PR tests some multi-output conditions that weren't previously covered, so it will need to contain those updates to move forward.
brandonwillard(2020-10-01 01:34:31):All right, I closed the other PR and got everything working in this one.
twiecki(2020-10-01 13:44:00):Thanks for the help @brandonwillard!
twiecki(2020-09-29 13:31:07):Here is the current issue, not sure why this is happening.
twiecki(2020-09-29 13:31:28):This had a typo before, probably need a test to cover this case.
brandonwillard(2020-09-29 17:31:30):I don't believe the `jax_funcs` part is incorrect; there should be a JAXable function for each node output, which is what that assert is stating (aside from the typo).
brandonwillard(2020-09-29 17:42:24):The SVD `Op` is one of the rare ones that has two outputs.  That's why you're seeing this.
twiecki(2020-09-29 17:43:29):Hm, there was only one for multi-output func graphs.
brandonwillard(2020-10-01 01:30:08):@Rashmi-K-A, looks like you might need to set up your local Git to use an email address associated with your GitHub account, since that [commit isn't linked to your account](https://docs.github.com/en/free-pro-team@latest/github/committing-changes-to-your-project/why-are-my-commits-linked-to-the-wrong-user#commits-are-not-linked-to-any-user).
Rashmi-K-A(2020-10-01 01:38:00):Thanks @brandonwillard, I had missed that, just linked it :) 
twiecki(2020-10-01 13:48:55):Thanks for the contribution @Rashmi-K-A!
brandonwillard(2020-10-04 04:04:41):Wow, if these times are valid, then running our tests with [GitHub Actions takes roughly 49 minutes of "workflow execution" time](https://github.com/dfm/Theano-PyMC/actions/runs/287250424), while [Travis has been ranging from 1 hour and 27 minutes to 2 hours and 45 minutes of run time (and nearly 5 hours of "total" time)](https://travis-ci.org/github/pymc-devs/Theano-PyMC/pull_requests)!
dfm(2020-10-04 09:27:20):Yep! I think those times will be representative and all the jobs run in parallel!

Do you know why `tests/tensor/test_basic.py::TestInferShape::test_infer_shape` is failing? It's also [failing on Travis for my fork](https://travis-ci.com/github/dfm/Theano-PyMC/jobs/394674435). 
brandonwillard(2020-10-04 16:14:10):@dfm, if you pull and rebase, the problem should be fixed.
dfm(2020-10-04 20:00:06):OK - I think this is now ready for review!

The most recent run on my form is here: https://github.com/dfm/Theano-PyMC/actions/runs/288180217

And coverage and such is working: https://coveralls.io/github/dfm/Theano-PyMC
brandonwillard(2020-10-07 01:11:31):This is currently blocked by the need for a PyPI secret, no?  @twiecki, can you add that?
twiecki(2020-10-07 13:21:41):Added the API token.
dfm(2020-10-07 13:39:35):Thanks! Let me rebase and double check all this.

Are y'all happy with the proposed release procedure?
brandonwillard(2020-10-06 00:12:10):Looks like we're having a CI issue involving Coveralls.  @dfm, ever seen this one?
brandonwillard(2020-10-06 00:25:19):This PR has a lot of good updates and the unit tests are passing, so I'm going to merge this and see if the Coveralls step(s) will work from the `master` branch.

Opened #81 to follow up on the CI issue.
twiecki(2020-10-06 10:56:13):Coveralls is always flakey.
twiecki(2020-10-06 11:31:44):Nice! I wonder how many ops are still left.
brandonwillard(2020-10-06 18:34:29):> I added an `s` to a verb
> LGTM

Sorry, I think I dropped that change in this latest rebase.  Can you add it again or tell me where it was?
brandonwillard(2020-10-06 15:13:08):It looks like the `pip` caching is working, but I'm seeing cache misses for the Conda cache.

Also, we were previously caching the `~/.theano` directory, so we might want to add that, too.
dfm(2020-10-06 15:16:21):While it would be possible, I really don't think that we want to be caching the `~/.theano` directory. I worry that we'll miss issues because it has cached a previously-working version of some of the test graphs. But you know better so I trust your judgement!
dfm(2020-10-06 15:19:21):Also: I'm not sure that the miniconda action will play nice with caching. Is it documented somewhere?
brandonwillard(2020-10-06 15:19:33):> I worry that we'll miss issues because it has cached a previously-working version of some of the test graphs.

Yeah, that's a real concern.  There's only one flip side to that: what if this level of caching is the only way to test Theano's code caching (i.e. the thing that creates `~/.theano` itself)?  Seeing how painfully interconnected the tests are, it wouldn't surprise me.
dfm(2020-10-06 15:20:44):@brandonwillard: haha yeah... good point. I don't know the right approach!
brandonwillard(2020-10-06 15:23:32):> Also: I'm not sure that the miniconda action will play nice with caching. Is it documented somewhere?

It's [mentioned in the `setup-miniconda` README](https://github.com/conda-incubator/setup-miniconda#caching), but I don't know if that necessarily makes it officially supported.
dfm(2020-10-06 15:58:49):This all looks good to me!
brandonwillard(2020-10-06 16:13:16):I'm still on the fence about caching.  For instance, it's not clear that it's helping with much.  Perhaps we can leave these settings in as comments and revisit later.  I would definitely like to have the filtering in ASAP, though.
dfm(2020-10-06 16:26:39):Agreed - I don't think that caching should be a high priority task.
dfm(2020-10-06 15:06:47):Here I think we should add

```
shell: bash -l {0}
```

Like in the following steps so that it'll use the installed Python rather than the system one.
brandonwillard(2020-10-06 15:10:03):Good call!
twiecki(2020-10-06 11:25:36):This makes sense to me but I'm worried we're breaking GPU and we have no tests for this. Do you know which config gets set?
michaelosthege(2020-10-06 11:31:51):> This makes sense to me but I'm worried we're breaking GPU and we have no tests for this. Do you know which config gets set?

I don't know. Also there are 180 files in the `tests` dir so I gave up looking for it right away.
In line 179 the `gpuarray` submodule is imported so it might be related to that.

Do we know if GPU works?

Also, I can move the `import tests` into the `if` clause and/or raise a warning, so the next person looking into GPU support becomes aware of it?
brandonwillard(2020-10-07 01:41:10):The `tests/__init__.py` is empty, so it doesn't look like that `import tests` is auto-loading anything.  

The next consideration would be for imports like `from theano import tests` and attribute references like `theano.tests` within the `theano` package.  Regarding those, I couldn't find anything.

I did find some some broken imports from a non-existent `tests.theano` in the `gpuarray` tests, and a few direct imports from `tests` in `theano.sparse.sandbox`, but those are unrelated to #84.
dfm(2020-10-06 16:50:10):It looks like the answer is "yes"...

Ready for review!
dfm(2020-10-07 15:37:25):Also: I that the only way to totally fix #87 will be to make the coverage check not required.
brandonwillard(2020-10-07 17:01:16):> Also: I that the only way to totally fix #87 will be to make the coverage check not required.

The latter part of #87?  If so, I'm fine dealing with the uncompleted checks if fixing it means disabling the coverage requirement, because we're really gonna need to enforce the coverage checks as development starts ramping up.
brandonwillard(2020-10-07 17:43:35):> I'm finding that some of the jax tests are failing on my fork though:

Hmm, not good; I'll check that out.
dfm(2020-10-07 17:46:30):Yeah - that's what I meant! I don't think that we can have the coveralls report be a required check if we're not going to run the tests for some pull requests because coverage won't be reported for those cases. It'll still show up as a failure on the pull request, but merging won't be blocked.

This PR is ready for review now, I think. It adds an "All tests" check that reports the results of all the matrix builds. Once the action finishes running, we can make that the required check.

The jax test [is still failing](https://github.com/pymc-devs/Theano-PyMC/runs/1221895180?check_suite_focus=true), but this pull request can't have caused any of those so I'm a bit confused.
brandonwillard(2020-10-07 17:56:00):> The jax test [is still failing](https://github.com/pymc-devs/Theano-PyMC/runs/1221895180?check_suite_focus=true), but this pull request can't have caused any of those so I'm a bit confused.

My guess is that it has to do with some (effectively) random test values.
brandonwillard(2020-10-07 18:17:55):Nope, I was wrong, it's due to a recent `jax`/`jaxlib` update!
brandonwillard(2020-10-07 18:30:26):Relevant issue: #89
brandonwillard(2020-10-08 00:21:03):Are we uploading the coverage for every matrix job?
dfm(2020-10-08 09:40:12):Yes, but those don't get displayed on coveralls until the final job where coveralls is told to "finish" and combine all the steps. This is the recommended procedure for coveralls on actions. 
dfm(2020-10-08 18:27:42):@brandonwillard: In response to your implied concern I switched to merging the coverage results in place and then uploading them once. That way the "checks" tab doesn't get spammed. It looks like it worked so this should be good to go.
brandonwillard(2020-10-08 19:06:03):> I switched to merging the coverage results in place

Many thanks!  It doesn't appear to be a real problem, but it is a bit jarring in some ways.
brandonwillard(2020-10-07 19:23:30):Unfortunately, this quick hack won't do it.  Looks like we have yet another restricted `Op` conversion...
brandonwillard(2020-10-14 05:21:57):@twiecki, after this PR is merged, we should probably publish another release, since this is a fairly important bug fix.
twiecki(2020-10-14 06:39:53):Sounds good, this process is pretty simple now, right?
ferrine(2020-10-19 13:31:29):I think a better way is to implement this via [http://deeplearning.net/software/theano/extending/extending_theano.html](theano.Op)

brandonwillard(2020-10-20 22:58:28):It looks like [some tests are failing](https://github.com/pymc-devs/Theano-PyMC/pull/117/checks?check_run_id=1283549857#step:6:1734) because of that global test value setting.  There are some brittle tests that check the lengths of captured warning messages, and those messages now include the new test value warnings.
abdalazizrashid(2020-10-21 16:12:02):I think something is wrong; the coverage test took forever!
brandonwillard(2020-10-21 16:50:59):> I think something is wrong; the coverage test took forever!

That's due to a bug introduced by #119.  I just reverted that change, so, if you rebase and push, a coverage report should be available.

brandonwillard(2020-10-19 17:23:29):Looks like this is missing a closing parenthesis.
brandonwillard(2020-10-20 21:58:13):This will turn on test values **globally**, and we don't want to make changes that will interfere with other tests.

Instead, you can use `theano.configparser.change_flags`.  It can be used as a context manager or a function decorator to temporarily set/change specific config values.  In this case, you can annotate the relevant test functions with `@change_flags(compute_test_value="raise")`.
brandonwillard(2020-10-20 21:58:49):The class name should be `TestMatrixPower`.
brandonwillard(2020-10-20 22:01:49):Couldn't this test be covered by simply adding a `-1` to the test parameters in `test_numpy_compare` above?
brandonwillard(2020-10-20 22:07:15):There's really no need to use random numbers in these examples.  We're better off using a single representative 2 x 2 matrix for these tests (e.g. one that's neither idempotent nor vanishes too quickly).
abdalazizrashid(2020-10-21 06:11:56):Hmm, yeah actually make sense. Thanks!
abdalazizrashid(2020-10-21 06:15:59):Well, the way I approached this is basically by making minimal changes to the codebase.
brandonwillard(2020-10-21 16:45:17):My comment was actually about big-picture changes that I would like to start making in Theano.  Your approach is definitely the correct one, so no problems there.
brandonwillard(2020-10-21 16:55:00):`p` -> `P`
twiecki(2020-10-20 06:56:21):Thanks @OriolAbril!
dfm(2020-10-20 11:41:23):It looks to me like this doesn't quite work because codecov still says that the build is pending. For coveralls you need a final step after all the parallel jobs finish to tell them that it's done. Is that not required here?
OriolAbril(2020-10-20 15:20:23):It should not be necessary here, but it may be necessary to give permissions to codecov in order to comment/create checks on the PR which looks like it did not happen
OriolAbril(2020-10-20 15:25:10):Codecov is currently showing this message so it looks like it can't access the repo to report back with the coverage results:

![image](https://user-images.githubusercontent.com/23738400/96607853-0e3d7f00-12f9-11eb-8ca2-d9bab62a7bf0.png)

@twiecki @brandonwillard according to this message, permissions can be modified from this page: https://github.com/organizations/pymc-devs/settings/installations/3153839

brandonwillard(2020-10-20 15:36:24):Ah, I don't have access to that; it's all on @twiecki.
twiecki(2020-10-22 08:24:20):Should be added.
twiecki(2020-10-22 08:23:48):OK, I added permissions and a token.
codecov[bot](2020-10-22 12:23:52):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/124?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@7f1537c`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/124/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/124?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #124   +/-   ##
=========================================
  Coverage          ?   70.39%           
=========================================
  Files             ?      166           
  Lines             ?    54901           
  Branches          ?        0           
=========================================
  Hits              ?    38645           
  Misses            ?    16256           
  Partials          ?        0           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/124?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/124?src=pr&el=footer). Last update [7f1537c...d1fc552](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/124?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

twiecki(2020-10-22 13:27:02):Is it working, can we merge?
OriolAbril(2020-10-22 13:49:48):Every time that a job finishes, codecov edits the comment. This should be fine but it can be confusing to see a coverage of 30% posted in 20 minutes and see how it is progressively increased to the current 70% as the different builds finish. codecov can be configured to wait x jobs before reporting back so this is up to preference.

I also don't know how to change the required from the coveralls job to the 2 codecov ones.
brandonwillard(2020-10-23 21:52:47):@OriolAbril, this is no longer a WIP, right?  If not, we can merge this.
OriolAbril(2020-10-24 00:19:51):Yes, this is working already. It can still be customized further, which can be done if desired in follow up PRs

I'll rebase tomorrow 
brandonwillard(2020-11-04 05:01:25):> Every time that a job finishes, codecov edits the comment. This should be fine but it can be confusing to see a coverage of 30% posted in 20 minutes and see how it is progressively increased to the current 70% as the different builds finish. codecov can be configured to wait x jobs before reporting back so this is up to preference.

How exactly do we fix this?
twiecki(2020-10-22 08:22:43):```suggestion
        target: 100%
        
codecov:
  token: 27bb1e3f-0e2c-4c4e-beca-45f213201f9a
```
dfm(2020-10-22 11:35:08):We shouldn't need this here. It's better to use the `GITHUB_SECRET` which happens by default the way @OriolAbril has it set up, I think. We would only need this for a private repo.
OriolAbril(2020-10-22 12:21:08):codecov should not need any token nor secret for public repos like this one, I'll try rerunning the jobs without any of the two and if it does not work add a secret
dfm(2020-10-22 12:22:32):That's because it's *using* the `GITHUB_SECRET` that is already available by default. No, you shouldn't need to add it manually!
codecov[bot](2020-10-24 01:10:38):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128?src=pr&el=h1) Report
> Merging [#128](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128?src=pr&el=desc) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/51d44d22a15bc7b6c7798e80f3e36654e43c1e5f?el=desc) will **decrease** coverage by `0.02%`.
> The diff coverage is `87.95%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #128      +/-   ##
==========================================
- Coverage   70.39%   70.36%   -0.03%     
==========================================
  Files         165      164       -1     
  Lines       54882    54828      -54     
==========================================
- Hits        38633    38582      -51     
+ Misses      16249    16246       -3     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/d3viz/d3viz.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128/diff?src=pr&el=tree#diff-dGhlYW5vL2Qzdml6L2Qzdml6LnB5) | `23.68% <ø> (ø)` | |
| [theano/d3viz/formatting.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128/diff?src=pr&el=tree#diff-dGhlYW5vL2Qzdml6L2Zvcm1hdHRpbmcucHk=) | `12.24% <ø> (ø)` | |
| [theano/gof/destroyhandler.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9kZXN0cm95aGFuZGxlci5weQ==) | `73.41% <0.00%> (ø)` | |
| [theano/gof/graph.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9ncmFwaC5weQ==) | `90.74% <ø> (ø)` | |
| [theano/gof/toolbox.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi90b29sYm94LnB5) | `80.04% <0.00%> (-0.37%)` | :arrow_down: |
| [theano/gof/utils.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi91dGlscy5weQ==) | `70.80% <ø> (ø)` | |
| [theano/scan/checkpoints.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vY2hlY2twb2ludHMucHk=) | `86.95% <ø> (ø)` | |
| [theano/tensor/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHQucHk=) | `90.36% <ø> (ø)` | |
| [theano/printing.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128/diff?src=pr&el=tree#diff-dGhlYW5vL3ByaW50aW5nLnB5) | `43.25% <60.00%> (+0.02%)` | :arrow_up: |
| [theano/gpuarray/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L29wdC5weQ==) | `25.87% <62.50%> (+0.10%)` | :arrow_up: |
| ... and [19 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128/diff?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128?src=pr&el=footer). Last update [51d44d2...44137bc](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/128?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

brandonwillard(2020-11-10 03:21:18):Closing in favor of #152.
codecov[bot](2020-10-25 06:30:34):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131?src=pr&el=h1) Report
> Merging [#131](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131?src=pr&el=desc) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/f375a0e999b950a81824a003f685b0bfd1c4e405?el=desc) will **increase** coverage by `0.12%`.
> The diff coverage is `90.64%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #131      +/-   ##
==========================================
+ Coverage   70.39%   70.51%   +0.12%     
==========================================
  Files         165      167       +2     
  Lines       54881    55266     +385     
==========================================
+ Hits        38632    38971     +339     
- Misses      16249    16295      +46     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/random/op.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9yYW5kb20vb3AucHk=) | `86.87% <86.87%> (ø)` | |
| [theano/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `93.33% <93.33%> (ø)` | |
| [theano/tensor/nnet/conv.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubmV0L2NvbnYucHk=) | `85.80% <0.00%> (-0.34%)` | :arrow_down: |
| [theano/tensor/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHQucHk=) | `90.09% <0.00%> (-0.27%)` | :arrow_down: |
| [theano/sandbox/jaxify.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131/diff?src=pr&el=tree#diff-dGhlYW5vL3NhbmRib3gvamF4aWZ5LnB5) | `83.52% <0.00%> (-0.23%)` | :arrow_down: |
| [theano/compile/profiling.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `78.81% <0.00%> (-0.13%)` | :arrow_down: |
| [theano/scalar/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYWxhci9iYXNpYy5weQ==) | `84.31% <0.00%> (-0.05%)` | :arrow_down: |
| [theano/gof/fg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9mZy5weQ==) | `80.54% <0.00%> (+0.30%)` | :arrow_up: |
| ... and [1 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131/diff?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131?src=pr&el=footer). Last update [f375a0e...009dfe3](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/131?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

canyon289(2020-10-25 06:35:21):Just curious, what does this all do? Not that I don't think it does nothing, more that I want to understand
brandonwillard(2020-10-25 07:40:34):> Just curious, what does this all do? Not that I don't think it does nothing, more that I want to understand

See [this](https://brandonwillard.github.io/random-variables-in-theano.html) post for details about `RandomVariable`'s functionality.
brandonwillard(2020-10-30 02:32:35):This PR is being replaced by #137.
codecov[bot](2020-10-29 21:37:35):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/136?src=pr&el=h1) Report
> Merging [#136](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/136?src=pr&el=desc) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/f375a0e999b950a81824a003f685b0bfd1c4e405?el=desc) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/136/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/136?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #136   +/-   ##
=======================================
  Coverage   70.39%   70.39%           
=======================================
  Files         165      165           
  Lines       54881    54882    +1     
=======================================
+ Hits        38632    38633    +1     
  Misses      16249    16249           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/136?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/gof/op.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/136/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9vcC5weQ==) | `79.70% <100.00%> (+0.04%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/136?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/136?src=pr&el=footer). Last update [f375a0e...8cd91de](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/136?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

codecov[bot](2020-10-30 02:49:57):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137?src=pr&el=h1) Report
> Merging [#137](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137?src=pr&el=desc) (0505138) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/ca215a2d5bf6c43cd87fe6836669ad056079d1f1?el=desc) (ca215a2) will **increase** coverage by `0.24%`.
> The diff coverage is `98.37%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #137      +/-   ##
==========================================
+ Coverage   71.26%   71.51%   +0.24%     
==========================================
  Files         158      162       +4     
  Lines       54376    54653     +277     
==========================================
+ Hits        38752    39084     +332     
+ Misses      15624    15569      -55     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/gpuarray/rng\_mrg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L3JuZ19tcmcucHk=) | `36.50% <ø> (ø)` | |
| [theano/sandbox/rng\_mrg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137/diff?src=pr&el=tree#diff-dGhlYW5vL3NhbmRib3gvcm5nX21yZy5weQ==) | `90.66% <50.00%> (ø)` | |
| [theano/tensor/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9iYXNpYy5weQ==) | `89.59% <78.57%> (-0.12%)` | :arrow_down: |
| [theano/gof/graph.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9ncmFwaC5weQ==) | `91.14% <93.33%> (+0.39%)` | :arrow_up: |
| [theano/tensor/random/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9yYW5kb20vb3B0LnB5) | `97.27% <97.27%> (ø)` | |
| [theano/tensor/random/op.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9yYW5kb20vb3AucHk=) | `99.38% <99.38%> (ø)` | |
| [theano/compile/profiling.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `78.93% <100.00%> (ø)` | |
| [theano/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |
| [theano/tensor/random/type.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9yYW5kb20vdHlwZS5weQ==) | `100.00% <100.00%> (ø)` | |
| [theano/tensor/random/utils.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9yYW5kb20vdXRpbHMucHk=) | `100.00% <100.00%> (ø)` | |
| ... and [10 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/137/diff?src=pr&el=tree-more) | |

brandonwillard(2020-11-08 00:04:56):While attempting to create a lift optimization for `DimShuffle`s on `RandomVariable`s I came across an issue involving numeric reproducibility.  

The problem is neatly summarized by the following NumPy-only example:
```python
>>> np.random.RandomState(123).normal(mean, std).T
array([[0.99989144, 3.99984937],
       [2.00009973, 4.99994214],
       [3.0000283 , 6.00016514]])

>>> np.random.RandomState(123).normal(mean.T, std.T)
array([[0.99989144, 4.00009973],
       [2.0000283 , 4.99984937],
       [2.99994214, 6.00016514]])
```
The first case is the numeric result one would obtain from a `DimShuffle`d `RandomVariable` graph.  The second is the lifted version of the same graph.  Both result are theoretically equivalent and&mdash;ideally&mdash;should produce the same numeric result for the same RNG and seed.  As we can see, they do not.

Here's an example of how it could be made to work:
```python
>>> (mean + std * np.random.RandomState(123).standard_normal((2, 3))).T
array([[0.99989144, 3.99984937],
       [2.00009973, 4.99994214],
       [3.0000283 , 6.00016514]])

>>> mean.T + std.T * np.random.RandomState(123).standard_normal((2, 3)).T
array([[0.99989144, 3.99984937],
       [2.00009973, 4.99994214],
       [3.0000283 , 6.00016514]])
```
Simply put, by implementing the affine transform in `RandomState.normal`, we can add a transpose to the block of standard normals.  This is apparently what we're missing when we use `RandomState.normal`.

Since I don't think we want to effectively reimplement all the samplers in NumPy's `RandomState`, we can either think of a good work around to preserve equality, or we can accept the fact that the two graphs will produce different results although they're theoretically equivalent.  
brandonwillard(2020-11-24 04:59:48):A preliminary `Subtensor` lift optimization was just added; however, it needs one addition in order to work with multivariate distributions&mdash;and a lot more tests.
brandonwillard(2020-11-27 03:25:13):OK, it has occurred to me&mdash;in another context&mdash;that we should address the RNG consistency issue mentioned [above](https://github.com/pymc-devs/Theano-PyMC/pull/137#issuecomment-723511546) if we want to apply these optimizations more often.

## Problem

Imagine that we're creating a Theano graph for the NumPy operations that produce `z` in the following:
```python
import numpy as np

seed = 34893
rng = np.random.RandomState(seed)

x = rng.normal(np.arange(2))

z = x - x[1]
```
```python
>>>  z
array([-0.7960794,  0.       ])
```
Just as with NumPy, we would expect a Theano-PyMC graph for `z` to necessarily have a 0 for the element at index 1.  This should also hold for any RNG state.

The naive `local_subtensor_rv_lift` rewrite rule would effectively substitute `x[1]` with `np.random.RandomState(seed).normal(np.arange(2)[1])`, which would only imply that the _expectation_ of `z[1]` is 0.  I.e.
```python
rng = np.random.RandomState(seed)

x = rng.normal(np.arange(2))

rng_2 = np.random.RandomState(seed)
y = rng_2.normal(np.arange(2)[1])

z = x - y
```
```python
>>>  z
array([-1.       , -0.2039206])
```

Unfortunately, that's not what the graph actually represents, so this rewrite is inconsistent.

As a simple way to avoid introducing this issue, we should not perform the rewrite if there's another reference to `x` in the graph; however, that would limit the applicability of the optimization.  This restriction can be loosened a bit by allowing references to invariant properties (e.g. the shape of `x`) and not the values in `x` themselves.  

## Potential Solutions

### RNG-based 

We might be able to solve a larger number of cases using an RNG-based approach.  Such an approach might also preserve numeric equality between graphs (i.e. equality of graphs pre-and-post rewrite, as described [above](https://github.com/pymc-devs/Theano-PyMC/pull/137#issuecomment-723511546)), but it will require some additional Theano-PyMC functionality.  

The idea is that we track the number of elements to skip, which might not be too difficult in most cases, especially since we're already computing all the requisite shape and index information for the rewrites themselves.  In other words, **the Theano-PyMC RNG objects would carry a set of state "jumps"** that determine the evolution of the internal RNG state based on the indexing applied to it.

The most basic way of implementing this could use a seed-based approach (offsets from a seed, really).  This would work with all RNGs and samplers, but I'm not sure if it could be efficiently extended to blocks/slices of indices.  It seems like we would have to ensure that all values were drawn individually from a flattened version of the array.  This isn't difficult to do, and it could be implemented in C/Cython to cut costs.

Alternatively, we could&mdash;and eventually should&mdash;add support for at least one of the two more flexible NumPy `BitGenerators`: `PCG64` and/or `Philox`.  These RNGs implement an [`.advance`](https://numpy.org/doc/stable/reference/random/bit_generators/generated/numpy.random.PCG64.advance.html#numpy.random.PCG64.advance) method that would allow us to manipulate the state in a manner that preserves consistency between shuffles and subsets of `RandomVariable` arrays.

Our simple example above can be fixed in this way:
```python
x = drng.normal(np.arange(2))

drng = np.random.default_rng(seed)
# Move the state forward so that the next sample matches the second entry in
# `x`
drng.bit_generator.advance(1)
y = drng.normal(np.arange(2)[1])

z = x - y
```
```python
>>>  z
array([-2.68521984,  0.        ])
```

Naturally, this `.advance`-based approach won't work for certain samplers (e.g. rejection-based ones), but it should work for more than a few of the samplers for basic random variables.  

Unfortunately, this approach would end up sampling the same value multiple times throughout a graph if it's implemented without some form of caching.

Otherwise, these RNG-based approaches have a direct correspondence with the actual source of change between rewrites (i.e. the RNG state), which adds to their appeal.  In other words, **indexing is equivalent to shifting an abstract `rng` state**: `normal(mean, stddev, rng)[index]` is converted to `normal(mean[index], stddev[index], new_rng)`.

### Graph-based

We could also attempt to synchronize slices of `x` throughout the graph by replacing the rewritten `RandomVariable`s with stand-ins that are updated in-place.  In effect, we would replace indexed random arrays with some type of **sparse, lazy random arrays** that operate like a sparse array would, except that when elements are indexed a value is generated and permanently saved for those index locations.  

This is a nice solution because it would work for any RNG and sampling method.  It would also avoid the RNG-based issue of producing duplicate samples, since it's effectively an extreme type of the caching needed to reduce duplicates in that approach.

Unfortunately, it would incur most of the same overhead that sparse arrays do, but some of that could be ameliorated by a simple, low-level C implementation&mdash;at least for certain key steps.  It also doesn't address the simpler [pre-and-post graph rewrite numerical consistency](https://github.com/pymc-devs/Theano-PyMC/pull/137#issuecomment-723511546).
brandonwillard(2020-12-04 20:35:01):To keep things moving, we should probably disable the automatic use of these rewrites until a good RNG/rewrite-consistency solution is worked out.  I'll create a separate issue for that.
kyleabeauchamp(2020-12-25 06:05:05):Is there a branch of pymc3 that is compatible with this change?  I'm running into a `ImportError: cannot import name 'MRG_RandomStreams'` exception when I try to use master pymc3 against master theano-pymc.
codecov[bot](2020-11-02 00:01:13):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139?src=pr&el=h1) Report
> Merging [#139](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139?src=pr&el=desc) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/51d44d22a15bc7b6c7798e80f3e36654e43c1e5f?el=desc) will **increase** coverage by `0.01%`.
> The diff coverage is `93.33%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #139      +/-   ##
==========================================
+ Coverage   70.39%   70.40%   +0.01%     
==========================================
  Files         165      164       -1     
  Lines       54882    54788      -94     
==========================================
- Hits        38633    38574      -59     
+ Misses      16249    16214      -35     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/gof/compiledir.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9jb21waWxlZGlyLnB5) | `0.00% <0.00%> (ø)` | |
| [theano/gof/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9vcHQucHk=) | `67.34% <0.00%> (ø)` | |
| [theano/gradient.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139/diff?src=pr&el=tree#diff-dGhlYW5vL2dyYWRpZW50LnB5) | `88.84% <ø> (-0.02%)` | :arrow_down: |
| [theano/misc/check\_duplicate\_key.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvY2hlY2tfZHVwbGljYXRlX2tleS5weQ==) | `0.00% <0.00%> (ø)` | |
| [theano/misc/elemwise\_openmp\_speedup.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvZWxlbXdpc2Vfb3Blbm1wX3NwZWVkdXAucHk=) | `0.00% <0.00%> (ø)` | |
| [theano/updates.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139/diff?src=pr&el=tree#diff-dGhlYW5vL3VwZGF0ZXMucHk=) | `81.39% <ø> (ø)` | |
| [theano/compile/debugmode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `67.19% <100.00%> (ø)` | |
| [theano/compile/function.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZnVuY3Rpb24ucHk=) | `88.13% <100.00%> (ø)` | |
| [theano/compile/function\_module.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZnVuY3Rpb25fbW9kdWxlLnB5) | `85.04% <100.00%> (ø)` | |
| [theano/compile/nanguardmode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `70.31% <100.00%> (ø)` | |
| ... and [25 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139/diff?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139?src=pr&el=footer). Last update [51d44d2...5b76e98](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/139?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

eigenfoo(2020-11-02 00:39:11):Tangentially - a 100% diff coverage strikes me as a _very_ strict requirement to fail a PR for (it's the only failing test for this PR). Is it possible to lower that number?
brandonwillard(2020-11-02 01:34:21):> Tangentially - a 100% diff coverage strikes me as a _very_ strict requirement to fail a PR for (it's the only failing test for this PR). Is it possible to lower that number?

No, I don't believe there's a good way to choose such a number in this situation (and often in general).  At this point in time, we need to increase the standard of coverage greatly and make everyone painfully aware of all coverage changes, at least until we sort out this test situation we've inherited (see [the issues under the `testing` label](https://github.com/pymc-devs/Theano-PyMC/issues?q=is%3Aissue+is%3Aopen+label%3Atesting)).

It's annoying for straightforward refactoring like this, but we can always manually review the changes and merge when the uncovered lines are relatively inconsequential (e.g. `pass`ed catch blocks).
twiecki(2020-11-02 06:55:24):Thanks @eigenfoo!
codecov[bot](2020-11-02 02:06:15):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/140?src=pr&el=h1) Report
> Merging [#140](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/140?src=pr&el=desc) (58ff4eb) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/99f08ee3307b6084e204fa8327824af62e51b39a?el=desc) (99f08ee) will **decrease** coverage by `0.00%`.
> The diff coverage is `91.66%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/140/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/140?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #140      +/-   ##
==========================================
- Coverage   70.43%   70.42%   -0.01%     
==========================================
  Files         163      163              
  Lines       54783    54763      -20     
==========================================
- Hits        38584    38569      -15     
+ Misses      16199    16194       -5     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/140?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/140/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9iYXNpYy5weQ==) | `89.68% <91.66%> (+0.11%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/140?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/140?src=pr&el=footer). Last update [99f08ee...58ff4eb](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/140?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

twiecki(2020-11-02 06:54:28):Seems like test is still failing:  FAILED tests/tensor/test_basic.py::TestChoose::test_numpy_compare_tuple - Val...
LegrandNico(2020-11-04 00:08:32):I think I have fixed the function so it can take tensors with different shapes using `make_list()`, like before. 

Should I also write a function to test `choose` with scalar entries, as it can handle it properly now?
LegrandNico(2020-11-04 02:34:45):Thank you for the test command!

I am a bit unsure about the tests to add here, my first guess was to add something in [TestChoose](https://github.com/pymc-devs/Theano-PyMC/blob/89f18b3545bcb15903a4c41a11ab86b15aa0d9a4/tests/tensor/test_basic.py#L7328) like:

```python
def test_scalars(self):

    a = tt.vector(dtype="int32")
    b, c = tt.scalar(), tt.scalar()

    A = [0, 1, 1, 0]
    B, C = 0.1, 0.2

    for m in modes:
        f = function([a, b, c], choose(a, [b, c], mode=m))
        t_c = f(A, B, C)
        n_c = np.choose(A, [B, C], mode=m)
        assert np.allclose(t_c, n_c)
```

to control the compatibility with lists of scalars when using `choose()`, like in the example.
brandonwillard(2020-11-04 03:40:43):Sorry, you're right; I meant `TestChoose`!

The test you propose follows the existing tests well, so, yes, that works fine.  

If you want, instead of creating an entirely new test method, it looks like you could generalize the `test_numpy_compare_tuple` method (e.g. in the types of `b` and `c`) using `pytest.mark.parameterize`.
brandonwillard(2020-11-05 00:39:02):There are a lot of commits in this branch; at some point, you'll need to rebase in order to create [commits for each logical change](https://github.com/pymc-devs/Theano-PyMC/blob/master/.github/PULL_REQUEST_TEMPLATE.md).  If there's really only one logical change, then we can squash everything, but, if not, I recommend making liberal use of `git commit --amend ...` so that it doesn't become difficult to fix down the line.


brandonwillard(2020-11-10 00:07:18):If you add a small test for a `theano.typed_list.TypedListVariable` `choices` argument, we can merge this.  If there are problems with `theano.typed_list.TypedListVariable` `choices` arguments, we can remove support for that case altogether, especially since there were never even tests for it.
LegrandNico(2020-11-10 09:43:30):I did not manage to make the `TypedListVariable` version running, and as this part of Theano is not well developed I decided to drop support for this option for now.
brandonwillard(2020-11-04 00:04:07):If you use the built-in `any`, then you can avoid creating a list object by using a generator directly (i.e. `any(c.ndim > 1 for c in choices)`).
brandonwillard(2020-11-04 00:05:00):`inconsisten` -> `inconsistent`
LegrandNico(2020-11-04 12:06:59):I tried to use the built-in function, but for a reason I cannot explain the conditions were not handled correctly, probably due to a strange behaviour of tensor object inside the iterable. I finally return to the `np.any([])` approach.
brandonwillard(2020-11-04 15:56:35):What is the exact error/issue?
LegrandNico(2020-11-04 19:37:09):I just found the problem, it looks like using `any()` actually call another function in the same file [any](https://github.com/pymc-devs/Theano-PyMC/blob/4249a01c886d034abf5a29bb40c2a0d06c56106e/theano/tensor/basic.py#L6610) that overwrite the built-in function, which is not best practice I think.
brandonwillard(2020-11-04 20:05:46):Ha, yeah, we should change that to `any_tt`, or use `builtins.any` explicitly.
LegrandNico(2020-11-04 23:15:31):I fixed this by using `builtins.any`, and I removed the `python_any` declaration l.40 for clarity. I did the same for `python_all` and `python_complex` in the file as I found this approach more straightforward. Let me know what you think.
brandonwillard(2020-11-05 00:44:06):These shouldn't be defined at class-level unless that's needed; if not, these values should be created right in the `pytest.mark.parameterize` tuples below.
brandonwillard(2020-11-05 00:50:42):It looks like we could combine these two conditions into a single "do/don't use `make_list`" `if`-`else` block.  If so, this situation would be much more concise and we wouldn't need to set `choice_ndim = None` and use it later in another `if` statement.
LegrandNico(2020-11-05 16:28:00):Using this approach will return an error if `choices` is not iterable when running `builtins.any(c.ndim > 1 for c in choices)`, that is why the type is estimated first here. I agree that the `choice_ndim = None` trick makes things more complex but I did not find another shorter way to test that.
LegrandNico(2020-11-05 16:37:33):This has been integrated into the initial commit.
brandonwillard(2020-11-05 17:13:51):Ah, if that's happening, then it's probably due to the `theano.typed_list.TypedListVariable`, since the other two cases in the `isinstance` are definitely iterable.  That would also imply that we're never actually seeing the case in which `choices` is a `TypedListVariable`, because, if the first condition passes, then we're necessarily going to check the second condition and fail for the same reasons.

Something like this should work:
```python
        if (
            isinstance(choices, (tuple, list))
            and builtins.any(c.ndim > 1 for c in choices)
        ) or isinstance(choices, theano.typed_list.TypedListVariable):
            choice = theano.typed_list.make_list(choices)
            choice_ndim = choice.ttype.ndim
            choice_bcast = choice.ttype.broadcastable
        else:
            choice = as_tensor_variable(choices)
            choice_ndim = choice.ndim - 1
            choice_bcast = choice.broadcastable[1:]
```
LegrandNico(2020-11-06 00:58:12):This has been changed in `basic.py`.

Should I also add a test condition for `TypedListVariable`? In either case, we can probably remove the import line [7130](https://github.com/pymc-devs/Theano-PyMC/blob/4249a01c886d034abf5a29bb40c2a0d06c56106e/theano/tensor/basic.py#L7133) as it seems unused here.
brandonwillard(2020-11-06 01:20:11):Yes, adding one would be a long overdue improvement!  There definitely should've been tests for `TypedListVariable`s (e.g. both in terms of arguments passed to the `Choose` `Op` and arguments converted to one within `Choose.make_node`)&mdash;even if they would've been an expected failure&mdash;because then this entire issue would've been obvious.  

I believe the import line is there because `theano.typed_list` isn't automatically imported, so the lines that use `theano.typed_list.TypedListVariable` and `theano.typed_list.make_list` would fail.  If that's not the case, then we can definitely remove it.
codecov[bot](2020-11-04 02:56:18):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144?src=pr&el=h1) Report
> Merging [#144](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144?src=pr&el=desc) (e67341e) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/1a9b04bfe480b758ddfa54ba49c88bee3bec419c?el=desc) (1a9b04b) will **decrease** coverage by `0.00%`.
> The diff coverage is `49.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #144      +/-   ##
==========================================
- Coverage   70.42%   70.42%   -0.01%     
==========================================
  Files         163      163              
  Lines       54782    54781       -1     
==========================================
- Hits        38582    38581       -1     
  Misses      16200    16200              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/breakpoint.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144/diff?src=pr&el=tree#diff-dGhlYW5vL2JyZWFrcG9pbnQucHk=) | `58.33% <0.00%> (ø)` | |
| [theano/compile/builders.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `79.94% <0.00%> (ø)` | |
| [theano/compile/function/pfunc.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `89.78% <0.00%> (ø)` | |
| [theano/compile/mode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvbW9kZS5weQ==) | `87.83% <0.00%> (ø)` | |
| [theano/configparser.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ3BhcnNlci5weQ==) | `85.23% <0.00%> (ø)` | |
| [theano/d3viz/formatting.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144/diff?src=pr&el=tree#diff-dGhlYW5vL2Qzdml6L2Zvcm1hdHRpbmcucHk=) | `12.24% <0.00%> (ø)` | |
| [theano/gof/compiledir.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9jb21waWxlZGlyLnB5) | `0.00% <0.00%> (ø)` | |
| [theano/gof/compilelock.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9jb21waWxlbG9jay5weQ==) | `53.26% <0.00%> (ø)` | |
| [theano/gof/lazylinker\_c.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9sYXp5bGlua2VyX2MucHk=) | `34.40% <0.00%> (ø)` | |
| [theano/gof/optdb.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9vcHRkYi5weQ==) | `84.36% <0.00%> (ø)` | |
| ... and [87 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144/diff?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144?src=pr&el=footer). Last update [1a9b04b...e67341e](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/144?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

eigenfoo(2020-11-06 14:21:31):@brandonwillard not to dismiss your suggestion, but I just didn't feel like adding to my cognitive load by learning a new tool - I just `rg`ed the diff to find offending instances of `locals()`, `dict`s and `str`s and manually fixed them with some help from Vim macros.
twiecki(2020-11-06 15:18:21):@eigenfoo seems like tests still fail.
eigenfoo(2020-11-06 15:21:51):The only test that's failing is the patch coverage, which seems to be failing for all PRs that don't test 100% of their changes. Since this PR doesn't change any actual code behavior, I think that's okay.

More discussion here - https://github.com/pymc-devs/Theano-PyMC/pull/139#issuecomment-720191389
twiecki(2020-11-06 15:25:55):Gotcha, cool.

On Fri, Nov 6, 2020, 16:22 George Ho <notifications@github.com> wrote:

> The only test that's failing is the patch coverage, which seems to be
> failing for all PRs that don't test 100% of their changes. Since this PR
> doesn't change any actual code behavior, I think that's okay.
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/pymc-devs/Theano-PyMC/pull/144#issuecomment-723137467>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAFETGHUTRVWLGBZMNXJPOLSOQIB5ANCNFSM4TJPPYAQ>
> .
>

brandonwillard(2020-11-08 21:21:22):> ...I just didn't feel like adding to my cognitive load by learning a new tool...

Sorry, I wasn't actually suggesting that you use LibCST for the work in this PR.  I was pointing you in the direction of a library that's quite useful for creating your own fully-automated Python refactorings.  It's more of a long-term suggestion, since I strongly believe that Python needs more/better refactoring tools and libraries and I think that's more likely to happen if/when libraries like LibCST are given more attention.
eigenfoo(2020-11-14 20:11:17):I've removed most instances of `%d` - I've replaced them with `f"...{int(x)}..."` in all places, unless it was obvious that it would be an integer instead of a float (e.g. `f"...{len(x)}..."`). I left them alone when they were in templated strings, which should probably be dealt with in a separate issue/PR.

To be transparent, I haven't systematically dealt with concatenated strings - that should be coming up soon.
eigenfoo(2020-11-15 05:23:16):Closed in favor of https://github.com/pymc-devs/Theano-PyMC/pull/162 - we now fork and branch, instead of working off of branches in this repo. 
brandonwillard(2020-11-08 21:23:26):I wonder why it didn't pick up this one.
brandonwillard(2020-11-08 21:24:47):This looks like a good place for an f-string.
brandonwillard(2020-11-08 21:25:59):This could also be an f-string.
brandonwillard(2020-11-08 21:35:19):This could be an f-string, too.
brandonwillard(2020-11-08 21:35:38):Same here.
brandonwillard(2020-11-08 21:36:13):This could also be an f-string.
brandonwillard(2020-11-08 21:36:53):Another f-string candidate.
brandonwillard(2020-11-08 21:37:28):This could also be an f-string.
brandonwillard(2020-11-08 21:39:40):Another f-string candidate.
brandonwillard(2020-11-08 21:40:41):Another f-string candidate.
codecov[bot](2020-11-04 04:47:45):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/145?src=pr&el=h1) Report
> Merging [#145](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/145?src=pr&el=desc) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/89f18b3545bcb15903a4c41a11ab86b15aa0d9a4?el=desc) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/145/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/145?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #145      +/-   ##
==========================================
+ Coverage   70.40%   70.42%   +0.01%     
==========================================
  Files         164      164              
  Lines       54788    54815      +27     
==========================================
+ Hits        38574    38601      +27     
  Misses      16214    16214              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/145?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/extra\_ops.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/145/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9leHRyYV9vcHMucHk=) | `90.09% <100.00%> (+0.44%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/145?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/145?src=pr&el=footer). Last update [89f18b3...2dc1baa](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/145?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

codecov[bot](2020-11-07 23:51:43):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/149?src=pr&el=h1) Report
> Merging [#149](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/149?src=pr&el=desc) (0828edc) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/4249a01c886d034abf5a29bb40c2a0d06c56106e?el=desc) (4249a01) will **increase** coverage by `0.00%`.
> The diff coverage is `88.88%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/149/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/149?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #149   +/-   ##
=======================================
  Coverage   70.42%   70.42%           
=======================================
  Files         164      164           
  Lines       54815    54826   +11     
=======================================
+ Hits        38601    38611   +10     
- Misses      16214    16215    +1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/149?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/149/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9iYXNpYy5weQ==) | `89.55% <81.81%> (-0.04%)` | :arrow_down: |
| [theano/sparse/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/149/diff?src=pr&el=tree#diff-dGhlYW5vL3NwYXJzZS9iYXNpYy5weQ==) | `86.23% <100.00%> (+<0.01%)` | :arrow_up: |
| [theano/tensor/nlinalg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/149/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubGluYWxnLnB5) | `98.64% <100.00%> (ø)` | |
| [theano/tensor/var.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/149/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci92YXIucHk=) | `87.52% <100.00%> (+0.20%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/149?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/149?src=pr&el=footer). Last update [4249a01...0828edc](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/149?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

brandonwillard(2020-11-08 06:04:29):If we move the functionality of the old `theano.dot` into `theano.tensor.dot` then we could have both, no?
eigenfoo(2020-11-08 15:22:35):Yup, no reason why not. I was a bit hesitant to mix sparse and dense functionality into `theano.tensor`, but eventually we want to restructure how sparse tensors work anyways (#142), so this will be a step in the right direction. Let me fix that.
eigenfoo(2020-11-08 17:29:15):To avoid fairly ugly recursion errors, I've just moved the implementation of `theano.dot` into `theano.tensor` module, and renamed the existing `theano.tensor.dot` to `theano.tensor.dense_dot`, to be more explicit.

To recap, here's the table again, with the fixes:

|            | Regular                                       | Sparse       |
|------------|-----------------------------------------------|--------------|
| Previously | **`theano.dot`**, `theano.tensor.dot`, `x.dot(y)` | **`theano.dot`** |
| If merged  | **`theano.tensor.dot`**, `theano.tensor.dense_dot(x, y)`, `x.dot(y)`             | **`theano.tensor.dot`**, `x.dot(y)`   |
brandonwillard(2020-11-08 21:13:35):What if `l.__dot__` _returns_ `NotImplemented`; wouldn't we want to try `r.__rdot__`?
eigenfoo(2020-11-08 22:14:05):Hmm, that's not what the old implementation did - if `l.__dot__(r)` returned `NotImplemented`, then it would just run a `NotImplementedError`. Is that behavior we'd want? I can't imagine a situation where one returned `NotImplemented` while the other didn't.
brandonwillard(2020-11-08 22:23:59):The old `theano.dot` would check for a return value of `NotImplemented` and raise its own `NotImplementedError` so that the `r.__rdot__` call in the `except` would be tried (see [this statement](https://github.com/pymc-devs/Theano-PyMC/blob/master/theano/__init__.py#L171)).
eigenfoo(2020-11-09 02:20:04):Ah whoops sorry, don't know how I missed that. The next commit should fix this.
review-notebook-app[bot](2020-11-09 17:39:35):Check out this pull request on&nbsp; <a href="https://app.reviewnb.com/pymc-devs/Theano-PyMC/pull/150"><img align="absmiddle"  alt="ReviewNB" height="28" class="BotMessageButtonImage" src="https://raw.githubusercontent.com/ReviewNB/support/master/images/button_reviewnb.png"/></a> 

 See visual diffs & provide feedback on Jupyter Notebooks. 

---

 <i>Powered by <a href='https://www.reviewnb.com/?utm_source=gh'>ReviewNB</a></i>
twiecki(2020-11-09 18:40:32):Thanks @abdalazizrashid!
codecov[bot](2020-11-09 18:53:23):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150?src=pr&el=h1) Report
> Merging [#150](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150?src=pr&el=desc) (90fa750) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/4249a01c886d034abf5a29bb40c2a0d06c56106e?el=desc) (4249a01) will **decrease** coverage by `24.33%`.
> The diff coverage is `56.43%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150?src=pr&el=tree)

```diff
@@             Coverage Diff             @@
##           master     #150       +/-   ##
===========================================
- Coverage   70.42%   46.08%   -24.34%     
===========================================
  Files         164      164               
  Lines       54815    54815               
===========================================
- Hits        38601    25263    -13338     
- Misses      16214    29552    +13338     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/compile/nanguardmode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150/diff?src=pr&el=tree#diff-YWVzYXJhL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `0.00% <0.00%> (ø)` | |
| [aesara/d3viz/d3viz.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150/diff?src=pr&el=tree#diff-YWVzYXJhL2Qzdml6L2Qzdml6LnB5) | `0.00% <0.00%> (ø)` | |
| [aesara/d3viz/formatting.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150/diff?src=pr&el=tree#diff-YWVzYXJhL2Qzdml6L2Zvcm1hdHRpbmcucHk=) | `0.00% <0.00%> (ø)` | |
| [aesara/gof/compiledir.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150/diff?src=pr&el=tree#diff-YWVzYXJhL2dvZi9jb21waWxlZGlyLnB5) | `0.00% <0.00%> (ø)` | |
| [aesara/gpuarray/fp16\_help.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150/diff?src=pr&el=tree#diff-YWVzYXJhL2dwdWFycmF5L2ZwMTZfaGVscC5weQ==) | `25.00% <ø> (ø)` | |
| [aesara/gpuarray/kernel\_codegen.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150/diff?src=pr&el=tree#diff-YWVzYXJhL2dwdWFycmF5L2tlcm5lbF9jb2RlZ2VuLnB5) | `0.00% <ø> (ø)` | |
| [aesara/gpuarray/nerv.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150/diff?src=pr&el=tree#diff-YWVzYXJhL2dwdWFycmF5L25lcnYucHk=) | `0.00% <ø> (ø)` | |
| [aesara/misc/buildbot\_filter.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150/diff?src=pr&el=tree#diff-YWVzYXJhL21pc2MvYnVpbGRib3RfZmlsdGVyLnB5) | `0.00% <ø> (ø)` | |
| [aesara/misc/burn\_gpu.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150/diff?src=pr&el=tree#diff-YWVzYXJhL21pc2MvYnVybl9ncHUucHk=) | `0.00% <0.00%> (ø)` | |
| [aesara/misc/check\_blas.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150/diff?src=pr&el=tree#diff-YWVzYXJhL21pc2MvY2hlY2tfYmxhcy5weQ==) | `0.00% <0.00%> (ø)` | |
| ... and [256 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150/diff?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150?src=pr&el=footer). Last update [4249a01...90fa750](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/150?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

twiecki(2020-11-10 07:17:40):@abdalazizrashid Thanks so much for taking this one on, it's certainly an important contribution further down the line. However, we'd prefer to wait a bit longer with the renaming until more refactoring is in place and we have more time to review as this requires some care. Sorry for not communicating this clearer. Would you mind if we paused this PR - there are plenty of other low-hanging fruit we'd appreciate your input on.
abdalazizrashid(2020-11-14 17:51:23):I suggest changing the flags for this issue since they are misleading especially the "Important" flag!
twiecki(2020-11-15 06:47:39):@abdalazizrashid You're right, I removed the flag, sorry it sent you down the rabbit hole. Let me know if you want me to point you down the right rabbit hole ;).
brandonwillard(2020-11-15 06:55:05):The "important" label does not need to change, because the issue **is** important.  That label is there to add emphasis to certain issues, and not much else.
abdalazizrashid(2020-11-15 14:57:24):Guys, to be honest, I don't understand the issue was flagged "important" and "Help wanted" it seemed to me that the rebranding is a good idea and necessary and I think some of you share this opinion with me... What I don't understand is the contradiction in the decisions that have been made @twiecki suggested that we slow down a bit as this issue isn't very important now. @brandonwillard made the PR as a draft which makes sense and he thinks the issue is important... Then @eigenfoo closed the PR...
I'm not trying to make a drama out of it but for me, these decisions contradict with each other and make communication a bit harder. 
Anyhow, I will be glad to work on this PR or other issues that you see important :)
fonnesbeck(2020-11-15 15:10:10):The renaming should occur alongside the next major version of PyMC. 
brandonwillard(2020-11-15 19:14:57):The "help wanted" label was the misleading one.  Sorry for the confusion.

Other than that, we hadn't discussed the scope of this name change and what's involved on our end, so it wasn't immediately clear that this PR would be extremely difficult without a lot of direct involvement on our part.  There are too many other high-level ancillary changes that need to occur alongside the simple renaming (e.g. consolidation of module-level attributions and old branding, updates to the packaging process and `setup.py`, etc.)  In other words, a rename-only PR can't reasonably come before these other changes.

The renaming itself also needs to be done in the right way and at the right time; otherwise, the steady influx of refactoring PRs we've been having will introduce considerable amounts of merge conflicts, and reviewing will be exceptionally difficult and time consuming.

Going forward, we ask that contributors interested in working on issues that involve substantial and/or large, project-wide changes first state their intention in the relevant issue(s)&mdash;especially for changes that touch nearly _every_ file.  This approach helps prevent duplicated efforts and sets the stage for discussions about exactly what changes are needed, how they should be made, etc.
eigenfoo(2020-11-10 01:33:46):There is no `aesara-user` mailing list (yet!) so we will want to grep for instances of "theano" that appear in links, and leave them alone.
eigenfoo(2020-11-10 01:34:59):Similar to above - this link is broken if we change `theano` to `aesara`.
eigenfoo(2020-11-10 01:35:36):This should just be `Aesara`, and not `Aesara-PyMC`.
eigenfoo(2020-11-10 01:41:48):Let's leave this link as `Theano-PyMC`, and we can change this link in a subsequent PR.
abdalazizrashid(2020-11-10 05:49:17):Yeah, regarding the broken links, I changed them intentionally I thought it would be kinda motivating to reset everything and force ourselves for using Aesara name. 
I could be wrong :/ I think the best strategy now is to discuss this PR further...
codecov[bot](2020-11-10 03:39:17):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152?src=pr&el=h1) Report
> Merging [#152](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152?src=pr&el=desc) (8049bb3) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/9fcb536ed314bd68adbb3299c69ff419fdf4988d?el=desc) (9fcb536) will **decrease** coverage by `0.02%`.
> The diff coverage is `87.95%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #152      +/-   ##
==========================================
- Coverage   70.42%   70.40%   -0.03%     
==========================================
  Files         164      163       -1     
  Lines       54826    54773      -53     
==========================================
- Hits        38611    38561      -50     
+ Misses      16215    16212       -3     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/d3viz/d3viz.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152/diff?src=pr&el=tree#diff-dGhlYW5vL2Qzdml6L2Qzdml6LnB5) | `23.68% <ø> (ø)` | |
| [theano/d3viz/formatting.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152/diff?src=pr&el=tree#diff-dGhlYW5vL2Qzdml6L2Zvcm1hdHRpbmcucHk=) | `12.24% <ø> (ø)` | |
| [theano/gof/destroyhandler.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9kZXN0cm95aGFuZGxlci5weQ==) | `73.41% <0.00%> (ø)` | |
| [theano/gof/graph.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9ncmFwaC5weQ==) | `90.74% <ø> (ø)` | |
| [theano/gof/toolbox.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi90b29sYm94LnB5) | `80.04% <0.00%> (-0.37%)` | :arrow_down: |
| [theano/gof/utils.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi91dGlscy5weQ==) | `72.22% <ø> (ø)` | |
| [theano/scan/checkpoints.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vY2hlY2twb2ludHMucHk=) | `86.95% <ø> (ø)` | |
| [theano/tensor/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHQucHk=) | `90.36% <ø> (ø)` | |
| [theano/printing.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152/diff?src=pr&el=tree#diff-dGhlYW5vL3ByaW50aW5nLnB5) | `43.25% <60.00%> (+0.02%)` | :arrow_up: |
| [theano/gpuarray/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L29wdC5weQ==) | `25.87% <62.50%> (+0.10%)` | :arrow_up: |
| ... and [19 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152/diff?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152?src=pr&el=footer). Last update [9fcb536...8049bb3](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/152?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

brandonwillard(2020-11-10 04:28:22):The `Op` you're looking for is [`theano.tensor.basic.Eye`](https://github.com/pymc-devs/Theano-PyMC/blob/master/theano/tensor/basic.py#L2944).  Just below it is the [`eye` helper function](https://github.com/pymc-devs/Theano-PyMC/blob/master/theano/tensor/basic.py#L2979) that creates instances of `Eye`.

In case you're not already using something like this, I can't recommend enough standalone, regex-based code search tools like [`ag`](https://github.com/ggreer/the_silver_searcher) for this project (and other decently sized projects, as well).  I found the answer with the following  (via [`helm-ag`](https://github.com/emacsorphanage/helm-ag) in Emacs, of course):
```bash
$ ag class\ Eye
theano/tensor/basic.py
2944:class Eye(gof.Op):
```

codecov[bot](2020-11-11 23:31:54):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/153?src=pr&el=h1) Report
> Merging [#153](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/153?src=pr&el=desc) (7a021c0) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/99bb8083f29638e74a47f68a5c5909b9b7874cd1?el=desc) (99bb808) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/153/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/153?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #153   +/-   ##
=======================================
  Coverage   70.42%   70.42%           
=======================================
  Files         163      163           
  Lines       54777    54782    +5     
=======================================
+ Hits        38577    38582    +5     
  Misses      16200    16200           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/153?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/sandbox/jaxify.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/153/diff?src=pr&el=tree#diff-dGhlYW5vL3NhbmRib3gvamF4aWZ5LnB5) | `83.92% <100.00%> (+0.18%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/153?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/153?src=pr&el=footer). Last update [99bb808...7a021c0](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/153?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

canyon289(2020-11-13 05:12:01):Heading off for tonight. Here's where I'm at, trying to figure out why identity looks different and while the error below makes sense at the exception level, what should be done about it.

Thanks for the help thus far


https://github.com/pymc-devs/Theano-PyMC/blob/master/theano/sandbox/jaxify.py#L220

![image](https://user-images.githubusercontent.com/7213793/99031167-3d779280-252b-11eb-9a66-223b049485fb.png)

```
import theano as theano
import theano.tensor as tt
import numpy as np


opts = theano.gof.Query(include=[None], exclude=["cxx_only", "BlasOpt"])

# Try scalar instead
a = tt.scalar("a")
a.tag.test_value = 10

out = theano.scalar.basic.identity(a)
fgraph = theano.gof.FunctionGraph([a], [out])
jax_mode = theano.compile.mode.Mode(theano.sandbox.jax_linker.JAXLinker(), opts)
theano_jax_fn = theano.function(fgraph.inputs, fgraph.outputs, mode=jax_mode)

jax_res = theano_jax_fn(3)
print(jax_res)

# eye = theano.tensor.eye(3).shape
x = tt.iscalar()
out = tt.eye(x)

fgraph = theano.gof.FunctionGraph([x], [out])

# Jax compilation fails but python works
jax_mode = theano.compile.mode.Mode(theano.sandbox.jax_linker.JAXLinker(), opts)
theano_jax_fn = theano.function(fgraph.inputs, fgraph.outputs, mode=jax_mode)
jax_res = theano_jax_fn(3)
```
canyon289(2020-11-13 05:40:44): 

> The error in your example could be due to the same issue as #68. Try it with constant inputs (e.g. with inputs obtained via `tt.as_tensor`).


Did I do this right by changing the input line to `x = tt.as_tensor(3)`?

![image](https://user-images.githubusercontent.com/7213793/99033433-b7117f80-252f-11eb-84aa-7b28fe9c5044.png)



```
import theano as theano
import theano.tensor as tt
import numpy as np

opts = theano.gof.Query(include=[None], exclude=["cxx_only", "BlasOpt"])

# Try scalar instead
a = tt.scalar("a")
a.tag.test_value = 10

out = theano.scalar.basic.identity(a)
fgraph = theano.gof.FunctionGraph([a], [out])
jax_mode = theano.compile.mode.Mode(theano.sandbox.jax_linker.JAXLinker(), opts)
theano_jax_fn = theano.function(fgraph.inputs, fgraph.outputs, mode=jax_mode)

jax_res = theano_jax_fn(3)
print(jax_res)

# eye = theano.tensor.eye(3).shape
# x = tt.iscalar()
x = tt.as_tensor(3)
out = tt.eye(x)

fgraph = theano.gof.FunctionGraph([x], [out])


# Jax compilation fails but python works
jax_mode = theano.compile.mode.Mode(theano.sandbox.jax_linker.JAXLinker(), opts)
theano_jax_fn = theano.function(fgraph.inputs, fgraph.outputs, mode=jax_mode)
jax_res = theano_jax_fn(3)
brandonwillard(2020-11-13 06:46:53):You can't pass constants as inputs to `theano.gof.FunctionGraph`.
canyon289(2020-11-13 07:06:17):> The error in your example could be due to the same issue as #68. Try it with constant inputs (e.g. with inputs obtained via `tt.as_tensor`).

Good to know, what does try with constants mean here then? Thanks for explaining it twice
brandonwillard(2020-11-13 07:14:03):You had it right, just don't pass any arguments to the `FunctionGraph`.
canyon289(2020-11-14 04:47:06):How sensitive do we want the coverage implementation? Even with an increase in coverage its unhappy?
![image](https://user-images.githubusercontent.com/7213793/99139866-619da700-25f1-11eb-8aaa-7e4e0da9b21e.png)

canyon289(2020-11-14 19:10:47):Fixed
canyon289(2020-11-14 20:26:40):For the workflow clarify, Dont we do squash commits on all our PRs which ends up getting the single logical commit in master that we want? Thats why I tend to just make multiple small commits since I expect at the end they'll get squashed together anyway
brandonwillard(2020-11-14 20:32:33):No, we definitely don't want to squash all of our PRs, that would collapse good, logically organized commits into single monster commits and we would lose the ability to effectively salvage, revert, and bisect changes.  See [here](https://wiki.openstack.org/wiki/GitCommitMessages#Structural_split_of_changes) for some more details and examples of these points.
canyon289(2020-11-14 20:56:57):Got it,  and good to know. In ArviZ and PyMC it seems like we just squash all our commits. Knowing what youre looking for here I'll be more mindful. Thanks for pointing this out 
brandonwillard(2020-11-13 02:31:30):If this `FunctionGraph` doesn't need any inputs (i.e. `x`), you can just give it an empty list.

Also, try using symbolic inputs as the arguments for `tt.eye` (e.g. `x, y, z = tt.iscalars(3); out = tt.eye(x, y, z)`).
brandonwillard(2020-11-13 02:37:30):The numeric inputs for this `out_fg` will be scalar integers.
brandonwillard(2020-11-13 02:45:27):`Eye` has a [`dtype`](https://github.com/pymc-devs/Theano-PyMC/blob/master/theano/tensor/basic.py#L2946) property that you'll need to set here.
brandonwillard(2020-11-13 02:46:46):The signature can/should reflect the known arguments (i.e. `def eye(N, M, k, ...)`).
canyon289(2020-11-13 03:23:19):Do I set dtype like this? https://github.com/pymc-devs/Theano-PyMC/blob/master/theano/sandbox/jaxify.py#L237
canyon289(2020-11-13 03:24:29):Fixed I think
brandonwillard(2020-11-13 04:19:05):Yes, or you can use the same idiom as the commented line:
```python
def jax_funcify_Eye(op):
    dtype = op.dtype

    def eye(N, M, k, dtype=dtype):
        ....
```
brandonwillard(2020-11-13 05:21:43):The numeric value for `x` should be a scalar **integer**, since that's what the symbolic version is (i.e. `tt.iscalar` means "integer scalar").
brandonwillard(2020-11-13 05:22:16):There's no need for an `order` keyword argument.
brandonwillard(2020-11-14 18:57:25):"that" -> ""
"eye" -> "the \`Eye\`"
brandonwillard(2020-11-14 19:00:00):This isn't needed.
codecov[bot](2020-11-10 20:24:01):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/154?src=pr&el=h1) Report
> Merging [#154](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/154?src=pr&el=desc) (8006954) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/6d39faafdc3182ee232461b36ed66407b08b5c05?el=desc) (6d39faa) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/154/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/154?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #154      +/-   ##
==========================================
- Coverage   70.40%   70.39%   -0.01%     
==========================================
  Files         163      163              
  Lines       54773    54777       +4     
==========================================
  Hits        38561    38561              
- Misses      16212    16216       +4     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/154?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/154/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9iYXNpYy5weQ==) | `89.56% <100.00%> (+0.01%)` | :arrow_up: |
| [theano/tensor/blas\_c.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/154/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ibGFzX2MucHk=) | `91.66% <0.00%> (-1.20%)` | :arrow_down: |
| [theano/tensor/var.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/154/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci92YXIucHk=) | `87.31% <0.00%> (-0.21%)` | :arrow_down: |
| [theano/tensor/blas.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/154/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ibGFzLnB5) | `85.30% <0.00%> (-0.21%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/154?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/154?src=pr&el=footer). Last update [6d39faa...8006954](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/154?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

codecov[bot](2020-11-11 04:14:02):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155?src=pr&el=h1) Report
> Merging [#155](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155?src=pr&el=desc) (d2d7eb0) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/99bb8083f29638e74a47f68a5c5909b9b7874cd1?el=desc) (99bb808) will **decrease** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #155      +/-   ##
==========================================
- Coverage   70.42%   70.38%   -0.04%     
==========================================
  Files         163      163              
  Lines       54777    54777              
==========================================
- Hits        38577    38556      -21     
- Misses      16200    16221      +21     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9lbGVtd2lzZS5weQ==) | `93.00% <0.00%> (-0.55%)` | :arrow_down: |
| [theano/tensor/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHQucHk=) | `90.03% <0.00%> (-0.33%)` | :arrow_down: |
| [theano/tensor/nnet/sigm.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubmV0L3NpZ20ucHk=) | `77.07% <0.00%> (-0.25%)` | :arrow_down: |
| [theano/tensor/subtensor.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `90.70% <0.00%> (-0.10%)` | :arrow_down: |
| [theano/scalar/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYWxhci9iYXNpYy5weQ==) | `84.26% <0.00%> (-0.09%)` | :arrow_down: |
| [theano/gof/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9vcHQucHk=) | `67.28% <0.00%> (-0.07%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155?src=pr&el=footer). Last update [99bb808...d2d7eb0](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/155?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

brandonwillard(2020-11-14 19:04:38):Were you planning on adding more docstrings to this PR, or is it just for this one?
canyon289(2020-11-14 19:07:53):Just this one for now. Feel free to merge if it looks good
canyon289(2020-11-11 17:59:38):Does this one simplify the graph? More specifically what does this do and when should we use it?
brandonwillard(2020-11-11 19:54:52):That option should be removed.  

It was originally created as a means of modulating the type of optimizations used during compilation, since some of the default BLAS optimizations were introducing non-JAXable `Op`s into the graphs (the `"JAX"` mode now excludes those by default).

Now, that setting isn't being used and all of the tests are compiled without optimizations, which is needed to ensure that we actually test the correct `Op`s.  In other words, some optimizations will remove or replace the `Op`s we want to test and, since it's not always easy to tell when that will happen, we should simply avoid optimization altogether.
canyon289(2020-11-12 21:37:29):Removed from the doc string and the conditional block
codecov[bot](2020-11-13 01:42:39):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/157?src=pr&el=h1) Report
> Merging [#157](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/157?src=pr&el=desc) (5b5b87b) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/6d39faafdc3182ee232461b36ed66407b08b5c05?el=desc) (6d39faa) will **increase** coverage by `0.02%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/157/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/157?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #157      +/-   ##
==========================================
+ Coverage   70.40%   70.43%   +0.02%     
==========================================
  Files         163      163              
  Lines       54773    54773              
==========================================
+ Hits        38561    38577      +16     
+ Misses      16212    16196      -16     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/157?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/compile/ops.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/157/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvb3BzLnB5) | `90.46% <100.00%> (+3.66%)` | :arrow_up: |
| [theano/gof/fg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/157/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9mZy5weQ==) | `80.54% <0.00%> (+0.30%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/157?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/157?src=pr&el=footer). Last update [6d39faa...5b5b87b](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/157?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

codecov[bot](2020-11-13 23:02:46):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158?src=pr&el=h1) Report
> Merging [#158](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158?src=pr&el=desc) (825b307) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/48ac71e3acc58d9f27b778a62fb6a99eeabf3d68?el=desc) (48ac71e) will **increase** coverage by `0.02%`.
> The diff coverage is `86.72%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #158      +/-   ##
==========================================
+ Coverage   70.58%   70.61%   +0.02%     
==========================================
  Files         162      162              
  Lines       54506    54368     -138     
==========================================
- Hits        38473    38391      -82     
+ Misses      16033    15977      -56     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/gof/compilelock.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9jb21waWxlbG9jay5weQ==) | `53.26% <ø> (ø)` | |
| [theano/gof/graph.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9ncmFwaC5weQ==) | `90.74% <ø> (ø)` | |
| [theano/gpuarray/ctc.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2N0Yy5weQ==) | `36.26% <0.00%> (ø)` | |
| [theano/gpuarray/rng\_mrg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L3JuZ19tcmcucHk=) | `36.50% <0.00%> (ø)` | |
| [theano/misc/doubleop.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvZG91Ymxlb3AucHk=) | `0.00% <0.00%> (ø)` | |
| [theano/printing.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158/diff?src=pr&el=tree#diff-dGhlYW5vL3ByaW50aW5nLnB5) | `43.06% <0.00%> (-0.20%)` | :arrow_down: |
| [theano/sandbox/rng\_mrg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158/diff?src=pr&el=tree#diff-dGhlYW5vL3NhbmRib3gvcm5nX21yZy5weQ==) | `90.66% <ø> (ø)` | |
| [theano/tensor/blas\_c.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ibGFzX2MucHk=) | `91.66% <ø> (ø)` | |
| [theano/tensor/blas\_scipy.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ibGFzX3NjaXB5LnB5) | `97.14% <ø> (ø)` | |
| [theano/tensor/nnet/conv3d2d.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubmV0L2NvbnYzZDJkLnB5) | `88.80% <ø> (ø)` | |
| ... and [68 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158/diff?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158?src=pr&el=footer). Last update [48ac71e...825b307](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/158?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

brandonwillard(2020-11-23 01:48:41):Given that at least one `Op.infer_shape` method was relying on `Variable.clients` and/or `Variable.fgraph`, the latest commit has added an `fgraph` argument to the `Op.infer_shape` signature.

`Op`s written outside of this project that implement `Op.infer_shape` will need to be updated.
twiecki(2020-11-23 18:08:56):@brandonwillard This is a big one -- congrats!
brandonwillard(2020-11-23 18:14:27):Yeah, this one effectively makes development on the optimization components possible.  Now, we can apply an optimization _within_ another optimization without having to create and juggle maps between cloned/original variables.  

These changes also vastly simplify much of the existing optimization code (i.e. there's a lot of unnecessary code to remove now).
canyon289(2020-11-14 04:51:31):I'm not opposed, just curious, Why change the string repr to include the substring `FunctionGraph`. Just to make it more explicit on the terminal?
brandonwillard(2020-11-14 05:13:37):Yeah, its `repr` doesn't even say what it is, which is especially annoying when it's printed from within another object's `str` output.
twiecki(2020-11-22 11:03:32):Shouldn't we just remove this?
brandonwillard(2020-11-22 19:02:01):Yeah, I only kept it around in case someone wanted to figure out what this was about and&mdash;possibly&mdash;get it working.
codecov[bot](2020-11-15 00:57:58):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/161?src=pr&el=h1) Report
> Merging [#161](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/161?src=pr&el=desc) (2de5415) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/0150ddf616353b14a72159b5ac4e7e9f34c03f24?el=desc) (0150ddf) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/161/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/161?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #161   +/-   ##
=======================================
  Coverage   70.42%   70.43%           
=======================================
  Files         163      163           
  Lines       54782    54783    +1     
=======================================
+ Hits        38582    38584    +2     
+ Misses      16200    16199    -1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/161?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/161/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHQucHk=) | `90.42% <100.00%> (+0.06%)` | :arrow_up: |
| [theano/gof/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/161/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9vcHQucHk=) | `67.28% <0.00%> (-0.07%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/161?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/161?src=pr&el=footer). Last update [0150ddf...2de5415](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/161?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

brandonwillard(2020-11-15 01:24:07):Ha, couldn't have asked for a better example of how problematic these highly coupled tests are: the [current testing error](https://github.com/pymc-devs/Theano-PyMC/pull/161/checks?check_run_id=1401274285#step:6:2328) is caused by that run having the "fast compile" flag set (see [here](https://github.com/pymc-devs/Theano-PyMC/pull/161/checks?check_run_id=1401274285#step:6:13)), which changes the global compilation mode's properties!

When global/default mode is set to `FAST_COMPILE` many optimizations are disabled, and&mdash;in this case&mdash;the **optimization being tested was disabled**, so this test was never actually testing what it intended to test when run in this mode!

We need to completely remove this framework in which we rerun all the tests in different compilation modes; it's a massive waste and it only highlights the poor quality of our tests.
eigenfoo(2020-11-15 05:51:50):Between the sheer number of files this PR touches, the edge cases where f-strings are suboptimal for our purposes, (and, admittedly, my flagging interest in continuing to work on this), I'm prepared to call this a contribution - if/when all tests pass, I'd prefer to merge this and open follow-up issues, rather than continue to work on this PR.
codecov[bot](2020-11-15 06:07:47):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162?src=pr&el=h1) Report
> Merging [#162](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162?src=pr&el=desc) (9bcb6f1) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/454ae3178b7931b211dfdf46c958f8b2882db0c3?el=desc) (454ae31) will **increase** coverage by `0.09%`.
> The diff coverage is `53.18%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #162      +/-   ##
==========================================
+ Coverage   70.49%   70.58%   +0.09%     
==========================================
  Files         162      162              
  Lines       54486    54506      +20     
==========================================
+ Hits        38408    38473      +65     
+ Misses      16078    16033      -45     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/breakpoint.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162/diff?src=pr&el=tree#diff-dGhlYW5vL2JyZWFrcG9pbnQucHk=) | `58.33% <0.00%> (ø)` | |
| [theano/compile/builders.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `79.94% <0.00%> (ø)` | |
| [theano/compile/function/pfunc.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `89.78% <0.00%> (ø)` | |
| [theano/compile/mode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvbW9kZS5weQ==) | `87.83% <0.00%> (ø)` | |
| [theano/compile/sharedvalue.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvc2hhcmVkdmFsdWUucHk=) | `80.28% <ø> (ø)` | |
| [theano/configparser.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ3BhcnNlci5weQ==) | `85.23% <0.00%> (ø)` | |
| [theano/d3viz/formatting.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162/diff?src=pr&el=tree#diff-dGhlYW5vL2Qzdml6L2Zvcm1hdHRpbmcucHk=) | `12.24% <0.00%> (ø)` | |
| [theano/gof/compiledir.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9jb21waWxlZGlyLnB5) | `0.00% <0.00%> (ø)` | |
| [theano/gof/compilelock.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9jb21waWxlbG9jay5weQ==) | `53.26% <0.00%> (ø)` | |
| [theano/gof/lazylinker\_c.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9sYXp5bGlua2VyX2MucHk=) | `34.40% <0.00%> (ø)` | |
| ... and [94 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162/diff?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162?src=pr&el=footer). Last update [454ae31...9bcb6f1](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/162?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

brandonwillard(2020-11-20 05:41:50):@eigenfoo, did you select ["Allow edits from maintainers"](https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) on this PR?  

If not, enable it and I'll push some changes (see [here](https://github.com/brandonwillard/Theano-PyMC/tree/remove-string-compat))  to this branch that cover the remaining f-strings (e.g. in `scalar/basic.py` and `elemwise_cgen.py`), squash the commits, and fix recent merge conflicts with `master`.
eigenfoo(2020-11-20 13:19:09):@brandonwillard just enabled the setting.
eigenfoo(2020-11-20 20:12:44):Thanks for pushing this over the finish line @brandonwillard! 
brandonwillard(2020-11-20 20:19:23):No problem.  In general, I don't like making such large single commits, but, for the sake of time and effort, this seemed like the way to go.  Also, the effect of running an automated tool definitely makes for a single logical change/commit, so there isn't really a problem there.  It might've been nicer to break it up into per-file changes, though.
codecov[bot](2020-11-15 08:06:19):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/164?src=pr&el=h1) Report
> Merging [#164](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/164?src=pr&el=desc) (a96e59b) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/a9275c3dcc998c8cca5719037e493809b23422ff?el=desc) (a9275c3) will **not change** coverage.
> The diff coverage is `70.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/164/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/164?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #164   +/-   ##
=======================================
  Coverage   70.49%   70.49%           
=======================================
  Files         162      162           
  Lines       54502    54502           
=======================================
  Hits        38419    38419           
  Misses      16083    16083           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/164?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/164/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHQucHk=) | `90.42% <70.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/164?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/164?src=pr&el=footer). Last update [a9275c3...a96e59b](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/164?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

nitish-awasthi(2020-11-17 04:11:14):should I need to change the broadcast_to to broadcast_like in line no. 169. @brandonwillard 
michaelosthege(2020-12-15 20:11:29):@nitish-awasthi Please re-open if I'm wrong here, but currently the PR does not fix the issue and the branch is out of date. So I'm closing this because it will be easier to do a new PR.
brandonwillard(2020-11-15 08:01:25):Sorry for the confusion, but #159 is effectively concerned with making `broadcast_like` use the `Op` [`theano.tensor.extra_ops.broadcast_to`](https://github.com/pymc-devs/Theano-PyMC/blob/99f08ee3307b6084e204fa8327824af62e51b39a/theano/tensor/extra_ops.py#L1608) instead of the potentially expensive [`alloc`](https://github.com/pymc-devs/Theano-PyMC/blob/99f08ee3307b6084e204fa8327824af62e51b39a/theano/tensor/opt.py#L193) that it currently uses.
brandonwillard(2020-11-17 04:51:19):> should I need to change the broadcast_to to broadcast_like in line no. 169.

Yes, you'll need to change the name back to `broadcast_like` to avoid a name clash with the existing `broadcast_to` function.
codecov[bot](2020-11-16 01:26:29):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/166?src=pr&el=h1) Report
> Merging [#166](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/166?src=pr&el=desc) (459f1f2) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/99f08ee3307b6084e204fa8327824af62e51b39a?el=desc) (99f08ee) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/166/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/166?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #166   +/-   ##
=======================================
  Coverage   70.43%   70.43%           
=======================================
  Files         163      163           
  Lines       54783    54790    +7     
=======================================
+ Hits        38584    38591    +7     
  Misses      16199    16199           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/166?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/sandbox/jaxify.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/166/diff?src=pr&el=tree#diff-dGhlYW5vL3NhbmRib3gvamF4aWZ5LnB5) | `84.17% <100.00%> (+0.24%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/166?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/166?src=pr&el=footer). Last update [99f08ee...459f1f2](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/166?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

dfm(2020-11-16 14:19:07):@brandonwillard: One question about this implementation because I'm not sure that I fully understand everything that's happening: Will this lead (on the JAX side) to the function being evaluated multiple times, once for each output? I'm not sure that I know enough about the JAX implementation details to know!
codecov[bot](2020-11-16 02:09:42):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/167?src=pr&el=h1) Report
> Merging [#167](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/167?src=pr&el=desc) (0dbc00f) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/99f08ee3307b6084e204fa8327824af62e51b39a?el=desc) (99f08ee) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/167/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/167?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #167   +/-   ##
=======================================
  Coverage   70.43%   70.43%           
=======================================
  Files         163      163           
  Lines       54783    54783           
=======================================
  Hits        38584    38584           
  Misses      16199    16199           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/167?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/167?src=pr&el=footer). Last update [99f08ee...0dbc00f](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/167?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

codecov[bot](2020-11-16 02:23:24):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/168?src=pr&el=h1) Report
> Merging [#168](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/168?src=pr&el=desc) (38de857) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/e09e2b1e5455952d4bbc40801fb88ffb0879b106?el=desc) (e09e2b1) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/168/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/168?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #168   +/-   ##
=======================================
  Coverage   70.43%   70.43%           
=======================================
  Files         163      163           
  Lines       54790    54790           
=======================================
  Hits        38591    38591           
  Misses      16199    16199           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/168?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/scan/scan\_perform\_ext.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/168/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vc2Nhbl9wZXJmb3JtX2V4dC5weQ==) | `83.13% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/168?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/168?src=pr&el=footer). Last update [e09e2b1...38de857](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/168?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

codecov[bot](2020-11-16 11:21:52):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169?src=pr&el=h1) Report
> Merging [#169](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169?src=pr&el=desc) (4fee274) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/454ae3178b7931b211dfdf46c958f8b2882db0c3?el=desc) (454ae31) will **increase** coverage by `0.09%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #169      +/-   ##
==========================================
+ Coverage   70.49%   70.58%   +0.09%     
==========================================
  Files         162      162              
  Lines       54486    54506      +20     
==========================================
+ Hits        38408    38473      +65     
+ Misses      16078    16033      -45     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/sandbox/jaxify.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169/diff?src=pr&el=tree#diff-dGhlYW5vL3NhbmRib3gvamF4aWZ5LnB5) | `92.40% <100.00%> (+8.09%)` | :arrow_up: |
| [theano/scan/utils.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vdXRpbHMucHk=) | `89.34% <100.00%> (+0.40%)` | :arrow_up: |
| [theano/tensor/nlinalg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubGluYWxnLnB5) | `98.37% <0.00%> (-0.28%)` | :arrow_down: |
| [theano/gof/op.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9vcC5weQ==) | `79.91% <0.00%> (+0.21%)` | :arrow_up: |
| [theano/scalar/basic\_scipy.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYWxhci9iYXNpY19zY2lweS5weQ==) | `64.60% <0.00%> (+0.71%)` | :arrow_up: |
| [theano/scan/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vYmFzaWMucHk=) | `93.03% <0.00%> (+0.99%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169?src=pr&el=footer). Last update [454ae31...4fee274](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/169?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

junpenglao(2020-11-18 07:42:01):@brandonwillard this is good to go - I will leave mit_mot as TODO in future PRs.
brandonwillard(2020-11-18 20:22:17):Awesome; I'll look over it!  Otherwise, yeah, the mit-mot case can definitely wait.
brandonwillard(2020-11-18 20:28:52):@junpenglao, do you mind rebasing?  Looks like this branch isn't up-to-date with `master`.  Also, that would be a good time/reason to squash.
brandonwillard(2020-11-17 05:53:58):Using the [reference `jax.lax.scan` in the original test](https://github.com/junpenglao/Theano-PyMC/blob/39a248217321a28dbfee1adc32d9af27abf5f571/tests/sandbox/test_jax.py#L410), when I drop into the debugger around here and inspect the values of `inner_scan_outs` and `new_carry`, it looks like they aren't going to match the form of that working `jax.lax.scan` reference implementation.  

More specifically, `inner_scan_outs` is a **list** containing a traced array; a traced array that I'm assuming is supposed to correspond to [`res`](https://github.com/junpenglao/Theano-PyMC/blob/39a248217321a28dbfee1adc32d9af27abf5f571/tests/sandbox/test_jax.py#L410).  After changing this line to `return [new_carry] + inner_scan_outs`, the test produces the following:
```python
>>> jax_res
[DeviceArray([-8.8000000e+03, -8.8870000e+04, -8.9740000e+05,
              -9.0620000e+06, -9.1508704e+07, -9.2406106e+08,
              -9.3312307e+09], dtype=float32)]
>>> py_res
[array([-1.00000e+01, -8.70000e+01, -8.70000e+02, -8.80000e+03,
        -8.88700e+04, -8.97400e+05, -9.06200e+06, -9.15087e+07,
        -9.24061e+08, -9.33123e+09])]
```
The results aren't equal, but they're much closer!

My initial guess is that the remaining issues have to do with mit-sot and/or sit-sot ordering.
brandonwillard(2020-11-17 05:58:12):Why not just `inner_scan_outs = [fn(*inner_args) for fn in jax_tt_inner_func]`?
brandonwillard(2020-11-17 06:01:39):Is `jax.tree_leaves(inner_args)` effectively equivalent to `sum(inner_args, [])`?
junpenglao(2020-11-17 06:48:47):I have problem initially because sometimes functions in `jax_tt_inner_func` is nested in a list, but I think that's fixed by https://github.com/pymc-devs/Theano-PyMC/pull/166
junpenglao(2020-11-17 06:51:46):As a side note, how do you feel about using more `jax.tree_util` inside of `jaxify.py`. On one hand I like it as it handles nested args/kwargs gracefully, on the other hand in the rest of theano code base we assume things to be a list in many places so it is good to be consistent. 
junpenglao(2020-11-17 07:00:40):Yes.
junpenglao(2020-11-17 07:03:14):`return [new_carry] + inner_scan_outs` is not going to work for `inner_scan_outs` with multiple output - but this gives me some ideas where to explore.
brandonwillard(2020-11-17 22:29:46):I don't know too much about `jax.tree_util` so you'll have to be more specific, but it looks like the module provides a mix of features that overlap with [`etuples`](https://github.com/pythological/etuples) (especially the `rator`, `rands` dispatching and keyword handling) and quite possibly [`cons`](https://github.com/pythological/python-cons).  

I'm a big fan of S-expression emulation in Python, so I can't fundamentally object to this approach; however, it looks like `pytree` source isn't in Python?  If that's true, it doesn't work in its favor, especially since this kind of simple graph work can be done very well (and easily) in standard Python.
 
Otherwise, there aren't many cases in which we handle nested/tree structures in Theano; all graph-related things are represented by the `theano.gof.graph` objects.  As we're seeing here, there are some lists-of-lists, but they don't actually represent graphs.

Now, some of the "JAXification" we're doing involves nested lists, but that's largely an artifact of how a JAXified `FunctionGraph` is represented.  In general, a `FunctionGraph` has a list of outputs, so the JAXified `FunctionGraph` should be a list of JAXable functions for each output.  In general, we shouldn't have to deal with non-Theano representations of graphs.

We could definitely take other approaches to the JAXification process, so, please, ask any and all question that might help clarify how it currently works and&mdash;hopefully&mdash;lead to improvements.  Even if those questions simply result in better documentation, that would be well worth it.

For instance, one of things about our current approach&mdash;and much of what's done in Theano&mdash;that really bothers me is how recursion is handled.  It's done naively in Python and, as such, is bound by the Python stack.  Python has no TCO, so these kinds of problems need to be fixed manually.  At some point, I would like to generalize and use [the approach I took in `unification` and `etuples`](https://github.com/pythological/unification/pull/16): i.e. [a simple generator-based trampoline](https://github.com/pythological/unification/pull/16/files#diff-5675d2e53a975726b4f985153afb1af9fc4d659c3d41868bd4c3604e8fdcfd9dR17).  Last I measured, this approach was about as performant as the naive stack approach for shallow recursions and significantly better for deep recursions (see the tests in the PR linked earlier).
junpenglao(2020-11-17 23:22:15):I agree with all your points. Indeed nested list should not occur in the current set up, but moving forward it might be useful (thanks for filing the comment). I replace the rest of the `jax.tree_*` for now.
brandonwillard(2020-11-17 23:24:45):Just so it's clear: I don't think there's anything wrong with using those functions.  I was just trying to understand what they did/would do.
brandonwillard(2020-11-18 22:32:10):I only added this as a reference to anyone implementing the `Scan` `Op` conversion from scratch, so it can be removed now that you've set up a framework for the conversion.
brandonwillard(2020-11-18 22:40:08):`theano.config.floatX` is a more direct reference: i.e. the `config` object is intended to be exposed via `theano`, and it's only available through `theano.tensor` because of some undesirable `*` imports.  When we change that in the near future, `theano.tensor.config` may no longer work, so we don't want to propagate this usage.
brandonwillard(2020-11-18 22:40:40):See previous comment about `theano.config.floatX`.
brandonwillard(2020-11-18 22:40:49):See previous comment about `theano.config.floatX`.
brandonwillard(2020-11-18 22:40:53):See previous comment about `theano.config.floatX`.
brandonwillard(2020-11-18 22:40:59):See previous comment about `theano.config.floatX`.
brandonwillard(2020-11-18 22:41:05):See previous comment about `theano.config.floatX`.
brandonwillard(2020-11-18 22:42:06):No need to leave this here.
brandonwillard(2020-11-18 22:42:15):No need to leave this here.
brandonwillard(2020-11-18 22:44:30):Can we keep this space reserved for mit-mots even if we're not doing anything with them?  If so, we should probably do that, because it would be better if all the arguments aligned as closely as possible with the existing `Scan` arguments (i.e. we want the mapping to be as 1:1 as possible).
brandonwillard(2020-11-18 22:44:36):Same here.
brandonwillard(2020-11-18 22:51:12):Is this prepending the initial values so that the JAX output will match the raw `Scan` `Op` output and, thus, work with a downstream `Subtensor` introduced by the `scan` helper function?  If so, we might want to add that as a comment for future generations.
junpenglao(2020-11-19 06:35:06):Sounds good. Done.
junpenglao(2020-11-19 06:35:10):I see - going with the other way around to change `tt.config.floatX` -> `theano.config.floatX`
junpenglao(2020-11-19 06:35:28):Comment added.
junpenglao(2020-11-19 07:05:22):Done.
codecov[bot](2020-11-16 22:34:43):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173?src=pr&el=h1) Report
> Merging [#173](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173?src=pr&el=desc) (100d62b) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/55b364035aeae4ef4dbad539766c0c4ef006a8e5?el=desc) (55b3640) will **increase** coverage by `0.00%`.
> The diff coverage is `95.23%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #173   +/-   ##
=======================================
  Coverage   70.43%   70.43%           
=======================================
  Files         163      163           
  Lines       54790    54787    -3     
=======================================
- Hits        38591    38590    -1     
+ Misses      16199    16197    -2     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/scalar/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYWxhci9iYXNpYy5weQ==) | `84.35% <ø> (ø)` | |
| [theano/tensor/type.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci90eXBlLnB5) | `91.88% <85.71%> (+0.81%)` | :arrow_up: |
| [theano/gof/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9vcHQucHk=) | `67.30% <100.00%> (+0.02%)` | :arrow_up: |
| [theano/ifelse.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173/diff?src=pr&el=tree#diff-dGhlYW5vL2lmZWxzZS5weQ==) | `51.56% <100.00%> (-0.42%)` | :arrow_down: |
| [theano/misc/pkl\_utils.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvcGtsX3V0aWxzLnB5) | `76.19% <100.00%> (ø)` | |
| [theano/scan/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vb3B0LnB5) | `85.62% <100.00%> (ø)` | |
| [theano/tensor/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHQucHk=) | `90.42% <100.00%> (ø)` | |
| [theano/tensor/var.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci92YXIucHk=) | `87.31% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173?src=pr&el=footer). Last update [55b3640...100d62b](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/173?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

codecov[bot](2020-11-16 21:50:58):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/174?src=pr&el=h1) Report
> Merging [#174](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/174?src=pr&el=desc) (1d05e94) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/a26990a247a61f5f3a4d409d7b7343bdc56cd85b?el=desc) (a26990a) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/174/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/174?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #174   +/-   ##
=======================================
  Coverage   70.43%   70.43%           
=======================================
  Files         163      163           
  Lines       54790    54790           
=======================================
  Hits        38591    38591           
  Misses      16199    16199           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/174?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/174?src=pr&el=footer). Last update [a26990a...1d05e94](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/174?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

codecov[bot](2020-11-17 03:13:04):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/176?src=pr&el=h1) Report
> Merging [#176](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/176?src=pr&el=desc) (bfce7e8) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/3c47f74a9c9d96d9112a216dfb599fa3351ed4e2?el=desc) (3c47f74) will **increase** coverage by `0.05%`.
> The diff coverage is `94.11%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/176/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/176?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #176      +/-   ##
==========================================
+ Coverage   70.43%   70.49%   +0.05%     
==========================================
  Files         163      162       -1     
  Lines       54787    54502     -285     
==========================================
- Hits        38590    38419     -171     
+ Misses      16197    16083     -114     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/176?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/gof/fg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/176/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9mZy5weQ==) | `90.66% <94.11%> (+10.11%)` | :arrow_up: |
| [theano/gof/utils.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/176/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi91dGlscy5weQ==) | | |
| [theano/gof/type.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/176/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi90eXBlLnB5) | `79.75% <0.00%> (+0.30%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/176?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/176?src=pr&el=footer). Last update [3c47f74...bfce7e8](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/176?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

michaelosthege(2020-11-18 13:23:49):@canyon289 since #181 was merged, you can now merge `master` into your branch and use the notebook to identify targets for your refactoring.
canyon289(2020-11-19 06:14:50):Running into a pretty nasty circular import. Ill dedicate a couple more hours to it this week to see if I can untangle things or make some progress.

@michaelosthege I tried using your notebook to figure out the loops but unfortunately because of the circular import itself I cant even load theano to inspect the import graph. Ill have to do this the plain old way through a debugger
canyon289(2020-11-19 23:33:04):Moving these type definitions is causing numerous levels of circular import errors. Ill try for another day but if I dont see a light at the end of the tunnel will close this and let someone else give it a shot.

Its related to this issue. As it stands right now perhaps the most prudent thing I can think of is to delete all the code we don't want for sure, like perhaps the `tt.net` submodule, and then go from there
https://github.com/pymc-devs/Theano-PyMC/issues/45
brandonwillard(2020-11-20 06:03:22):I noticed that you changed a lot of references from `tt.*` (i.e. `theano.tensor.*`) to `theano.tensor.type.*` in files all across the project; that will definitely alter the import order and cause the problems you're seeing; however, since you've also imported the relocated `theano.tensor.type` types within `theano.tensor.__init__`, there's no need to change those references.  In other words, `tt.*` references should already work given that `theano.tensor.__init__` addition.
canyon289(2020-11-20 06:23:15):The automated tool did that. Im writing a quick script that will go through
and replace with the tt style reference and Im hoping thatll fix the
problem! Fingers crossed

As always thanks for the feedback

On Thu, Nov 19, 2020 at 10:03 PM Brandon T. Willard <
notifications@github.com> wrote:

> I noticed that you changed a lot of references from tt.* to
> theano.tensor.type.*; that will alter the import order and cause the
> problems you're seeing; however, since you've also added the relocated
> theano.tensor.type imports to theano.tensor.__init__, there's no need to
> change those references.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/pymc-devs/Theano-PyMC/pull/180#issuecomment-730872543>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/ABXBFYL2VA3AXIIRAHLBYMLSQYBDPANCNFSM4TZPGTFA>
> .
>

brandonwillard(2020-11-20 17:13:35):> Im writing a quick script that will go through and replace with the tt style reference

You can just remove the commit that makes those changes, no?
canyon289(2020-11-20 17:15:15):> > Im writing a quick script that will go through and replace with the tt style reference
> 
> You can just remove the commit that makes those changes, no?

The commit that includes those changes is also the one that includes the type reference move since the refactoring tool does two things at once. At any rate got it done through some other means but it didnt help
brandonwillard(2020-11-20 17:18:32):> The commit that includes those changes is also the one that includes the type reference move

That's fine; you can rebase before that point and apply only the changes you want to keep from that commit, then create a commit for that and remove the old commit.
canyon289(2020-11-20 17:22:12):> > The commit that includes those changes is also the one that includes the type reference move
> 
> That's fine; you can rebase before that point and apply only the changes you want to keep from that commit, then create a commit for that and remove the old commit.

Yep, already done, commit history is cleaned up
canyon289(2020-11-22 03:55:06):I'm relinquishing this issue ticket. After trying a couple approaches I can't see to get any better than guessing. Closing but leaving branch up as reference either to myself I have the time to reattempt this or someone else who wants to take a run at it
brandonwillard(2020-11-22 04:09:23):No problem; this refactoring work can be a serious headache, and we definitely don't want people to get worn out by it.  Feel free to move on to another issue that's more interesting, or at least less circular-import-containing.
canyon289(2020-11-22 04:15:30):Hey,
Thank you so much for the encouragement. It really means a lot and I truly appreciate it.
brandonwillard(2020-11-18 21:42:10):This should just be `tt.type.cscalar()`.
brandonwillard(2020-11-18 23:03:13):Well, that's only true if `theano.tensor` automatically loads the `type` module.
canyon289(2020-11-19 06:13:32):It doesnt, but I added the import
twiecki(2020-11-18 10:22:03):Agreed, should we move this to the docs dir though so that we can later compile it, like we do in pymc3? Can still have a link from the root `notebooks` to the subdir (like in pymc3).
michaelosthege(2020-11-18 10:24:53):> 
> 
> Agreed, should we move this to the docs dir though so that we can later compile it, like we do in pymc3? Can still have a link from the root `notebooks` to the subdir (like in pymc3).

No, I would recommend the opposite: Notebooks should be easy to find (in the root). Linking (a subset of) them from the docs is much cleaner.

We should move them in PyMC3.
twiecki(2020-11-18 10:26:50):@michaelosthege Good point.
brandonwillard(2020-11-18 21:26:15):To be clear, I'm not interested in introducing new notebooks or even maintaining the existing ones in this repository, especially since it entails even more work just to enforce the same standards of quality as the rest of the repository (e.g. we have to set up entirely separate tooling for linting and formatting).  More importantly, the core code is undergoing some extreme refactoring and we don't want to add more non-standard things that need to be updated as those refactorings occur, nor do we want to invite activity that will take up CI resources.

If anything, this material is better suited for a separate branch.  At least we can reduce the amount of non-core changes occurring on the main branch that way.

In general, I'm very against adding _anything_ until a lot more work is done.  We need to keep this codebase very lean and concentrate our efforts entirely on the refactoring and fixes that will make this project an actual improvement over the old Theano.
dfm(2020-11-19 18:00:12):Should these also support tensor input or is something magical happening behind the scenes with how scalar ops are applied in JAX? Should we also test the tensor version? In Theano,

```python
import numpy as np
import theano.tensor as tt
tt.second(np.random.randn(5), 5.0).eval()
```

returns

```python
array([5., 5., 5., 5., 5.], dtype=float32)
```

Would the jaxified version do the right thing?

Please ignore if this isn't an issue I only approximately know what's going on :D 
codecov[bot](2020-11-19 18:14:27):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/185?src=pr&el=h1) Report
> Merging [#185](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/185?src=pr&el=desc) (f786ff2) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/30be634768882b8fc926fe2caacbe9f15a1dfaa8?el=desc) (30be634) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/185/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/185?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #185   +/-   ##
=======================================
  Coverage   70.48%   70.49%           
=======================================
  Files         162      162           
  Lines       54482    54486    +4     
=======================================
+ Hits        38404    38408    +4     
  Misses      16078    16078           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/185?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/sandbox/jaxify.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/185/diff?src=pr&el=tree#diff-dGhlYW5vL3NhbmRib3gvamF4aWZ5LnB5) | `84.31% <100.00%> (+0.13%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/185?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/185?src=pr&el=footer). Last update [30be634...f786ff2](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/185?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

junpenglao(2020-11-19 18:17:29):Yeah actually it is weird that this is a scalar op but in jax the broadcasting is not happening automatically. Added a test case for that as well.
dfm(2020-11-19 18:18:38):I assume that that's because registering this translation overwrites the default `ScalarOp` behavior, but it's all magic to me!
brandonwillard(2020-11-19 19:31:23):> I assume that that's because registering this translation overwrites the default `ScalarOp` behavior, but it's all magic to me!

It doesn't _overwrite_ it, but it does supersede it in the MRO sense.  These dispatch functions are just another style of OO-like/polymorphic programming, and, in this case, we're essentially defining [generic functions](https://en.wikipedia.org/wiki/Generic_function).
dfm(2020-11-20 13:12:46):Did you try just the following?

```python
        res = jax.lax.cond(
            cond,
            lambda _: args[:n_outs],
            lambda _: args[n_outs:],
            operand=None
        )
```

I don't think that you'll need to have a cond for `n_outs`, that should always be a Python `int`.
eigenfoo(2020-11-20 13:36:41):Sorry, I think there's a misunderstanding here - maybe I wasn't clear.

The original code has the following semantics:

https://github.com/pymc-devs/Theano-PyMC/blob/a9275c3dcc998c8cca5719037e493809b23422ff/theano/sandbox/jaxify.py#L530-L536

If `args = [true_val, false_val] ` and if `n_outs == 1`, then the original code would return `true_val`, and not `[true_val]` (which is what your code snippet would return, since `args[:1]` returns a singleton list `[true_val]`).

My question isn't whether `n_outs` is a Python int (it clearly is) - it's what to do when `n_outs == 1`. To have the same semantics as the original code, we would need to check if `n_outs == 1` and if it is, return the value of that singleton list, instead of the singleton list itself. The problem is that JAX doesn't seem to like that, since (depending on whether `n_outs == 1`), we could return either a value, or a (singleton) list of values, which have different types.

I feel as if this is what the traceback we're getting is trying to say when it says `TypeError: true_fun and false_fun output must have same type structure, got PyTreeDef(tuple, [*]) and *.`. Am I mistaken?

---

FWIW, the code snippet you provided also fails the unit test - I've added traceback below just in case:

<details>
  <summary>Traceback</summary>

```
______________________________________________________________________ test_jax_ifelse _______________________________________________________________________

    def test_jax_ifelse():

        import theano.ifelse

        true_vals = np.r_[1, 2, 3]
        false_vals = np.r_[-1, -2, -3]

        x = theano.ifelse.ifelse(np.array(True), true_vals, false_vals)
        x_fg = theano.gof.FunctionGraph([], [x])

>       compare_jax_and_py(x_fg, [])

test_jax.py:473:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

fgraph = [if{}(TensorConstant{True}, TensorConstant{[1 2 3]}, TensorConstant{[-1 -2 -3]})], inputs = []
assert_fn = functools.partial(<function assert_allclose at 0x129084f28>, rtol=0.0001), must_be_device_array = True

    def compare_jax_and_py(
        fgraph,
        inputs,
        assert_fn=None,
        must_be_device_array=True,
    ):
        """Function to compare python graph output and jax compiled output for testing equality

        In the tests below computational graphs are defined in Theano. These graphs are then passed to
        this function which then compiles the graphs in both jax and python, runs the calculation
        in both and checks if the results are the same

        Parameters
        ----------
        fgraph: theano.gof.FunctionGraph
            Theano function Graph object
        inputs: iter
            Inputs for function graph
        assert_fn: func, opt
            Assert function used to check for equality between python and jax. If not
            provided uses np.testing.assert_allclose
        must_be_device_array: Bool
            Checks for instance of jax.interpreters.xla.DeviceArray. For testing purposes
            if this device array is found it indicates if the result was computed by jax

        Returns
        -------
        jax_res

        """
        if assert_fn is None:
            assert_fn = partial(np.testing.assert_allclose, rtol=1e-4)

        opts = theano.gof.Query(include=[None], exclude=["cxx_only", "BlasOpt"])
        jax_mode = theano.compile.mode.Mode(theano.sandbox.jax_linker.JAXLinker(), opts)
        py_mode = theano.compile.Mode("py", opts)

        theano_jax_fn = theano.function(fgraph.inputs, fgraph.outputs, mode=jax_mode)
        jax_res = theano_jax_fn(*inputs)

        if must_be_device_array:
            if isinstance(jax_res, list):
>               assert all(
                    isinstance(res, jax.interpreters.xla.DeviceArray) for res in jax_res
                )
E               assert False
E                +  where False = all(<generator object compare_jax_and_py.<locals>.<genexpr> at 0x134274cf0>)

test_jax.py:63: AssertionError
```
</details>

dfm(2020-11-20 14:26:31):You can keep the last line the same:

```python
return res if n_outs > 1 else res[0] 
```

What I was saying is that you don't need those nested `cond`s!
dfm(2020-11-20 14:30:42):I can confirm that the following passes all the tests:

```python
@jax_funcify.register(IfElse)
def jax_funcify_IfElse(op):
    n_outs = op.n_outs

    def ifelse(cond, *args, n_outs=n_outs):
        res = jax.lax.cond(
            cond,
            lambda _: args[:n_outs],
            lambda _: args[n_outs:],
            operand=None
        )
        return res if n_outs > 1 else res[0]

    return ifelse
```
eigenfoo(2020-11-21 04:55:25):Oh interesting, now I'm even more confused - I understood #178 to be about removing _all_ if statements from the Op. What makes the second if statement JIT-able, but the first one not?

(Will update PR soon)
dfm(2020-11-21 13:18:50):Sure! I can explain this and there are more details [in the JAX docs](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#python-control-flow-+-JIT).

The difference between the two all comes down to the *type* of the condition. For the `cond` argument, that needs to support theano (or jax) types, because it should support having a *runtime* control flow. For the `n_outs` condition, that is a constant *Python* integer that is set when the op is created and never changed. This means that that conditional only needs to support Python types. In this case, Python `if`s can be jitted just fine because only one branch is *ever* run. As far as JAX is concerned, the other branch doesn't even exist anymore once it's jitted!

It might (or might not!) be useful to think about the fact that we could have equivalently written this implementation as:

```python
@jax_funcify.register(IfElse)
def jax_funcify_IfElse(op):
    n_outs = op.n_outs

    if n_outs > 1:
        def ifelse(cond, *args, n_outs=n_outs):
            res = jax.lax.cond(
                cond,
                lambda _: args[:n_outs],
                lambda _: args[n_outs:],
                operand=None
            )
            return res
    else:
        def ifelse(cond, *args):
            res = jax.lax.cond(
                cond,
                lambda _: args[0],
                lambda _: args[1],
                operand=None
            )
            return res

    return ifelse
```
codecov[bot](2020-11-21 15:32:58):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/187?src=pr&el=h1) Report
> Merging [#187](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/187?src=pr&el=desc) (438d655) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/d079273a9f8f8991923391eb7a83416bdd1b659e?el=desc) (d079273) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/187/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/187?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #187      +/-   ##
==========================================
- Coverage   70.58%   70.58%   -0.01%     
==========================================
  Files         162      162              
  Lines       54506    54504       -2     
==========================================
- Hits        38473    38471       -2     
  Misses      16033    16033              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/187?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/sandbox/jaxify.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/187/diff?src=pr&el=tree#diff-dGhlYW5vL3NhbmRib3gvamF4aWZ5LnB5) | `92.37% <100.00%> (-0.04%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/187?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/187?src=pr&el=footer). Last update [d079273...438d655](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/187?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

eigenfoo(2020-11-21 16:36:18):Ah I see, thanks for the explanation - that was really clear! I clearly still have a lot to learn about JAX :)
twiecki(2020-11-22 16:34:16):Should we merge?
brandonwillard(2020-11-22 17:39:17):Let's try pushing a temporary code change so that it will trigger the tests, then we can see if the intermediate failures issue is still a problem and whether or not we need to use something like `notify.after_n_builds`.
MarcoGorelli(2020-11-25 17:54:47):> I think @OriolAbril might've mentioned that this option would help: [`notify.after_n_builds`](https://docs.codecov.io/docs/codecovyml-reference#codecovnotifyafter_n_builds).

just tried that out in https://github.com/pymc-devs/pymc3/pull/4255 - some jobs have finished, and so far there's been no prematurely reported failure
brandonwillard(2020-11-25 18:48:36):I just pushed a commit that attempts to send coverage information only once all the matrix jobs have finished.  @dfm, set up a convenient `combine` job that serves as a single indicator for a successful run of all the matrix-generated tests.  Its primary purpose was to serve as a single GitHub required check (i.e. instead of using an arguably variable number of previously generated matrix tests), but I think it can serve as a single point for uploading the cumulative coverage results, as well.

I'm not sure if the exact change in that commit is the correct one, but the general approach seems like a viable way to get what we're looking for without introducing new parameters.
codecov[bot](2020-11-25 20:28:50):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191?src=pr&el=h1) Report
> Merging [#191](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191?src=pr&el=desc) (c38737e) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/64bad71f4527b36f81ad753249740ef54f965f13?el=desc) (64bad71) will **increase** coverage by `0.53%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #191      +/-   ##
==========================================
+ Coverage   70.61%   71.14%   +0.53%     
==========================================
  Files         162      162              
  Lines       54368    54368              
==========================================
+ Hits        38391    38681     +290     
+ Misses      15977    15687     -290     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/gof/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9vcHQucHk=) | `68.06% <0.00%> (+0.06%)` | :arrow_up: |
| [theano/tensor/blas.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ibGFzLnB5) | `86.56% <0.00%> (+0.20%)` | :arrow_up: |
| [theano/tensor/raw\_random.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9yYXdfcmFuZG9tLnB5) | `85.23% <0.00%> (+0.25%)` | :arrow_up: |
| [theano/tensor/nlinalg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubGluYWxnLnB5) | `98.64% <0.00%> (+0.27%)` | :arrow_up: |
| [theano/gof/destroyhandler.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9kZXN0cm95aGFuZGxlci5weQ==) | `74.28% <0.00%> (+0.63%)` | :arrow_up: |
| [theano/tensor/io.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9pby5weQ==) | `83.05% <0.00%> (+0.84%)` | :arrow_up: |
| [theano/tensor/opt\_uncanonicalize.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHRfdW5jYW5vbmljYWxpemUucHk=) | `99.15% <0.00%> (+0.84%)` | :arrow_up: |
| [theano/sparse/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191/diff?src=pr&el=tree#diff-dGhlYW5vL3NwYXJzZS9iYXNpYy5weQ==) | `88.84% <0.00%> (+2.60%)` | :arrow_up: |
| [theano/tensor/extra\_ops.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9leHRyYV9vcHMucHk=) | `93.13% <0.00%> (+3.03%)` | :arrow_up: |
| [theano/tensor/xlogx.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci94bG9neC5weQ==) | `100.00% <0.00%> (+4.87%)` | :arrow_up: |
| ... and [3 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/191/diff?src=pr&el=tree-more) | |

brandonwillard(2020-11-25 20:40:47):OK, this approach seems to work.  It also has the nice side effect of producing artifacts for the the raw coverage data (e.g. to be used for something like #107).

To summarize: this workflow is using Action's artifacts to gather coverage data for each test generated by the matrix job, then a final job is run that pushes all the coverage files to Codecov.
This prevents any premature failure reports and is robust to workflow/matrix changes (i.e. we won't have to change parameters to match the number of matrix runs).

brandonwillard(2020-11-21 18:10:46):We need 100% coverage for newly added code.  While this may be annoying for some forms of refactoring, even in that context it's at least prompting us to check and make sure we didn't actually reduce coverage while refactoring.
brandonwillard(2020-11-21 18:11:55):Why this change?
codecov[bot](2020-11-23 02:10:23):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/193?src=pr&el=h1) Report
> Merging [#193](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/193?src=pr&el=desc) (7064f08) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/d079273a9f8f8991923391eb7a83416bdd1b659e?el=desc) (d079273) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/193/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/193?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #193   +/-   ##
=======================================
  Coverage   70.58%   70.58%           
=======================================
  Files         162      162           
  Lines       54506    54506           
=======================================
  Hits        38473    38473           
  Misses      16033    16033           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/193?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/gof/toolbox.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/193/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi90b29sYm94LnB5) | `80.04% <100.00%> (ø)` | |
| [theano/tensor/blas.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/193/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ibGFzLnB5) | `85.30% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/193?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/193?src=pr&el=footer). Last update [d079273...7064f08](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/193?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

codecov[bot](2020-11-23 02:20:11):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194?src=pr&el=h1) Report
> Merging [#194](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194?src=pr&el=desc) (696f2fc) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/0d34af2ed1e4f2440942c7b031d4576773a5cdd2?el=desc) (0d34af2) will **increase** coverage by `0.01%`.
> The diff coverage is `29.41%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #194      +/-   ##
==========================================
+ Coverage   71.17%   71.19%   +0.01%     
==========================================
  Files         162      159       -3     
  Lines       54366    54343      -23     
==========================================
- Hits        38695    38688       -7     
+ Misses      15671    15655      -16     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/compile/mode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvbW9kZS5weQ==) | `87.95% <ø> (ø)` | |
| [theano/gof/cmodule.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9jbW9kdWxlLnB5) | `57.91% <ø> (ø)` | |
| [theano/gof/toolbox.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi90b29sYm94LnB5) | `80.41% <0.00%> (+0.36%)` | :arrow_up: |
| [theano/gradient.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194/diff?src=pr&el=tree#diff-dGhlYW5vL2dyYWRpZW50LnB5) | `89.00% <ø> (ø)` | |
| [theano/scan/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vYmFzaWMucHk=) | `93.03% <0.00%> (ø)` | |
| [theano/scan/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vb3B0LnB5) | `85.67% <ø> (+0.12%)` | :arrow_up: |
| [theano/tensor/nnet/conv.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubmV0L2NvbnYucHk=) | `86.13% <0.00%> (ø)` | |
| [theano/tensor/nnet/nnet.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubmV0L25uZXQucHk=) | `86.88% <ø> (ø)` | |
| [theano/tensor/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHQucHk=) | `90.40% <ø> (ø)` | |
| [theano/tensor/signal/pool.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9zaWduYWwvcG9vbC5weQ==) | `69.78% <ø> (ø)` | |
| ... and [7 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/194/diff?src=pr&el=tree-more) | |

twiecki(2020-11-23 03:33:13):I would just remove all deprecation warnings and sandbox files that reference them, I bet they have been there a long enough time.
twiecki(2020-11-23 03:31:13):We can probably just remove this.
twiecki(2020-11-23 03:31:45):no one uses this anymore
codecov[bot](2020-11-23 02:24:04):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/195?src=pr&el=h1) Report
> Merging [#195](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/195?src=pr&el=desc) (fb0638e) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/d079273a9f8f8991923391eb7a83416bdd1b659e?el=desc) (d079273) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/195/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/195?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #195   +/-   ##
=======================================
  Coverage   70.58%   70.58%           
=======================================
  Files         162      162           
  Lines       54506    54506           
=======================================
  Hits        38473    38473           
  Misses      16033    16033           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/195?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/gof/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/195/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9vcHQucHk=) | `67.30% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/195?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/195?src=pr&el=footer). Last update [d079273...fb0638e](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/195?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

codecov[bot](2020-11-23 02:32:10):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/196?src=pr&el=h1) Report
> Merging [#196](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/196?src=pr&el=desc) (306d91b) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/d079273a9f8f8991923391eb7a83416bdd1b659e?el=desc) (d079273) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/196/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/196?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #196   +/-   ##
=======================================
  Coverage   70.58%   70.58%           
=======================================
  Files         162      162           
  Lines       54506    54506           
=======================================
  Hits        38473    38473           
  Misses      16033    16033           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/196?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/196?src=pr&el=footer). Last update [d079273...306d91b](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/196?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

codecov[bot](2020-11-24 20:03:08):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/199?src=pr&el=h1) Report
> Merging [#199](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/199?src=pr&el=desc) (1e8b594) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/0813ec0dad93f1e3098e989c7c6a7de52beb94d2?el=desc) (0813ec0) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/199/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/199?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #199   +/-   ##
=======================================
  Coverage   70.61%   70.61%           
=======================================
  Files         162      162           
  Lines       54368    54368           
=======================================
  Hits        38391    38391           
  Misses      15977    15977           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/199?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/sandbox/jaxify.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/199/diff?src=pr&el=tree#diff-dGhlYW5vL3NhbmRib3gvamF4aWZ5LnB5) | `92.40% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/199?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/199?src=pr&el=footer). Last update [0813ec0...904796b](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/199?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

twiecki(2020-11-24 19:47:21):Nice that this is so simple.
brandonwillard(2020-11-24 19:54:39):Yeah, the `Advanced*Subtensor1` `Op`s are just a specialization of the more general `Advanced*Subtensor` `Op`s to only one index parameter, so there's always a lot of overlap between them that can be leveraged.
codecov[bot](2020-11-28 17:00:57):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201?src=pr&el=h1) Report
> Merging [#201](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201?src=pr&el=desc) (9cb1464) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/0d34af2ed1e4f2440942c7b031d4576773a5cdd2?el=desc) (0d34af2) will **increase** coverage by `0.04%`.
> The diff coverage is `72.65%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #201      +/-   ##
==========================================
+ Coverage   71.17%   71.21%   +0.04%     
==========================================
  Files         162      161       -1     
  Lines       54366    54362       -4     
==========================================
+ Hits        38695    38715      +20     
+ Misses      15671    15647      -24     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/configdefaults.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ2RlZmF1bHRzLnB5) | `72.03% <ø> (+3.05%)` | :arrow_up: |
| [theano/gof/type.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi90eXBlLnB5) | `79.75% <ø> (ø)` | |
| [theano/gpuarray/ctc.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2N0Yy5weQ==) | `36.26% <0.00%> (ø)` | |
| [theano/gpuarray/linalg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2xpbmFsZy5weQ==) | `22.65% <0.00%> (ø)` | |
| [theano/gpuarray/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L29wdC5weQ==) | `25.87% <0.00%> (ø)` | |
| [theano/misc/check\_blas.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvY2hlY2tfYmxhcy5weQ==) | `0.00% <0.00%> (ø)` | |
| [theano/misc/pkl\_utils.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvcGtsX3V0aWxzLnB5) | `76.19% <0.00%> (ø)` | |
| [theano/tensor/nnet/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubmV0L29wdC5weQ==) | `52.26% <ø> (ø)` | |
| [theano/gpuarray/dnn.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2Rubi5weQ==) | `23.24% <17.64%> (ø)` | |
| [theano/tensor/nnet/ctc.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubmV0L2N0Yy5weQ==) | `44.35% <20.00%> (ø)` | |
| ... and [33 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/201/diff?src=pr&el=tree-more) | |

michaelosthege(2020-11-28 18:56:41):@brandonwillard the dependency on `theano.gof.cmodule` is because the `configdefaults` attempts to invoke GCC to learn about config flags.
* Do you intend to refactor the `GCC_compiler` linker to make them it more orthogonal?
* Can/should we move all the `theano.gof.cmodule`-related addition of config settings to `theano.gof.cmodule`?
brandonwillard(2020-11-28 19:18:20):> * changing "THEANO" to "AESARA" for the environment variables and the like

We might not want to make this PR dependent on that change, especially since there are a lot of other things that would then be required to merge this without having a weird Theano/Aesara mix.  If you don't mind waiting for those other changes before merging this, then it's not a problem.
michaelosthege(2020-11-28 19:30:52):> > * changing "THEANO" to "AESARA" for the environment variables and the like
> 
> We might not want to make this PR dependent on that change, especially since there's a lot of other things that would then be required to merge this without having a weird Theano/Aesara mix. If you don't mind waiting for those other changes before merging this, then it's not a problem.

Good point. It will be best to do the rename for all of the codebase at the same time - not in this PR. 

What about the other dependency though? 
brandonwillard(2020-11-28 19:35:04):> * Do you intend to refactor the `GCC_compiler` linker to make them it more orthogonal?

Yes.  Improving orthogonality and reducing coupling is one of&mdash;if not _the_&mdash;primary goal of our Theano refactoring efforts in general.  

I'm not sure if the `GCC_compiler` module itself suffers too much from either of these, but I can believe that other modules that use it do.  From a quick inspection, I don't see any module-level uses of `theano.config` (i.e. the kind that would require `theano.config` at import time) besides the import of `theano.config` itself.

> * Can/should we move all the `theano.gof.cmodule`-related addition of config settings to `theano.gof.cmodule`?

That does sound better, but there might be a few references to `theano.config.cmodule` in other modules that could make that move difficult and/or not a great advantage (yet, at least).  It's those module-level/import-time `theano.config` reference that really hurt the project.
brandonwillard(2020-11-28 19:48:01):> * dependency on `theano.Mode` was replaced with an `__mro__` inspection

That's an interesting workaround, but it should be possible for us to use `Mode` at any stage of the import process if we just put it into its own module, no?  There are often package-level imports that precede and foil these kinds of simple fixes, but those imports can (and should) often be refactored/removed as well.

Even if those refactorings are too complex to do here and now, we can always create a simple "interfaces" module and/or sub-package that only serves to provide classes for simple type checks and the like, if that's all that's needed in this case.
michaelosthege(2020-12-03 09:23:49):@brandonwillard while the import cycles are still there, the diff is already quite hard to look at.
I intend to continue improving the following aspects, but would prefer to do it on a follow-up PR:
+ refactor such that there are less global variables (or at least such that they are attributes of the same singleton
+ replace the `__get__` / `__set__` monkeypatching with real `@property` and methods
+ make the singleton `config` object explicit, such that we can test with `testconfig` instances instead of the real thing (also touches the global dict variables)

After this PR, it becomes a lot easier to do the following - preferably on separate PRs:
+ removal of a bunch of deprecated/outdated/experimental config settings
+ re-organization (re-naming?) of configvars such that their grouping in the `add_*_configvar()` functions makes sense
+ re-organization of `add_*_configvar()` functions and where/when they are called to get rid of cyclic dependencies

Do you agree with this roadmap? If it would be great to merge this one so the follow-ups can get nicer diffs.
brandonwillard(2020-12-03 23:18:10):> Do you agree with this roadmap? If it would be great to merge this one so the follow-ups can get nicer diffs.

If the each logical unit of change is too large to be a single commit, then, yes, we should break this up into separate PRs.

I'll take a look at the changes in this one, but currently it looks like we need to squash some "fix" commits into the commits containing their original changes (e.g. commits that fix formatting issues should be merged into the commits that introduced the issues).  

If you want, I can restructure those commits as I review the changes.
brandonwillard(2020-12-04 04:49:45):I just pushed some changes to the commit structure, so be sure to rebase locally.
codecov[bot](2020-12-01 18:02:59):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/204?src=pr&el=h1) Report
> Merging [#204](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/204?src=pr&el=desc) (c45aeb3) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/55ef0e6b7380e062bdd09fcd7f820643f8521fb0?el=desc) (55ef0e6) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/204/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/204?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #204   +/-   ##
=======================================
  Coverage   71.14%   71.14%           
=======================================
  Files         162      162           
  Lines       54366    54366           
=======================================
  Hits        38679    38679           
  Misses      15687    15687           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/204?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/204/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9iYXNpYy5weQ==) | `89.73% <ø> (ø)` | |

twiecki(2020-12-01 19:55:58):Thanks @MarcoGorelli!
codecov[bot](2020-12-02 01:29:50):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/206?src=pr&el=h1) Report
> Merging [#206](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/206?src=pr&el=desc) (d2517a4) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/d660ea780d3d92725609cdb4906351c63fb7ec20?el=desc) (d660ea7) will **increase** coverage by `0.02%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/206/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/206?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #206      +/-   ##
==========================================
+ Coverage   71.14%   71.17%   +0.02%     
==========================================
  Files         162      162              
  Lines       54366    54366              
==========================================
+ Hits        38679    38695      +16     
+ Misses      15687    15671      -16     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/206?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/configdefaults.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/206/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ2RlZmF1bHRzLnB5) | `68.98% <100.00%> (+2.85%)` | :arrow_up: |

brandonwillard(2020-12-02 02:57:28):`is_same_graph` is now in `theano.gof.toolbox`.
codecov[bot](2020-12-02 03:27:02):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207?src=pr&el=h1) Report
> Merging [#207](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207?src=pr&el=desc) (66db206) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/d660ea780d3d92725609cdb4906351c63fb7ec20?el=desc) (d660ea7) will **increase** coverage by `0.34%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #207      +/-   ##
==========================================
+ Coverage   71.14%   71.49%   +0.34%     
==========================================
  Files         162      162              
  Lines       54366    55055     +689     
==========================================
+ Hits        38679    39361     +682     
- Misses      15687    15694       +7     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/gpuarray/fft.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2ZmdC5weQ==) | `22.09% <0.00%> (-0.25%)` | :arrow_down: |
| [theano/tensor/xlogx.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci94bG9neC5weQ==) | `100.00% <0.00%> (ø)` | |
| [theano/typed\_list/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207/diff?src=pr&el=tree#diff-dGhlYW5vL3R5cGVkX2xpc3Qvb3B0LnB5) | `100.00% <0.00%> (ø)` | |
| [theano/gpuarray/kernel\_codegen.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2tlcm5lbF9jb2RlZ2VuLnB5) | `0.00% <0.00%> (ø)` | |
| [theano/scan/op.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vb3AucHk=) | `88.64% <0.00%> (+<0.01%)` | :arrow_up: |
| [theano/gradient.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207/diff?src=pr&el=tree#diff-dGhlYW5vL2dyYWRpZW50LnB5) | `89.02% <0.00%> (+0.01%)` | :arrow_up: |
| [theano/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9lbGVtd2lzZS5weQ==) | `93.57% <0.00%> (+0.02%)` | :arrow_up: |
| [theano/compile/ops.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvb3BzLnB5) | `90.68% <0.00%> (+0.02%)` | :arrow_up: |
| [theano/scalar/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYWxhci9iYXNpYy5weQ==) | `84.32% <0.00%> (+0.02%)` | :arrow_up: |
| [theano/scan/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vb3B0LnB5) | `85.57% <0.00%> (+0.02%)` | :arrow_up: |
| ... and [50 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/207/diff?src=pr&el=tree-more) | |

canyon289(2020-12-02 03:27:44):Thanks @brandonwillard, things seem to be working here. Ill figure out whats going on in ArviZ. Much appreciated
codecov[bot](2020-12-04 16:54:28):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/208?src=pr&el=h1) Report
> Merging [#208](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/208?src=pr&el=desc) (9ff9afe) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/3aa092fb665d923d36ed377246012705f85cf95f?el=desc) (3aa092f) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/208/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/208?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #208   +/-   ##
=======================================
  Coverage   71.23%   71.23%           
=======================================
  Files         158      158           
  Lines       54339    54339           
=======================================
  Hits        38708    38708           
  Misses      15631    15631           
```



MarcoGorelli(2020-12-05 11:41:22):I've updated to use `fail-fast: true`, and to only exclude error F811 for `theano/gof/unify.py` (it seems that `flake8` honours `per-file-ignores` when running on a per-file basis, so no need for special-casing files in the pre-commit config file :tada: )

Anyway, no hard feelings if you don't want this :smile: I didn't intend to be disruptive, feel free to close if it's not welcome
MarcoGorelli(2020-12-05 11:59:58):e.g. currently, one set of tests has failed, and it's blocked all the others:

![image](https://user-images.githubusercontent.com/33491632/101241813-6259c280-36f1-11eb-920e-0c0c67e3070b.png)

brandonwillard(2020-12-05 19:42:19):Agh, looks like there might've been an update to `jax` that now raises an error instead of a warning.
brandonwillard(2020-12-05 19:57:08):That failure will be fixed after merging #212, so you'll just need to rebase onto `upstream/master` (please, no merge commits in feature branches/PRs) once that's in.
brandonwillard(2020-12-05 20:46:02):> Anyway, no hard feelings if you don't want this  I didn't intend to be disruptive, feel free to close if it's not welcome

No, there's nothing disruptive about it; I'm just extra cautious about adding new tooling that introduces more work down the line.  It seems like this change could speed up our code quality/formatting checks, and I'm all for that&mdash;as long as it doesn't make it needlessly difficult to adjust our quality/formatting checks in the future, of course.


OK, I've merged the JAX fix, so you can rebase now.
MarcoGorelli(2020-12-06 10:11:25):Cool, thanks - I've rebased into a single commit
MarcoGorelli(2020-12-04 16:02:30):unify_walk is redefined loads of time
brandonwillard(2020-12-04 17:06:12):Wouldn't this prevent the style checks from necessarily occurring before the tests?  If so, we don't want to change that.
brandonwillard(2020-12-04 17:10:39):This looks like something that should be in the `flake8` settings in `setup.cfg`.  

Note: the `theano.gof.unify` module itself is set to be removed as part of our refactoring.
MarcoGorelli(2020-12-04 17:34:28):they'll occur in a different github actions job, pre-commit will run in this one https://github.com/pymc-devs/Theano-PyMC/pull/208/checks?check_run_id=1499947599
MarcoGorelli(2020-12-04 17:35:48):`exclude` in `setup.cfg` only has an effect if you run `flake8` on a directory though (see https://github.com/pre-commit/pre-commit/issues/1723) so it needs to be set here, at least until it's removed as part of the refactoring
MarcoGorelli(2020-12-04 17:36:35):see the checks below: 
![image](https://user-images.githubusercontent.com/33491632/101195385-3f7ad000-3657-11eb-8b2c-ea69e673a89e.png)

---

it's much faster to use the pre-commit action directly, devs will get faster feedback this way

brandonwillard(2020-12-04 17:45:41):Yeah, we want the style checks to run first&mdash;and in the same workflow&mdash;so that they can short-circuit the tests that follow.  

It might even be better to end the entire workflow after a single failure within the matrix-generated tests, but, at the very least, we want to preserve the existing style check short-circuiting.
MarcoGorelli(2020-12-04 17:54:35):Sure, thanks for explaining :+1: 

OK, I've made it so the pre-commit checks are run before the tests and as part of the same job

> end the entire workflow after a single failure within the matrix-generated tests

I would've thought that that would happen already, given that the tests are being run with `-x` - is that not what you're seeing?
brandonwillard(2020-12-04 20:05:28):No, a single matrix-generated test run will fast-fail, but one such failure will not stop the other matrix-generated test runs.
brandonwillard(2020-12-04 20:09:25):After having looked at that issue, it seems like the complete answer is that `pre-commit` has chosen not to implement functionality that could make use of the `exclude` information from `setup.cfg` (or perhaps anywhere else).  The result is that _`pre-config`_ is too simple and will only apply `flake8` to each file individually unless you use its configuration parameters.

The real problem is that `pre-commit` is taking over the responsibility of executing `flake8` over directories/multiple-files from `flake8` itself, but it's not honoring the settings that `flake8` accepts when it performs this task&mdash;even when the settings are exactly the same between the two (e.g. `exclude` in `setup.cfg` has literally the same meaning and purpose as `exclude` in `.pre-commit-config.yaml`).

Regardless, the result is that one has to maintain both a new tool&mdash;with its own peculiarities&mdash;_and_ the same setting(s) in two different places, which is never good.
MarcoGorelli(2020-12-05 10:58:32):It _is_ possible to get it to respect `setup.cfg` by using `pass_filenames: false`. Then it'll work the same as if you just ran `flake8` locally, and `setup.cfg` will be respected. I can do that if you want, I just usually prefer to have it run on each file changed individually so that when I make a commit, it'll only run on the files I've staged and so it'll be really fast and I'll get faster feedback.

> Regardless, the result is that one has to maintain both a new tool—with its own peculiarities—and the same setting(s) in two different places, which is never good.

Or alternatively, you could run linters/formatters via pre-commit exclusively and then only need to put settings in one place. But if we use `pass_filenames: false` as above, then that won't be necessary - shall I change it to that then?
MarcoGorelli(2020-12-05 11:34:29):@brandonwillard I've just noticed that you have
```
    strategy:
      fail-fast: false
```
wouldn't you want to set that to `fail-fast: true` if you want a single failing test run to stop other matrix-generated test runs?
brandonwillard(2020-12-05 19:38:27):> Then it'll work the same as if you just ran `flake8` locally, and `setup.cfg` will be respected.

That seems hardly worth the change to `pre-commit` in the first place, no?

> it'll only run on the files I've staged and so it'll be really fast and I'll get faster feedback.

As long as the upkeep cost isn't greater than this benefit, I'm fine with it.

brandonwillard(2020-12-05 19:39:32):Yeah, that sounds like the setting we might want to change.
brandonwillard(2020-12-05 19:31:04):Looks like you also found something I left out of the workflow config!
codecov[bot](2020-12-05 20:39:38):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/212?src=pr&el=h1) Report
> Merging [#212](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/212?src=pr&el=desc) (4338ad5) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/4669be82a00da3bd78f6683c066c3e0073eecb52?el=desc) (4669be8) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/212/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/212?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #212   +/-   ##
=======================================
  Coverage   71.23%   71.23%           
=======================================
  Files         158      158           
  Lines       54339    54339           
=======================================
  Hits        38708    38708           
  Misses      15631    15631           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/212?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/sandbox/jaxify.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/212/diff?src=pr&el=tree#diff-dGhlYW5vL3NhbmRib3gvamF4aWZ5LnB5) | `92.37% <100.00%> (ø)` | |

codecov[bot](2020-12-05 21:30:53):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/213?src=pr&el=h1) Report
> Merging [#213](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/213?src=pr&el=desc) (7ed4fa1) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/20194cfced0745d72f2a0789140161ef6b3fe5a0?el=desc) (20194cf) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/213/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/213?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #213   +/-   ##
=======================================
  Coverage   71.23%   71.23%           
=======================================
  Files         158      158           
  Lines       54339    54339           
=======================================
  Hits        38708    38708           
  Misses      15631    15631           
```



codecov[bot](2020-12-07 12:12:10):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214?src=pr&el=h1) Report
> Merging [#214](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214?src=pr&el=desc) (505988e) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/8e3e8399d8cff138666c695179f22d7c875d2f10?el=desc) (8e3e839) will **increase** coverage by `0.02%`.
> The diff coverage is `82.44%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #214      +/-   ##
==========================================
+ Coverage   71.23%   71.26%   +0.02%     
==========================================
  Files         158      158              
  Lines       54339    54367      +28     
==========================================
+ Hits        38708    38743      +35     
+ Misses      15631    15624       -7     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/scalar/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYWxhci9iYXNpYy5weQ==) | `84.29% <12.76%> (ø)` | |
| [theano/tensor/subtensor.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `90.80% <40.00%> (ø)` | |
| [theano/gof/type.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi90eXBlLnB5) | `79.75% <50.00%> (ø)` | |
| [theano/gof/vm.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi92bS5weQ==) | `89.11% <50.00%> (ø)` | |
| [theano/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9lbGVtd2lzZS5weQ==) | `93.54% <87.50%> (-0.01%)` | :arrow_down: |
| [theano/compile/function/types.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `84.69% <88.88%> (-0.21%)` | :arrow_down: |
| [theano/configparser.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ3BhcnNlci5weQ==) | `90.47% <90.57%> (+4.63%)` | :arrow_up: |
| [theano/configdefaults.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ2RlZmF1bHRzLnB5) | `71.90% <99.28%> (-0.14%)` | :arrow_down: |
| [theano/compile/builders.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `79.94% <100.00%> (ø)` | |
| [theano/compile/debugmode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `66.72% <100.00%> (ø)` | |
| ... and [5 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/214/diff?src=pr&el=tree-more) | |

michaelosthege(2020-12-07 12:24:52):ToDo:
+ [x] ~don't set `ConfigParam.doc` and `ConfigParam.in_c_key` and other attributes from the `.add` method, but instead pass them directly to the `ConfigParam.__init__`~ Turns out this makes for ugly signatures for all the derived types.
+ [x] go through the `TODO` comments
+ [x] move `config` instance over to `configdefaults` (The code in `configparser` is very generalized!) --> The main instance is still in `configparser`, but accessing it through `configparser.config` now raises a `DeprecationWarning`.
+ [x] investigate/test what happens when configvars are accessed through an instance of `TheanoConfigParser` that they were not registered with

@brandonwillard see the above - let me know if you have thoughts on it
brandonwillard(2020-12-07 15:19:15):That all sounds great!  

Whenever possible, take note of whatever it would take to make all the options changeable at runtime.  That's a real shortcoming that we should look into addressing sometime soon, especially since it would help us simplify testing (e.g. make tests that explicitly target `floatX` values, so we can reduce needless test duplication).
michaelosthege(2020-12-08 18:43:13):@brandonwillard If the pipeline goes ✔️ , I'm done with the ToDos for this PR.
I modified some of them along the way.
We could also take the opportunity to rename the config hashing/printing methods?

With this PR merged, we should create the following issues for removing the deprecated features:
+ **Move `config` instance from `configparser` to `configdefaults`**: All access to the `config` should go through `theano.config` which is the same as `theano.configdefaults.config`.
+ **Remove backwards compatibility of dot-based config access**: The original Theano config supported dot-based section hierarchy. This was replaced with double underscores for better code maintainability.

And the issues should be added to a milestone such that they must be resolved before the big `2.0` release.
brandonwillard(2020-12-09 05:40:30):I restructured the commits slightly and added more `theano.config` reference updates.  I also realized [why those `KeyErrors` are showing up](https://github.com/michaelosthege/Theano-PyMC/blob/objectify-config/theano/configparser.py#L198).  

The underlying `ConfigParser` only takes string values and conversion functions.  We can make a sentinel function and use that as an "unspecified" config value, then follow up later by adding a real (string-based) value.
michaelosthege(2020-12-09 08:01:13):OK, I don't know how to download these changes back to my computer.
But I don't think there is anything left to do either.
codecov[bot](2020-12-08 04:25:20):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/217?src=pr&el=h1) Report
> Merging [#217](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/217?src=pr&el=desc) (b134b80) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/ca215a2d5bf6c43cd87fe6836669ad056079d1f1?el=desc) (ca215a2) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/217/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/217?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #217      +/-   ##
==========================================
+ Coverage   71.26%   71.27%   +0.01%     
==========================================
  Files         158      158              
  Lines       54376    54351      -25     
==========================================
- Hits        38752    38741      -11     
+ Misses      15624    15610      -14     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/217?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/configdefaults.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/217/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ2RlZmF1bHRzLnB5) | `71.85% <ø> (-0.06%)` | :arrow_down: |
| [theano/tensor/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/217/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9iYXNpYy5weQ==) | `89.84% <ø> (+0.13%)` | :arrow_up: |
| [theano/scalar/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/217/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYWxhci9iYXNpYy5weQ==) | `84.58% <100.00%> (+0.29%)` | :arrow_up: |

twiecki(2020-12-14 09:43:37):Thanks everyone!
brandonwillard(2020-12-14 16:57:55):This PR doesn't appear to have been rebased; it added a merge commit instead.  As a general rule, we don't want merge commits in feature/PR branches (especially not from the main branch).
LegrandNico(2020-12-14 19:55:33):Sorry, I thought this was also working. Do you want me to do a proper rebase before we merge?
brandonwillard(2020-12-14 20:01:25):No problem, it's already merged and nothing is broken.  We just don't want a complicated and difficult-to-use (e.g. revert, bisect, etc.) Git history, so we should always rebase onto `origin/master`&mdash;instead of adding merge commits&mdash;before merging into `master`.
michaelosthege(2020-12-08 10:57:50):comment still references the removed config setting - does it need to be updated?
michaelosthege(2020-12-08 11:03:02):Can one of the old tests be used to cover this?
brandonwillard(2020-12-08 20:17:02):Yes, the comment needs to be removed.
brandonwillard(2020-12-08 20:20:43):~What exactly is `__intdiv__`?  Shouldn't this actually be `__div__`?  If not, where's the `__div__` implementation?~
I remember now: `__div__` is the old dunder method; we should only have a `__truediv__` now.  Once that's in place, [these tests](https://github.com/pymc-devs/Theano-PyMC/blob/8e3e8399d8cff138666c695179f22d7c875d2f10/tests/scalar/test_type.py#L16) should cover all cases.
dfm(2020-12-08 17:01:28):There is actually some subtlety with how the Theano op handles broadcasting so let me figure that out.
dfm(2020-12-08 19:03:24):Alright - I think this is good to go. I'm a bit surprised that I needed different einsums depending on the shape, but I couldn't find one that worked for all permutations of the allowed shapes (I thought `"n...j,nj...->n..."` would, but it doesn't work for `a.ndim==3 and b.ndim==3`).
codecov[bot](2020-12-08 19:05:47):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/218?src=pr&el=h1) Report
> Merging [#218](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/218?src=pr&el=desc) (abde1a1) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/b0b34b592ebd41176bd03f54b3561772803939a4?el=desc) (b0b34b5) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/218/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/218?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #218   +/-   ##
=======================================
  Coverage   71.26%   71.26%           
=======================================
  Files         158      158           
  Lines       54367    54376    +9     
=======================================
+ Hits        38743    38752    +9     
  Misses      15624    15624           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/218?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/sandbox/jaxify.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/218/diff?src=pr&el=tree#diff-dGhlYW5vL3NhbmRib3gvamF4aWZ5LnB5) | `92.51% <100.00%> (+0.14%)` | :arrow_up: |

junpenglao(2020-12-09 09:55:45):> Alright - I think this is good to go. I'm a bit surprised that I needed different einsums depending on the shape, but I couldn't find one that worked for all permutations of the allowed shapes (I thought "n...j,nj...->n..." would, but it doesn't work for a.ndim==3 and b.ndim==3).

Me too. Seems that batch_dot behavior in theano is somewhat poorly defined!
dfm(2020-12-12 14:34:30):Rebased and squashed! 🚀 
brandonwillard(2020-12-08 20:34:25):All these tests are only hitting one of two independent branch paths in `jax_funcify_BatchedDot`.  Unless we're unsure about the functionality of `jnp.einsum` over time, we don't want to add tests for it; otherwise, our already slow test suite will get much, much slower.
dfm(2020-12-08 20:55:32):Fair - I removed two of these permutations.
codecov[bot](2020-12-12 17:04:15):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/219?src=pr&el=h1) Report
> Merging [#219](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/219?src=pr&el=desc) (88668ac) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/2601e7acf8442422cab19db5bd029a5581f0bdec?el=desc) (2601e7a) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/219/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/219?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #219   +/-   ##
=======================================
  Coverage   71.52%   71.52%           
=======================================
  Files         162      163    +1     
  Lines       54628    54629    +1     
=======================================
+ Hits        39073    39074    +1     
  Misses      15555    15555           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/219?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/219/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `92.51% <ø> (ø)` | |
| [theano/compile/mode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/219/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvbW9kZS5weQ==) | `87.95% <100.00%> (ø)` | |
| [theano/link/jax/\_\_init\_\_.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/219/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvamF4L19faW5pdF9fLnB5) | `100.00% <100.00%> (ø)` | |
| [theano/link/jax/jax\_linker.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/219/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvamF4L2pheF9saW5rZXIucHk=) | `79.72% <100.00%> (ø)` | |

brandonwillard(2020-12-12 20:49:36):> * `theano.gof.link` IMHO the `gof` module is already too big and should instead focus on graph stuff(?)

Couldn't agree more!
twiecki(2020-12-12 18:23:13):why not `.linker`?
michaelosthege(2020-12-12 19:06:56):had this first, but then I noticed that the `compile` module is also the imperative 🤓
codecov[bot](2020-12-14 15:25:54):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/221?src=pr&el=h1) Report
> Merging [#221](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/221?src=pr&el=desc) (159c997) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/819122e66bcd089b2a3f472542800feead0bf755?el=desc) (819122e) will **decrease** coverage by `0.00%`.
> The diff coverage is `49.65%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/221/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/221?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #221      +/-   ##
==========================================
- Coverage   71.52%   71.52%   -0.01%     
==========================================
  Files         163      162       -1     
  Lines       54629    54584      -45     
==========================================
- Hits        39074    39040      -34     
+ Misses      15555    15544      -11     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/221?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/misc/elemwise\_openmp\_speedup.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/221/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvZWxlbXdpc2Vfb3Blbm1wX3NwZWVkdXAucHk=) | `0.00% <0.00%> (ø)` | |
| [theano/gof/cmodule.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/221/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9jbW9kdWxlLnB5) | `56.63% <49.29%> (-1.29%)` | :arrow_down: |
| [theano/configparser.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/221/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ3BhcnNlci5weQ==) | `90.21% <66.66%> (-0.26%)` | :arrow_down: |
| [theano/configdefaults.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/221/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ2RlZmF1bHRzLnB5) | `80.04% <100.00%> (+8.19%)` | :arrow_up: |

michaelosthege(2020-12-14 16:12:40):@twiecki I'm not done yet 😂
I move some more config registration such that `configdefaults` doesn't import `gof`.
dfm(2020-12-14 18:31:16):@michaelosthege: Is it worth fixing #127 here too? Otherwise, I'll plan on doing it after this gets merged.
michaelosthege(2020-12-14 18:32:25):@dfm I'm on Windows and don't have a Mac, so I don't think I can help with #127 here.
dfm(2020-12-14 18:33:29):@michaelosthege: OK - no worries. I'm going to wait until you're finished since #127 requires adding a new default to the config.
codecov[bot](2020-12-16 18:12:42):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227?src=pr&el=h1) Report
> Merging [#227](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227?src=pr&el=desc) (1e94648) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/91ffe60b15de8515788a83f0190e90b7feae6612?el=desc) (91ffe60) will **decrease** coverage by `0.00%`.
> The diff coverage is `97.90%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #227      +/-   ##
==========================================
- Coverage   71.74%   71.74%   -0.01%     
==========================================
  Files         166      166              
  Lines       54593    54547      -46     
==========================================
- Hits        39170    39134      -36     
+ Misses      15423    15413      -10     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/compile/profiling.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `78.93% <ø> (ø)` | |
| [theano/gpuarray/dnn\_opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2Rubl9vcHQucHk=) | `19.12% <0.00%> (ø)` | |
| [theano/gpuarray/elemwise.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2VsZW13aXNlLnB5) | `12.78% <0.00%> (ø)` | |
| [theano/gpuarray/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L29wdC5weQ==) | `25.98% <ø> (ø)` | |
| [theano/tensor/opt\_uncanonicalize.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHRfdW5jYW5vbmljYWxpemUucHk=) | `99.15% <ø> (ø)` | |
| [theano/tensor/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9iYXNpYy5weQ==) | `89.77% <98.44%> (+0.06%)` | :arrow_up: |
| [theano/scalar/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYWxhci9iYXNpYy5weQ==) | `84.65% <100.00%> (+0.02%)` | :arrow_up: |
| [theano/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9lbGVtd2lzZS5weQ==) | `93.71% <100.00%> (+0.13%)` | :arrow_up: |
| [theano/tensor/inplace.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <100.00%> (+2.02%)` | :arrow_up: |
| [theano/tensor/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/227/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHQucHk=) | `90.41% <100.00%> (ø)` | |

michaelosthege(2020-12-16 21:49:08):Changing the imports is just code style. Renaming the Ops is a different level.
Do you want to rename the Ops, or just change the import style? (From #55 I understood it was about a real rename.)

Personally, I strongly dislike import aliasing, because it can be really confusing. (Yes, I don't even alias `pandas`, `numpy` or `pyplot`.)
In this PR it also made refactoring unnecessarily hard. In one instance `theano.scalar` was aliased as `ts` and in many others as `scal` 😬

My preferred code style would be `from theano import scalar` without aliasing anything.

michaelosthege(2020-12-26 08:28:24):@brandonwillard (how) do we want to move forward with this? 
brandonwillard(2021-01-02 23:25:46):OK, I've rebased and refactored some of the utility functions that were duplicated between `theano.tensor` and `theano.scalar` (e.g. the `_scal_elemwise` decorator).
twiecki(2020-12-26 09:55:39):TIL
codecov[bot](2020-12-17 00:05:10):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228?src=pr&el=h1) Report
> Merging [#228](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228?src=pr&el=desc) (fb6b862) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/9f7cf7d09fb2139ba15a06e385dae50527614f83?el=desc) (9f7cf7d) will **increase** coverage by `0.10%`.
> The diff coverage is `73.50%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #228      +/-   ##
==========================================
+ Coverage   71.52%   71.62%   +0.10%     
==========================================
  Files         162      165       +3     
  Lines       54584    54614      +30     
==========================================
+ Hits        39040    39119      +79     
+ Misses      15544    15495      -49     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9lbGVtd2lzZS5weQ==) | `93.54% <0.00%> (ø)` | |
| [theano/gpuarray/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L29wdC5weQ==) | `25.93% <50.00%> (+0.05%)` | :arrow_up: |
| [theano/link/utils.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvdXRpbHMucHk=) | `51.65% <51.65%> (ø)` | |
| [theano/gof/op.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9vcC5weQ==) | `80.33% <66.66%> (-0.22%)` | :arrow_down: |
| [theano/compile/monitormode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvbW9uaXRvcm1vZGUucHk=) | `76.74% <71.42%> (-0.76%)` | :arrow_down: |
| [theano/link/vm.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvdm0ucHk=) | `90.00% <75.00%> (ø)` | |
| [theano/scan/op.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vb3AucHk=) | `88.66% <75.00%> (+0.02%)` | :arrow_up: |
| [theano/link/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYmFzaWMucHk=) | `89.65% <89.65%> (ø)` | |
| [theano/link/c/cvm.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYy9jdm0ucHk=) | `93.75% <93.75%> (ø)` | |
| [theano/link/c/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYy9iYXNpYy5weQ==) | `92.32% <95.83%> (ø)` | |
| ... and [24 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/228/diff?src=pr&el=tree-more) | |

michaelosthege(2020-12-17 23:28:52):I moved some exception traceback printing functions to `theano.link.debugging`. But I'm not satisfied with that result:

* `raise_with_op` knows about `FunctionGraph` and should therefore be able to import it (✔️ )
* The logic in `__log_thunk_trace` depends on attributes that are monkey-patched onto exception traces by the `CLinker` (😬)

`raise_with_op` is used by other linkers and also `Scan`-related stuff. I guess it should stay in the `link` module then.

After writing this, I think `__log_thunk_trace` should move to `cc.py` where the monkey-patch is done.
And `set_excepthook` can be generalized even further and live in the `utils`, because it just depends on the standard library.

### TODO
+ [x] generalize `set_exceptionhook` to `utils.add_excepthook`
+ [ ] ~move `__log_thunk_trace` close to `CLinker`~ it's even closer related to `raise_with_op`
+ [x] move `raise_with_op` into `theano.link.utils` together with the functions from `theano.link.basic`
twiecki(2020-12-22 09:41:20):Nice! Does this necessitate any changes in PyMC3?
michaelosthege(2020-12-22 09:43:26):> Nice! Does this necessitate any changes in PyMC3?

I don't think so. But I also don't know every corner of the PyMC3 codebase..
If, then only minor changes, because this PR was mostly just moving stuff around.
codecov[bot](2020-12-20 15:49:18):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/232?src=pr&el=h1) Report
> Merging [#232](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/232?src=pr&el=desc) (f4356a1) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/1bf5212047a8b9c3f43e184e91d5ed494381536b?el=desc) (1bf5212) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/232/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/232?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #232   +/-   ##
=======================================
  Coverage   71.66%   71.67%           
=======================================
  Files         166      166           
  Lines       54761    54755    -6     
=======================================
+ Hits        39244    39245    +1     
+ Misses      15517    15510    -7     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/232?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/compile/debugmode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/232/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `67.94% <100.00%> (+0.37%)` | :arrow_up: |
| [theano/tensor/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/232/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHQucHk=) | `90.41% <100.00%> (+<0.01%)` | :arrow_up: |

brandonwillard(2020-12-21 01:21:08):It looks like we already have an implementation of just such a log filter in [`theano.compile.debugmode`](https://github.com/pymc-devs/Theano-PyMC/blob/9f7cf7d09fb2139ba15a06e385dae50527614f83/theano/compile/debugmode.py#L40), so we could generalize that a little, move it to `theano.utils`, and reuse it here.
michaelosthege(2020-12-27 10:59:08):@rpgoldman what's the state of this PR? We want to get a release going for PyMC3 and this one is relevant
twiecki(2020-12-27 11:00:05):I think this PR needs to change to use a log-filter as requested by @brandonwillard.
rpgoldman(2020-12-27 14:26:04):I have a draft of a new version using log filters. Haven’t had time to add tests, but hope to push it soon.
michaelosthege(2020-12-31 15:06:27):@rpgoldman I rebased your branch. The code style should now be fixed too.
Hope this works.
michaelosthege(2021-01-02 10:31:24):This PR is looking really good. Personally I don't think that the assert is a problem or that it should block this from moving forward.
I would like to help, but I tried to rebase this branch already yesterday and failed.

We need to change something to prevent situations like this (PR blocked because of git history). Our git history commits are not flying to the Moon.
rpgoldman(2021-01-02 17:51:37):Fixed @brandonwillard 's issue, rebased, and force-pushed. Should be good to go.
brandonwillard(2021-01-02 19:10:27):I just squashed and fixed the style issues.
brandonwillard(2021-01-02 00:06:47):Why was this added?
rpgoldman(2021-01-02 00:34:42):I put it in to make mypy happy, to support my claim that `id_str` was a string, IIRC. 
brandonwillard(2021-01-02 02:59:57):Don't worry about `mypy` results; this project doesn't officially support type checking, yet.

Regardless, we need to remove this before we can merge.
rpgoldman(2021-01-02 17:37:53):Hi @brandonwillard -- I'm ok with doing this, but I wonder why you are so firm about it needing to be removed.  Is there some design or style criterion this violates?

I checked, and there are a bunch of uses of `assert` in `debugmode.py`, so it can't be just a general prohibition.

At any rate, a simple tweak should fix this problem, and I will make it now.

rpgoldman(2021-01-02 17:45:24):By the way, in connection with this question, anyone know what the heck the `get_printed` argument is for?  Happy to add doc for this to the PR if someone provides an answer.

Actually, AFAICT this function is never called with `get_printed` set explicitly. Can we cut it?
brandonwillard(2021-01-02 18:52:22):I'm not familiar enough with this function to know whether or not that `assert` is valid.  For instance, it might be acceptable for `id_str` to be `None`, or perhaps we could be more explicit and avoid an `assert` altogether with an `else` statement that sets `id_str = ""`.  Plus, it's almost always better to raise a more informative `Exception` when/if you expect an expression to be violated.  (Personally, I think the former would be ideal.)

Since this change isn't blocking the PR, it's hard to justify walking through `debugmode.py`'s logic in order to answer these questions.  Also, even if the tests currently pass with this `assert`, I don't believe we're using `debugmode` much at all, so it might not actually be getting the coverage it needs.

Regarding `mypy`, can't you set `id_str: Optional[Text]`?  That would allow `id_str` to be `None`&mdash;according to `mypy`, at least.

codecov[bot](2020-12-20 23:31:33):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236?src=pr&el=h1) Report
> Merging [#236](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236?src=pr&el=desc) (d2b74d4) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/cd98c61a0aa6f4d901d538016edc6128406657bb?el=desc) (cd98c61) will **increase** coverage by `0.01%`.
> The diff coverage is `91.02%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #236      +/-   ##
==========================================
+ Coverage   71.63%   71.64%   +0.01%     
==========================================
  Files         165      166       +1     
  Lines       54619    54667      +48     
==========================================
+ Hits        39124    39165      +41     
- Misses      15495    15502       +7     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/gof/graph.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9ncmFwaC5weQ==) | `91.14% <ø> (ø)` | |
| [theano/link/c/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYy9iYXNpYy5weQ==) | `92.50% <ø> (+0.17%)` | :arrow_up: |
| [theano/misc/doubleop.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvZG91Ymxlb3AucHk=) | `0.00% <0.00%> (ø)` | |
| [theano/raise\_op.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236/diff?src=pr&el=tree#diff-dGhlYW5vL3JhaXNlX29wLnB5) | `0.00% <0.00%> (ø)` | |
| [theano/gpuarray/linalg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2xpbmFsZy5weQ==) | `22.65% <28.57%> (ø)` | |
| [theano/gpuarray/ctc.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2N0Yy5weQ==) | `36.26% <50.00%> (ø)` | |
| [theano/tensor/nnet/ctc.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubmV0L2N0Yy5weQ==) | `45.23% <55.55%> (+0.88%)` | :arrow_up: |
| [theano/gpuarray/dnn.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2Rubi5weQ==) | `23.33% <72.72%> (+0.09%)` | :arrow_up: |
| [theano/sandbox/minimal.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236/diff?src=pr&el=tree#diff-dGhlYW5vL3NhbmRib3gvbWluaW1hbC5weQ==) | `68.75% <80.00%> (+4.46%)` | :arrow_up: |
| [theano/gpuarray/elemwise.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2VsZW13aXNlLnB5) | `12.78% <83.33%> (+0.19%)` | :arrow_up: |
| ... and [46 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/236/diff?src=pr&el=tree-more) | |

brandonwillard(2020-12-23 23:26:09):FYI: The failure is due to a `Scan` latency test.  It's my impression that something isn't using the C compiled code and that's causing it to be slower than the pure Python implementation and, thus, fail the test.
michaelosthege(2020-12-25 12:16:20):@brandonwillard I'm looking into it. A first clue could be that the coverage of `lazylinker_c.py` went down by a suspicious 43 %.
brandonwillard(2020-12-25 14:40:44):This is yet another example of how badly we need good, direct tests.  That, along with ordered tests, would more clearly tell us what exactly has failed/changed.
brandonwillard(2020-12-27 19:43:51):FYI: The last commit should've been squashed into the commit before it, since it was simply a change missed by its parent commit.  When we don't squash these "fix" commits, we create unnecessary dependencies between commits.  

More specifically, the `Op`-to-`COp` changes actually exist across _two_ commits&mdash;which is also not obvious or consistent given their descriptions alone&mdash;so anyone attempting to revert/move/cherry pick/etc. will have to know this somehow (or learn it the hard way).
codecov[bot](2020-12-25 08:02:22):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/239?src=pr&el=h1) Report
> Merging [#239](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/239?src=pr&el=desc) (3f82302) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/b666bdbb35aec21ac83936bfc91c573ef5ccf741?el=desc) (b666bdb) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/239/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/239?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #239   +/-   ##
=======================================
  Coverage   71.62%   71.63%           
=======================================
  Files         165      165           
  Lines       54614    54619    +5     
=======================================
+ Hits        39119    39124    +5     
  Misses      15495    15495           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/239?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/239/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `92.59% <100.00%> (+0.07%)` | :arrow_up: |

twiecki(2020-12-25 10:31:45):Thanks @kyleabeauchamp, looks good, just needs a test.
kyleabeauchamp(2020-12-25 16:34:13):I added a test by copy-pasting some similar coverage, let me know if that looks legit.
ionuttamas(2020-12-26 23:00:00):Failing unit tests, fail both on master as well as on this branch:

![image](https://user-images.githubusercontent.com/5080185/103160508-054eab00-478b-11eb-88f7-1bbf41f98f89.png)
 
michaelosthege(2020-12-27 15:35:47):Hi @ionuttamas ,
Try to rebase your branch on latest master. Our tests should be working fine - however I typically run them with `pytest tests/ -v -s` directly from the command line.

When it comes to kicking things from the main `__init__` we should take out even more: All of the linkers, but also things like `_as_array`, `object` and `object2`, `SymbolicInput/SymbolicOutput`...
ionuttamas(2020-12-28 09:14:44):> Hi @ionuttamas ,
> Try to rebase your branch on latest master. Our tests should be working fine - however I typically run them with `pytest tests/ -v -s` directly from the command line.
> 
> When it comes to kicking things from the main `__init__` we should take out even more: All of the linkers, but also things like `_as_array`, `object` and `object2`, `SymbolicInput/SymbolicOutput`...

@michaelosthege
The failing tests are (I think) a problem on my machine, as running the latest master still makes them fail (and the same 7 tests always fail).
I am using Windows Subsystem for Linux that may cause some incompatibilities (I get: "ImportError: /home/iotama/.theano/compiledir_Linux-4.19-microsoft-standard-x86_64-with-glibc2.29-x86_64-3.8.5-64/tmp2avx4e28/ma62c58fa0e1eb04ad8e5318ad85066e7fb0233a39b4c6dd1c4d0270ae55fcede.so: undefined symbol: dgemm_
../theano/link/c/cmodule.py:297: ImportError").

I have also removed the above mentioned dependencies (_asarray, object2, as_op SymbolicInput/SymbolicOutput). 

I do get these steps failures **due to code styles** (and I'm not very sure what I'm missing here ...):

- Tests / Check code style (pull_request)
- Tests / All tests (pull_request)
 

michaelosthege(2020-12-28 11:34:58):> > Hi @ionuttamas ,
> > Try to rebase your branch on latest master. Our tests should be working fine - however I typically run them with `pytest tests/ -v -s` directly from the command line.
> > When it comes to kicking things from the main `__init__` we should take out even more: All of the linkers, but also things like `_as_array`, `object` and `object2`, `SymbolicInput/SymbolicOutput`...
> 
> @michaelosthege
> The failing tests are (I think) a problem on my machine, as running the latest master still makes them fail (and the same 7 tests always fail).
> I am using Windows Subsystem for Linux that may cause some incompatibilities (I get: "ImportError: /home/iotama/.theano/compiledir_Linux-4.19-microsoft-standard-x86_64-with-glibc2.29-x86_64-3.8.5-64/tmp2avx4e28/ma62c58fa0e1eb04ad8e5318ad85066e7fb0233a39b4c6dd1c4d0270ae55fcede.so: undefined symbol: dgemm_
> ../theano/link/c/cmodule.py:297: ImportError").
> 
> I have also removed the above mentioned dependencies (_asarray, object2, as_op SymbolicInput/SymbolicOutput).
> 
> I do get these steps failures **due to code styles** (and I'm not very sure what I'm missing here ...):
> 
> * Tests / Check code style (pull_request)
> * Tests / All tests (pull_request)

For the code style stuff you can set up pre-commit as described in https://github.com/pymc-devs/pymc3/wiki/PyMC3-Python-Code-Style
If you have the repo on another drive than C:\ you might run into a problem. In this case just create a `precommit.bat` file with the following content and run it manually before committing:

```
black theano/ tests/
isort theano/ tests/
flake8 theano/ tests/
```

I don't run it with the WSL, but I can imagine that it might give some problems. But everything also works fine on Windows also without WSL.
You can peek some conda install commands from https://gist.github.com/michaelosthege/b95d57ae8817eb1cfd19aa30beac2da6
codecov[bot](2020-12-28 23:54:20):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241?src=pr&el=h1) Report
> Merging [#241](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241?src=pr&el=desc) (64ea080) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/ba10a0fe9e611a5663dc2ba3528d51c0c1acd3a2?el=desc) (ba10a0f) will **increase** coverage by `0.00%`.
> The diff coverage is `90.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #241   +/-   ##
=======================================
  Coverage   71.64%   71.65%           
=======================================
  Files         166      166           
  Lines       54673    54687   +14     
=======================================
+ Hits        39171    39185   +14     
  Misses      15502    15502           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/misc/safe\_asarray.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2Mvc2FmZV9hc2FycmF5LnB5) | `69.23% <ø> (ø)` | |
| [theano/tensor/nnet/sigm.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubmV0L3NpZ20ucHk=) | `77.31% <ø> (ø)` | |
| [theano/gpuarray/type.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L3R5cGUucHk=) | `30.38% <50.00%> (+0.19%)` | :arrow_up: |
| [theano/sparse/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241/diff?src=pr&el=tree#diff-dGhlYW5vL3NwYXJzZS9vcHQucHk=) | `82.97% <50.00%> (+0.03%)` | :arrow_up: |
| [theano/tensor/type.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci90eXBlLnB5) | `91.91% <83.33%> (+0.03%)` | :arrow_up: |
| [theano/tensor/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9iYXNpYy5weQ==) | `89.70% <85.71%> (+<0.01%)` | :arrow_up: |
| [theano/sparse/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241/diff?src=pr&el=tree#diff-dGhlYW5vL3NwYXJzZS9iYXNpYy5weQ==) | `88.86% <91.66%> (+<0.01%)` | :arrow_up: |
| [theano/compile/ops.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvb3BzLnB5) | `90.48% <100.00%> (+0.02%)` | :arrow_up: |
| [theano/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9lbGVtd2lzZS5weQ==) | `93.56% <100.00%> (+<0.01%)` | :arrow_up: |
| [theano/tensor/extra\_ops.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9leHRyYV9vcHMucHk=) | `93.17% <100.00%> (+0.01%)` | :arrow_up: |
| ... and [6 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/241/diff?src=pr&el=tree-more) | |

ionuttamas(2020-12-29 06:56:08):@michaelosthege some progress seem to be made, but getting stuck at figuring out: 
 - codecov/patch: Failing after 1s — 90.90% of diff hit (target 100.00%)   

Is this due to low unit tests code coverage?
michaelosthege(2020-12-29 13:41:22):> @michaelosthege some progress seem to be made, but getting stuck at figuring out:
> 
> * codecov/patch: Failing after 1s — 90.90% of diff hit (target 100.00%)
> 
> Is this due to low unit tests code coverage?

Yes, it's due to low general coverage.
But your PR is more of a refactor and does not add new code, so this is fine.
I think after another rebase on latest master, and ideally also combining the two commits into one, we're ready to merge.
michaelosthege(2020-12-30 12:16:26):Looks like I don't have the permission to merge unless the coverage check is also green.
twiecki(2020-12-30 14:05:16):Thanks @ionuttamas!
twiecki(2020-12-26 09:54:45):```suggestion
```
twiecki(2020-12-26 15:19:11):Thanks for jumping on this so quickly. Can we add a test here that tests pickelability?
codecov[bot](2020-12-26 16:09:31):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/242?src=pr&el=h1) Report
> Merging [#242](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/242?src=pr&el=desc) (c795136) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/cd98c61a0aa6f4d901d538016edc6128406657bb?el=desc) (cd98c61) will **increase** coverage by `0.00%`.
> The diff coverage is `71.76%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/242/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/242?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #242   +/-   ##
=======================================
  Coverage   71.63%   71.63%           
=======================================
  Files         165      165           
  Lines       54619    54627    +8     
=======================================
+ Hits        39124    39132    +8     
  Misses      15495    15495           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/242?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/configdefaults.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/242/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ2RlZmF1bHRzLnB5) | `80.39% <69.23%> (+0.34%)` | :arrow_up: |
| [theano/link/c/cmodule.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/242/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYy9jbW9kdWxlLnB5) | `56.63% <100.00%> (ø)` | |
| [theano/tensor/extra\_ops.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/242/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9leHRyYV9vcHMucHk=) | `93.14% <100.00%> (+0.01%)` | :arrow_up: |

twiecki(2020-12-27 10:20:44):Thanks @michaelosthege! Should cut a new release.
brandonwillard(2020-12-27 19:58:35):Unit tests that only test for "non-failures" aren't complete tests.  We already have too many of these in the test suite (see #16) and, since they don't actually confirm the expected results, they've allowed numerous bugs to slip through the tests unnoticed.

As a rule of thumb, a test should at least `assert` something about the expected output.  In this case, after `pickle`ing, it should un`pickle` the `pickle`d result and `assert` the presence/value of any properties that required special `pickle`ing steps.

We need to follow this up with a more complete test.  Unfortunately, that will be harder to do after closing this PR.
codecov[bot](2020-12-27 16:27:29):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244?src=pr&el=h1) Report
> Merging [#244](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244?src=pr&el=desc) (5cd30d2) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/ba10a0fe9e611a5663dc2ba3528d51c0c1acd3a2?el=desc) (ba10a0f) will **increase** coverage by `0.01%`.
> The diff coverage is `78.46%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #244      +/-   ##
==========================================
+ Coverage   71.64%   71.65%   +0.01%     
==========================================
  Files         166      166              
  Lines       54673    54708      +35     
==========================================
+ Hits        39171    39203      +32     
- Misses      15502    15505       +3     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/gof/compiledir.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9jb21waWxlZGlyLnB5) | `0.00% <0.00%> (ø)` | |
| [theano/misc/burn\_gpu.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvYnVybl9ncHUucHk=) | `0.00% <0.00%> (ø)` | |
| [theano/misc/check\_blas.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvY2hlY2tfYmxhcy5weQ==) | `0.00% <0.00%> (ø)` | |
| [theano/misc/check\_duplicate\_key.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvY2hlY2tfZHVwbGljYXRlX2tleS5weQ==) | `0.00% <0.00%> (ø)` | |
| [theano/misc/elemwise\_openmp\_speedup.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvZWxlbXdpc2Vfb3Blbm1wX3NwZWVkdXAucHk=) | `0.00% <0.00%> (ø)` | |
| [theano/misc/elemwise\_time\_test.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvZWxlbXdpc2VfdGltZV90ZXN0LnB5) | `0.00% <0.00%> (ø)` | |
| [theano/scalar/basic\_scipy.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYWxhci9iYXNpY19zY2lweS5weQ==) | `64.52% <11.11%> (ø)` | |
| [theano/gof/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9vcHQucHk=) | `68.08% <33.33%> (ø)` | |
| [theano/tensor/elemwise\_cgen.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9lbGVtd2lzZV9jZ2VuLnB5) | `97.15% <33.33%> (ø)` | |
| [theano/gpuarray/dnn.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2Rubi5weQ==) | `23.33% <50.00%> (ø)` | |
| ... and [63 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/244/diff?src=pr&el=tree-more) | |

michaelosthege(2020-12-30 18:12:48):Thanks! 
brandonwillard(2020-12-27 20:01:58):We don't need to use the "WIP" prefix; instead, make the PR a draft PR.
codecov[bot](2020-12-27 20:41:43):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/245?src=pr&el=h1) Report
> Merging [#245](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/245?src=pr&el=desc) (8e1cec0) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/1bf5212047a8b9c3f43e184e91d5ed494381536b?el=desc) (1bf5212) will **increase** coverage by `0.07%`.
> The diff coverage is `89.71%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/245/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/245?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #245      +/-   ##
==========================================
+ Coverage   71.66%   71.73%   +0.07%     
==========================================
  Files         166      166              
  Lines       54761    54599     -162     
==========================================
- Hits        39244    39169      -75     
+ Misses      15517    15430      -87     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/245?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/compile/compiledir.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/245/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvY29tcGlsZWRpci5weQ==) | `0.00% <0.00%> (ø)` | |
| [theano/link/c/cmodule.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/245/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYy9jbW9kdWxlLnB5) | `56.42% <58.33%> (-0.09%)` | :arrow_down: |
| [theano/link/c/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/245/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYy9iYXNpYy5weQ==) | `92.74% <86.11%> (+0.21%)` | :arrow_up: |
| [theano/compile/compilelock.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/245/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvY29tcGlsZWxvY2sucHk=) | `100.00% <100.00%> (ø)` | |
| [theano/compile/function/types.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/245/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `84.73% <100.00%> (-0.02%)` | :arrow_down: |
| [theano/link/c/cutils.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/245/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYy9jdXRpbHMucHk=) | `79.54% <100.00%> (-0.89%)` | :arrow_down: |
| [theano/link/c/lazylinker\_c.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/245/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYy9sYXp5bGlua2VyX2MucHk=) | `76.92% <100.00%> (-0.50%)` | :arrow_down: |
| [theano/scan/scan\_perform\_ext.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/245/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vc2Nhbl9wZXJmb3JtX2V4dC5weQ==) | `82.71% <100.00%> (-0.42%)` | :arrow_down: |

michaelosthege(2020-12-28 22:30:02):I added the new dependency to `requirements.txt`. I do not currently understand why the "Build source distribution" test fails.

But apart from adding tests (I'm open to suggestions*) this is ready for review.

*What should we test that is not already the job of `filelock`, but may be specific to Theano?
**I'm using `FileLock` and `SoftFileLock` at the same time, because we may need to consider multi-host situations and crashing processes at the same time.
michaelosthege(2020-12-29 13:31:41):The test (only on linux) found that a fork shares the lock with the parent process.
`filelock` allows nested locking and it looks like a `fork` falls into that pattern.

What exactly do we want here?
twiecki(2021-01-01 10:20:16):Seems like we only need to resolve conflicts and can then merge :+1:.
michaelosthege(2021-01-01 11:51:08):@brandonwillard ~⚠️ ⚠️ I tried to rebase, but messed up. Something was not up to date and I replaced your latest changes from yesterday.⚠️ ⚠️~
~Please just force-push your changes again.~

Maybe I did not mess up _that_ much. The changes actually look fine. But I don't understand why it shows only me as the author.
And the rebase is still not done.
michaelosthege(2021-01-02 10:35:04):This PR needs attention by someone else.

I tried to rebase it but failed and frankly I don't want to invest more time this week into rewriting git history.
brandonwillard(2021-01-02 18:53:39):I just rebased and resolved the conflicts; if this passes, we can merge.
brandonwillard(2020-12-28 23:00:05):The main reason for changing the lock mechanism is to make it work across processes.  It looks like this approach requires shared memory, which is the same shortcoming as the current approach.

What I think we need is a [`fcntl`](https://docs.python.org/3/library/fcntl.html)-like approach that works for all filesystems.
michaelosthege(2020-12-28 23:08:50):Correct me if I'm wrong, but [`filelock`](https://github.com/benediktschmitt/py-filelock) does NOT require shared memory.

Quoting the readme:
> Use the FileLock if all instances of your application are running on the same host and a SoftFileLock otherwise.

The dict in line 20 is just to save time on the creation of the `FileLock` object. The state of the lock is based just on the file on disk.
brandonwillard(2020-12-28 23:49:31):Yes, that looks correct.
brandonwillard(2020-12-28 23:52:02):I don't think we need to use _both_ `FileLock` and `SoftFileLock`; it looks like [`filelock` chooses the appropriate one itself](https://github.com/benediktschmitt/py-filelock/blob/b30bdc4fb998f5f4350257235eb51147f9e81862/filelock.py#L448) on module load.
michaelosthege(2020-12-29 11:25:01):Right, well spotted!
codecov[bot](2020-12-28 06:08:00):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/246?src=pr&el=h1) Report
> Merging [#246](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/246?src=pr&el=desc) (6af55bd) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/d26a64fcfb4aa56fcc0492577bcefa7453b60d88?el=desc) (d26a64f) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/246/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/246?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #246      +/-   ##
==========================================
- Coverage   71.64%   71.64%   -0.01%     
==========================================
  Files         166      166              
  Lines       54675    54673       -2     
==========================================
- Hits        39173    39171       -2     
  Misses      15502    15502              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/246?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/246/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `92.56% <100.00%> (-0.04%)` | :arrow_down: |

michaelosthege(2020-12-28 15:09:15):@canyon289 I think you're absolutely right. Are there more instances of `@dispatch` around?
canyon289(2020-12-28 17:10:28):I dont see any
canyon289(2020-12-28 17:20:48):No write access on my end so I cant merge. Someone else feel free to do so
twiecki(2020-12-29 08:59:28):Thanks @canyon289!
twiecki(2020-12-29 08:50:17):This is great - thanks @canyon289! I think the explanation of what each line in the test does could help.
canyon289(2020-12-29 15:21:40):Thanks for feedback, will make edits in next ~16 hours
canyon289(2020-12-30 05:44:23):Added more comments. The last remaining question I have from my end is should we call things Theano-PyMC or Aesara in the doc? I'm inclined to write Aesara so we don't have to change it later. Happy to take opinions as always
twiecki(2020-12-30 15:00:18):Agree with naming it Aesara.
canyon289(2020-12-30 22:36:49):Should the .txt be formatted as rst file? Looking at others it seems like thats the case, but not so secretly hoping I dont have to deal with rst
brandonwillard(2020-12-30 22:38:42):Yes, I believe those files are supposed to be reStructuredText.  We should probably create a ticket for renaming them to `.rst`. 
canyon289(2020-12-30 22:40:09):This is larger than this pr but could we also, not use rst or transition to markdown, or myst markdown or something? Would this be something open for discussion?
brandonwillard(2020-12-30 22:53:51):I don't want to instigate any potentially large efforts to convert the existing RST documents into a new form of Markdown, at least not without some major benefits that outweigh the cost of learning a well established syntax like RST.  The same goes for inviting a patchwork of syntaxes by adding support for a new one; that only increases the maintenance burden.
canyon289(2020-12-30 23:03:11):Sounds good. Ill get this changed over "sometime soon" to rst. Thanks for the review
twiecki(2020-12-31 08:26:59):@canyon289 I think there are tools to easily convert ipynbs to rst.
codecov[bot](2020-12-30 20:48:38):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250?src=pr&el=h1) Report
> Merging [#250](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250?src=pr&el=desc) (2a85b08) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/860dbfd56435df980acf6d61441bc30c10f2fa00?el=desc) (860dbfd) will **increase** coverage by `0.00%`.
> The diff coverage is `90.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #250   +/-   ##
=======================================
  Coverage   71.65%   71.66%           
=======================================
  Files         166      166           
  Lines       54708    54720   +12     
=======================================
+ Hits        39203    39215   +12     
  Misses      15505    15505           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/misc/safe\_asarray.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2Mvc2FmZV9hc2FycmF5LnB5) | `69.23% <ø> (ø)` | |
| [theano/tensor/nnet/sigm.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubmV0L3NpZ20ucHk=) | `77.37% <ø> (ø)` | |
| [theano/gpuarray/type.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L3R5cGUucHk=) | `30.38% <50.00%> (+0.19%)` | :arrow_up: |
| [theano/sparse/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250/diff?src=pr&el=tree#diff-dGhlYW5vL3NwYXJzZS9vcHQucHk=) | `83.01% <50.00%> (+0.03%)` | :arrow_up: |
| [theano/tensor/type.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci90eXBlLnB5) | `91.91% <83.33%> (+0.03%)` | :arrow_up: |
| [theano/tensor/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9iYXNpYy5weQ==) | `89.70% <85.71%> (+<0.01%)` | :arrow_up: |
| [theano/sparse/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250/diff?src=pr&el=tree#diff-dGhlYW5vL3NwYXJzZS9iYXNpYy5weQ==) | `88.86% <91.66%> (+<0.01%)` | :arrow_up: |
| [theano/compile/ops.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvb3BzLnB5) | `90.48% <100.00%> (+0.02%)` | :arrow_up: |
| [theano/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9lbGVtd2lzZS5weQ==) | `93.57% <100.00%> (+<0.01%)` | :arrow_up: |
| [theano/tensor/extra\_ops.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9leHRyYV9vcHMucHk=) | `93.17% <100.00%> (+0.01%)` | :arrow_up: |
| ... and [5 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/250/diff?src=pr&el=tree-more) | |

codecov[bot](2020-12-31 00:17:12):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/251?src=pr&el=h1) Report
> Merging [#251](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/251?src=pr&el=desc) (8225e69) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/2a022eebbd40b8e2f6375576171028b3ad5f7229?el=desc) (2a022ee) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/251/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/251?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #251   +/-   ##
=======================================
  Coverage   71.66%   71.66%           
=======================================
  Files         166      166           
  Lines       54720    54720           
=======================================
  Hits        39215    39215           
  Misses      15505    15505           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/251?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/251/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |

kyleabeauchamp(2020-12-31 01:39:54):Minor nit: the PR description doesn't mention anything about the changes to speed tests and timeit, might be good to explain those changes as well.
kyleabeauchamp(2020-12-31 01:41:15):The non-speedtest changes look reasonable to me
codecov[bot](2020-12-31 02:17:07):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/252?src=pr&el=h1) Report
> Merging [#252](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/252?src=pr&el=desc) (fd92df3) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/2a022eebbd40b8e2f6375576171028b3ad5f7229?el=desc) (2a022ee) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/252/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/252?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #252   +/-   ##
=======================================
  Coverage   71.66%   71.66%           
=======================================
  Files         166      166           
  Lines       54720    54722    +2     
=======================================
+ Hits        39215    39217    +2     
  Misses      15505    15505           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/252?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/252/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |
| [theano/tensor/random/op.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/252/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9yYW5kb20vb3AucHk=) | `99.40% <100.00%> (+<0.01%)` | :arrow_up: |

brandonwillard(2020-12-31 04:07:04):> Minor nit: the PR description doesn't mention anything about the changes to speed tests and timeit, might be good to explain those changes as well.

The `scan` timing test changes are not PR-defining functional changes, and, since those changes are simple and adequately described by the corresponding commit description, there's really no need to duplicate that information in the PR description.

If you want to know exactly why the change was made, it was prompted by what appears to be an intermittent failure in one of the early CI test runs of this PR.  Those tests were already known to perform extremely inconsistent single-run `time.time` comparisons, so I replaced the use of `time.time` with `timeit`, which should produce a more consistent result.  Everything else is cosmetic (e.g. unused code is commented-out, unnecessary print statements are removed, etc.)
canyon289(2021-01-04 15:57:01):Where do we stand on this? At this point I need to rebase, but any further edits needed before I do so?
twiecki(2021-01-04 19:53:40):Thanks @canyon289!
twiecki(2021-01-01 10:21:37):```suggestion
Tutorial on adding JAX Ops to Aesara
```
codecov[bot](2021-01-01 03:38:28):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/254?src=pr&el=h1) Report
> Merging [#254](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/254?src=pr&el=desc) (b09f9ed) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/bdb0533396eb3a9255b1a90bfdbf413c7f91643d?el=desc) (bdb0533) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/254/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/254?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #254   +/-   ##
=======================================
  Coverage   71.66%   71.66%           
=======================================
  Files         166      166           
  Lines       54722    54726    +4     
=======================================
+ Hits        39217    39221    +4     
  Misses      15505    15505           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/254?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/link/vm.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/254/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvdm0ucHk=) | `90.07% <100.00%> (+0.07%)` | :arrow_up: |

codecov[bot](2021-01-01 02:50:41):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255?src=pr&el=h1) Report
> Merging [#255](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255?src=pr&el=desc) (ec7e6b7) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/bdb0533396eb3a9255b1a90bfdbf413c7f91643d?el=desc) (bdb0533) will **decrease** coverage by `0.00%`.
> The diff coverage is `75.56%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #255      +/-   ##
==========================================
- Coverage   71.66%   71.66%   -0.01%     
==========================================
  Files         166      166              
  Lines       54722    54757      +35     
==========================================
+ Hits        39217    39240      +23     
- Misses      15505    15517      +12     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/gof/compiledir.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9jb21waWxlZGlyLnB5) | `0.00% <0.00%> (ø)` | |
| [theano/gof/unify.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi91bmlmeS5weQ==) | `44.53% <49.18%> (+4.74%)` | :arrow_up: |
| [theano/link/jax/jax\_linker.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvamF4L2pheF9saW5rZXIucHk=) | `80.00% <50.00%> (ø)` | |
| [theano/link/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYmFzaWMucHk=) | `89.65% <66.66%> (-0.06%)` | :arrow_down: |
| [theano/scalar/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYWxhci9iYXNpYy5weQ==) | `84.63% <74.07%> (+0.01%)` | :arrow_up: |
| [theano/compile/debugmode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `67.56% <85.71%> (+0.02%)` | :arrow_up: |
| [theano/link/c/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYy9iYXNpYy5weQ==) | `92.53% <97.29%> (+0.03%)` | :arrow_up: |
| [theano/configparser.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ3BhcnNlci5weQ==) | `90.03% <100.00%> (-0.19%)` | :arrow_down: |
| [theano/gof/fg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9mZy5weQ==) | `92.72% <100.00%> (ø)` | |
| [theano/gof/graph.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9ncmFwaC5weQ==) | `91.14% <100.00%> (ø)` | |
| ... and [14 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/255/diff?src=pr&el=tree-more) | |

codecov[bot](2021-01-01 06:19:37):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256?src=pr&el=h1) Report
> Merging [#256](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256?src=pr&el=desc) (e88e448) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/08c63f710b0aea22cc1dd532282209073c115057?el=desc) (08c63f7) will **decrease** coverage by `0.08%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #256      +/-   ##
==========================================
- Coverage   71.74%   71.66%   -0.09%     
==========================================
  Files         166      166              
  Lines       54529    54761     +232     
==========================================
+ Hits        39124    39244     +120     
- Misses      15405    15517     +112     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/link/c/cmodule.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYy9jbW9kdWxlLnB5) | `56.51% <100.00%> (+0.08%)` | :arrow_up: |
| [theano/tensor/inplace.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9pbnBsYWNlLnB5) | `97.97% <0.00%> (-2.03%)` | :arrow_down: |
| [theano/d3viz/formatting.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256/diff?src=pr&el=tree#diff-dGhlYW5vL2Qzdml6L2Zvcm1hdHRpbmcucHk=) | `12.37% <0.00%> (-0.90%)` | :arrow_down: |
| [theano/gof/graph.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9ncmFwaC5weQ==) | `91.14% <0.00%> (-0.81%)` | :arrow_down: |
| [theano/compile/debugmode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `67.56% <0.00%> (-0.38%)` | :arrow_down: |
| [theano/tensor/nnet/sigm.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubmV0L3NpZ20ucHk=) | `77.37% <0.00%> (-0.25%)` | :arrow_down: |
| [theano/link/c/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYy9iYXNpYy5weQ==) | `92.53% <0.00%> (-0.22%)` | :arrow_down: |
| [theano/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9lbGVtd2lzZS5weQ==) | `93.57% <0.00%> (-0.14%)` | :arrow_down: |
| [theano/tensor/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9iYXNpYy5weQ==) | `89.70% <0.00%> (-0.07%)` | :arrow_down: |
| [theano/scan/op.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vb3AucHk=) | `88.66% <0.00%> (-0.04%)` | :arrow_down: |
| ... and [15 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/256/diff?src=pr&el=tree-more) | |

twiecki(2021-01-01 10:15:24):@CloudChaoszero Thanks, this looks good! Any reason we shouldn't merge?
michaelosthege(2021-01-01 10:19:39):> @CloudChaoszero Thanks, this looks good! Any reason we shouldn't merge?

I'm just on my phone right now, but it looks like this might be related to a bug in specific sphinx versions. We should adhere to the numpy doc style exactly. That means a space to the left AND right of the colon.

Also we need to squash some of the commits. 
michaelosthege(2021-01-01 11:05:04):@CloudChaoszero @twiecki The colon thing sounds very much like this issue: https://github.com/readthedocs/sphinx_rtd_theme/issues/766
The changes to the doc index are ok, but the spaces must be kept.
CloudChaoszero(2021-01-01 11:15:05):@michaelosthege Ah, thanks for finding that! It's actually helpful to see there is something outside of what I thought was the issue. 

Hmm, so just proceeding with the Numpy style & adding the new index is good for now?

I can try to add a 
`html4_writer=True` in the `conf.py` to see if that resolves the spacing issue. 

(Thanks @twiecki  for the review :D )
michaelosthege(2021-01-01 11:22:09):@CloudChaoszero try to update your Sphinx and `sphinx_rtd_theme` versions.
Then you should be able to undo the changes on the spaces..
CloudChaoszero(2021-01-01 11:43:03):Gotcha @michaelosthege . Hmm, I installed `sphinx-rtd-theme 0.5.0`, and got the same results. 

I suppose adding this for now is good, but does not clear up the original issue that is in PyMC3 docs. Hmm. 🤷 

_____

~Sorry @brandonwillard  lol just accidentally override your commit! I can add it again, if needed.~ 🙏 
Update: Just found out I rebased/rewind to far away.
MarcoGorelli(2021-01-01 12:25:14):Seems related to https://github.com/pymc-devs/pymc3/issues/4284

When discussed, we said it should be possible to fixup PyMC3's own doc style theme so that it displays parameters and types properly when using the numpy doc style (space before and after the colon)
CloudChaoszero(2021-01-02 04:25:12):@MarcoGorelli  @michaelosthege  Ah,okay. Hmm, Would it be best to just close the PR now, since it's out of scope?

Happy to close it.
michaelosthege(2021-01-02 10:37:49):@CloudChaoszero now it has one commit that does something very specific in the docs. I think you can simply change the title of the PR and then it's fine
CloudChaoszero(2021-01-02 10:46:27):Sounds great @michaelosthege. Let me know if you need anything else updated on this PR.
CloudChaoszero(2021-01-08 09:57:18):> Hi @CloudChaoszero,
> Sorry that I only request this now - one nitpick plus one (important) question about the `html4_writer` setting..

@michaelosthege No worries! I went ahead and added the context and spacing.
michaelosthege(2021-01-08 13:42:49):Damn, I clicked the wrong button.
michaelosthege(2021-01-08 13:49:09):@CloudChaoszero sorry, I tried to undo my merge commit & rebase, but managed to undo your commit too. This is the second time I messed up a rebase this year 😐
~Please force-push your branch again.~ I managed to fix it but couldn't push to your branch again (maybe because the PR is closed?). I opened #266 with the fixed commit.
michaelosthege(2021-01-04 18:48:43):Equal sign needs spaces around..

Also, can you add a comment to explain why you need it to change to the html4 writer instead of using the default? (https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-html4_writer)
CloudChaoszero(2021-01-08 09:56:43):Sounds great, acknowledged! :D 
codecov[bot](2021-01-03 05:21:32):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259?src=pr&el=h1) Report
> Merging [#259](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259?src=pr&el=desc) (8488dad) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/88dfd88f6737c0074019e2fe88e52849287a3974?el=desc) (88dfd88) will **increase** coverage by `0.00%`.
> The diff coverage is `90.08%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #259   +/-   ##
=======================================
  Coverage   71.74%   71.74%           
=======================================
  Files         166      166           
  Lines       54547    54534   -13     
=======================================
- Hits        39134    39128    -6     
+ Misses      15413    15406    -7     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/printing.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259/diff?src=pr&el=tree#diff-dGhlYW5vL3ByaW50aW5nLnB5) | `43.00% <0.00%> (ø)` | |
| [theano/d3viz/formatting.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259/diff?src=pr&el=tree#diff-dGhlYW5vL2Qzdml6L2Zvcm1hdHRpbmcucHk=) | `13.26% <30.00%> (+0.89%)` | :arrow_up: |
| [theano/gof/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9vcHQucHk=) | `68.12% <50.00%> (+0.02%)` | :arrow_up: |
| [theano/scan/op.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259/diff?src=pr&el=tree#diff-dGhlYW5vL3NjYW4vb3AucHk=) | `88.69% <91.66%> (+0.03%)` | :arrow_up: |
| [theano/gof/graph.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9ncmFwaC5weQ==) | `91.94% <98.59%> (+0.80%)` | :arrow_up: |
| [theano/compile/debugmode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `67.94% <100.00%> (ø)` | |
| [theano/compile/function/types.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `84.73% <100.00%> (ø)` | |
| [theano/gof/fg.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi9mZy5weQ==) | `92.72% <100.00%> (ø)` | |
| [theano/gof/toolbox.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259/diff?src=pr&el=tree#diff-dGhlYW5vL2dvZi90b29sYm94LnB5) | `80.41% <100.00%> (ø)` | |
| [theano/link/c/basic.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259/diff?src=pr&el=tree#diff-dGhlYW5vL2xpbmsvYy9iYXNpYy5weQ==) | `92.74% <100.00%> (ø)` | |
| ... and [2 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/259/diff?src=pr&el=tree-more) | |

twiecki(2021-01-03 10:04:15):This looks like a much better design choice that should make chaining more intuitive.
brandonwillard(2021-01-03 20:49:14):> This looks like a much better design choice that should make chaining more intuitive.

More importantly, it cuts short a lot of `x in ...` graph searches, which saves us time and effort.
codecov[bot](2021-01-03 21:53:15):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261?src=pr&el=h1) Report
> Merging [#261](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261?src=pr&el=desc) (d766d0e) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/1bf5212047a8b9c3f43e184e91d5ed494381536b?el=desc) (1bf5212) will **increase** coverage by `0.03%`.
> The diff coverage is `86.40%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #261      +/-   ##
==========================================
+ Coverage   71.66%   71.69%   +0.03%     
==========================================
  Files         166      166              
  Lines       54761    54458     -303     
==========================================
- Hits        39244    39045     -199     
+ Misses      15517    15413     -104     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/compile/compiledir.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvY29tcGlsZWRpci5weQ==) | `0.00% <0.00%> (ø)` | |
| [theano/configdefaults.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ2RlZmF1bHRzLnB5) | `80.14% <ø> (-0.25%)` | :arrow_down: |
| [theano/graph/unify.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261/diff?src=pr&el=tree#diff-dGhlYW5vL2dyYXBoL3VuaWZ5LnB5) | `44.53% <ø> (ø)` | |
| [theano/misc/doubleop.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvZG91Ymxlb3AucHk=) | `0.00% <0.00%> (ø)` | |
| [theano/misc/pkl\_utils.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261/diff?src=pr&el=tree#diff-dGhlYW5vL21pc2MvcGtsX3V0aWxzLnB5) | `76.19% <0.00%> (ø)` | |
| [theano/raise\_op.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261/diff?src=pr&el=tree#diff-dGhlYW5vL3JhaXNlX29wLnB5) | `0.00% <0.00%> (ø)` | |
| [theano/sandbox/fourier.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261/diff?src=pr&el=tree#diff-dGhlYW5vL3NhbmRib3gvZm91cmllci5weQ==) | `0.00% <0.00%> (ø)` | |
| [theano/tensor/blas.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ibGFzLnB5) | `86.61% <ø> (+0.01%)` | :arrow_up: |
| [theano/tensor/blas\_c.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ibGFzX2MucHk=) | `91.76% <ø> (ø)` | |
| [theano/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9lbGVtd2lzZS5weQ==) | `93.71% <ø> (+0.13%)` | :arrow_up: |
| ... and [133 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/261/diff?src=pr&el=tree-more) | |

twiecki(2021-01-09 12:08:56):Agree, this looks really great. For your consideration:
Rename `basic` to `core` and `fg` to `function` (so that it's `graph.function.FunctionGraph`. Not super excited about them but tossing them out in case you like them better.
brandonwillard(2021-01-09 18:31:40):> I also tend to use "core" submodules, but this codebase uses "basic" in so many places that I don't think we should break with that style.

`core` would be better, but, yes, I decided to go with the existing convention.  We can definitely change that though&mdash;although we should do it for all the modules at once.

> I noticed a few string formatting problems in the `__author__` fields. But for the sake of reviewability, I think this should be addressed later on.

We need to completely remove those nonsense dunder fields in the source files.  More specifically, we should move all the `__copyright__`s to the `LICENSE` file&mdash;if they aren't already covered by what's in there.  Otherwise, outside of externally contributed files, authorship is automatically well documented by Git itself, so those `__author__` fields are superfluous.
twiecki(2021-01-09 18:44:47):Let's merge this then. But need to make sure to also fix PyMC3.
michaelosthege(2021-01-04 18:58:40):Unrelated grammar mistake: `an COp` should be `a COp`
michaelosthege(2021-01-04 19:11:40):This reference goes through `theano.*`
michaelosthege(2021-01-04 19:14:35):In numpydoc, there should be a space to both sides of the colon: https://numpydoc.readthedocs.io/en/latest/format.html#class-docstring
twiecki(2021-01-06 22:15:15):```suggestion
   @jax_funcify.register(Eye) # The decorator
```
codecov[bot](2021-01-04 18:18:17):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/262?src=pr&el=h1) Report
> Merging [#262](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/262?src=pr&el=desc) (bc9156d) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/d5f65500a0e68e9047411c00ad05d39b6eaee32c?el=desc) (d5f6550) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/262/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/262?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #262      +/-   ##
==========================================
- Coverage   71.74%   71.74%   -0.01%     
==========================================
  Files         166      166              
  Lines       54534    54529       -5     
==========================================
- Hits        39128    39124       -4     
+ Misses      15406    15405       -1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/262?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/nnet/sigm.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/262/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9ubmV0L3NpZ20ucHk=) | `77.61% <100.00%> (+0.24%)` | :arrow_up: |
| [theano/configdefaults.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/262/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ2RlZmF1bHRzLnB5) | `80.14% <0.00%> (-0.25%)` | :arrow_down: |

twiecki(2021-01-04 19:39:32):> Is there a NumPy/SciPy implementation that satisfies these accuracy concerns?

Certainly not if we want a C Op implementation. Not sure we can avoid that.
ricardoV94(2021-01-04 21:04:32):> Is there a NumPy/SciPy implementation that satisfies these accuracy concerns?

My understanding is that like for the `log1mexp`, there are no specialized implementations in numpy or scipy at the moment. 

The `log1mexp` does not exist as an op right now, and is instead implemented in the pymc math module. Do you see a reason to prefer one of the approaches above the other?


> Also, note that there is a distinct `Op` for an "ultra fast" sigmoid; we could/should do the same for softplus, if we want to introduce alternative formulations for speed.

I think those ultrafast methods provide a trade-off with worse precision. In this case the changed function should be faster but no less precise than using the default `log1p(exp(x))` for the entire real range. Since there is no trade-off in precision it doesn't seem to be worth it to separate it into different ops in this case (for this particular algorithm).

brandonwillard(2021-01-04 22:20:30):> My understanding is that like for the `log1mexp`, there are no specialized implementations in numpy or scipy at the moment.

Yeah, I'm not aware of one for that, but we should first consider use functions like `scipy.special.[logsumexp, softmax]` for their respective `Op`s.

> The `log1mexp` does not exist as an op right now, and is instead implemented in the pymc math module. Do you see a reason to prefer one of the approaches above the other?

I think the current PyMC3 `log1mexp` approach is fine.

We would only want to create a new `Op` to wrap a new SciPy/NumPy function, or to use a very specific C/JAX implementation; otherwise, it's generally better to combine existing "primitive" `Op`s, especially since it allows for more optimizations.  Collapsing multiple `Op`s into a single `Op` can remove the chance to apply some optimizations (e.g. a single rewrite for `x / x -> 1` cannot be applied to an `Op` that represents `lambda x, y: 2 * x / y` when the argument `y = x` is given).

Now, there is one exception to this: we can create specialized `Op`s for compositions of simpler `Op`s and apply those _after_ the "optimizations" in a later "specialization" pass over a graph.  In this case, we probably don't want to advertise direct use of such `Op`s.  Also, these `Op`s obviously need to be accompanied by graph rewrites that apply them; otherwise, they wouldn't be used.



> Since there is no trade-off in precision it doesn't seem to be worth it to separate it into different ops in this case (for this particular algorithm).

Those `Op`s are another type of "specialization".  They can be applied by a user who explicitly wants the performance/precision trade-offs they provide; either through direct use of those `Op`s, or through a choice of broad performance-based optimization settings that automatically apply them (similar to the "specialization" stage).
brandonwillard(2021-01-04 22:27:35):Anyway, I think these changes are probably worth merging, but my primary concern is that we don't unnecessarily add more time to our test suite.  Find a few important points in the domain that confirm your implementation works and provide full coverage; otherwise, we'll have to trust the underlying numerical libraries and the referenced paper for the rest.
ricardoV94(2021-01-05 08:45:31):> Anyway, I think these changes are probably worth merging, but my primary concern is that we don't unnecessarily add more time to our test suite. Find a few important points in the domain that confirm your implementation works and provide full coverage; otherwise, we'll have to trust the underlying numerical libraries and the referenced paper for the rest.

I added what I hope is a lightweight enough test for the critical points of the new algorithm. The precision is set high enough that it would trigger with the previous implementation (64-bit), but not with the current one. 

Given the concern about reducing the speed of the tests, why not cut down the previous test based on the gradient from `[np.random.rand(3, 4)]` to `[np.random.rand(2, 3)]`? Not sure if much time would be saved, but if the test with 12 points has been working for years, maybe it is safe to go with 6 points now.

ricardoV94(2021-01-06 13:23:26):> What are the implications for the `grad` of this `COp`? Does it suffer from the same instabilities?

To be honest I have no idea. Looking at the grad, it seems to rely solely on the `Sigmoid Op`, but other Ops grad may rely on this one.


twiecki(2021-01-06 15:55:06):Thanks @ricardoV94!
brandonwillard(2021-01-04 19:26:45):In this repository, we're moving away from performing wasteful, time consuming, shotgun-like numerical tests, so we need to combine these `verify_grad`s into a single one that explicitly tests only important and/or necessary values.
michaelosthege(2021-01-05 22:26:42):Indentation in this block is off
ricardoV94(2021-01-06 13:19:26):Thanks, fixed
codecov[bot](2021-01-05 22:19:50):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/264?src=pr&el=h1) Report
> Merging [#264](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/264?src=pr&el=desc) (ed1c7d6) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/d5f65500a0e68e9047411c00ad05d39b6eaee32c?el=desc) (d5f6550) will **decrease** coverage by `0.00%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/264/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/264?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #264      +/-   ##
==========================================
- Coverage   71.74%   71.74%   -0.01%     
==========================================
  Files         166      166              
  Lines       54534    54529       -5     
==========================================
- Hits        39128    39123       -5     
  Misses      15406    15406              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/264?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/configdefaults.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/264/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ2RlZmF1bHRzLnB5) | `80.14% <ø> (-0.25%)` | :arrow_down: |

brandonwillard(2021-01-06 01:05:41):The [`conda-forge` repo for `python==3.6.12`](https://anaconda.org/conda-forge/python/files?version=3.6.12) provides both CPython _and_ PyPy implementations (for the same architectures), and, for some reason, `conda`/`mamba` is deciding to use the PyPy versions on later invocations.

We can probably avoid this by specifying the CPython artifacts explicitly.
brandonwillard(2021-01-06 01:24:02):~OK, I tested locally from completely new environments, and it's the `numpy` requirement that switches the `python` dependency to the `pypy` build.~

Update: actually, almost _anything_ installed in a clean environment with only `python==3.6.12=*_cpython` (from `conda-forge`) will try to change `python` to the PyPy build.
codecov[bot](2021-01-06 02:51:15):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/265?src=pr&el=h1) Report
> Merging [#265](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/265?src=pr&el=desc) (7eabab9) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/d5f65500a0e68e9047411c00ad05d39b6eaee32c?el=desc) (d5f6550) will **decrease** coverage by `0.00%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/265/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/265?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #265      +/-   ##
==========================================
- Coverage   71.74%   71.74%   -0.01%     
==========================================
  Files         166      166              
  Lines       54534    54529       -5     
==========================================
- Hits        39128    39123       -5     
  Misses      15406    15406              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/265?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/configdefaults.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/265/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ2RlZmF1bHRzLnB5) | `80.14% <ø> (-0.25%)` | :arrow_down: |

michaelosthege(2021-01-08 16:36:20):@brandonwillard I think the CI is stuck here because there are no code changes.
Unless you object I think we can hit the "Rebase and merge" button.
brandonwillard(2021-01-08 16:39:37):Well, it should definitely have succeeded without code changes.  We might have a CI issue that needs to be fixed.
brandonwillard(2021-01-08 16:47:45):Actually, I just noticed that the `codecov/*` steps are set as requirements in the repo settings, so that's what's causing the checks to "wait" indefinitely.

I just removed those two checks as requirements, so we shouldn't have this problem any longer.  Not sure if that will update this automatically, though.
codecov[bot](2021-01-14 06:46:33):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268?src=pr&el=h1) Report
> Merging [#268](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268?src=pr&el=desc) (321475c) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/ebaad559d6ea4a49fa87123adf50c9aa847ce27a?el=desc) (ebaad55) will **increase** coverage by `0.24%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #268      +/-   ##
==========================================
+ Coverage   71.68%   71.93%   +0.24%     
==========================================
  Files         166      167       +1     
  Lines       54452    54562     +110     
==========================================
+ Hits        39035    39248     +213     
+ Misses      15417    15314     -103     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/assert\_op.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268/diff?src=pr&el=tree#diff-dGhlYW5vL2Fzc2VydF9vcC5weQ==) | `95.83% <ø> (ø)` | |
| [theano/breakpoint.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268/diff?src=pr&el=tree#diff-dGhlYW5vL2JyZWFrcG9pbnQucHk=) | `58.33% <ø> (ø)` | |
| [theano/compile/builders.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `79.94% <ø> (+0.05%)` | :arrow_up: |
| [theano/compile/debugmode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `68.02% <ø> (ø)` | |
| [theano/compile/function/pfunc.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `89.78% <ø> (ø)` | |
| [theano/compile/nanguardmode.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `70.99% <ø> (+0.67%)` | :arrow_up: |
| [theano/compile/ops.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvb3BzLnB5) | `90.57% <ø> (+0.06%)` | :arrow_up: |
| [theano/compile/profiling.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `78.88% <ø> (+0.02%)` | :arrow_up: |
| [theano/configdefaults.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbmZpZ2RlZmF1bHRzLnB5) | `80.14% <ø> (ø)` | |
| [theano/gpuarray/basic\_ops.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268/diff?src=pr&el=tree#diff-dGhlYW5vL2dwdWFycmF5L2Jhc2ljX29wcy5weQ==) | `27.60% <ø> (+0.18%)` | :arrow_up: |
| ... and [169 more](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/268/diff?src=pr&el=tree-more) | |

brandonwillard(2021-01-23 01:06:54):Reminder: after merging this PR, the release should at least be another minor version up.
twiecki(2021-01-23 13:36:47):Will this require PyMC3 changes?
brandonwillard(2021-01-23 17:39:56):> Will this require PyMC3 changes?

It will most likely require some small import and reference name changes.
michaelosthege(2021-01-24 10:00:40):@brandonwillard let us know if there's anything you can be helped with. The task list is really long for a single PR..
brandonwillard(2021-01-27 04:40:06):After this passes, we can merge.
twiecki(2021-01-27 11:05:30):This is a big one!
michaelosthege(2021-01-27 11:43:06):Yes, I just finished reviewing too. Saying I had read every line of the diff would be a lie, but I did read all the commits and checked out diffs here and there.

Great work!
codecov[bot](2021-01-16 02:07:35):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/271?src=pr&el=h1) Report
> Merging [#271](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/271?src=pr&el=desc) (8d18237) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/175e7843fc92648946bfbae3a15a957b0842d9fb?el=desc) (175e784) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/271/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/271?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #271      +/-   ##
==========================================
- Coverage   71.69%   71.69%   -0.01%     
==========================================
  Files         166      166              
  Lines       54458    54449       -9     
==========================================
- Hits        39045    39037       -8     
+ Misses      15413    15412       -1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/271?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/271/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHQucHk=) | `90.43% <100.00%> (+<0.01%)` | :arrow_up: |

LegrandNico(2021-01-18 12:43:33):I am encountering a strange install error with Python 3.6 here.

```
ERROR: Requested black==20.8b1 from https://files.pythonhosted.org/packages/dc/7b/5a6bbe89de849f28d7c109f5ea87b65afa5124ad615f3419e71beb29dc96/black-20.8b1.tar.gz#sha256=1c02557aa099101b9d21496f8a914e9ed2222ef70336404eeeac8edba836fbea (from -r requirements.txt (line 6)) has different version in metadata: '20.8'
```

It does not seem related to the changes I made. All pre-commit hooks and tests for the `link` submodule are passing locally (I am using Python 3.7.6 though).
LegrandNico(2021-01-23 15:13:20):The install error was caused by a broken version of setuptools (see [this issue](https://github.com/psf/black/issues/1933)), this should be fixed now.
codecov[bot](2021-01-23 16:38:50):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/272?src=pr&el=h1) Report
> Merging [#272](https://codecov.io/gh/pymc-devs/aesara/pull/272?src=pr&el=desc) (61c811a) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/0344f1a844731eea980ada631fe180e09f397a51?el=desc) (0344f1a) will **decrease** coverage by `0.00%`.
> The diff coverage is `90.90%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/272/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/272?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #272      +/-   ##
==========================================
- Coverage   71.89%   71.89%   -0.01%     
==========================================
  Files         166      166              
  Lines       54565    54569       +4     
==========================================
+ Hits        39231    39232       +1     
- Misses      15334    15337       +3     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/272?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/link/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/272/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `88.94% <90.90%> (-1.26%)` | :arrow_down: |

LegrandNico(2021-01-26 06:01:03):Code coverage is slightly reduced by this PR because some imports are hidden by a `TYPE_CHECKING` condition. It is important to only call these imports during type checking as they require a circular call to `theano.link.basic` that break package loading otherwise.

To solve this we can:
* Accept the small reduction of code coverage (for now).
* Add mypy to the test suite now. It will not pass at the package level but can run successfully on specific files (e.g. `mypy ./theano/link/basic.py --ignore-missing-imports --follow-imports=skip`, once the "error" l.606 is fixed)
michaelosthege(2021-01-31 10:21:32):@LegrandNico do you need help to rebase this branch?
Other than that, after addressing the review comments above, we could merge this and finally close #229.
Let me know if I should take over.
LegrandNico(2021-01-31 11:43:11):I will work on it today
LegrandNico(2021-02-11 00:23:52):The code coverage is still failing for the reason mentioned in [this comment](https://github.com/pymc-devs/aesara/pull/272#issuecomment-767316311). Otherwise, I think I have made all the changes requested.
brandonwillard(2021-02-11 19:36:04):Looks good to me.  We can squash and merge.

The next step on this path is to add `mypy` to the build/CI process.  @LegrandNico, if you were able to run `mypy` under these changes, we can consider adding whatever settings you used to `setup.cfg` and adding a `pre-commit` hook for `mypy`.  That would at least make these changes "functional" instead of simply "informative".
michaelosthege(2021-01-26 18:13:10):the two above should be `Optional`, no?
michaelosthege(2021-01-26 18:14:06):This should be `-> Linker`
michaelosthege(2021-01-26 18:16:27):This method is designed to be overridden by the subclass - it should probably be an abstractmethod, but maybe we can still keep the annotation?

The annotation here is also the only correct one - other `make_thunk` methods from further down should copy this.
michaelosthege(2021-01-26 18:21:00):I think `output_storage` is a `List`
michaelosthege(2021-01-26 18:21:58):Signature change? Was this done automatically?
michaelosthege(2021-01-26 19:10:22):These are not specific enough
michaelosthege(2021-01-26 19:11:48):Return type is not specific enough
michaelosthege(2021-01-26 19:14:23):Not as precise as the one that was already annotated in the base class
brandonwillard(2021-01-26 23:26:33):This is a compound type that is entirely worth defining as its own type.  I added such definitions [here](https://github.com/brandonwillard/Theano-PyMC/blob/bd5f63ccb76860e707dc2077804a16eaaf75aacc/theano/graph/op.py#L52), but there's probably a better way to do this (e.g. using [`NewType`](https://docs.python.org/3/library/typing.html#newtype)).
brandonwillard(2021-01-26 23:28:40):See the link in [this comment](https://github.com/pymc-devs/Theano-PyMC/pull/272#discussion_r564907981) for more specific type information regarding this case.
brandonwillard(2021-01-26 23:28:53):See the link in [this comment](https://github.com/pymc-devs/Theano-PyMC/pull/272#discussion_r564907981) for more specific type information regarding this case.
brandonwillard(2021-01-26 23:29:14):See the link in [this comment](https://github.com/pymc-devs/Theano-PyMC/pull/272#discussion_r564907981) for more specific type information regarding this case.
LegrandNico(2021-01-31 14:10:42):I have changed these to `Optional`
LegrandNico(2021-01-31 14:11:22):I have changed this to `Linker` and added `from __future__ import annotations` to handle it
LegrandNico(2021-01-31 14:12:32):I have reverted this to `Tuple[Callable[[], NoReturn], List[Container], List[Container]]`
LegrandNico(2021-01-31 14:13:59):Now using `Optional[OutputStorageType] = None` and Optional[StorageMapType] = None.

The new types are defined after imports as:
```python
StorageMapType = Union[
    Dict[Union["TensorVariable", "TensorConstant"], Union[List[None], List[ndarray]]],
    Dict["TensorConstant", List[ndarray]],
]
OutputStorageType = List[Optional[List[Any]]]
```
LegrandNico(2021-01-31 14:16:19):I think I changed this to make it consistent with the function call above requiring `storage_map`.
LegrandNico(2021-01-31 14:17:26):Now pointing to the new type variables:

```python
self,
input_storage: Optional[Any] = None,
output_storage: Optional[OutputStorageType] = None,
storage_map: Optional[StorageMapType] = None,
```
LegrandNico(2021-01-31 14:25:44):Now returning `Tuple[Callable[[], NoReturn], List[Container], List[Container]]`
LegrandNico(2021-01-31 14:28:29):I changed this one to `Tuple[Callable[[], NoReturn], List[Container], List[Container]]` to match the type hints from base class. Should this be defined as its own type too instead?
LegrandNico(2021-01-31 14:32:07):Following the example, the variable type are defined after import as:

```python
StorageMapType = Union[
    Dict[Union["TensorVariable", "TensorConstant"], Union[List[None], List[ndarray]]],
    Dict["TensorConstant", List[ndarray]],
]
OutputStorageType = List[Optional[List[Any]]]
```
LegrandNico(2021-01-31 14:36:55):Actually had to remove this as it is not supported by Python 3.6
brandonwillard(2021-01-31 23:22:51):Yeah, that `StorageMapType` looks more accurate.
brandonwillard(2021-01-31 23:25:29):Actually, I think `StorageMapType` should actually use `Variable` and/or `Constant` instead of the more narrow `TensorVariable` and `TensorConstant` types.
brandonwillard(2021-01-31 23:27:08):It's also possible that `ndarray` isn't the only value type.  There are a few special types for non-`ndarray` types (e.g. `None` and `slice` types).
brandonwillard(2021-01-31 23:29:52):Yeah, a `ThunkType` might be reasonable.
LegrandNico(2021-02-02 22:12:31):I have added `ThunkType` as:

```python
ThunkType = Tuple[Callable[[], NoReturn], List["Container"], List["Container"]]
```

I am a bit unsure concerning `StorageMapType`, I have redefined as:
```python
StorageMapType = Union[
    Dict[Union[Variable, Constant], Union[List[None], List[ndarray], List[slice]]],
    Dict[Constant, Union[List[None], List[ndarray], List[slice]]],
]
```
brandonwillard(2021-02-03 00:51:08):You don't need `Union[Variable, Constant]`, because `Constant` is a `Variable` subclass.

Something like `StorageMapType = Dict[Variable, List[Optional[Union[ndarray, slice]]]]` should suffice for now.
LegrandNico(2021-02-08 05:42:16):Done with `ThunkType = Tuple[Callable[[], NoReturn], List["Container"], List["Container"]]`
LegrandNico(2021-02-08 05:42:26):Done
brandonwillard(2021-02-11 17:26:02):This might warrant a `# pragma: no cover`.  It'll definitely get coverage when we start running `mypy` as part of the `pre-commit` hooks, so it shouldn't be a concern.
brandonwillard(2021-02-11 17:31:55):Do we really need to maintain the type information separately in the docstrings?  It seems like we can get Sphinx to use the type annotations (e.g. [`sphinx-autodoc-typehints`](https://pypi.org/project/sphinx-autodoc-typehints/)).

Regardless, there's no problem with these docstring changes; I just don't want people to feel obligated to continue making them when we can use a more consistent and automated approach.
brandonwillard(2021-02-11 19:31:08):This looks like it could use a name and type of its own.

That change isn't necessary to merge this, but&mdash;given the size of that composite type&mdash;it makes sense.
codecov[bot](2021-01-22 00:31:33):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/277?src=pr&el=h1) Report
> Merging [#277](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/277?src=pr&el=desc) (a2cc80f) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/b379b0f2eb309c8e6e1a081974fd93129a83d354?el=desc) (b379b0f) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/277/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/277?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #277   +/-   ##
=======================================
  Coverage   71.69%   71.69%           
=======================================
  Files         166      166           
  Lines       54449    54450    +1     
=======================================
+ Hits        39037    39038    +1     
  Misses      15412    15412           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/277?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/tensor/opt.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/277/diff?src=pr&el=tree#diff-dGhlYW5vL3RlbnNvci9vcHQucHk=) | `90.43% <100.00%> (+<0.01%)` | :arrow_up: |

brandonwillard(2021-01-22 22:37:24):> Did we just not use `threading.local` correctly?

Yeah, I think we simply missed an important case.
brandonwillard(2021-01-22 22:38:14):If you revert the `local_mem` changes and run that new test, you'll see what I was seeing in Dask.
codecov[bot](2021-01-22 23:14:57):# [Codecov](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/278?src=pr&el=h1) Report
> Merging [#278](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/278?src=pr&el=desc) (a629648) into [master](https://codecov.io/gh/pymc-devs/Theano-PyMC/commit/39af8a86754c3b02a75b6d0bd3102d0f92f4b7f1?el=desc) (39af8a8) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/278/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/278?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #278   +/-   ##
=======================================
  Coverage   71.69%   71.69%           
=======================================
  Files         166      166           
  Lines       54450    54452    +2     
=======================================
+ Hits        39038    39040    +2     
  Misses      15412    15412           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/278?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [theano/compile/compilelock.py](https://codecov.io/gh/pymc-devs/Theano-PyMC/pull/278/diff?src=pr&el=tree#diff-dGhlYW5vL2NvbXBpbGUvY29tcGlsZWxvY2sucHk=) | `100.00% <100.00%> (ø)` | |

canyon289(2021-01-23 23:16:13):Having trouble compiling the docs so I don't know exactly what this looks like when compiled but I think its right
canyon289(2021-01-24 06:16:50):Thank you
brandonwillard(2021-01-24 00:37:50):"...submitted to the project's issue tracker on GitHub: pymc-theano-dev_"

We should also limit the accepted correspondence to questions and bug reports.
canyon289(2021-01-24 04:03:09):Updated
brandonwillard(2021-01-24 04:39:36):```suggestion
be submitted in the form of an issue at pymc-theano-dev_
```
brandonwillard(2021-01-24 05:48:26):```suggestion
Questions and bug reports should
```
hvasbath(2021-01-28 08:51:35):Just out of curiosity and personal interest, what tools do you use to do refactorings/renamings of such huge dimensions?
twiecki(2021-01-28 09:41:33):Well this will be impossible to review, but why 
![image](https://user-images.githubusercontent.com/674200/106119332-5e787880-6155-11eb-8f38-589e95c78426.png)?

dfm(2021-01-28 13:02:48):I set up https://aesara.readthedocs.io, but I don't have permissions to setup the GitHub webhook. If someone else has the permissions and wants to add the hook, I can DM you the URL or add you as an admin on RTDs.
brandonwillard(2021-01-28 16:14:42):> Well this will be impossible to review, but why
> ![image](https://user-images.githubusercontent.com/674200/106119332-5e787880-6155-11eb-8f38-589e95c78426.png)?

Some old files and outdated documentation were removed.
brandonwillard(2021-01-28 16:29:05):> Just out of curiosity and personal interest, what tools do you use to do refactorings/renamings of such huge dimensions?

For this, I used a combination of Vim/Evil's `s//g`, handwritten `libcst` and `rope` scripts, `ag` and `helm-ag`, and `projectile-replace`/`projectile-replace-regex`.  In total, these changes took maybe 25 minutes to formulate and execute, and nearly as long to check/review.

There were a few bugs due to locally uncaught rearranged imports in the `gpuarray` modules, but that's about it.
brandonwillard(2021-01-28 16:31:02):> If someone else has the permissions and wants to add the hook, I can DM you the URL or add you as an admin on RTDs.

You can send me that information.
codecov[bot](2021-01-28 17:38:29):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/284?src=pr&el=h1) Report
> Merging [#284](https://codecov.io/gh/pymc-devs/aesara/pull/284?src=pr&el=desc) (f74d10f) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/8b28256589232a66597b0a7e7e6cd73dcb061b28?el=desc) (8b28256) will **decrease** coverage by `0.03%`.
> The diff coverage is `84.08%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/284/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/284?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #284      +/-   ##
==========================================
- Coverage   71.93%   71.90%   -0.04%     
==========================================
  Files         167      166       -1     
  Lines       54562    54563       +1     
==========================================
- Hits        39248    39232      -16     
- Misses      15314    15331      +17     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/284?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/compile/compiledir.py](https://codecov.io/gh/pymc-devs/aesara/pull/284/diff?src=pr&el=tree#diff-YWVzYXJhL2NvbXBpbGUvY29tcGlsZWRpci5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/gpuarray/fp16\_help.py](https://codecov.io/gh/pymc-devs/aesara/pull/284/diff?src=pr&el=tree#diff-YWVzYXJhL2dwdWFycmF5L2ZwMTZfaGVscC5weQ==) | `25.00% <ø> (ø)` | |
| [aesara/gpuarray/kernel\_codegen.py](https://codecov.io/gh/pymc-devs/aesara/pull/284/diff?src=pr&el=tree#diff-YWVzYXJhL2dwdWFycmF5L2tlcm5lbF9jb2RlZ2VuLnB5) | `0.00% <ø> (ø)` | |
| [aesara/gpuarray/pathparse.py](https://codecov.io/gh/pymc-devs/aesara/pull/284/diff?src=pr&el=tree#diff-YWVzYXJhL2dwdWFycmF5L3BhdGhwYXJzZS5weQ==) | `38.46% <ø> (ø)` | |
| [aesara/graph/unify.py](https://codecov.io/gh/pymc-devs/aesara/pull/284/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL3VuaWZ5LnB5) | `44.53% <ø> (ø)` | |
| [aesara/link/c/exceptions.py](https://codecov.io/gh/pymc-devs/aesara/pull/284/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvYy9leGNlcHRpb25zLnB5) | `100.00% <ø> (ø)` | |
| [aesara/misc/burn\_gpu.py](https://codecov.io/gh/pymc-devs/aesara/pull/284/diff?src=pr&el=tree#diff-YWVzYXJhL21pc2MvYnVybl9ncHUucHk=) | `0.00% <0.00%> (ø)` | |
| [aesara/misc/check\_blas.py](https://codecov.io/gh/pymc-devs/aesara/pull/284/diff?src=pr&el=tree#diff-YWVzYXJhL21pc2MvY2hlY2tfYmxhcy5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/misc/check\_duplicate\_key.py](https://codecov.io/gh/pymc-devs/aesara/pull/284/diff?src=pr&el=tree#diff-YWVzYXJhL21pc2MvY2hlY2tfZHVwbGljYXRlX2tleS5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/misc/check\_multi\_gpu.py](https://codecov.io/gh/pymc-devs/aesara/pull/284/diff?src=pr&el=tree#diff-YWVzYXJhL21pc2MvY2hlY2tfbXVsdGlfZ3B1LnB5) | `0.00% <0.00%> (ø)` | |
| ... and [163 more](https://codecov.io/gh/pymc-devs/aesara/pull/284/diff?src=pr&el=tree-more) | |

twiecki(2021-01-28 19:46:18):tt does not make sense to me, at does.

On Thu, Jan 28, 2021, 20:31 Oriol Abril-Pla <notifications@github.com>
wrote:

> *@OriolAbril* commented on this pull request.
> ------------------------------
>
> In aesara/breakpoint.py
> <https://github.com/pymc-devs/aesara/pull/284#discussion_r566354265>:
>
> > +        import aesara
> +        import aesara.tensor as tt
>
> It does not need to be decided here nor now, but probably whatever is used
> in the docstrings (herr and at pymc3) will be what ends up sticking around
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/pymc-devs/aesara/pull/284#discussion_r566354265>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAFETGBBTUCLLBQLTM663P3S4G3QLANCNFSM4WWKFTTQ>
> .
>

fonnesbeck(2021-01-28 20:07:33):I think `aet` was suggested on Slack, with general agreement.
twiecki(2021-01-28 20:10:19):I like that even more.

On Thu, Jan 28, 2021, 21:07 Chris Fonnesbeck <notifications@github.com>
wrote:

> I think aet was suggested on Slack, with general agreement.
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/pymc-devs/aesara/pull/284#issuecomment-769348181>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAFETGFY2Q6F3KUEWPDADOTS4G7ZLANCNFSM4WWKFTTQ>
> .
>

OriolAbril(2021-01-28 20:24:56):aet is also what is proposed in #148 and nobody complained about it in the issue
brandonwillard(2021-01-29 01:11:41):All right, unless there are any other big requests, I'll merge this one once the tests finish/pass.
michaelosthege(2021-01-28 10:36:10):Removing this will break many commit attributions - instead we could add a line instructing people to configure their alternate emails in the Github settings.
OriolAbril(2021-01-28 12:38:52):I think this section should either be removed altogether or keep the theano
OriolAbril(2021-01-28 12:40:25):This link should still point to original theano repo
OriolAbril(2021-01-28 12:44:19):do we want to update these imports in docs to the proposal in #148 `import aesara as ae; import aesara.tensor as aet`?
brandonwillard(2021-01-28 16:15:35):Yeah, I was thinking of `at`, though, but `ae*` isn't bad.
brandonwillard(2021-01-28 16:16:02):Yes, it should.
brandonwillard(2021-01-28 16:18:26):Yes, definitely.
brandonwillard(2021-01-28 16:23:40):True; I just don't like the idea of publicly hosting a bunch of spam-able email addresses&mdash;especially when it's unnecessary and really the responsibility of those individual GitHub users.

We could provide a link to [the relevant GitHub documentation](https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account/setting-your-commit-email-address), but even that seems like overkill.  This is really a user + GitHub issue and I don't feel comfortable using this project's documentation to instruction people on their personal GitHub configurations.
OriolAbril(2021-01-28 19:31:00):It does not need to be decided here nor now, but probably whatever is used in the docstrings (herr and at pymc3) will be what ends up sticking around
eigenfoo(2021-01-30 18:23:43):Hmm - more tests are failing than I anticipated. Running `pytest tests/tensor/test_math_opt.py` gives me the 9 errors I was originally referring to: https://gist.github.com/eigenfoo/8c2d5e7867fc23b82c98553c5300b054

The failures don't actually call `broadcast_to`, but most of them involve `toposort` or optimize using `local_pow_canonicalize`, which does call `broadcast_to`. Does that mean `broadcast_to` affected the graph optimizations, which is what these failed tests are testing for? Apologies for rambling, I'm trying to understand the codebase better.

`tests/tensor/test_basic.test_alloc_constant_folding` (the test that failed the current test run) also calls `toposort`.
brandonwillard(2021-01-30 19:04:33):> The failures don't actually call `broadcast_to`, but most of them involve `toposort` or optimize using `local_pow_canonicalize`, which does call `broadcast_to`. Does that mean `broadcast_to` affected the graph optimizations, which is what these failed tests are testing for?

It looks like they're failing because those unit tests make unnecessarily strong assumptions, aren't isolated/self-contained enough, don't `assert` the relevant changes directly, etc.  In other words, you're seeing the long standing deficiencies of our test suite. 

If you could fix those issues as you address this PR's issue, you would be doing significantly more for this project than the change requested in the issue itself.
brandonwillard(2021-01-30 19:22:12):Aside from strong test assumptions, there are some optimization errors that are probably worth addressing first; those may actually involve bugs.  

For instance, the first optimization error is implying that the the type generated by the newly introduced `BroadcastTo` `Op` doesn't match the type of the graph it's replacing in the optimization.
eigenfoo(2021-01-30 22:09:45):@brandonwillard the latest commit https://github.com/pymc-devs/aesara/pull/288/commits/a00ee11938d5ef0942b8f58ee5ca7643beedd056 gets rid of all `BadOptimization` errors, as far as I can tell - all that remains are `AssertionErrors`.

However, I suspect I'm doing something ugly by adding the `dtype` parameter like this - can you take a look at the new parameter? If it all looks good, I'll move on to fixing the tests: I suspect I'll need a lot of help along the way, though 😬 
eigenfoo(2021-01-30 22:27:08):Sure, that actually makes it easier. I assumed we wanted to mimic the `broadcast_like` signature, which took a `dtype` parameter. Sorry if that was a bad assumption.

The previous two commits revert the `dtype` commit, and use `TensorVariable.astype` to cast dtypes.

Also, do we want to remove the `broadcast_like` function now? The only reference is itself.

```
$ rg broadcast_like
aesara/tensor/basic_opt.py
170:def broadcast_like(value, template, fgraph, dtype=None):
182:            "broadcast_like currently requires the "
```
eigenfoo(2021-02-07 17:26:10):@brandonwillard I think I've fixed all tests but two. I'm confused about the remaining failures - I've attached the output of `pytest test_math_opt.py` here: https://gist.github.com/eigenfoo/ddb7d2aad30550c0efbf64a1841881f9

1. `test_stacktrace` seems to be a real failure that I don't understand - what exactly is the "trace" that we're testing for? https://github.com/pymc-devs/aesara/blob/0344f1a844731eea980ada631fe180e09f397a51/aesara/graph/opt.py#L3188-L3189
2. What is `test_local_reduce_join` testing for? I can tell that it's only these two lines that are failing the test, but don't know if its safe to remove them, or if this is a real failure... https://github.com/pymc-devs/aesara/blob/0344f1a844731eea980ada631fe180e09f397a51/tests/tensor/test_math_opt.py#L3472-L3473
brandonwillard(2021-02-07 20:00:50):> 1. `test_stacktrace` seems to be a real failure that I don't understand - what exactly is the "trace" that we're testing for?

That's probably referring to the stack traces carried by each variable in their `tag`.  Those traces show where each variable was created, and, during optimizations, they're carried over to newly created replacement variables.  Their only real purpose is for user-level debugging.
brandonwillard(2021-02-07 20:09:57):> 2\. What is `test_local_reduce_join` testing for? I can tell that it's only these two lines that are failing the test, but don't know if its safe to remove them, or if this is a real failure...

Those looks like brittle test conditions.  Instead of coming up with a direct check for something specific and relevant in the transformed graph, many tests will simply `assert` the number of nodes in the expected output.

In almost all cases, these kinds of `assert`s are simply bad, so don't take them too seriously.  If you changed an optimization, an `Op`, and/or one of an `Op`'s helper functions, and any of those things are used in one of these tests, then a change in the number of nodes could be easily justified.
brandonwillard(2021-02-12 01:37:19):I'll try running these tests locally within the next few days and see if I can spot any genuine issues (i.e. ones that aren't due to brittle/overly-restrictive tests).
eigenfoo(2021-02-12 04:52:55):Thanks for helping @brandonwillard! Sorry for being so slow-moving on this PR - something has popped up in the real world (and not a lack of interest in finishing this work).

I've loosened the test conditions on `test_local_reduce_join` so that it passes now, and I've removed `test_stacktrace` entirely. I'm unsure why `test_stacktrace` fails whereas a similar test, `test_local_sum_prod_mul_by_scalar_stack_trace`, succeeds. I'd be happy to put the test back if I could get a pointer on what's gone wrong.

I'll wait for the test suite to finish, but I'd also appreciate a quick triage of whether there are other real test failures - otherwise I'll assume that everything that fails is a flaky test.

brandonwillard(2021-02-12 20:34:25):> Sorry for being so slow-moving on this PR

I only commented so that you knew I hadn't forgotten about this PR; there's absolutely no rush, though!
eigenfoo(2021-02-14 02:44:18):@brandonwillard `test_basic/test_stack_hessian` is failing - this seems like a real failure, but I'm unsure what's going wrong. Could you give some pointers?

https://github.com/pymc-devs/aesara/pull/288/checks?check_run_id=1884844321
brandonwillard(2021-02-17 23:35:48):> `test_basic/test_stack_hessian` is failing - this seems like a real failure

Yes, that does look like a real issue.  My first impression was that it had to do with in-place operations.  

The new `broadcast_to` uses NumPy's underlying view-based broadcasting via the `BroadcastTo` `Op`, and its [`view_map`](https://github.com/pymc-devs/aesara/blob/bd54469c7833e2a8c21751e97b7cdd299080dc99/aesara/tensor/extra_ops.py#L1551) is supposed to indicate the view relationship between the `Op`'s first input, `a`, and its output.  Given that the first value is 2, as expected, and all the remaining values are effectively 0, it seemed like an optimization might've been ignoring this view information and "in-placing" things that it shouldn't.

Unfortunately, the evaluated graph doesn't contain any `BroadcastTo` `Op`s, so, if the problem is related to `BroadcastTo`-generated views, it's manifesting in an indirect way.

Also, with `aesara.config.compute_test_value` turned on, the test values for the `Ha` and `Hb` graphs are incorrect, and setting `aesara.config.optimizer_verbose = True` shows some validation failures during optimization.
brandonwillard(2021-02-17 23:51:35):~OK, the issue _does_ appear to involve bad in-placing.  Those `FunctionGraph` validation failures are specifically caused by `aesara.tensor.basic_opt.local_inplace_setsubtensor` producing the following exception:~
```python
InconsistencyError('Attempting to destroy indestructible variables: [TensorConstant{(1,) of 0.0}]')
```

Actually, those aren't the exact problem.  We probably need to find out how the `BroadcastTo` `Op` are being replaced.
brandonwillard(2021-02-18 00:57:27):All right, I believe that the source of this issue is the change from `broadcast_like` to `broadcast_to` in `aesara.tensor.basic_opt.local_fill_to_alloc`.  That's the rewrite that introduces the `BroadcastTo` `Op` in the first place.

In this case, a `fill` really shouldn't be replaced with a broadcasted view of the fill value; however, we might want a rewrite that turns unmodified (in-place) `alloc`s and/or `fill`s into `BroadcastTo`s.
brandonwillard(2021-02-18 03:01:12):Now that I think about it, we could probably use a simple optimization that removes useless `BroadcastTo`s.
brandonwillard(2021-02-18 03:02:51):Looks like there are a few more brittle tests (e.g. `TestCrossEntropyCategorical1Hot.test_get_rid_of_advanced_indexing_version_of_xent` and `TestMinMax.test_optimization_max` do the same `len(topo) == x` nonsense).
brandonwillard(2021-02-18 03:13:08):Also, some of these optimizations might be having trouble because `BroadcastTo` isn't being lifted.  

In the case of `TestMinMax.test_optimization_min`, it looks like the optimizations being tested aren't applied because they're looking for `neg(max(neg(...)))`, but now the graph is `neg(max(broadcast_to(neg(...))))`.  If we lift the `BroadcastTo` `Op`s, it should fix that.
ricardoV94(2022-05-11 07:41:58):Just rebased this PR
ricardoV94(2021-02-02 05:16:53):My understanding is that the iso c99 guarantees the macro for NAN in math.c, but I will double check
ricardoV94(2021-02-02 07:52:33):I did some research and I am unsure whether we can rely on the `math.h` NAN macro...

One alternative could be to use NPY_NAN by including `npy_math.h`:
https://github.com/numpy/numpy/blob/e80b1935d81b8ea36e43f7f5ac63629b6dd756f9/numpy/core/include/numpy/npy_math.h#L60

This is what Scipy uses in its gamma functions in `igam.c`: 
https://github.com/scipy/scipy/blob/5f4c4d802e5a56708d86909af6e5685cd95e6e66/scipy/special/cephes/igam.c#L134

Via `mconf.h`: https://github.com/scipy/scipy/blob/5f4c4d802e5a56708d86909af6e5685cd95e6e66/scipy/special/cephes/mconf.h#L57
ricardoV94(2021-02-02 07:59:08):And I guess this is what you had in mind with how Cython defines NAN?

https://github.com/cython/cython/blob/b738fd8c0f19c2fdd510f1a0c1a581509f6e836f/Cython/Utility/ModuleSetupCode.c#L1112-L1123
brandonwillard(2021-02-02 15:08:06):> And I guess this is what you had in mind with how Cython defines NAN?
> 
> https://github.com/cython/cython/blob/b738fd8c0f19c2fdd510f1a0c1a581509f6e836f/Cython/Utility/ModuleSetupCode.c#L1112-L1123

Exactly
ricardoV94(2021-02-02 15:52:09):Personally, I would be more comfortable just relying on the Numpy NAN macro, rather than implement it from scratch: https://numpy.org/doc/stable/reference/c-api/coremath.html

Do you see a problem with this?


brandonwillard(2021-02-02 15:56:57):> Do you see a problem with this?

Not if the required libraries are already being linked.
ricardoV94(2021-02-02 16:25:56):Do we need to do anything else?
brandonwillard(2021-02-02 17:09:53):Looks like we need to change the CI change detection so that it recognizes C source files (e.g. `.c` and `.h` extensions, at least), because it looks like the tests were skipped.
brandonwillard(2021-02-02 18:16:30):If you rebase this branch, the tests should now run.
codecov[bot](2021-02-02 20:07:38):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/290?src=pr&el=h1) Report
> Merging [#290](https://codecov.io/gh/pymc-devs/aesara/pull/290?src=pr&el=desc) (e50ec16) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/36161c3c0da25adef72b6abe00f5ffd37dfe7ade?el=desc) (36161c3) will **increase** coverage by `0.07%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/290/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/290?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #290      +/-   ##
==========================================
+ Coverage   71.90%   71.97%   +0.07%     
==========================================
  Files         166      166              
  Lines       54563    54569       +6     
==========================================
+ Hits        39232    39276      +44     
+ Misses      15331    15293      -38     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/290?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/inplace.py](https://codecov.io/gh/pymc-devs/aesara/pull/290/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/290/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `92.58% <100.00%> (+0.57%)` | :arrow_up: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/aesara/pull/290/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `92.30% <0.00%> (-1.01%)` | :arrow_down: |
| [aesara/scalar/basic\_scipy.py](https://codecov.io/gh/pymc-devs/aesara/pull/290/diff?src=pr&el=tree#diff-YWVzYXJhL3NjYWxhci9iYXNpY19zY2lweS5weQ==) | `73.80% <0.00%> (+9.28%)` | :arrow_up: |

ricardoV94(2021-02-02 20:42:39):It seems like the gamma functions are not being tested anywhere at all. Do you have any suggestion as to what is the appropriate scope here? Just testing for NAN seems... dangerous. Should we have a more comprehensive matches scipy kind of test?
dfm(2021-02-02 21:01:59):It's been a long standing issue that the C implementation of the gamma functions are never tested. This resulted in at least one longstanding bug: https://github.com/Theano/Theano/pull/6751 I still don't understand why this is!
brandonwillard(2021-02-02 23:53:35):There are tests for the entire `aesara.scalar.basic_scipy` module in `tests.tensor.test_basic_scipy`.  The reason they aren't in `tests.scalar` is that they're all set up as "broadcast" tests (i.e. `Elemwise` tests).  They really shouldn't be `Elemwise` tests, because `Elemwise` is already well tested in those ways and the extra effort is effectively wasted, so that's a change we need to make down the line.

The next problem is the exact implementation being tested by those existing `Elemwise` tests (e.g. the C or Python implementation).  That's where we start to see lots of problems with the old/current test suite: it uses compilation modes that include and depend on too many other things.  In this case, though, I do believe that the tests will compile to C.  Unfortunately, this would imply that the Python (i.e. `Op.perform`) methods aren't being tested.

What we need are tests that provide coverage for _both_ the C and Python code explicitly.  To do that, one only needs to call `function` with a hand-made `Mode` that specifies **no** optimizations and either the `PerformLinker` or `CLinker`&mdash;depending on which one you're testing at the time.  Better yet, one can skip the mode settings entirely and simply use a `FunctionGraph` and the linkers directly: e.g. `PerformLinker().accept(FunctionGraph(inputs, outputs)).make_function()`.

Anyway, good tests would use both linkers and provide coverage for **only our code**.  

For the `Op`s in `aesara.scalar.basic_scipy`, the `PerformLinker` needs only a single evaluation in most cases, because the underlying `Op.perform` goes straight to SciPy (and we're not in the business of testing SciPy's code).  

The `CLinker` tests need more attention, because we've implemented a few of those by hand, and, just like Python testing, we need to write tests with inputs that go through all the conditions in `aesara/scalar/c_code/gamma.c`&mdash;at the very least.

The above two tests are for `Op.perform` and `Op.c_code`.  After those are tested, we need tests for `Op.L_op` (i.e. the gradient implementations), when present.  The easy way to do that is with `tests.unittest_tools.verify_grad` and some carefully chosen inputs.

Since you've only changed a small part of the C code, you can just create a new `tests.scalar.test_basic_scipy` module and use the `CLinker` approach with the appropriate inputs and `np.isnan` `assert`s.
ricardoV94(2021-02-03 07:57:17):> There are tests for the entire `aesara.scalar.basic_scipy` module in `tests.tensor.test_basic_scipy`.

I find only tests for gamma, gammaln, and tri_gamma. I don't see any tests for gammainc, gammaincc, gammau, and gammal. Indeed in the PR were these were added, no new tests were included: https://github.com/Theano/Theano/pull/6648/files

I think that's part of what @dfm was referring to.

Edit: gammau and gammal don't have a scipy counterpart, so I don't see a simple way to test them. The other two should still be tested!
ricardoV94(2021-02-03 08:02:18):So the question is: Should I add the previously missing tests to `tests.tensor.test_basic_scipy` (even though we don't like this approach, I think it will be easier to refactor later on if everything is consistent up to that point), and separately add some `nan` tests in `tests.scalar.test_basic_scipy` to address the specific changes introduced in this PR?
ricardoV94(2021-02-03 09:17:53):Noob question: I am trying to implement the nans test with the `Clinker` approach that you suggested, but it's not quite working for me. What am I doing wrong?

```python
import aesara.tensor as aet
from aesara.scalar.basic_scipy import gammainc, gammaincc, gammau, gammal
from aesara.graph.fg import FunctionGraph
from aesara.link.c.basic import CLinker

x1 = aet.dscalar('x')
x2 = aet.dscalar('y')
y = gammainc(x1, x2)
test_func = CLinker().accept(FunctionGraph([x1, x2], y)).make_function()
print(test_func(-1, 1))
```
```python
Traceback (most recent call last):
  File "/home/ricardo/Documents/Projects/Theano-PyMC/tests/scalar/test_basic_scipy.py", line 10, in <module>
    test_func = CLinker().accept(FunctionGraph([x1, x2], y)).make_function()
  File "/home/ricardo/Documents/Projects/Theano-PyMC/aesara/graph/fg.py", line 115, in __init__
    inputs, outputs = clone_graph(inputs, outputs)
  File "/home/ricardo/Documents/Projects/Theano-PyMC/aesara/graph/basic.py", line 900, in clone
    equiv = clone_get_equiv(inputs, outputs, copy_inputs, copy_orphans)
  File "/home/ricardo/Documents/Projects/Theano-PyMC/aesara/graph/basic.py", line 950, in clone_get_equiv
    for apply in io_toposort(inputs, outputs):
  File "/home/ricardo/Documents/Projects/Theano-PyMC/aesara/graph/basic.py", line 1156, in io_toposort
    todo = [o.owner for o in reversed(outputs) if o.owner]
TypeError: 'ScalarVariable' object is not reversible
```
ricardoV94(2021-02-03 09:56:13):Good news is that the new old-school broadcast tests are failing because the nans are working :b

```python
E  AssertionError: Test Elemwise{gammainc,no_inplace}::normal: Output 0 gave the wrong value. With inputs [array([[8.906834 , 7.601809 , 6.2160816],
E    [3.5887942, 3.1274636, 0.1964304]], dtype=float32), array([[-0.18739706,  7.860037  , -0.7384588 ],
E    [ 5.471562  ,  7.255266  ,  8.650323  ]], dtype=float32)], expected [[      nan 0.5845476       nan]
E  [0.8484468 0.9715847 0.9999939]] (dtype float32), got [[      nan 0.5845476       nan]
E  [0.8484468 0.9715847 0.9999939]] (dtype float32). eps=0.000001 np.allclose returns False False
```
ricardoV94(2021-02-03 10:44:38):Seemingly unrelated  test failure: `FAILED tests/compile/test_compilelock.py::test_locking_thread - assert True i...`

And `FAILED tests/tensor/test_math.py::TestModBroadcast::test_grad - aesara.gradie...`
brandonwillard(2021-02-03 18:33:11):> Seemingly unrelated test failure: `FAILED tests/compile/test_compilelock.py::test_locking_thread - assert True i...`

I don't see this failure.

> And `FAILED tests/tensor/test_math.py::TestModBroadcast::test_grad - aesara.gradie...`

Depending on the exact nature of this error, it's possible that the newly added tests changed the poorly designed RNG seeding in the test suite.  In other words, some tests are implicitly dependent on the exact seed value, which is affected by the order in which the tests are run, so keep an eye out for that.
brandonwillard(2021-02-03 18:36:30):> Noob question: I am trying to implement the nans test with the `Clinker` approach that you suggested, but it's not quite working for me. What am I doing wrong?
> 
> ```python
> import aesara.tensor as aet
> from aesara.scalar.basic_scipy import gammainc, gammaincc, gammau, gammal
> from aesara.graph.fg import FunctionGraph
> from aesara.link.c.basic import CLinker
> 
> x1 = aet.dscalar('x')
> x2 = aet.dscalar('y')
> y = gammainc(x1, x2)
> test_func = CLinker().accept(FunctionGraph([x1, x2], y)).make_function()
> print(test_func(-1, 1))
> ```

Looks like you're not calling `FunctionGraph` correctly; _both_ arguments should be lists.
ricardoV94(2021-02-04 07:30:47):> > Seemingly unrelated test failure: `FAILED tests/compile/test_compilelock.py::test_locking_thread - assert True i...`
> 
> I don't see this failure.

I can't find it either... I guess it will resurface again if I did not imagine it
ricardoV94(2021-02-04 09:11:29):> > And `FAILED tests/tensor/test_math.py::TestModBroadcast::test_grad - aesara.gradie...`
> 
> Depending on the exact nature of this error, it's possible that the newly added tests changed the poorly designed RNG seeding in the test suite. In other words, some tests are implicitly dependent on the exact seed value, which is affected by the order in which the tests are run, so keep an eye out for that.

Failed again. I can reproduce locally (tests/tensor/test_math.py):
```python
_grad_broadcast_div_mod_normal = dict(
    # same_shapes=(rand(2, 3), rand_nonzero((2, 3))),
    same_shapes=(
        np.array([[0.16248044, -0.98288917, -0.33407401], [0.35973542,  0.11859988,  0.58337884]]),
        np.array([[0.85552586, -0.00677909, -0.12264811], [-0.21154757,  0.23006721,  0.3854657]])
    ),
    scalar=(rand(2, 3), rand_nonzero((1, 1))),
    row=(rand(2, 3), rand_nonzero((1, 3))),
    column=(rand(2, 3), rand_nonzero((2, 1))),
)

TestModBroadcast = makeBroadcastTester(
    op=mod,
    expected=lambda x, y: np.asarray(x % y, dtype=aes.upcast(x.dtype, y.dtype)),
    good=copymod(_good_broadcast_div_mod_normal_float, ["complex1", "complex2"]),
    grad=_grad_broadcast_div_mod_normal,
    grad_eps=1e-5,
)
```
I don't think this is an issue with the seed in `unittest_tools::verify_grad` (I changed it a couple of times locally). So it has to do with the random `_grad_broadcast_div_mod_normal` input. Is this a bug, or is it reasonable for the finite difference method and theano grad to differ with this input, by this much?

```python
aesara.gradient.GradientError: GradientError: numeric gradient and analytic gradient exceed tolerance:
E                       At position 1 of argument 1 with shape (2, 3),
E                           val1 = -193.562877      ,  val2 = 716.329160
E                           abs. error = 909.892036,  abs. tolerance = 0.000100
E                           rel. error = 1.000000,  rel. tolerance = 0.000100
```
I get ~1/10 failing cases for randomly generated `same_shapes` values.
brandonwillard(2021-02-04 21:49:40):> I get ~1/10 failing cases for randomly generated `same_shapes` values.

If that's the case, and your code changes had literally nothing to do with this `mod` `Op`&mdash;aside from inadvertently shifting the RNG state used by this test&mdash;then my advice _is_ applicable here.

Here's a good thing to check: do you observe a similar failure rate when changing the seed in `master` (or the original Theano)?  More importantly, do you see similar error magnitudes for the same inputs?

If this problem is entirely due to the RNG state, and those numeric errors aren't caused by underlying implementation errors in the `mod` `Op`, then the errors you're seeing might be in line with a discrepancy between a finite-difference approximation vs. an analytic derivative.  That wouldn't be too surprising given the discrete nature of the `Op` in question and its derivative.

ricardoV94(2021-02-05 08:46:12):I confirmed that it fails (also in master), usually when the modulo is close to zero. Changing the grad_eps seems to help.

This fails 7/100 times.
```python
@pytest.mark.parametrize('n', range(100))
def test_failure_rate(n):
    _grad_broadcast_div_mod_normal = dict(
        same_shapes=(rand(2, 3), rand_nonzero((2, 3))),
        scalar=(rand(2, 3), rand_nonzero((1, 1))),
        row=(rand(2, 3), rand_nonzero((1, 3))),
        column=(rand(2, 3), rand_nonzero((2, 1))),
    )
    for testname, inputs in _grad_broadcast_div_mod_normal.items():
        inputs = [copy(input) for input in inputs]
        utt.verify_grad(
            mod,
            inputs,
            mode=None,
            rel_tol=None,
            eps=1e-5,
        )
```

If I increase the default eps things work much better.
This fails 2/1000 times :
```python
@pytest.mark.parametrize('n', range(1000))
def test_failure_rate(n):
    _grad_broadcast_div_mod_normal = dict(
        same_shapes=(rand(2, 3), rand_nonzero((2, 3))),
        scalar=(rand(2, 3), rand_nonzero((1, 1))),
        row=(rand(2, 3), rand_nonzero((1, 3))),
        column=(rand(2, 3), rand_nonzero((2, 1))),
    )
    for testname, inputs in _grad_broadcast_div_mod_normal.items():
        inputs = [copy(input) for input in inputs]
        utt.verify_grad(
            mod,
            inputs,
            mode=None,
            rel_tol=None,
            eps=1e-7,
        )
```
ricardoV94(2021-02-05 12:00:27):Silly me, I forgot to check if the original failing inputs passed with the new eps_grad... ~~They do not. I'll be back~~
ricardoV94(2021-02-06 15:15:41):It did work locally, on 64bit, but it still fails on 32 bit. Any tips on how to (cleanly) reseed this one?

The change in grad_eps should still help to make it more robust to seed changes in the future (as shown in my simulations above), but we still need to force different random parameters for this PR to move forward.
brandonwillard(2021-02-06 23:07:00):> Any tips on how to (cleanly) reseed this one?

This doesn't appear to be about seeding; the problem is in the approach.  As with all of these tests, we actually need to use well chosen inputs that explicitly test each part of our implementations.  

There's simply no reason to randomly test portions of the code; these functions/methods we're testing aren't complex enough to justify the approach.  Plus, fixing a seed forfeits whatever benefit we would get from sampling&mdash;besides the time saved by not writing good tests.

Looking at `aesara.scalar.basic.Mod.c_code`, we can see a few conditions that tell us which points need to be present: a [integer and float point](https://github.com/pymc-devs/aesara/blob/fix-local-grad-log-erfc-neg/aesara/scalar/basic.py#L2147), [`y == 0`](https://github.com/pymc-devs/aesara/blob/fix-local-grad-log-erfc-neg/aesara/scalar/basic.py#L2196), [`y < 0` and `x < 0`](https://github.com/pymc-devs/aesara/blob/fix-local-grad-log-erfc-neg/aesara/scalar/basic.py#L2198), etc.  Unlike many of the current tests, we **don't** need to test _every_ combination of `dtype` and value; in most cases, that approach only wastes time repeating the same branches.

I'm not even sure that we need to do these comparisons with the numerical derivative/gradient (in most cases, as well).  It only makes sense when we're not sure that we've implemented the correct analytic derivative, and that's a rather different problem that should be addressed separately and directly.

My guess is that the points previously used to test `Mod` were nowhere near equal, nor did `x` divide `y`, so the derivatives would all evaluate to zero.  Again, tests like that are mostly a waste of time.  Instead, we can pick a few good points to test and just make sure that the implementation is computing the known derivative.
ricardoV94(2021-02-08 09:21:10):> Looking at `aesara.scalar.basic.Mod.c_code`, we can see a few conditions that tell us which points need to be present: a [integer and float point](https://github.com/pymc-devs/aesara/blob/fix-local-grad-log-erfc-neg/aesara/scalar/basic.py#L2147), [`y == 0`](https://github.com/pymc-devs/aesara/blob/fix-local-grad-log-erfc-neg/aesara/scalar/basic.py#L2196), [`y < 0` and `x < 0`](https://github.com/pymc-devs/aesara/blob/fix-local-grad-log-erfc-neg/aesara/scalar/basic.py#L2198), etc. 

Those are being tested in the `good` branch of the `makeBroadcastTester` and they work fine since its deterministic value is simply compared to the numpy / scipy one.

> My guess is that the points previously used to test Mod were nowhere near equal, nor did x divide y, so the derivatives would all evaluate to zero. Again, tests like that are mostly a waste of time. Instead, we can pick a few good points to test and just make sure that the implementation is computing the known derivative.

The issue is indeed whether `x` and `y` are too similar. The derivative for floats `x`, `y` is not zero (at least the L_op, which I assume appears in the grad tests, is not): https://github.com/pymc-devs/aesara/blob/02a0c59d5053dddef84102ffaff3f31ef4a2cfd2/aesara/scalar/basic.py#L2214-L2223

Anyway, I fixed the random values, making sure all `x` and `y` are distinct enough and I added a comment explaining this decision.

codecov[bot](2021-02-02 18:12:28):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/292?src=pr&el=h1) Report
> Merging [#292](https://codecov.io/gh/pymc-devs/aesara/pull/292?src=pr&el=desc) (159f23a) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/6c5a8fa044aae27a7ce2b6f90ef49f119bf5bdcd?el=desc) (6c5a8fa) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/292/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/292?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #292   +/-   ##
=======================================
  Coverage   71.90%   71.90%           
=======================================
  Files         166      166           
  Lines       54563    54563           
=======================================
  Hits        39232    39232           
  Misses      15331    15331           
```



codecov[bot](2021-02-06 01:30:26):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/294?src=pr&el=h1) Report
> Merging [#294](https://codecov.io/gh/pymc-devs/aesara/pull/294?src=pr&el=desc) (885cc83) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/36161c3c0da25adef72b6abe00f5ffd37dfe7ade?el=desc) (36161c3) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/294/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/294?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #294      +/-   ##
==========================================
- Coverage   71.90%   71.89%   -0.01%     
==========================================
  Files         166      166              
  Lines       54563    54565       +2     
==========================================
- Hits        39232    39231       -1     
- Misses      15331    15334       +3     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/294?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/294/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `92.58% <100.00%> (+0.57%)` | :arrow_up: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/aesara/pull/294/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `92.30% <0.00%> (-1.01%)` | :arrow_down: |
| [aesara/scalar/basic\_scipy.py](https://codecov.io/gh/pymc-devs/aesara/pull/294/diff?src=pr&el=tree#diff-YWVzYXJhL3NjYWxhci9iYXNpY19zY2lweS5weQ==) | `64.04% <0.00%> (-0.48%)` | :arrow_down: |

codecov[bot](2021-02-06 06:07:50):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/296?src=pr&el=h1) Report
> Merging [#296](https://codecov.io/gh/pymc-devs/aesara/pull/296?src=pr&el=desc) (6f574c8) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/b852bd24472e13ae2a405b36eaad462830c89228?el=desc) (b852bd2) will **increase** coverage by `0.02%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/296/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/296?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #296      +/-   ##
==========================================
+ Coverage   71.90%   71.92%   +0.02%     
==========================================
  Files         166      166              
  Lines       54566    54612      +46     
==========================================
+ Hits        39236    39282      +46     
  Misses      15330    15330              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/296?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/296/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `93.55% <100.00%> (+0.33%)` | :arrow_up: |
| [aesara/link/jax/jax\_linker.py](https://codecov.io/gh/pymc-devs/aesara/pull/296/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvamF4L2pheF9saW5rZXIucHk=) | `81.70% <100.00%> (+1.70%)` | :arrow_up: |
| [aesara/tensor/random/type.py](https://codecov.io/gh/pymc-devs/aesara/pull/296/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdHlwZS5weQ==) | `100.00% <100.00%> (ø)` | |

kc611(2021-02-11 14:46:58):@brandonwillard have a look. Got this general implementation working. Now I think just a few argument checks (like checking if the requested distribution actually exists in jax or not) and adding tests remain. Though I have no idea how the tests should be.
brandonwillard(2021-02-13 07:04:52):I've push some changes that address a bigger shared variable problem, and I've added a simple test.  That exact test won't pass because the RNG states between the two functions being compared are not the same.  
kc611(2021-02-15 05:05:52):So what exactly is remains to be implemented in this PR ? I guess mostly the work is done here. Except a few tests, of course but then again we're limited by what we can do in those tests due to the state is not 1:1 issue. 
twiecki(2021-03-10 06:26:53):Can we merge this @brandonwillard?
twiecki(2021-03-12 09:40:59):Thanks @kc611, this is a major contribution!
brandonwillard(2021-02-11 20:21:45):I'm not sure if this is a sound point of entry.  Under this approach we're not dispatching on the actual objects that we're ultimately converting: i.e. Aesara `Type`s.  It also adds machinery for traversing storage maps, which is somewhat tangential to the overall conversion process.
brandonwillard(2021-02-11 20:23:58):Ideally, `jaxify` and `get_jax_data_func` would be a _single_ function that dispatches on `Type`s (i.e. `i_type`).  This fits the Aesara graph paradigm very well and makes it very clear what needs to be done when a new `Type` is added.

Also, `jaxify` is a little too general of a name.  With the strictly `Type`-based dispatching mentioned above, we could have a `jax_typify` (or we could change the names of both to something more simple).
kc611(2021-02-12 15:16:41):The main problem here is `jaxify`/`jax_typify` over here is supposed to return objects themselves rather than functions like `get_jax_data_func` would. Though I can make `get_jax_data_func` use `jax_typify` internally.
kc611(2021-02-12 16:02:55):How about the current entry point ? 
brandonwillard(2021-02-14 07:04:24):This should really return the `rng` state **after** sampling&mdash;as the first element in the tuple, instead of `dtype`.  I don't know if that's available from JAX, but that's what the constructed graph expects.  

Problems will arise when that `dtype` value is mistakenly used as an RNG by other `Op`s.  Those values are only ever used by other `RandomVariable` `Op`s, and, if we return the aforementoined post-sampling state values (in the form expected by JAX samplers), things should work fine.
kc611(2021-02-14 12:31:51):>  I don't know if that's available from JAX.

As far as I know JAX doesn't provide that functionality. The best we can do is provide the distribution the same `PRNGKey` (which is basically a `DeviceArray`) cause all the processing and state handling takes place inside the functions.   

The `jax.random` [documentations](https://jax.readthedocs.io/en/latest/jax.random.html) also state:

```Note that using a key does not modify it, so reusing the same key will lead to the same result```
brandonwillard(2021-02-14 19:30:23):It looks like the answer is to use `jax.random.split`; that's exactly what we need.
kc611(2021-02-15 04:45:45):Ah, I misssed that. Basically the key itself doesn't change upon sampling. We have to change it manually by calling `jax.random.split`.

For now I'll just return a single key and not two (which split returns by default). Since then we can directly use it as `PRNGKey` in other `Op`s
brandonwillard(2021-02-16 19:35:44):We should be able to devise some non-`xfail` tests.  For instance, we can verify that the RNG states work as expected (i.e. that we can produce the same results for the same states).
kc611(2021-02-22 11:49:39):I cannot figure out how to give input directly to and take output from the `RandomVariable` instances like `normal` while them being a `FunctionGraph`. So I may require some help with that.
kc611(2021-02-25 10:56:09):There should be a better way way to do this rather than checking from the `fgraph.inputs`. But I cannot make a connection with the above jax typification of `RandomVariables` (#L64-L74) of input nodes with these output nodes directly. Besides the output is basically an array which makes it even harder to detect. 
brandonwillard(2021-02-25 18:01:43):I think this is a viable approach, but we might be able to package it somewhat differently.  Since the whole thing is basically a de-JAXification (i.e. it takes JAX output and puts it into a form that the Aesara graph expects), we could establish a JAX-ify/de-JAX-ify framework for `Type`s&mdash;one that would go alongside the `jax_typify` that we already established here (e.g. we could use classes that dispatch on both "typify" and "detypify" methods).

There are two notable downsides to this approach, though: this reverse transform logic is only required by one `Type` (for now), and the logic introduces some performance overhead (i.e. we have to create `RandomState` objects just to appease Aesara's graph evaluation framework).

The only other approach that comes to mind will alleviate the latter problem, but it also introduces new logic that is somewhat comparable to this reverse transform approach (in that it involves similar changes within `jax_linker.py`).  

That approach involves changing the objects and/or logic surrounding `aesara.compile.function.types.Function` and/or `aesara.link.basic.Container` so that we can store the RNG array returned by JAX in the location that Aesara sets aside for its `RandomState`-based RNG objects.  [This](https://github.com/pymc-devs/aesara/blob/84936418af87e84322bd668c7e05e62766699906/aesara/compile/function/types.py#L1031) is where/when it tries to do that and fails.  It fails because `storage` is an `aesara.link.basic.Container` with `Container.type` equal to `RandomStateType`, so, when `storage.data = x` is attempted, it will fail when `x` doesn't have the same `Type`.

We might be able to create a subclass of `RandomStateType` that accepts `DeviceArray`s just for this purpose.  For that matter, it could even be fully functional within Aesara by performing the same conversion that you've implemented below&mdash;just within its `Type` methods.

If that's possible, we would only need to replace the `RandomStateType`s within the compiled `FunctionGraph` with this new subclass.
kc611(2021-02-26 12:14:11):Establishing a whole new de-JAX-ify framework for a single `Type` seems overkill to me now. IMO It would be better to keep this idea for when we encounter more of such classes that require de-JAX-ification.

I'll see if I can come up with something using the other approach that you've mentioned. 
kc611(2021-02-26 14:06:16):But if the our goal is only limited to storage of the `RNG` array and not reconverting back into `RandomState`, This approach is also worth considering i.e simply make `RandomStateType` compatible with arrays rather than sub-classing it. Though we can also reconvert those arrays back to `RandomState` during filtering.
brandonwillard(2021-02-26 22:51:29):Yes, that's a viable approach as well, especially since `Type.filter` has a `strict` keyword argument that we can use to justify this kind of overloading (e.g. `strict=False` will allow/accept array-like arguments).

In order to do this properly, we need to be very clear about the correspondence between these array-like objects and `RandomState`s.  For instance, `jax_typify_RandomState` implies that these single array-like objects map to the second element returned by [`RandomState.get_state`](https://numpy.org/doc/stable/reference/random/generated/numpy.random.RandomState.get_state.html)&mdash;i.e. the 1-D array of 624 unsigned integer keys within the `RandomState` object's internal state.  If we're going to allow `RandomStateType` to make this same connection, then we need to define a consistent inverse mapping: i.e. the production of a valid state that can be used to instantiate a `RandomState`.

That leaves us with the task of determining valid values for the `bit_generator`, `pos`, `has_gauss`, and `cached_gaussian` values in the state (e.g. `"MT19937"`, `623`, `0`, and `0.0`, respectively).  After that, we would only need to change a few of the methods in `RandomStateType` so that they can tell the difference between `RandomState`s and this alternative array-like form, but that's pretty straight-forward.


brandonwillard(2021-02-26 23:14:04):We should use the newer NumPy API whenever possible (i.e. `state.get_state(legacy=False)["state"]`).
kc611(2021-02-27 05:33:47):If we are to verify all the other parameters that you mentioned, we could pass on the entire information provided by the newer API instead of just passing the state key. That way, the identification of a `jax_typified` `RandomState` would also be easier than just being a array-like object with a specified shape.
kc611(2021-02-27 05:34:11):Made the change in the latest commit.
brandonwillard(2021-03-07 16:04:48):Looks like we could use some simple tests for these conditions in `tests/tensor/random/test_type.py`.
brandonwillard(2021-03-07 16:44:00):We should create a custom no-op `RandomVariable` class for this test (defined within this test function, of course).  That way, there's no chance that JAX will implement `halfnormal` and cause this to fail.
brandonwillard(2021-03-07 18:11:16):As you can probably tell by now, I'm always hesitant to include very type-specific hard-coded conditions&mdash;especially for a type/class like `RandomState` that has no subclasses.

I'm wondering if `RandomState` should/could be `SharedVariable` instead.
kc611(2021-03-07 18:30:56):Yeah, that could be useful, from a future perspective. We'll probably be changing it to `SharedVariable` or something else once we have other arguments that need to be `jax_typified`.

I don't have much idea as of how to do that though. Do you intend to do that right here (in this PR)?
brandonwillard(2021-03-11 17:55:42):Let's try this change now, since it would be better to establish this general framework sooner than later.
codecov[bot](2021-02-06 15:20:08):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/297?src=pr&el=h1) Report
> Merging [#297](https://codecov.io/gh/pymc-devs/aesara/pull/297?src=pr&el=desc) (a75bdda) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/37444647688741d925dd299cb81a443e8ceb7c60?el=desc) (3744464) will **decrease** coverage by `0.00%`.
> The diff coverage is `93.75%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/297/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/297?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #297      +/-   ##
==========================================
- Coverage   71.90%   71.89%   -0.01%     
==========================================
  Files         166      166              
  Lines       54568    54552      -16     
==========================================
- Hits        39238    39222      -16     
  Misses      15330    15330              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/297?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/gpuarray/elemwise.py](https://codecov.io/gh/pymc-devs/aesara/pull/297/diff?src=pr&el=tree#diff-YWVzYXJhL2dwdWFycmF5L2VsZW13aXNlLnB5) | `12.59% <0.00%> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/pymc-devs/aesara/pull/297/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `93.34% <93.75%> (-0.01%)` | :arrow_down: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/aesara/pull/297/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `92.08% <98.18%> (-0.23%)` | :arrow_down: |
| [aesara/scalar/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/297/diff?src=pr&el=tree#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `84.65% <100.00%> (+0.03%)` | :arrow_up: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/297/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `92.58% <100.00%> (ø)` | |

kc611(2021-02-14 04:32:11):If #299 is being solved as a separate issue then I guess the work here is done.
kc611(2021-02-06 13:37:09):Since Numpy  version = 1.7.0, `ufunc.reduce` supports tuples in `axis` argument allowing reductions along multiple axes. This effectively makes something like `np.add.reduce()` equivalent to `np.sum()` . See [here](https://numpy.org/doc/stable/reference/generated/numpy.ufunc.reduce.html) for details.
kc611(2021-02-06 13:39:22):Here I assume `ScalarOp`'s `nfunc_spec` is used for getting the function as attribute from Numpy. Similar to how `ScalarOp`'s `nfunc_variadic` is used for getting the function as attribute from Jax.
brandonwillard(2021-02-06 21:52:27):Exactly; that was another one of the reasons for wanting to simplify this `Op`. I came across this during the implementation of the JAX conversion functions, and it's related to the `nfunc_variadic` work-around.

Note: the whole `Elemwise` + `scalar_op` thing might seem superfluous, but it does have a purpose&mdash;although not necessarily for computations (e.g. `Op.perform`).  It's used by the "fusion" optimization, which takes this information from multiple summed/multiplied `Elemwise`s and creates a single `Composite` `Op`.
kc611(2021-02-08 19:39:09):We could technically set the identities of `scalar_maximum` and `scalar_minimum` inside the object initialization as the other `scalar` op's but I couldn't find a variable capable of representing infinity in both C and python. 
brandonwillard(2021-02-11 19:39:54):Seems like this condition wouldn't be necessary at this point.  Should it be an `else`?
brandonwillard(2021-02-11 19:52:29):Yeah, we should probably set `scalar_[minimum|maximum].identity = "[+|-]__builtin_inf()"`, then we can get rid of these highly undesirable uses of `scalar_[maximum|minimum]`.

Really, every `scalar_op` should necessarily provide an `identity`.  There simply aren't enough scalar `Op`s to justify _not_ imposing that requirement.  In other words, we can push this `identity`-based work to the scalar `Op`s themselves.

Whatever we can do to make this entire module completely independent of any specific `Op`s (i.e. use no references to external `Op`s) is absolutely worth considering.


kc611(2021-02-12 08:39:48):Done
kc611(2021-02-12 08:40:29):It wasn't necessary, I removed it as requested.
brandonwillard(2021-02-12 23:23:01):We should address this at some point, because creating a temporary `Op` seems so wildly unnecessary.  It also complicates things down the road, because `op(input).owner.op is not op`, which is very unexpected&mdash;especially since other `Op`s don't behave this way.

The main idea seems to be that `op.axis` isn't sufficient when `a < 0` above, so, in order to affect a change in `op.axis`, an entirely new `Op` is created.  Instead, we could easily make `axis` another input (i.e. the return value below becomes `Apply(op, [axis, input], [output])` and the methods that use the inputs list are updated to get `self.axis` from the list).
brandonwillard(2021-02-13 02:37:03):I created an issue for this: #299.
codecov[bot](2021-02-11 05:04:04):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/298?src=pr&el=h1) Report
> Merging [#298](https://codecov.io/gh/pymc-devs/aesara/pull/298?src=pr&el=desc) (df297e7) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/36161c3c0da25adef72b6abe00f5ffd37dfe7ade?el=desc) (36161c3) will **increase** coverage by `0.00%`.
> The diff coverage is `95.83%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/298/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/298?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #298   +/-   ##
=======================================
  Coverage   71.90%   71.90%           
=======================================
  Files         166      166           
  Lines       54563    54568    +5     
=======================================
+ Hits        39232    39238    +6     
+ Misses      15331    15330    -1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/298?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/graph/toolbox.py](https://codecov.io/gh/pymc-devs/aesara/pull/298/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL3Rvb2xib3gucHk=) | `70.68% <87.50%> (-9.74%)` | :arrow_down: |
| [aesara/graph/fg.py](https://codecov.io/gh/pymc-devs/aesara/pull/298/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `92.58% <100.00%> (-0.10%)` | :arrow_down: |
| [aesara/graph/opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/298/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `68.14% <100.00%> (ø)` | |
| [aesara/tensor/type.py](https://codecov.io/gh/pymc-devs/aesara/pull/298/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `93.63% <100.00%> (+0.45%)` | :arrow_up: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/aesara/pull/298/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `92.30% <0.00%> (-1.01%)` | :arrow_down: |
| [aesara/graph/type.py](https://codecov.io/gh/pymc-devs/aesara/pull/298/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `84.07% <0.00%> (-0.38%)` | :arrow_down: |
| [aesara/tensor/inplace.py](https://codecov.io/gh/pymc-devs/aesara/pull/298/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <0.00%> (ø)` | |
| [aesara/scan/op.py](https://codecov.io/gh/pymc-devs/aesara/pull/298/diff?src=pr&el=tree#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `88.76% <0.00%> (+0.06%)` | :arrow_up: |
| ... and [2 more](https://codecov.io/gh/pymc-devs/aesara/pull/298/diff?src=pr&el=tree-more) | |

codecov[bot](2021-02-13 22:08:02):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/300?src=pr&el=h1) Report
> Merging [#300](https://codecov.io/gh/pymc-devs/aesara/pull/300?src=pr&el=desc) (72c5ebc) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/3e58e7ceec6674eadacf840cc1efc93f3383b168?el=desc) (3e58e7c) will **decrease** coverage by `0.00%`.
> The diff coverage is `97.33%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/300/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/300?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #300      +/-   ##
==========================================
- Coverage   71.90%   71.90%   -0.01%     
==========================================
  Files         166      166              
  Lines       54572    54570       -2     
==========================================
- Hits        39239    39237       -2     
  Misses      15333    15333              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/300?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/assert\_op.py](https://codecov.io/gh/pymc-devs/aesara/pull/300/diff?src=pr&el=tree#diff-YWVzYXJhL2Fzc2VydF9vcC5weQ==) | `95.83% <ø> (ø)` | |
| [aesara/gpuarray/dnn.py](https://codecov.io/gh/pymc-devs/aesara/pull/300/diff?src=pr&el=tree#diff-YWVzYXJhL2dwdWFycmF5L2Rubi5weQ==) | `23.80% <ø> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/300/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `88.19% <ø> (ø)` | |
| [aesara/tensor/blas.py](https://codecov.io/gh/pymc-devs/aesara/pull/300/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9ibGFzLnB5) | `86.87% <ø> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/pymc-devs/aesara/pull/300/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `93.34% <ø> (ø)` | |
| [aesara/sandbox/linalg/ops.py](https://codecov.io/gh/pymc-devs/aesara/pull/300/diff?src=pr&el=tree#diff-YWVzYXJhL3NhbmRib3gvbGluYWxnL29wcy5weQ==) | `72.91% <75.00%> (ø)` | |
| [aesara/sparse/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/300/diff?src=pr&el=tree#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `88.96% <85.71%> (ø)` | |
| [aesara/compile/nanguardmode.py](https://codecov.io/gh/pymc-devs/aesara/pull/300/diff?src=pr&el=tree#diff-YWVzYXJhL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `70.99% <100.00%> (ø)` | |
| [aesara/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/300/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `92.59% <100.00%> (ø)` | |
| [aesara/sparse/sandbox/sp.py](https://codecov.io/gh/pymc-devs/aesara/pull/300/diff?src=pr&el=tree#diff-YWVzYXJhL3NwYXJzZS9zYW5kYm94L3NwLnB5) | `81.81% <100.00%> (ø)` | |
| ... and [8 more](https://codecov.io/gh/pymc-devs/aesara/pull/300/diff?src=pr&el=tree-more) | |

codecov[bot](2021-02-13 23:51:38):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/301?src=pr&el=h1) Report
> Merging [#301](https://codecov.io/gh/pymc-devs/aesara/pull/301?src=pr&el=desc) (8625513) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/3e58e7ceec6674eadacf840cc1efc93f3383b168?el=desc) (3e58e7c) will **decrease** coverage by `0.00%`.
> The diff coverage is `66.66%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/301/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/301?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #301      +/-   ##
==========================================
- Coverage   71.90%   71.89%   -0.01%     
==========================================
  Files         166      166              
  Lines       54572    54569       -3     
==========================================
- Hits        39239    39234       -5     
- Misses      15333    15335       +2     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/301?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/gpuarray/elemwise.py](https://codecov.io/gh/pymc-devs/aesara/pull/301/diff?src=pr&el=tree#diff-YWVzYXJhL2dwdWFycmF5L2VsZW13aXNlLnB5) | `12.59% <50.00%> (ø)` | |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/aesara/pull/301/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `92.18% <50.00%> (-0.13%)` | :arrow_down: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/301/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `89.30% <100.00%> (-0.02%)` | :arrow_down: |
| [aesara/printing.py](https://codecov.io/gh/pymc-devs/aesara/pull/301/diff?src=pr&el=tree#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `43.02% <0.00%> (-0.15%)` | :arrow_down: |

codecov[bot](2021-02-14 10:09:14):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/302?src=pr&el=h1) Report
> Merging [#302](https://codecov.io/gh/pymc-devs/aesara/pull/302?src=pr&el=desc) (6a0ebb8) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/13b08f0b1802bf64d128db401b30e278fcbdc8b4?el=desc) (13b08f0) will **increase** coverage by `0.01%`.
> The diff coverage is `94.64%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/302/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/302?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #302      +/-   ##
==========================================
+ Coverage   71.89%   71.91%   +0.01%     
==========================================
  Files         166      166              
  Lines       54567    54570       +3     
==========================================
+ Hits        39232    39242      +10     
+ Misses      15335    15328       -7     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/302?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/gradient.py](https://codecov.io/gh/pymc-devs/aesara/pull/302/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `87.20% <ø> (ø)` | |
| [aesara/tensor/type.py](https://codecov.io/gh/pymc-devs/aesara/pull/302/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `93.35% <ø> (-0.29%)` | :arrow_down: |
| [aesara/gpuarray/type.py](https://codecov.io/gh/pymc-devs/aesara/pull/302/diff?src=pr&el=tree#diff-YWVzYXJhL2dwdWFycmF5L3R5cGUucHk=) | `31.55% <33.33%> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/302/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `88.36% <97.95%> (+0.16%)` | :arrow_up: |
| [aesara/ifelse.py](https://codecov.io/gh/pymc-devs/aesara/pull/302/diff?src=pr&el=tree#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `52.25% <100.00%> (+0.42%)` | :arrow_up: |
| [aesara/tensor/shape.py](https://codecov.io/gh/pymc-devs/aesara/pull/302/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9zaGFwZS5weQ==) | `91.84% <0.00%> (+0.30%)` | :arrow_up: |
| [aesara/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/302/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `93.20% <0.00%> (+0.61%)` | :arrow_up: |

codecov[bot](2021-02-15 04:33:21):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/303?src=pr&el=h1) Report
> Merging [#303](https://codecov.io/gh/pymc-devs/aesara/pull/303?src=pr&el=desc) (00e3581) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/13b08f0b1802bf64d128db401b30e278fcbdc8b4?el=desc) (13b08f0) will **increase** coverage by `0.01%`.
> The diff coverage is `86.36%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/303/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/303?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #303      +/-   ##
==========================================
+ Coverage   71.89%   71.91%   +0.01%     
==========================================
  Files         166      166              
  Lines       54567    54632      +65     
==========================================
+ Hits        39232    39288      +56     
- Misses      15335    15344       +9     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/303?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/gradient.py](https://codecov.io/gh/pymc-devs/aesara/pull/303/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `87.20% <ø> (ø)` | |
| [aesara/graph/optdb.py](https://codecov.io/gh/pymc-devs/aesara/pull/303/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL29wdGRiLnB5) | `84.36% <ø> (ø)` | |
| [aesara/gpuarray/type.py](https://codecov.io/gh/pymc-devs/aesara/pull/303/diff?src=pr&el=tree#diff-YWVzYXJhL2dwdWFycmF5L3R5cGUucHk=) | `31.55% <33.33%> (ø)` | |
| [aesara/sparse/type.py](https://codecov.io/gh/pymc-devs/aesara/pull/303/diff?src=pr&el=tree#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `74.44% <60.00%> (-5.81%)` | :arrow_down: |
| [aesara/tensor/blas.py](https://codecov.io/gh/pymc-devs/aesara/pull/303/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9ibGFzLnB5) | `86.39% <63.15%> (-0.49%)` | :arrow_down: |
| [aesara/graph/opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/303/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `68.14% <86.66%> (-0.01%)` | :arrow_down: |
| [aesara/sparse/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/303/diff?src=pr&el=tree#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `89.06% <92.85%> (+0.10%)` | :arrow_up: |
| [aesara/tensor/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/303/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `88.38% <98.11%> (+0.19%)` | :arrow_up: |
| [aesara/graph/fg.py](https://codecov.io/gh/pymc-devs/aesara/pull/303/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `92.58% <100.00%> (ø)` | |
| [aesara/graph/toolbox.py](https://codecov.io/gh/pymc-devs/aesara/pull/303/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL3Rvb2xib3gucHk=) | `70.77% <100.00%> (+0.09%)` | :arrow_up: |
| ... and [9 more](https://codecov.io/gh/pymc-devs/aesara/pull/303/diff?src=pr&el=tree-more) | |

brandonwillard(2021-02-15 22:39:20):This sparse implementation only supports matrices, but we could cover more ground with [`sparse`](https://sparse.pydata.org/en/stable/index.html).  It's an additional dependency, but seems like it could be worth it.
twiecki(2021-02-15 13:56:55):For when is this TODO?
twiecki(2021-02-15 13:57:21):Maybe link to the GH issue.
michaelosthege(2021-02-15 19:41:29):Why are the supertypes in a different order compared to the `SparseConstant` below?
michaelosthege(2021-02-15 19:42:20):This TODO could also use an explanation or link to a Github issue
michaelosthege(2021-02-15 19:44:26):Did you make it a list so it can be appended at runtime?
michaelosthege(2021-02-15 19:46:54):Is it even a supported use case to NOT have scipy?
michaelosthege(2021-02-15 19:49:53):Could a whitelist of supported types be an alternative here?
After all that import is sort of cyclic...
michaelosthege(2021-02-15 19:54:11):What does this test depend on? Could it become XFAIL instead or link to an issue?
michaelosthege(2021-02-15 19:55:09):Looks like this `change_flags` is not needed?
brandonwillard(2021-02-15 22:35:27):Not sure.
brandonwillard(2021-02-15 22:35:46):I was waiting to merge #302.
brandonwillard(2021-02-15 22:36:35):That's how this project was originally designed, I believe, but there's no point in supporting that optionality now.
brandonwillard(2021-02-15 22:37:36):No, it's not; that was left over from debugging.
brandonwillard(2021-02-15 22:38:00):I was waiting to merge #302.
brandonwillard(2021-02-15 22:38:14):I was waiting to merge #302.
brandonwillard(2021-02-15 22:47:01):Given the nature of this function (i.e. `get_scalar_constant_value`), it should also be converted to a dispatch function.  That way, we can keep irrelevant types out of `aesara.tensor.basic` entirely (e.g. `Assert`).
brandonwillard(2021-02-17 00:28:50):Actually, we have an issue for this: #96.
codecov[bot](2021-02-15 04:26:14):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/304?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#304](https://codecov.io/gh/pymc-devs/aesara/pull/304?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (6ab415f) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/ea5288208b009bb7aaf93bd3cf0f4603716a3198?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (ea52882) will **decrease** coverage by `0.00%`.
> The diff coverage is `66.66%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/304/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/304?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #304      +/-   ##
==========================================
- Coverage   72.49%   72.49%   -0.01%     
==========================================
  Files         173      173              
  Lines       55637    55638       +1     
==========================================
  Hits        40332    40332              
- Misses      15305    15306       +1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/304?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/compiledir.py](https://codecov.io/gh/pymc-devs/aesara/pull/304/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvY29tcGlsZWRpci5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/link/c/cmodule.py](https://codecov.io/gh/pymc-devs/aesara/pull/304/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `57.60% <80.00%> (+0.03%)` | :arrow_up: |
| [aesara/compile/builders.py](https://codecov.io/gh/pymc-devs/aesara/pull/304/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `79.88% <100.00%> (-0.06%)` | :arrow_down: |

michaelosthege(2021-02-15 12:22:18):In your PR description you mixed up the "ideally we want" with the other example, but in your changes you did the right thing.

To be clear: **We don't want `import theano`.**

Just changing those imports does not necessarily reduce import cycles, but it makes them easier to spot. So you should probably change the PR description and focus on the removal of `import theano` statements first.
ricardoV94(2021-02-18 18:51:38):That test failed for me on the gamma nan PR but I could not find the job afterwards. It might not be related to this at all. I mentioned it here: https://github.com/pymc-devs/aesara/pull/290#issuecomment-772412977
brandonwillard(2021-02-19 00:14:08):> To be clear: **We don't want `import theano`.**

We _definitely_ don't want that now that the package is named `aesara`!
CloudChaoszero(2021-03-07 06:29:56):Small update: I've been away from this PR, but will get back to it next week haha
twiecki(2021-03-07 18:19:26):Sounds good @CloudChaoszero, thanks for the update.
CloudChaoszero(2021-03-14 09:41:34):## Updates:

* I updated the pre-existing changed files to have no related `from aesara import ....` [explained in this thread](https://github.com/pymc-devs/aesara/pull/304#discussion_r582321244).
* For I still get an output error, [seen in this comment.](https://github.com/pymc-devs/aesara/pull/304#discussion_r579749060)

## Note
Are the number of changes in this PR good (i.e. is 23 files okay for this PR, and I can continue this work in another PR?)

brandonwillard(2021-03-14 20:30:05):> What puzzles me is why `tests/compile/test_compilelock.py::test_locking_thread` failed

You might've been seeing the problem I fixed [here](https://github.com/pymc-devs/aesara/pull/336/commits/de6e50d55d664d09219bc97523f26d006b26fc5c).
CloudChaoszero(2021-03-15 04:39:53):> > What puzzles me is why `tests/compile/test_compilelock.py::test_locking_thread` failed
> 
> You might've been seeing the problem I fixed [here](https://github.com/pymc-devs/aesara/pull/336/commits/de6e50d55d664d09219bc97523f26d006b26fc5c).

@brandonwillard oh wow! Hmmm, should I wait for this PR to be merged before seeing this goes through?
brandonwillard(2021-03-15 05:20:51):> should I wait for this PR to be merged before seeing this goes through?

No, we can just rerun the tests in CI when it fails.
CloudChaoszero(2021-03-31 04:29:48):@brandonwillard Alright re-ran by adding your PR's changes to this now, via rebase from `master`.

However, a pytest error now came out, from a test without major changes (in my opinion).
Thoughts on this?

```FAILED tests/compile/test_debugmode.py::TestPreallocatedOutput::test_f_contiguous```

https://github.com/pymc-devs/aesara/pull/304/checks?check_run_id=2233787737
brandonwillard(2021-04-05 00:55:48):> @brandonwillard Alright re-ran by adding your PR's changes to this now, via rebase from `master`.
> 
> However, a pytest error now came out, from a test without major changes (in my opinion).
> Thoughts on this?
> 
> `FAILED tests/compile/test_debugmode.py::TestPreallocatedOutput::test_f_contiguous`
> 
> https://github.com/pymc-devs/aesara/pull/304/checks?check_run_id=2233787737

The change from `np.complex` to `np.complex128` is causing this error.  Instead, use `complex`, because `np.complex` and `np.complex128` are not equivalent (i.e. the first is necessarily a scalar and the second is a dtype for `np.ndarray`s).
CloudChaoszero(2021-05-23 09:00:47):@brandonwillard Sounds good!
______

@michaelosthege  I've reverted file `aesara/tensor/math_opt.py`, and did the following tests. Most work, locally, except for file `pytest tests/link/c/test_basic.py` (I think this is a false negative `c` compile issue, on my local machine lol)

My pytest commands are the following

```
pytest tests/compile
pytest tests/d3viz/models.py
pytest tests/d3viz/test_d3viz.py
pytest tests/d3viz/test_formatting.py
pytest tests/link/c/test_cmodule.py
pytest tests/link/c/test_basic.py
pytest tests/test_breakpoint.py
pytest tests/test_determinism.py
pytest tests/test_dictionary_output.py
```


> ~Side note: Should I squash the commits?~ JK did it
twiecki(2021-05-26 08:15:46):@CloudChaoszero Seems ready, can you rebase and resolve conflicts?
CloudChaoszero(2021-05-26 08:57:38):Sounds great, done @twiecki. 
_____
Side note on this PR:

I will continue working on #235 `import aesara` issue in future segments. For this case, there were a lot of files/changes (pardon lol) 
twiecki(2021-05-26 10:08:32):Thanks @CloudChaoszero!
brandonwillard(2021-05-28 05:42:39):For future reference, please, no emoticons/symbols/etc. in commit messages.
michaelosthege(2021-02-18 18:29:22):I think this condition is supposed to actually evaluate to `False` if `value` is an array, because we don't want to "optimize" `a * [1, 0, 2]` to `0`.
michaelosthege(2021-02-18 18:34:30):`config` is a variable, not a module, therefore this still imports from the main `__init__`.

Instead:  `from aesara.configdefaults import config`.

Please check the other changed files for this too.
Just realized this is a test file and therefore not critical, but my comment still applies to other files in the codebase.
michaelosthege(2021-02-18 18:40:54):Lik in the comment above, this import still goes through the main `__init__`, because `function, grad` aren't modules.
CloudChaoszero(2021-02-21 04:38:23):Thanks for the clarification!

I changed it to the following

From 

```python
            # Print 'MUL by value', value, node.inputs.
            # We use value.any() to avoid ambiguous array with more than one element.
            if value.any() == 0:
```

To 

```python
            # Validate code to optimize operation to result in array.
            # E.g. We do not want't to "optimize" `a * [1, 0, 2]`` to 0.
            if value.any() is False:
```
______

I get this unrelated error, unsure if it's my Aesara version

```
FAILED tests/tensor/test_math_opt.py::TestLocalUselessElemwiseComparison::test_local_useless_elemwise_comparison - Exception: ('The foll...
```
CloudChaoszero(2021-02-21 06:39:10):Sounds great, I did that for this case and a couple of other files. 

Before reviewing my edits to see other cases like this module import situation, I am re-running the tests to see if they have good results, right now. 
michaelosthege(2021-02-22 11:49:01):Maybe my preview review comment wasn't clear: I think `value == 0` is the (only) correct condition here.
michaelosthege(2021-02-22 11:54:46):I think this import still goes through the main `__init__.py`? (cc @brandonwillard )
brandonwillard(2021-02-23 03:28:31):Are you referring to `aesara/__init__.py`?
michaelosthege(2021-02-24 17:12:30):Yes. My understanding is that `from aesara import something` goes through the `aesara/__init__.py` even if `something` is a submodule?
brandonwillard(2021-02-24 20:43:36):It should, and so should every `import` under `aesara` (e.g. the `from aesara import tensor` line).  Those `__init__.py` files are effectively unavoidable, which is why we need to trim the number of imports that occur within those.

The way I see it, there's a user-level API that makes some important elements available at the main package scope (e.g. `aesara.function`) and there are other imports that trigger/load features; we need those kinds of imports in the `__init__.py`s.  However, that user-level API, and a lot of other unnecessary imports, are used (and abused) by our internal code, which results in a bunch of indirect imports that mess with development tools and confuse developers.
michaelosthege(2021-02-24 21:35:02):Thank's for the distinction between (non-)user-level APIs.

Without even analyzing what kind of API it's about, we can replace imports like
```
from aesara import tensor as aet
```
with
```
import aesara.tensor as aet 
```
everywhere in the codebase. (cc @CloudChaoszero )
brandonwillard(2021-02-25 17:21:37):Those are supposed to be equivalent statements in Python, but, due to a bug in Python 3.6, I believe the latter form will give rise to cyclic import issues that shouldn't actually be a problem.  In other words, don't be surprised if you see those changes working in Python 3.7 yet failing in 3.6.

Naturally, if we refactor the code so that there are no cyclic dependencies, then this won't be an issue either way.
CloudChaoszero(2021-03-14 09:36:54):Thanks for the feedback! I updated all 22 file changes to ensure there is no related `from aesara import....`
CloudChaoszero(2021-03-14 09:37:57):Sounds great @michaelosthege . When I ran its respective test, I get the following, [seen in this aforementioned comment.](https://github.com/pymc-devs/aesara/pull/304#discussion_r579749060)
michaelosthege(2021-03-14 13:10:08):What's this change about? Could it be the reason for failing tests?
michaelosthege(2021-03-14 13:12:51):I'm very sure that we have to keep this exactly as it was before:
```
# print 'MUL by value', value, node.inputs
if value == 0:
```
michaelosthege(2021-03-14 13:14:42):This import is unnecessary, because the same object is imported right in the line above.
michaelosthege(2021-03-14 13:14:57):see above
CloudChaoszero(2021-03-15 04:21:03):For this change, I kept on coming across the following numpy deprecation error when running `pytest tests/tensor/test_basic.py`:

<details>
<summary>
Error
</summary>

```python
========================================== warnings summary ==========================================
aesara/scalar/basic.py:2416
  /Users/CloudChaoszero/Documents/Projects-Dev/Theano-PyMC/aesara/scalar/basic.py:2416: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    self.ctor = getattr(np, o_type.dtype)

tests/tensor/test_basic.py: 3247 warnings
  /Users/CloudChaoszero/Documents/Projects-Dev/Theano-PyMC/aesara/tensor/basic.py:263: DeprecationWarning: `np.complex` is a deprecated alias for the builtin `complex`. To silence this warning, use `complex` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.complex128` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    np.complex(data)  # works for all numeric scalars
```

</details>

The numpy Bool datatype is affected as well.

Using ``numpy 1.20.0``
CloudChaoszero(2021-03-15 04:39:11):Done!
codecov[bot](2021-02-18 01:36:43):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/305?src=pr&el=h1) Report
> Merging [#305](https://codecov.io/gh/pymc-devs/aesara/pull/305?src=pr&el=desc) (04db01e) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/bd54469c7833e2a8c21751e97b7cdd299080dc99?el=desc) (bd54469) will **increase** coverage by `0.00%`.
> The diff coverage is `50.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/305/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/305?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #305   +/-   ##
=======================================
  Coverage   71.91%   71.91%           
=======================================
  Files         166      166           
  Lines       54570    54567    -3     
=======================================
- Hits        39242    39241    -1     
+ Misses      15328    15326    -2     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/305?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/305/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `88.46% <50.00%> (+0.10%)` | :arrow_up: |

brandonwillard(2021-03-01 22:23:46):We can't replace the functionality of `Assert` like this, because `Assert` is an `Op` that performs the check at "run-time" (i.e. when the graph is being evaluated).

Instead, we should try replacing `assert_shape` with `SpecifyShape`.
hs2361(2021-03-05 18:44:50):I apologize for the delay in replying, but I looked through the SpecifyShape class, and how it's being used across the codebase. However, I'm not being able to understand how I can achieve the functionality of assert_shape using SpecifyShape. Here's my current approach (following the method used in `tests.tensor.nnet.test_abstract_conv`):

```python
specify_shape = SpecifyShape()
image_func = aesara.function([img], specify_shape(img, [self.imshp]))
kern_func = aesara.function([kern], specify_shape(kern, [self.kshp]))
image_func(img)
kern_func(kern)
```
However, on running the tests, the AssertionError is being produced at a stage before it is expected, and hence the tests will fail. Is this the right way to approach this? If not, please do suggest how I can go about doing this.
brandonwillard(2021-03-07 01:12:51):It's better if you use the existing instance of `SpecifyShape` in `aesara.tensor.shape`.

Otherwise, you should only need to replace `assert_shape` with calls to `specify_shape`.  If there are errors caused by that, you'll need to rebase this branch with those changes so I can see them.
hs2361(2021-03-07 05:01:03):I've replaced the calls to `assert_shape` with `specify_shape`. However, the unit tests in `tests.tensor.nnet.test_abstract_conv` will fail due to TypeErrors.
codecov[bot](2021-03-01 19:12:30):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/310?src=pr&el=h1) Report
> Merging [#310](https://codecov.io/gh/pymc-devs/aesara/pull/310?src=pr&el=desc) (5b97512) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/5795760d3d9f160fca3d20b266a224e87d86a6b4?el=desc) (5795760) will **increase** coverage by `0.00%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/310/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/310?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #310   +/-   ##
=======================================
  Coverage   71.88%   71.89%           
=======================================
  Files         166      166           
  Lines       54554    54554           
=======================================
+ Hits        39217    39222    +5     
+ Misses      15337    15332    -5     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/310?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/\_version.py](https://codecov.io/gh/pymc-devs/aesara/pull/310/diff?src=pr&el=tree#diff-YWVzYXJhL192ZXJzaW9uLnB5) | `44.00% <0.00%> (+1.81%)` | :arrow_up: |

brandonwillard(2021-03-01 21:05:03):I don't think we need the comment at the end of the line.
codecov[bot](2021-03-01 23:22:51):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/311?src=pr&el=h1) Report
> Merging [#311](https://codecov.io/gh/pymc-devs/aesara/pull/311?src=pr&el=desc) (ed08da4) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/5795760d3d9f160fca3d20b266a224e87d86a6b4?el=desc) (5795760) will **increase** coverage by `0.00%`.
> The diff coverage is `14.28%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/311/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/311?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #311   +/-   ##
=======================================
  Coverage   71.88%   71.89%           
=======================================
  Files         166      166           
  Lines       54554    54554           
=======================================
+ Hits        39217    39222    +5     
+ Misses      15337    15332    -5     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/311?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/printing.py](https://codecov.io/gh/pymc-devs/aesara/pull/311/diff?src=pr&el=tree#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `43.02% <14.28%> (ø)` | |
| [aesara/\_version.py](https://codecov.io/gh/pymc-devs/aesara/pull/311/diff?src=pr&el=tree#diff-YWVzYXJhL192ZXJzaW9uLnB5) | `44.00% <0.00%> (+1.81%)` | :arrow_up: |

codecov[bot](2021-03-04 02:37:29):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/316?src=pr&el=h1) Report
> Merging [#316](https://codecov.io/gh/pymc-devs/aesara/pull/316?src=pr&el=desc) (f2d3232) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/16f98e4fd69db92e0c2cde9dd97a0d005235deea?el=desc) (16f98e4) will **increase** coverage by `0.00%`.
> The diff coverage is `96.29%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/316/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/316?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #316   +/-   ##
=======================================
  Coverage   71.89%   71.89%           
=======================================
  Files         166      166           
  Lines       54554    54559    +5     
=======================================
+ Hits        39222    39227    +5     
  Misses      15332    15332           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/316?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/link/utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/316/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `51.85% <50.00%> (ø)` | |
| [aesara/gpuarray/dnn.py](https://codecov.io/gh/pymc-devs/aesara/pull/316/diff?src=pr&el=tree#diff-YWVzYXJhL2dwdWFycmF5L2Rubi5weQ==) | `23.78% <100.00%> (+0.04%)` | :arrow_up: |
| [aesara/graph/unify.py](https://codecov.io/gh/pymc-devs/aesara/pull/316/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL3VuaWZ5LnB5) | `44.76% <100.00%> (+0.23%)` | :arrow_up: |
| [aesara/link/c/interface.py](https://codecov.io/gh/pymc-devs/aesara/pull/316/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvYy9pbnRlcmZhY2UucHk=) | `94.04% <100.00%> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/316/diff?src=pr&el=tree#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `84.65% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/sparse/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/316/diff?src=pr&el=tree#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `88.96% <100.00%> (ø)` | |
| [aesara/tensor/nnet/corr.py](https://codecov.io/gh/pymc-devs/aesara/pull/316/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvcnIucHk=) | `83.62% <100.00%> (+0.04%)` | :arrow_up: |
| [aesara/tensor/nnet/corr3d.py](https://codecov.io/gh/pymc-devs/aesara/pull/316/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvcnIzZC5weQ==) | `83.78% <100.00%> (+0.04%)` | :arrow_up: |

twiecki(2021-03-08 08:13:18):Thanks @LegrandNico!
ricardoV94(2021-03-04 09:50:06):I tried without success to use directly the functions from the Fadddeeva library: http://ab-initio.mit.edu/wiki/index.php/Faddeeva_Package

Faddeeva.cc contains the code for the erfcx function, and it requires either Faddeeva.h (c compiler) or Faddeeva.hh (c++ compiler). When I try to compile the following function I get an error saying that Faddeeva.hh cannot be found (I am suprised aesara is compiling to c++ and not to c, which means I might have to change the function call...):

```python
x = aet.dscalar('x'); y = aet.erfcx(x); func = ae.function([x], y)
```
```
Traceback (most recent call last):
  File "/usr/lib/python3.8/code.py", line 90, in runcode
    exec(code, self.locals)
  File "<input>", line 1, in <module>
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/compile/function/__init__.py", line 337, in function
    fn = pfunc(
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/compile/function/pfunc.py", line 524, in pfunc
    return orig_function(
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/compile/function/types.py", line 1981, in orig_function
    fn = m.create(defaults)
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/compile/function/types.py", line 1836, in create
    _fn, _i, _o = self.linker.make_thunk(
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/link/basic.py", line 294, in make_thunk
    return self.make_all(
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/link/vm.py", line 1131, in make_all
    node.op.make_thunk(node, storage_map, compute_map, [], impl=impl)
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/graph/op.py", line 631, in make_thunk
    return self.make_c_thunk(node, storage_map, compute_map, no_recycling)
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/graph/op.py", line 597, in make_c_thunk
    outputs = cl.make_thunk(
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/link/c/basic.py", line 1203, in make_thunk
    cthunk, module, in_storage, out_storage, error_storage = self.__compile__(
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/link/c/basic.py", line 1138, in __compile__
    thunk, module = self.cthunk_factory(
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/link/c/basic.py", line 1634, in cthunk_factory
    module = get_module_cache().module_from_key(key=key, lnk=self)
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/link/c/cmodule.py", line 1191, in module_from_key
    module = lnk.compile_cmodule(location)
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/link/c/basic.py", line 1543, in compile_cmodule
    module = c_compiler.compile_str(
  File "/home/evelin/Documents/Ricardo/Projects/aesara/aesara/link/c/cmodule.py", line 2546, in compile_str
    raise Exception(
Exception: ('The following error happened while compiling the node', Elemwise{erfcx,no_inplace}(x), '\n', 'Compilation failed (return status=1): /home/evelin/.aesara/compiledir_Linux-5.4--generic-x86_64-with-glibc2.29-x86_64-3.8.5-64/tmp4h6ran3x/mod.cpp:172:12: fatal error: Faddeeva.hh: No such file or directory.   172 | #  include "Faddeeva.hh".       |            ^~~~~~~~~~~~~. compilation terminated.. ', 'FunctionGraph(Elemwise{erfcx,no_inplace}(x))')
```
The last line runs a bit long, this is the relevant part:
```
fatal error: Faddeeva.hh: No such file or directory.   172 | #  include "Faddeeva.hh".       |            ^~~~~~~~~~~~~. compilation terminated.. ', 'FunctionGraph(Elemwise{erfcx,no_inplace}(x))')
```


I am able to compile locally to both c and c++:
```C
#include <stdio.h>
#include "Faddeeva.cc"

int main(){
        double result;

        result = Faddeeva_erfcx_re(0.99);
        printf("result = %f", result);
        return(0);
}
```
```bash
gcc -o examplec example.c -lm
./examplec
result = 0.430331
```
```C++
#include <stdio.h>
#include "Faddeeva.cc"

int main(){
        double result;

        result = Faddeeva::erfcx(0.99);
        printf("result = %f", result);
        return(0);
}
```
```bash
g++ -o examplecc example.cc
./examplecc
result = 0.430331
```
twiecki(2021-03-04 14:42:14):How do you know it's a problem with the header? The exception is rather uninformative.
ricardoV94(2021-03-04 14:44:58):> How do you know it's a problem with the header? The exception is rather uninformative.

Because I didn't copy the exception well :b. I updated it now
brandonwillard(2021-03-05 00:37:06):If you're not already, you might need to clear the compilation cache&mdash;using the `aesara-cache` tool&mdash;between certain types of changes (or simply all of them, to be safe).
ricardoV94(2021-03-05 07:01:43):> If you're not already, you might need to clear the compilation cache—using the `aesara-cache` tool—between certain types of changes (or simply all of them, to be safe).

I did clear it. I mean I think I did, because while I can do it in an environment where aesara in installed through pip, I cannot do it in the development environment, so I manually deleted the .aesara folder in the home directory.
ricardoV94(2021-03-05 07:07:26):Am I misunderstanding the role of the `c_header_dirs method`? It never seems to be called. I tried adding it and raising a SystemError in other methods implemented in basic_scipy.py and it seems it's never triggered.
dfm(2021-03-05 13:41:21):I can confirm that the header directory method is not called. I assume that it has something to do with this recently added condition: https://github.com/pymc-devs/aesara/blob/22c8c46dcb9898e5ca40b248692211b350568af6/aesara/link/c/basic.py#L1061

You can just replace

```c++
#  include "Faddeeva.hh"
```

in `Faddeeva.cc` with the some of contents of `Faddeeva.hh` to get it to work.

<details>
<summary>A subset of Faddeeva.hh</summary>

```c++
#include <complex>

namespace Faddeeva {

// compute w(z) = exp(-z^2) erfc(-iz) [ Faddeeva / scaled complex error func ]
extern std::complex<double> w(std::complex<double> z,double relerr=0);
extern double w_im(double x); // special-case code for Im[w(x)] of real x

// Various functions that we can compute with the help of w(z)

// compute erfcx(z) = exp(z^2) erfc(z)
extern std::complex<double> erfcx(std::complex<double> z, double relerr=0);
extern double erfcx(double x); // special case for real x

// compute erf(z), the error function of complex arguments
extern std::complex<double> erf(std::complex<double> z, double relerr=0);
extern double erf(double x); // special case for real x

// compute erfi(z) = -i erf(iz), the imaginary error function
extern std::complex<double> erfi(std::complex<double> z, double relerr=0);
extern double erfi(double x); // special case for real x

// compute erfc(z) = 1 - erf(z), the complementary error function
extern std::complex<double> erfc(std::complex<double> z, double relerr=0);
extern double erfc(double x); // special case for real x

// compute Dawson(z) = sqrt(pi)/2  *  exp(-z^2) * erfi(z)
extern std::complex<double> Dawson(std::complex<double> z, double relerr=0);
extern double Dawson(double x); // special case for real x

} // namespace Faddeeva
```
</details>

You probably also want the `c_code` method to be something like:

```python
    def c_code(self, node, name, inp, out, sub):
        (x,) = inp
        (z,) = out
        if node.inputs[0].type in float_types:
            dtype = "npy_" + node.outputs[0].dtype
            return (
                """%(z)s =
                (%(dtype)s) Faddeeva::erfcx(%(x)s);"""
                % locals()
            )
        raise NotImplementedError("only floatingpoint is implemented")
```
ricardoV94(2021-03-05 13:51:34):@dfm that is really helpful! Thanks for digging around. 

Since you were the one who first mentioned this library, do you think there is any advantage in using the Faddeeva version vs the Scipy adaptation. I did a quick comparison recently and the scipy guys seem to have replaced some constructs like npy_nan / npy_inf as well as to reduce the number of terms used in some of the approximations: https://github.com/scipy/scipy/blob/master/scipy/special/Faddeeva.cc

On the other hand the Faddeeva version seems to have been updated slightly since then.
twiecki(2021-03-05 13:58:48):Seems like a bug then, no? Or you need to inherit from `CLinkerObject` somehow.
dfm(2021-03-05 15:30:54):@ricardoV94: I'm not sure that I have any insight on that - sorry!

@twiecki: perhaps. I would have expected that conditional to work because I think it does inherit appropriately (although there is some multiple inheritance and my intuition is often wrong!) somewhere in the hierarchy, but that's the only spot I could find where this might be coming from. It probably deserves some experiments/a test. 
ricardoV94(2021-03-05 15:47:47):I will check if that's where it fails, but in terms of inheritance things look about right:

```python
isinstance(aet.erfcx, aesara.link.c.interface.CLinkerObject)  #True
```
ricardoV94(2021-03-05 16:33:47):Interestingly enough the c_header_dirs is reached when using a scalar:

```python
import aesara as ae; import aesara.tensor as aet; import aesara.scalar as aes
x = aet.dscalar('x'); y = aes.erfcx(x); func = ae.function([x], y)

func(0.99)
#0.4303312130641483
```

ricardoV94(2021-03-05 16:54:02):So `Elemwise` was not calling the `c_header_dirs`. This change seems to fix things: https://github.com/pymc-devs/aesara/pull/317/commits/cdb8010f32c9b53de47996d5ca0d0e4a6284c329

Is there a reason why `c_header_dirs` shoud not be called for `Elemwise`?
twiecki(2021-03-05 17:13:39):Great catch, I'm sure that's just an oversight.
twiecki(2021-03-05 17:14:30):Then I think we just need some tests 🥳 
ricardoV94(2021-03-05 17:26:22):Actually the old tests should already be running with the C code version now (they failed when the c_code was invalid).

We need to decide on whether to use the Faddeeva or the Scipy implementation, which makes use of numpy nan / inf / copysign constructs instead, and uses less approximation terms in some places.

And we should decide whether we it's worth replacing the c code with the one implemented here for other functions (erf, erfc) and complex variations...
twiecki(2021-03-05 17:41:18):So instead of this file you'd copy over the version modified by scipy? It sounds like a better implementation so should probably go with twhat. what do you think?
ricardoV94(2021-03-05 17:52:47):> So instead of this file you'd copy over the version modified by scipy? It sounds like a better implementation so should probably go with twhat. what do you think?

I will check again the diff. Maybe I will merge the more recent changes that increase accuracy / optimizations on the Faddeeva implementation with the numpy macros for nan/inf/copysign on the scipy implementation. 
ricardoV94(2021-03-05 17:53:48):Something still funny with the header. 

`py.test tests/tensor/test_basic_scipy.py -k "TestErfcxInplaceBroadcast"` passes

`py.test tests/tensor/test_basic_scipy.py -k "TestErfcxBroadcast"` fails with the same "Faddeeva.hh" missing story.

Some other place where the call to `c_header_dirs()` is missing?

brandonwillard(2021-03-05 18:37:08):> We need to decide on whether to use the Faddeeva or the Scipy implementation, which makes use of numpy nan / inf / copysign constructs instead, and uses less approximation terms in some places.

In general, we do not want to add new external dependencies (even if it means adding external C source to this project), so the SciPy approach may be preferable.
ricardoV94(2021-03-06 17:16:25):Any tips on where to look to understand why the inplace tests pass but not the no-inplace?

Sounds like the same header dir missing issue, but I have no idea where to look.
brandonwillard(2021-03-07 17:19:36):The problem might be `aesara.scalar.Composite`.

Individual scalar `Op`s are combined into single `Composite` `Op`s, and that doesn't implement the `c_header_dirs` method.
brandonwillard(2021-03-07 18:04:44):OK, that seems to have fixed it.  

I cleaned up the commits, so when/if these test pass and we're sure that we want to include this Faddeeva code in Aesara (e.g. we need to make sure that the license works out, that the existing SciPy dependency isn't just as good, etc.), we should be good to merge.
codecov[bot](2021-03-07 18:14:41):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/317?src=pr&el=h1) Report
> Merging [#317](https://codecov.io/gh/pymc-devs/aesara/pull/317?src=pr&el=desc) (7af6eb5) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/22c8c46dcb9898e5ca40b248692211b350568af6?el=desc) (22c8c46) will **increase** coverage by `0.01%`.
> The diff coverage is `95.89%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/317/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/317?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #317      +/-   ##
==========================================
+ Coverage   71.88%   71.89%   +0.01%     
==========================================
  Files         166      166              
  Lines       54526    54550      +24     
==========================================
+ Hits        39196    39220      +24     
  Misses      15330    15330              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/317?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/link/utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/317/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `52.26% <50.00%> (+0.41%)` | :arrow_up: |
| [aesara/scalar/basic\_scipy.py](https://codecov.io/gh/pymc-devs/aesara/pull/317/diff?src=pr&el=tree#diff-YWVzYXJhL3NjYWxhci9iYXNpY19zY2lweS5weQ==) | `75.57% <92.85%> (+0.57%)` | :arrow_up: |
| [aesara/gpuarray/dnn.py](https://codecov.io/gh/pymc-devs/aesara/pull/317/diff?src=pr&el=tree#diff-YWVzYXJhL2dwdWFycmF5L2Rubi5weQ==) | `23.78% <100.00%> (+0.04%)` | :arrow_up: |
| [aesara/graph/unify.py](https://codecov.io/gh/pymc-devs/aesara/pull/317/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL3VuaWZ5LnB5) | `44.76% <100.00%> (+0.23%)` | :arrow_up: |
| [aesara/link/c/interface.py](https://codecov.io/gh/pymc-devs/aesara/pull/317/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvYy9pbnRlcmZhY2UucHk=) | `94.04% <100.00%> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/317/diff?src=pr&el=tree#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `84.67% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/sparse/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/317/diff?src=pr&el=tree#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `88.96% <100.00%> (ø)` | |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/aesara/pull/317/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `91.97% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/tensor/nnet/corr.py](https://codecov.io/gh/pymc-devs/aesara/pull/317/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvcnIucHk=) | `83.62% <100.00%> (+0.04%)` | :arrow_up: |
| [aesara/tensor/nnet/corr3d.py](https://codecov.io/gh/pymc-devs/aesara/pull/317/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvcnIzZC5weQ==) | `83.78% <100.00%> (+0.04%)` | :arrow_up: |
| ... and [1 more](https://codecov.io/gh/pymc-devs/aesara/pull/317/diff?src=pr&el=tree-more) | |

ricardoV94(2021-03-07 18:30:45):> OK, that seems to have fixed it.  
> 
> I cleaned up the commits, so when/if these test pass and we're sure that we want to include this Faddeeva code in Aesara (e.g. we need to make sure that the license works out, that the existing SciPy dependency isn't just as good, etc.), we should be good to merge.

Thanks a lot for your help. I will double check the license tomorrow and compare the scipy and faddeeva versions. We should be ready to go soon
twiecki(2021-03-08 11:10:56):Excited to get this speed-up in!
ricardoV94(2021-03-08 11:56:36):I ended up using the Faddeeva original files.

The scipy version was giving me problems with the npy_copysign, and it seems they already had to revert the npy_isinf and npy_isnan functions in the past due to conflicts with the `cmath` library (see https://github.com/scipy/scipy/issues/5689). Overall it seems that most of the benefits of using the numpy implementations are limited due to conflicts with the c++ standard libraries. 

One advantage of the Faddeeva version is that some small precision and performance improvements have been done since the scipy branch was last updated.

Also, these functions are implemented with complex numbers, so if there is a demand to have them work with aesara complex objects it should be possible to do it. I am happy to NOT do it, unless you guys think this should be done now.

License is MIT so it should be fine to use: http://ab-initio.mit.edu/wiki/index.php/Faddeeva_Package#License

Finally, just for sanity check I ran the built-in tests in the source file and everything passed.





twiecki(2021-03-08 12:33:21):Sounds like the right move. We don't need complex support.
ricardoV94(2021-03-08 14:23:19):Should we add a cache number?
twiecki(2021-03-08 14:28:05):What's that?
ricardoV94(2021-03-08 17:08:37):https://theano-pymc.readthedocs.io/en/latest/extending/extending_theano_c.html#c_code_cache_version
twiecki(2021-03-08 18:13:38):Sure, good idea.
brandonwillard(2021-03-08 23:47:54):Also, this PR seems to have at least doubled in commits.  We only need three: i.e. one corresponding to the Faddeeva/erfcx addition and one for each of the newly added header methods.
ricardoV94(2021-03-09 05:31:43):> If we're going to choose between header files, we should go with the C one (i.e. `Faddeeva.h`), since this is the approach that the rest of the library takes.  

Then we need a way to tell aesara to use the c compiler and not c++, because otherwise the `if _cplusplus` condition in Faddeeva.cc gets triggered and the compiler looks for the .hh header instead of the .h header. 

How can I enforce the c compiler is used?

Or do I have to remove these compiler dependent options from the source file?
ricardoV94(2021-03-09 05:33:21):> Also, this PR seems to have at least doubled in commits.  We only need three: i.e. one corresponding to the Faddeeva/erfcx addition and one for each of the newly added header methods.

I didn't pay attention to this. Just assumed squash and merge is going on. I'll clean them once we decide about the header. 
brandonwillard(2021-03-10 00:04:14):> Then we need a way to tell aesara to use the c compiler and not c++, because otherwise the `if _cplusplus` condition in Faddeeva.cc gets triggered and the compiler looks for the .hh header instead of the .h header.

If that's the case, then we can leave it as is.
twiecki(2021-03-10 06:26:12):Thanks @ricardoV94, this is a great contribution!
brandonwillard(2021-03-10 06:33:39):These commits needed to be squashed; there were some odd duplicates in there.
twiecki(2021-03-04 14:43:02):Does this get triggered?
ricardoV94(2021-03-04 14:45:42):Nope
twiecki(2021-03-08 11:11:44):Do we need a `.h` *and* a `.hh` file?
ricardoV94(2021-03-08 11:47:18):No, only the .hh
codecov[bot](2021-03-05 00:29:44):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/319?src=pr&el=h1) Report
> Merging [#319](https://codecov.io/gh/pymc-devs/aesara/pull/319?src=pr&el=desc) (f2aa3d8) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/16f98e4fd69db92e0c2cde9dd97a0d005235deea?el=desc) (16f98e4) will **decrease** coverage by `0.01%`.
> The diff coverage is `90.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/319/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/319?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #319      +/-   ##
==========================================
- Coverage   71.89%   71.88%   -0.02%     
==========================================
  Files         166      166              
  Lines       54554    54526      -28     
==========================================
- Hits        39222    39196      -26     
+ Misses      15332    15330       -2     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/319?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/sandbox/linalg/ops.py](https://codecov.io/gh/pymc-devs/aesara/pull/319/diff?src=pr&el=tree#diff-YWVzYXJhL3NhbmRib3gvbGluYWxnL29wcy5weQ==) | `72.91% <50.00%> (ø)` | |
| [aesara/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/319/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `93.22% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/tensor/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/319/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `88.47% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/pymc-devs/aesara/pull/319/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `93.24% <100.00%> (-0.02%)` | :arrow_down: |
| [aesara/tensor/nlinalg.py](https://codecov.io/gh/pymc-devs/aesara/pull/319/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9ubGluYWxnLnB5) | `98.83% <100.00%> (+0.44%)` | :arrow_up: |

brandonwillard(2021-03-07 16:18:57):We might want to define these in PyMC3 (on the `v4` branch).  The rule-of-thumb is that we only include the `numpy.random` distributions in Aesara.
kc611(2021-03-07 16:46:10):Alright, I guess that only `HalfNormal` uses `scipy.stats` so I'll remove that one from this PR.

What about `KumarswamyRV` it uses `rng` but the formulation is self defined. Should that one be relocated too? 
brandonwillard(2021-03-07 16:48:47):Yeah, I think `laplace` and `wald` are the only ones in `numpy.random`.
brandonwillard(2021-03-07 16:52:14):We can use SciPy&mdash;or anything else&mdash;to generate the samples, it's just the NumPy API that we're trying to emulate.  It also helps us limit the size of Aesara, which could balloon if we attempted to cover all the distributions&mdash;like SciPy does.  

Plus, PyMC3 is definitely a more suitable place for work on distributions specifically.
codecov[bot](2021-03-07 17:02:32):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/321?src=pr&el=h1) Report
> Merging [#321](https://codecov.io/gh/pymc-devs/aesara/pull/321?src=pr&el=desc) (f307028) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/16f98e4fd69db92e0c2cde9dd97a0d005235deea?el=desc) (16f98e4) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/321/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/321?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #321      +/-   ##
==========================================
- Coverage   71.89%   71.89%   -0.01%     
==========================================
  Files         166      166              
  Lines       54554    54542      -12     
==========================================
- Hits        39222    39213       -9     
+ Misses      15332    15329       -3     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/321?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/321/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/pymc-devs/aesara/pull/321/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `93.24% <0.00%> (-0.02%)` | :arrow_down: |
| [aesara/sandbox/linalg/ops.py](https://codecov.io/gh/pymc-devs/aesara/pull/321/diff?src=pr&el=tree#diff-YWVzYXJhL3NhbmRib3gvbGluYWxnL29wcy5weQ==) | `72.91% <0.00%> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/321/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `88.47% <0.00%> (+<0.01%)` | :arrow_up: |
| [aesara/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/321/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `93.22% <0.00%> (+0.01%)` | :arrow_up: |
| [aesara/link/utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/321/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `52.26% <0.00%> (+0.41%)` | :arrow_up: |
| [aesara/tensor/nlinalg.py](https://codecov.io/gh/pymc-devs/aesara/pull/321/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9ubGluYWxnLnB5) | `98.83% <0.00%> (+0.44%)` | :arrow_up: |

twiecki(2021-03-10 06:28:29):Thanks @kc611!
LegrandNico(2021-03-13 11:54:50):Several of the remaining errors come from the declaration of attributes of function objects. This is a well-known issue for mypy that [has been pending for > 4 years](https://github.com/python/mypy/issues/2087), and as far as I know, there is no easy way to handle that.

* The first solution would be to comment and skip type checking for all lines where function attributes are declared (`# type: ignore`).

* The second solution would be to use [this workaround](https://github.com/python/mypy/issues/2087#issuecomment-769266912):

```python

from typing_extensions import Protocol

class AdminAttributes(Protocol):
    short_description: str


def admin_attr_decorator(func: Any) -> AdminAttributes:
    return func


@admin_attr_decorator
def action(modeladmin: admin.ModelAdmin, request: HttpRequest, queryset: QuerySet) -> None:
    do_stuff()


action.short_description = 'do stuff'
``` 

I think solution 2 is better, even if it complexifies the code a bit.

brandonwillard(2021-03-13 21:26:58):> I think solution 2 is better, even if it complexifies the code a bit.

Agreed.
LegrandNico(2021-03-14 15:49:15):I am still working on the workaround, maybe we can merge this PR and I will open another one when it is ready.
twiecki(2021-03-16 10:13:48):Thanks @LegrandNico!
michaelosthege(2021-03-14 13:31:01):Looks like some hints use a different import pattern
LegrandNico(2021-03-14 15:47:47):Yes, this file already had an `import typing` call and I didn't want to change everything using the `from typing import Dict` pattern, but it would make sense to uniformize this at a certain point.
codecov[bot](2021-03-14 05:50:16):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/336?src=pr&el=h1) Report
> Merging [#336](https://codecov.io/gh/pymc-devs/aesara/pull/336?src=pr&el=desc) (3d77895) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/f0392db779208ba716ece1e6e1e0201e7564436c?el=desc) (f0392db) will **increase** coverage by `0.02%`.
> The diff coverage is `72.72%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/336/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/336?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #336      +/-   ##
==========================================
+ Coverage   71.94%   71.96%   +0.02%     
==========================================
  Files         166      166              
  Lines       54634    54627       -7     
==========================================
+ Hits        39305    39314       +9     
+ Misses      15329    15313      -16     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/336?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/link/utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/336/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `52.45% <28.57%> (+0.19%)` | :arrow_up: |
| [aesara/link/c/exceptions.py](https://codecov.io/gh/pymc-devs/aesara/pull/336/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvYy9leGNlcHRpb25zLnB5) | `80.00% <75.00%> (-20.00%)` | :arrow_down: |
| [aesara/compile/compilelock.py](https://codecov.io/gh/pymc-devs/aesara/pull/336/diff?src=pr&el=tree#diff-YWVzYXJhL2NvbXBpbGUvY29tcGlsZWxvY2sucHk=) | `100.00% <100.00%> (ø)` | |
| [aesara/link/c/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/336/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvYy9iYXNpYy5weQ==) | `92.18% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/link/c/cmodule.py](https://codecov.io/gh/pymc-devs/aesara/pull/336/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `57.67% <100.00%> (+1.21%)` | :arrow_up: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/pymc-devs/aesara/pull/336/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `92.00% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/336/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |
| [aesara/configdefaults.py](https://codecov.io/gh/pymc-devs/aesara/pull/336/diff?src=pr&el=tree#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `80.39% <0.00%> (+0.24%)` | :arrow_up: |

ricardoV94(2021-03-17 14:37:16):Just the typos now
codecov[bot](2021-03-17 15:28:58):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/341?src=pr&el=h1) Report
> Merging [#341](https://codecov.io/gh/pymc-devs/aesara/pull/341?src=pr&el=desc) (64a8551) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/f0392db779208ba716ece1e6e1e0201e7564436c?el=desc) (f0392db) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/341/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/341?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #341   +/-   ##
=======================================
  Coverage   71.94%   71.94%           
=======================================
  Files         166      166           
  Lines       54634    54634           
=======================================
  Hits        39305    39305           
  Misses      15329    15329           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/341?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/341/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |

ricardoV94(2021-03-17 09:19:38):Not sure about this, I though it makes sense for the `__call__` and `rng_fn` to treat the same inputs equally, but I actually don't know what is the purpose of `__call__` here. Happy to revert.
brandonwillard(2021-03-17 14:22:56):Why this breaking change?
ricardoV94(2021-03-17 14:28:30):No good reason, just wanted to check if it broke things. I thought the same variable names rate / scale should be used between `__call__` and `rng_fn` and I changed it here. Will revert
twiecki(2021-03-18 08:24:01):@OriolAbril Can you take over and add a test?
OriolAbril(2021-03-19 20:02:34):@brandonwillard should I add a test for Join? It looks like there is no specific test at all for Join in test jax. If so, which cases should it cover?
codecov[bot](2021-03-19 20:56:37):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/343?src=pr&el=h1) Report
> Merging [#343](https://codecov.io/gh/pymc-devs/aesara/pull/343?src=pr&el=desc) (1b356e4) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/219a9516856b10bc95cd8710ebcdf1d3cb6a93e1?el=desc) (219a951) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/343/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/343?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #343      +/-   ##
==========================================
+ Coverage   71.97%   71.98%   +0.01%     
==========================================
  Files         166      166              
  Lines       54638    54643       +5     
==========================================
+ Hits        39324    39336      +12     
+ Misses      15314    15307       -7     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/343?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/343/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `94.97% <100.00%> (+1.41%)` | :arrow_up: |

brandonwillard(2021-03-20 02:14:07):> @brandonwillard should I add a test for Join? It looks like there is no specific test at all for Join in test jax. If so, which cases should it cover?

Absolutely, and especially if we don't already have a test for `Join`!
OriolAbril(2021-03-20 03:03:29):I have added some tests using matrix types along both 0 and 1 axis but I don't really have any idea about what joins should be covered by the tests
codecov[bot](2021-03-18 16:31:55):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/344?src=pr&el=h1) Report
> Merging [#344](https://codecov.io/gh/pymc-devs/aesara/pull/344?src=pr&el=desc) (e66de2d) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/c6dbdccbf3a8021ccc541812dddcf27cf7512bb3?el=desc) (c6dbdcc) will **increase** coverage by `0.00%`.
> The diff coverage is `92.85%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/344/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/344?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #344   +/-   ##
=======================================
  Coverage   71.94%   71.94%           
=======================================
  Files         166      166           
  Lines       54634    54645   +11     
=======================================
+ Hits        39305    39315   +10     
- Misses      15329    15330    +1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/344?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/graph/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/344/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `91.97% <ø> (ø)` | |
| [aesara/scan/opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/344/diff?src=pr&el=tree#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `85.98% <92.85%> (+0.04%)` | :arrow_up: |

codecov[bot](2021-03-23 19:54:35):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/347?src=pr&el=h1) Report
> Merging [#347](https://codecov.io/gh/pymc-devs/aesara/pull/347?src=pr&el=desc) (07085fe) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/ce01b113c336aff8c5a99614866e053d28bdbe71?el=desc) (ce01b11) will **decrease** coverage by `0.00%`.
> The diff coverage is `50.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/347/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/347?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #347      +/-   ##
==========================================
- Coverage   71.98%   71.98%   -0.01%     
==========================================
  Files         166      166              
  Lines       54643    54643              
==========================================
- Hits        39336    39335       -1     
- Misses      15307    15308       +1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/347?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/link/vm.py](https://codecov.io/gh/pymc-devs/aesara/pull/347/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `89.88% <50.00%> (-0.19%)` | :arrow_down: |

codecov[bot](2021-03-25 05:07:08):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/348?src=pr&el=h1) Report
> Merging [#348](https://codecov.io/gh/pymc-devs/aesara/pull/348?src=pr&el=desc) (32fe550) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/219a9516856b10bc95cd8710ebcdf1d3cb6a93e1?el=desc) (219a951) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/348/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/348?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #348      +/-   ##
==========================================
+ Coverage   71.97%   71.98%   +0.01%     
==========================================
  Files         166      166              
  Lines       54638    54644       +6     
==========================================
+ Hits        39324    39336      +12     
+ Misses      15314    15308       -6     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/348?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/348/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `89.31% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/link/vm.py](https://codecov.io/gh/pymc-devs/aesara/pull/348/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `89.88% <0.00%> (-0.19%)` | :arrow_down: |
| [aesara/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/348/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `94.97% <0.00%> (+1.41%)` | :arrow_up: |

codecov[bot](2021-03-25 08:24:39):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/349?src=pr&el=h1) Report
> Merging [#349](https://codecov.io/gh/pymc-devs/aesara/pull/349?src=pr&el=desc) (2224514) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/1f0dfd36b4014f9541035422eac7db889e4a5983?el=desc) (1f0dfd3) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/349/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/349?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #349   +/-   ##
=======================================
  Coverage   71.98%   71.98%           
=======================================
  Files         166      166           
  Lines       54644    54644           
=======================================
  Hits        39336    39336           
  Misses      15308    15308           
```



mgorny(2021-03-25 20:47:07):Yes, you can (and Python will) install subpackages without installing the top package, i.e. having just `tests` there would result in all `tests.*` subpackages being installed.
LegrandNico(2021-03-26 23:28:31):This will require adding the `typing_extensions` at least to the CI dependencies, but I don't know where this should be declared exactly.
brandonwillard(2021-03-26 23:48:37):> This will require adding the `typing_extensions` at least to the CI dependencies, but I don't know where this should be declared exactly.

You can add it to `install_requires` in `setup.py`.
codecov[bot](2021-04-05 12:00:23):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/350?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#350](https://codecov.io/gh/pymc-devs/aesara/pull/350?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (342c960) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/1366221b10a977aa91fb9460a2e8441616f5a4e7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (1366221) will **increase** coverage by `0.06%`.
> The diff coverage is `99.63%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/350/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/350?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #350      +/-   ##
==========================================
+ Coverage   72.47%   72.53%   +0.06%     
==========================================
  Files         173      173              
  Lines       55631    55775     +144     
==========================================
+ Hits        40316    40459     +143     
- Misses      15315    15316       +1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/350?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/lazylinker\_c.py](https://codecov.io/gh/pymc-devs/aesara/pull/350/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvYy9sYXp5bGlua2VyX2MucHk=) | `76.92% <ø> (ø)` | |
| [aesara/graph/callcache.py](https://codecov.io/gh/pymc-devs/aesara/pull/350/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL2NhbGxjYWNoZS5weQ==) | `27.27% <83.33%> (+2.27%)` | :arrow_up: |
| [aesara/\_version.py](https://codecov.io/gh/pymc-devs/aesara/pull/350/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL192ZXJzaW9uLnB5) | `44.20% <100.00%> (ø)` | |
| [aesara/compile/compilelock.py](https://codecov.io/gh/pymc-devs/aesara/pull/350/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvY29tcGlsZWxvY2sucHk=) | `97.14% <100.00%> (-2.86%)` | :arrow_down: |
| [aesara/compile/function/types.py](https://codecov.io/gh/pymc-devs/aesara/pull/350/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `84.91% <100.00%> (+0.10%)` | :arrow_up: |
| [aesara/compile/io.py](https://codecov.io/gh/pymc-devs/aesara/pull/350/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvaW8ucHk=) | `94.44% <100.00%> (+0.10%)` | :arrow_up: |
| [aesara/compile/sharedvalue.py](https://codecov.io/gh/pymc-devs/aesara/pull/350/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvc2hhcmVkdmFsdWUucHk=) | `82.05% <100.00%> (+1.76%)` | :arrow_up: |
| [aesara/configparser.py](https://codecov.io/gh/pymc-devs/aesara/pull/350/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbmZpZ3BhcnNlci5weQ==) | `90.03% <100.00%> (-0.04%)` | :arrow_down: |
| [aesara/gpuarray/cudnn\_defs.py](https://codecov.io/gh/pymc-devs/aesara/pull/350/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dwdWFycmF5L2N1ZG5uX2RlZnMucHk=) | `37.95% <100.00%> (+0.45%)` | :arrow_up: |
| [aesara/gpuarray/dnn.py](https://codecov.io/gh/pymc-devs/aesara/pull/350/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dwdWFycmF5L2Rubi5weQ==) | `24.84% <100.00%> (+1.05%)` | :arrow_up: |
| ... and [21 more](https://codecov.io/gh/pymc-devs/aesara/pull/350/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | |

LegrandNico(2021-04-17 17:06:11):The code coverage is slightly reduced, and the tests are therefore not completed, but this is due to the lines added after the `if TYPE_CHECKING` condition, which are not executed by the tests but by mypy directly.
brandonwillard(2021-04-19 20:36:11):> The code coverage is slightly reduced, and the tests are therefore not completed, but this is due to the lines added after the `if TYPE_CHECKING` condition, which are not executed by the tests but by mypy directly.

Perhaps we can add something like the following to our `.coveragerc`:
```config
[report]
exclude_lines = 
    if TYPE_CHECKING:
```
michaelosthege(2021-04-25 07:57:07):@LegrandNico can you rebase the branch to resolve conflicts?
If there is an easy fix to exclude those `TYPE_CHECKING` blocks from coverage calculation let's do it, but before anyone invests more than a few minutes there, we should just not worry about it. After all we know where the decrease comes from. 
LegrandNico(2021-06-14 23:43:01):I accidentally closed this one by renaming the branch `master` to `main`, is there a way to reopen it?
brandonwillard(2021-06-15 02:37:14):> I accidentally closed this one by renaming the branch `master` to `main`, is there a way to reopen it?

Looks like this branch itself was deleted because it was your `master` branch, so it can't be reopened.  You can always create a new PR, but, in the future, be sure to create new branches for all of your work.
eigenfoo(2021-05-01 00:03:04):Shouldn't this be `-> None`?

The `NoReturn` return type is for functions that never return normally, not functions that just don't return a value [1] [2].

[1] https://mypy.readthedocs.io/en/stable/more_types.html#the-noreturn-type
[2] https://www.python.org/dev/peps/pep-0484/#the-noreturn-type
eigenfoo(2021-05-01 00:03:27):Similarly here with `NoReturn`.
eigenfoo(2021-05-01 00:05:36):Missing docstring? We should at least add the type here.
eigenfoo(2021-05-01 00:12:18):I wasn't aware mypy type hints could be strings like this. Cool!
eigenfoo(2021-05-01 00:21:38):Not sure what this is - this looks like new code?
eigenfoo(2021-05-01 00:21:52):Similarly, I'm not sure why this is deleted?
LegrandNico(2021-05-08 09:36:05):I have changed this to `-> None`.
LegrandNico(2021-05-08 09:36:37):Idem
LegrandNico(2021-05-08 09:42:39):I have added this:
```python
"""
    orig_v : int, float, np.ndarray, Constant or None
        The variable `v` where to find the constant scalar(0-D).
"""
```
LegrandNico(2021-05-08 09:44:42):Yes, I think this works as intended, but I am not sure what would be the difference between `"List[Variable]"` and `List["Variable"]`...
LegrandNico(2021-05-08 09:48:29):If I remember correctly, I had to add `imag` and `real` so https://github.com/pymc-devs/aesara/blob/25162ed0f8949aa2509e0b1a04ddfe71b03c9fdb/aesara/tensor/math.py#L1410 does not return an error.
LegrandNico(2021-05-08 09:54:23):I think MyPy is returning an error because `__truediv__` is defined 2 times here (see l.171). Deleting this was fixing the typing error and did not result in other errors.
michaelosthege(2021-05-24 20:04:15):```suggestion
def lock_ctx(lock_dir: Optional[os.PathLike] = None, *, timeout: Optional[float] = None):
```
It was intentionally `None`, because this way it defaults to the config setting.
michaelosthege(2021-05-24 20:06:28):```suggestion
    mode: Union[str, "Mode"] = None,
```
And further above in the `TYPE_CHECKING` block `from aesara.compile.mode import Mode`
michaelosthege(2021-05-24 20:15:34):All these functions can take not only numpy arrays, but also `TensorVariables` or in some cases lists.
The type hint from line 1042 is probably a good candidate for most functions in this file.
ricardoV94(2021-05-27 07:47:21):Shouldn't the type-hint include `Optional`?
ricardoV94(2021-05-27 07:47:57):+1
ricardoV94(2021-05-27 07:52:51):+1
canyon289(2021-03-29 03:53:38):Changed to ready for review to trigger tests? Do tests trigger on draft prs?
brandonwillard(2021-03-29 04:22:00):> Rearranging distributions in alphabetical order (roughly right in draft state) to make it easier to navigate. Wont be offended if this we close this PR without merging if its not useful.

It's going to take a little time to review this and make sure that something not directly tested (e.g. a name or special print form) didn't get changed or lost during the shuffle; otherwise, I'm not against reordering the classes.  

However, going forward, we're not going to enforce an ordering on these classes.  If we want something like that, we'll need to automate it, because it's not useful enough to warrant the ongoing manual effort.


canyon289(2021-03-29 04:24:47):> > Rearranging distributions in alphabetical order (roughly right in draft state) to make it easier to navigate. Wont be offended if this we close this PR without merging if its not useful.
> 
> It's going to take a little time to review this and make sure that something not directly tested (e.g. a name or special print form) didn't get changed or lost during the shuffle; otherwise, I'm not against reordering the classes.
> 
> However, going forward, we're not going to enforce an ordering on these classes. If we want something like that, we'll need to automate it, because it's not useful enough to warrant the ongoing manual effort.

Dont worry about reviewing it immediately I know youre doing a lot already, and agree its not worth enforcing. One time should be good enough probably

codecov[bot](2021-03-29 04:55:56):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/353?src=pr&el=h1) Report
> Merging [#353](https://codecov.io/gh/pymc-devs/aesara/pull/353?src=pr&el=desc) (981b06a) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/02378861f1a77135f2556018630092a09262ea76?el=desc) (0237886) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/353/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/353?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #353   +/-   ##
=======================================
  Coverage   71.99%   71.99%           
=======================================
  Files         166      166           
  Lines       54658    54658           
=======================================
  Hits        39350    39350           
  Misses      15308    15308           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/353?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/353/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |

ricardoV94(2021-04-16 11:25:52):I added a bunch of RVs recently. Now might be a good time to rebase, rearrange and merge.
canyon289(2021-04-17 14:08:05):Thanks Ricardo! Just gonna be honest on the list of things I have to do this one falls pretty low, particularly as its not that impactful in the scope of things. I can close this now and come back to it later, or we can put it on hold, or if someone else wants to take it over thatd be fine.

Current estimate I have if I finish this is probably mid summer at this point
michaelosthege(2021-04-25 07:52:46):Looks like this PR is going stale and I would say the time needed for the rebase and also the reviews would be better spent on other things..
So I'm closing it. But anybody who wants to do the rebase just do it and reopen. 
canyon289(2021-04-25 14:08:19):Thanks @michaelosthege! I'll probably get back to it in a couple of months after GSOD, GSOC etc. 

Appreciate you taking action
brandonwillard(2021-03-29 04:04:58):This change isn't necessary.
canyon289(2021-03-29 04:07:21):Black automatically applied it. Ill remove it
brandonwillard(2021-03-29 18:23:17):Looks good!  It really should be as simple as that.
fonnesbeck(2021-03-29 18:37:59):Cool, in that case I should be able to crank through a few of them. Do we want type hinting?
brandonwillard(2021-03-29 18:40:43):> Do we want type hinting?

Always.
ricardoV94(2021-03-29 18:56:35):Aren't we adding the new random variables on the PyMC3 side?
brandonwillard(2021-03-29 18:59:54):> Aren't we adding the new random variables on the PyMC3 side?

Yes, but this one is an unimplemented `numpy.random` offering, so it should go here.
codecov[bot](2021-03-29 19:17:54):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/354?src=pr&el=h1) Report
> Merging [#354](https://codecov.io/gh/pymc-devs/aesara/pull/354?src=pr&el=desc) (68371b2) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/02378861f1a77135f2556018630092a09262ea76?el=desc) (0237886) will **decrease** coverage by `0.11%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 68371b2 differs from pull request most recent head 1568405. Consider uploading reports for the commit 1568405 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/354/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/354?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #354      +/-   ##
==========================================
- Coverage   71.99%   71.88%   -0.12%     
==========================================
  Files         166      166              
  Lines       54658    54674      +16     
==========================================
- Hits        39350    39300      -50     
- Misses      15308    15374      +66     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/354?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/354/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `82.88% <100.00%> (-12.09%)` | :arrow_down: |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/354/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |
| [aesara/scalar/basic\_scipy.py](https://codecov.io/gh/pymc-devs/aesara/pull/354/diff?src=pr&el=tree#diff-YWVzYXJhL3NjYWxhci9iYXNpY19zY2lweS5weQ==) | `74.88% <0.00%> (-0.70%)` | :arrow_down: |

brandonwillard(2021-04-01 20:14:27):Ugh, looks like we need to fix JAX.
brandonwillard(2021-03-30 19:26:04):You might need to specify `loc=loc` and `scale=scale`; otherwise, it will try to interpret those parameters differently (and potentially cause the error observed in CI).
codecov[bot](2021-04-02 01:15:29):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/356?src=pr&el=h1) Report
> Merging [#356](https://codecov.io/gh/pymc-devs/aesara/pull/356?src=pr&el=desc) (0c08fb2) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/b2229fc73497c655e823414e77655a183f91d124?el=desc) (b2229fc) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/356/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/356?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #356   +/-   ##
=======================================
  Coverage   71.87%   71.87%           
=======================================
  Files         166      166           
  Lines       54661    54672   +11     
=======================================
+ Hits        39287    39298   +11     
  Misses      15374    15374           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/356?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/356/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |

codecov[bot](2021-04-02 01:00:36):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/359?src=pr&el=h1) Report
> Merging [#359](https://codecov.io/gh/pymc-devs/aesara/pull/359?src=pr&el=desc) (b1c2589) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/06c179267ed26b365090760a1c7d4239b7153d85?el=desc) (06c1792) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head b1c2589 differs from pull request most recent head 06d7b9a. Consider uploading reports for the commit 06d7b9a to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/359/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/359?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #359      +/-   ##
==========================================
+ Coverage   71.88%   71.90%   +0.01%     
==========================================
  Files         166      166              
  Lines       54685    54704      +19     
==========================================
+ Hits        39311    39333      +22     
+ Misses      15374    15371       -3     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/359?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/graph/fg.py](https://codecov.io/gh/pymc-devs/aesara/pull/359/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `93.57% <100.00%> (+0.99%)` | :arrow_up: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/pymc-devs/aesara/pull/359/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `93.27% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/tensor/var.py](https://codecov.io/gh/pymc-devs/aesara/pull/359/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `87.55% <0.00%> (+0.20%)` | :arrow_up: |

codecov[bot](2021-04-05 18:20:43):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/363?src=pr&el=h1) Report
> Merging [#363](https://codecov.io/gh/pymc-devs/aesara/pull/363?src=pr&el=desc) (b02ef00) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/01020a185265623190a6f071ab54d8feb2e9e9bf?el=desc) (01020a1) will **increase** coverage by `0.02%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/363/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/363?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #363      +/-   ##
==========================================
+ Coverage   71.89%   71.92%   +0.02%     
==========================================
  Files         166      166              
  Lines       54689    54742      +53     
==========================================
+ Hits        39318    39371      +53     
  Misses      15371    15371              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/363?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/363/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |

ricardoV94(2021-04-07 06:50:27):Removed the changes from the numpy defaults. Should be good to go now.
ricardoV94(2021-04-06 07:43:56):This distribution extends from the numpy version by including the beta parameter. I added it mostly because then we can use it directly on the PyMC3 side, but if it feels strange in here, I will happily remove it. I made the default beta=1, that would be equivalent to the numpy version.
ricardoV94(2021-04-06 07:45:59):I added default parameters to the vonmises, which are not default in numpy (which has none as default). Does it make sense to do this, and if so, does it make sense to use the `test_fn` as I did here?
ricardoV94(2021-04-06 07:54:04):Same for Triangular...
brandonwillard(2021-04-06 22:48:20):If they're not default in NumPy we don't want to introduce them here.
brandonwillard(2021-04-06 22:49:03):We don't want to deviate from the NumPy interface.
codecov[bot](2021-04-08 12:37:25):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/364?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#364](https://codecov.io/gh/pymc-devs/aesara/pull/364?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (c23b303) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/06c179267ed26b365090760a1c7d4239b7153d85?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (06c1792) will **increase** coverage by `0.03%`.
> The diff coverage is `88.46%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/364/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/364?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #364      +/-   ##
==========================================
+ Coverage   71.88%   71.92%   +0.03%     
==========================================
  Files         166      166              
  Lines       54685    54762      +77     
==========================================
+ Hits        39311    39388      +77     
  Misses      15374    15374              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/364?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `92.50% <88.46%> (-0.09%)` | :arrow_down: |
| [aesara/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `82.51% <0.00%> (-0.37%)` | :arrow_down: |
| [aesara/gradient.py](https://codecov.io/gh/pymc-devs/aesara/pull/364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `86.93% <0.00%> (-0.27%)` | :arrow_down: |
| [aesara/graph/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `91.79% <0.00%> (-0.18%)` | :arrow_down: |
| [aesara/scan/op.py](https://codecov.io/gh/pymc-devs/aesara/pull/364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `88.72% <0.00%> (-0.04%)` | :arrow_down: |
| [aesara/link/vm.py](https://codecov.io/gh/pymc-devs/aesara/pull/364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `89.88% <0.00%> (ø)` | |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <0.00%> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `88.50% <0.00%> (+0.02%)` | :arrow_up: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/pymc-devs/aesara/pull/364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `93.28% <0.00%> (+0.03%)` | :arrow_up: |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/pymc-devs/aesara/pull/364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `91.04% <0.00%> (+0.08%)` | :arrow_up: |
| ... and [4 more](https://codecov.io/gh/pymc-devs/aesara/pull/364/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | |

ricardoV94(2021-04-08 15:56:50):> The latter optimization, `at.exp(at.log(x))`, might need to produce something like `at.switch(at.ge(x, 0), x, np.nan)`.

Good point, I knew it couldn't be so simple! 

Is it still worthwhile in that case or should we just go with the first one?


ricardoV94(2021-04-08 16:50:12):~The `log(exp(x))` rewrite gives a sizeable speedup of \~4 orders of magnitude, but the `exp(log(x))` with the appropriate `switch` is only \~3x faster than the original. Perhaps the second does not justify the added graph complexity?~
brandonwillard(2021-04-08 17:52:08):> The `log(exp(x))` rewrite gives a sizeable speedup of ~4 orders of magnitude, but the `exp(log(x))` with the appropriate `switch` is only ~3x faster than the original. Perhaps the second does not justify the added graph complexity?

Can you post those comparisons?
ricardoV94(2021-04-09 06:38:22):> Can you post those comparisons?

Actually I forgot I was testing everything with C-compilation disabled. Here is what I did with the latest pushed changes (and C-compilation on):

```python
#%%
# Confirm optimizations are enabled/ disabled when testing performance
x = at.vector('x')
xs = np.linspace(-5000, 5000, 10_000)

optimize_graphs(at.log(at.exp(x)))
optimize_graphs(at.exp(at.log(x)))

#%%
# Compile and run log(exp(x))
f = aesara.function([x], at.log(at.exp(x)))
print(f(xs))

#%%
%timeit f(xs)

#%%
# Compile and run (exp(log(x))
f = aesara.function([x], at.exp(at.log(x)))
print(f(xs))

#%%
%timeit f(xs)
```

Optimization | log(exp(x)) | exp(log(x))
--- | --- | ---
On | 10 µs | 14 µs
Off | 168 µs | 143 µs

Now both are actually comparable, and about one order of magnitude faster
 
Of course there are also the benefits in numerical stability. What do you think?

twiecki(2021-04-12 10:22:21):Wow, this could be massive. Can't believe this optimization didn't exist already.
ricardoV94(2021-04-12 12:32:13):> Wow, this could be massive. Can't believe this optimization didn't exist already.

We might also want to add the equivalent rewrites for the custom `log1p` and `log1pexp` (i.e., softplus):  so that
* `at.exp(at.log1p(x)) = 1 + x`
* `at.exp(at.nnet.softplus(x)) = 1 + exp(x)`
ricardoV94(2021-04-13 07:52:25):Alright, so I separated the new opts (and tests) into a separate function again. I also added an opt for `exp(log1p(x))` as this shares most of the logic with the `exp(log(x))` rewrite. The other specialized `log`ish op that I am aware `softplus` can be more simply converted using a PatternSub since there is no need for checking the input.

It also seems I don't need an explicit casting of the switch output. It's enough if I convert `nan` to the original output dtype inside the switch.
ricardoV94(2021-04-13 08:43:57):There is one silly(?) issue with using `np.asarray(nan, dtype=old_out.dytpe)` in the `switch`, when there are multiple chained log-exp ops AND using a float precision lower than `config.floatX`.

```python
aesara.config.floatX = 'float32'
x = at.fvector('x')
z = at.exp(at.log(at.exp(at.log(x))))
f = aesara.function([x], z) # fine

x = at.vector('x')
z = at.exp(at.log(at.exp(at.log(x))))
f = aesara.function([x], z)  # fine as x was converted to 32bit

aesara.config.floatX = 'float64'
x = at.vector('x')
z = at.exp(at.log(at.exp(at.log(x))))
f = aesara.function([x], z)  # fine

x = at.fvector('x')
z = at.exp(at.log(at.exp(at.log(x))))
f = aesara.function([x], z)  # raises TypeError
```

```
ERROR (aesara.graph.opt): SeqOptimizer apply <aesara.tensor.basic_opt.FusionOptimizer object at 0x7f268e0a2730>
ERROR (aesara.graph.opt): Traceback:
ERROR (aesara.graph.opt): Traceback (most recent call last):
  File "/home/ricardo/Documents/Projects/aesara/aesara/scalar/basic.py", line 367, in filter
    raise TypeError(
TypeError: Value cannot accurately be converted to dtype (float32) and allow_downcast is not True
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "/home/ricardo/Documents/Projects/aesara/aesara/graph/opt.py", line 246, in apply
    sub_prof = optimizer.optimize(fgraph)
  File "/home/ricardo/Documents/Projects/aesara/aesara/graph/opt.py", line 84, in optimize
    ret = self.apply(fgraph, *args, **kwargs)
  File "/home/ricardo/Documents/Projects/aesara/aesara/tensor/basic_opt.py", line 4687, in apply
    new_outputs = self.optimizer(fgraph, node)
  File "/home/ricardo/Documents/Projects/aesara/aesara/tensor/basic_opt.py", line 4504, in local_fuse
    tmp.tag.test_value = tv.flatten()[0]
  File "/home/ricardo/Documents/Projects/aesara/aesara/graph/utils.py", line 267, in __setattr__
    obj = self.attr_filter(obj)
  File "/home/ricardo/Documents/Projects/aesara/aesara/scalar/basic.py", line 372, in filter
    raise TypeError(
TypeError: Could not convert <class 'numpy.float32'> (value=nan) to float32
```

The `FusionOptimizer` eventuall calls `Scalar(CType).filter` which fails these two checks `self.dtype == config.floatX ("float32" == "float64")` OR `data == converted_data (nan == nan)`...

https://github.com/pymc-devs/aesara/blob/f0392db779208ba716ece1e6e1e0201e7564436c/aesara/scalar/basic.py#L347-L374

Would it make trouble to check instead whether `np.dtype(self.dtype) <= np.dtype(config.floatX)`?
brandonwillard(2021-04-16 03:52:36):> Would it make trouble to check instead whether `np.dtype(self.dtype) <= np.dtype(config.floatX)`?

Very interesting find!  I don't know; I'll have to take a look.
brandonwillard(2021-04-16 04:00:29):It looks like we need another condition that uses `np.isnan` in `Scalar.filter`.
brandonwillard(2021-04-16 04:48:47):I created a fix here: https://github.com/pymc-devs/aesara/pull/374.
ricardoV94(2021-04-09 06:39:00):Not sure if this is needed. Does switch ever change the dtype of its inputs?
brandonwillard(2021-04-11 01:41:19):I don't believe there is a 32bit NaN, so that should always upcast to `float64`.
ricardoV94(2021-04-12 07:57:37):float32 (and 16) `nan` seems fine:
```python
x = at.fvector('x')
y = at.cast(at.switch(x > 0, x, np.nan), 'float32')
f = aesara.function([x], y)

print( f([-5.0]), f([-5.0]).dtype)
# [nan] float32
```
brandonwillard(2021-04-12 21:44:00):As long as there's a usable 16/32 `nan`, then I'm fine with the cast to the original `dtype`.
brandonwillard(2021-04-12 21:46:03):This is supposed to be a generalized implementation for very specific&mdash;and restrictive&mdash;types of inverse pairs, so let's not hard-code special cases like this.  Instead, we can create separate `PatternSub` rewrites, or generalize this rewrite even further by adding the option to specify "directional" inverses.
ricardoV94(2021-04-13 04:31:15):I see the point, I was trying to avoid checking every pair of nodes twice in different functions. 
brandonwillard(2021-04-11 05:59:55):@aseyboldt , I just added an example of how we can associate source code with the AST-compiled function for debugging purposes.  It is applied when `debug=True` in `AstBuilder.compile`.
aseyboldt(2021-04-11 11:39:45):@brandonwillard Please don't force push away commits, that makes it hard to see what you changed.

I revered to the original unique_name impl, the new one doesn't guarantee that the name really is unique. If it isn't we can easily silently compute incorrect results, so we should be sure.

Also, I like having the full names in `dispatch`, that way we don't clutter the namespace and it is easier to see what op we are handling at the moment.
brandonwillard(2021-04-11 16:56:26):> @brandonwillard Please don't force push away commits, that makes it hard to see what you changed.

Use `git diff <remote-branch>` from your local version of the branch; it will provide exactly the same information as an additional commit making the same changes, except it won't require us to rebase a bunch of commits down the line.

Regardless, if you're more comfortable with all the extra commits, I'll add those instead, but someone will need to go through and squash/rebase everything at the end.


> the new one doesn't guarantee that the name really is unique. If it isn't we can easily silently compute incorrect results, so we should be sure.

The auto-generated names are unique, because a unique number is generated for every `Variable`, and, since new `Variable`s are created for each output of an `Apply` node, those auto names can be used to uniquely identify the `Apply` nodes.  In the end, this approach is essentially doing what your approach was doing, but it uses existing unique numbers.

Unless you've found a flaw within the existing unique `Variable` naming code, it's a better approach than re-generating new unique identifiers/numbers, because it provides a direct connection between these AST names we're creating and the Aesara objects&mdash;via their already present auto names.  Also, this approach doesn't require as much code or a separate module.
brandonwillard(2021-04-11 17:02:28):> Also, I like having the full names in `dispatch`, that way we don't clutter the namespace and it is easier to see what op we are handling at the moment.

Are you talking about the imports?  The convention of this repository is to use **direct imports**, instead of relying on package-level auto imports that may not be present down the line (this _includes_ auto-imported modules, not just objects in a (sub)package's modules).  If you want, you can import the module directly and reference the object from the module in which it's defined&mdash;preferrably via an alias if the full module path is long.  
brandonwillard(2021-04-11 17:16:47):It looks like your rebase removed the commits from `master`.
aseyboldt(2021-04-12 08:17:36):> The auto-generated names are unique, because a unique number is generated for every Variable, and, since new Variables are created for each output of an Apply node, those auto names can be used to uniquely identify the Apply nodes. In the end, this approach is essentially doing what your approach was doing, but it uses existing unique numbers.

They won't be unique if you add pickling or multithreading, right? Maybe we can fix that another way though. We might also need names for things that aren't variables, but I guess we could ask `Variable` for a new unique name the same way auto_name does...

> Regardless, if you're more comfortable with all the extra commits, I'll add those instead, but someone will need to go through and squash/rebase everything at the end.

I definitely prefer that, thanks

> Are you talking about the imports? The convention of this repository is to use direct imports, instead of relying on package-level auto imports that may not be present down the line (this includes auto-imported modules, not just objects in a (sub)package's modules). If you want, you can import the module directly and reference the object from the module in which it's defined—preferrably via an alias if the full module path is long.

Maybe it would be a good idea to make an exception from the rule here. We need to refer to *all ops in aesara*, and then use it exactly once. If we import all of them, I don't think that would be helpful. If I see `aesara.scalar.Mul`, I know this is a scalar op, if I only see Mul, I don't. 

> It looks like your rebase removed the commits from master.

I'll do a rebase later.
brandonwillard(2021-04-13 04:22:36):In #371 I refactored the `JAXLinker` into a generalized `JITLinker` that can be used to implement the Numba `Linker` much more easily.

Also, #371 provides a generalized `aesara.link.utils.fgraph_to_python` that succinctly creates Python functions from `FunctionGraphs`s.  There are basic and direct tests to confirm that it works as expected, too.

Now, all we need to do is create dispatch functions in the same manner as the JAX implementation and we should have everything we need to create a fully featured Numba backend.
brandonwillard(2021-04-14 04:07:04):@kc611 set up a functional `NumbaLinker` here https://github.com/brandonwillard/aesara/pull/1 that uses the new framework set up in #371, so we can close prototype, open a new PR for that, and concentrate our efforts there.
kc611(2021-04-12 06:52:31):Looks like `numba.vectorize` not support passing arbitrary number of args directly using `*args`. Can't we vectorize the part where the actual calculation occurs. For instance `result += arg` in `make_numba_thunk_ScalarAdd` rather than the entire function. Since there the number of arguments essentially becomes fixed as two.

kc611(2021-04-12 07:21:38):Should this check for `Variable` class instance instead ?
aseyboldt(2021-04-12 08:05:03):The problem is that if this vectorize is used on a composite, that composite could have many more arguments. This should be easy enough to fix if we to this on the ast level though.

aseyboldt(2021-04-12 08:09:37):It should be Constant:
This check happens if we see an input to a node, that we haven't seen before, either as an input to the whole graph, or as an output of a apply instance earlier in the graph execution. The only way this should happen, is if this is a constant (or maybe a shared? Got to admit I didn't think about those at all for now...)
codecov[bot](2021-04-09 06:32:49):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/366?src=pr&el=h1) Report
> Merging [#366](https://codecov.io/gh/pymc-devs/aesara/pull/366?src=pr&el=desc) (df64096) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/3b852d917a798c7c2c8fac3cc7a14dca776d9460?el=desc) (3b852d9) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/366/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/366?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #366      +/-   ##
==========================================
- Coverage   71.92%   71.91%   -0.01%     
==========================================
  Files         166      166              
  Lines       54742    54732      -10     
==========================================
- Hits        39371    39362       -9     
+ Misses      15371    15370       -1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/366?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/graph/op.py](https://codecov.io/gh/pymc-devs/aesara/pull/366/diff?src=pr&el=tree#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `76.85% <100.00%> (+0.10%)` | :arrow_up: |
| [aesara/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/366/diff?src=pr&el=tree#diff-YWVzYXJhL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `82.51% <100.00%> (-0.37%)` | :arrow_down: |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/pymc-devs/aesara/pull/366/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `91.04% <100.00%> (+0.08%)` | :arrow_up: |

michaelosthege(2021-04-11 00:27:43):The failing test is a regex pattern that doesn't match because the message differs between the Python/C perform.
Looking at the 🕝 I will fix this tomorrow, unless someone else does.
michaelosthege(2021-04-11 14:22:45):Okay, so I think that's as concise as it gets. Delegating type casting and raising errors on another functino didn't work for me, because int32 inputs also blew up. The type check was just nicer to work with after all.

I tried to align the C and Python exception messages, but burnt 2 hours trying to string-format the shape array for the exception message. (Now I get why that wasn't done before...)
codecov[bot](2021-04-11 17:20:33):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/367?src=pr&el=h1) Report
> Merging [#367](https://codecov.io/gh/pymc-devs/aesara/pull/367?src=pr&el=desc) (ecadbf2) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/4cda2e52cfa61fd3d924231ec9763956027aecc9?el=desc) (4cda2e5) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/367/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/367?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #367   +/-   ##
=======================================
  Coverage   71.91%   71.91%           
=======================================
  Files         166      166           
  Lines       54731    54733    +2     
=======================================
+ Hits        39358    39362    +4     
+ Misses      15373    15371    -2     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/367?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/shape.py](https://codecov.io/gh/pymc-devs/aesara/pull/367/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9zaGFwZS5weQ==) | `92.51% <100.00%> (+0.64%)` | :arrow_up: |

brandonwillard(2021-04-11 00:19:39):Why can't we simply use `shape = aet.as_tensor_variable(shape, ndim=1)` here?
brandonwillard(2021-04-11 00:22:04):We can just `cast` the `shape` to `int64`.
michaelosthege(2021-04-11 00:29:07):You're right, that's probably much better.
The option just wasn't on my radar.
michaelosthege(2021-04-11 00:33:15):If an element in a shape vector ever becomes a float, that should be an indication that something is (very) wrong upstream. So silently casting it (if we don't need to) didn't feel very nice.
brandonwillard(2021-04-11 01:27:34):If you're concerned about that, then you can use `aet.lvector.filter_variable`; that will normalize the type and emit an informative error.
michaelosthege(2021-04-11 10:17:18):`filter_variable` doesn't convert the integer types either: `TypeError: Cannot convert Type TensorType(int32, (True,)) (of Variable TensorConstant{(1,) of 2}) into Type TensorType(int64, vector).`
brandonwillard(2021-04-11 19:33:46):We should change the behavior for `bool`; there's really no reason `aet.as_tensor_variable(True)` shouldn't return a scalar constant boolean, like `aet.as_tensor_variable(np.array(True))` does.
codecov[bot](2021-04-11 20:51:07):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/370?src=pr&el=h1) Report
> Merging [#370](https://codecov.io/gh/pymc-devs/aesara/pull/370?src=pr&el=desc) (998e48d) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/4cda2e52cfa61fd3d924231ec9763956027aecc9?el=desc) (4cda2e5) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/370/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc)](https://codecov.io/gh/pymc-devs/aesara/pull/370?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #370   +/-   ##
=======================================
  Coverage   71.91%   71.91%           
=======================================
  Files         166      166           
  Lines       54731    54736    +5     
=======================================
+ Hits        39358    39365    +7     
+ Misses      15373    15371    -2     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/370?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/370/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `88.50% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/tensor/shape.py](https://codecov.io/gh/pymc-devs/aesara/pull/370/diff?src=pr&el=tree#diff-YWVzYXJhL3RlbnNvci9zaGFwZS5weQ==) | `92.51% <0.00%> (+0.64%)` | :arrow_up: |

codecov[bot](2021-04-12 04:05:20):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/371?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#371](https://codecov.io/gh/pymc-devs/aesara/pull/371?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (d866d8e) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/334c86fb34bd882f685f55b380b1a1065e762fcd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (334c86f) will **increase** coverage by `0.02%`.
> The diff coverage is `83.49%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/371/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/371?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #371      +/-   ##
==========================================
+ Coverage   71.91%   71.94%   +0.02%     
==========================================
  Files         166      168       +2     
  Lines       54736    54753      +17     
==========================================
+ Hits        39365    39390      +25     
+ Misses      15371    15363       -8     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/371?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/jax\_dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2pheF9kaXNwYXRjaC5weQ==) | `0.00% <0.00%> (-82.52%)` | :arrow_down: |
| [aesara/link/jax/jax\_linker.py](https://codecov.io/gh/pymc-devs/aesara/pull/371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2pheF9saW5rZXIucHk=) | `0.00% <0.00%> (-81.71%)` | :arrow_down: |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `80.93% <80.93%> (ø)` | |
| [aesara/link/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `89.23% <88.88%> (+0.28%)` | :arrow_up: |
| [aesara/link/jax/\_\_init\_\_.py](https://codecov.io/gh/pymc-devs/aesara/pull/371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L19faW5pdF9fLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/link/jax/linker.py](https://codecov.io/gh/pymc-devs/aesara/pull/371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2xpbmtlci5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/link/utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `63.12% <100.00%> (+10.66%)` | :arrow_up: |

twiecki(2021-04-14 05:05:07):This is really cool @kc611!
twiecki(2021-04-14 05:21:39):@kc611 I suppose now the work is adding more Ops, like with JAX. if you open an issue we can start to chip in as well on this.
twiecki(2021-04-14 10:10:45):Should just copy those mapped by @aseyboldt here: https://github.com/pymc-devs/aesara/pull/365/files#diff-5136a3392cde524aeef680cc1949734c0c48bd809b8963ef83178a80337e4736R145
codecov[bot](2021-04-14 13:24:51):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/372?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#372](https://codecov.io/gh/pymc-devs/aesara/pull/372?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (cf34c69) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/1549649f0888a821b7f4c4f023c3b6234ce7ddcf?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (1549649) will **increase** coverage by `0.04%`.
> The diff coverage is `90.16%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/372/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/372?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #372      +/-   ##
==========================================
+ Coverage   71.94%   71.98%   +0.04%     
==========================================
  Files         168      170       +2     
  Lines       54753    54892     +139     
==========================================
+ Hits        39390    39514     +124     
- Misses      15363    15378      +15     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/372?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `88.04% <88.04%> (ø)` | |
| [aesara/link/utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `63.51% <93.33%> (+0.39%)` | :arrow_up: |
| [aesara/link/numba/linker.py](https://codecov.io/gh/pymc-devs/aesara/pull/372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvbGlua2VyLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `92.50% <0.00%> (-0.09%)` | :arrow_down: |

brandonwillard(2021-04-15 00:55:51):It looks like we need to use [`numba-scipy`](https://github.com/numba/numba-scipy) to get bindings for the `scipy.special` functions; however, the current version doesn't work with more recent versions of SciPy (e.g. 1.6).  I put in [a PR that fixes the problem](https://github.com/numba/numba-scipy/pull/54) in `numba-scipy`, so we'll have to wait until that goes through before `scipy.special` functions start working.
kc611(2021-04-16 09:37:37):> We need a test for `Composite`, then we can merge this.

We can simply take any tests we need from `test_jax.py`
brandonwillard(2021-04-14 16:42:46):I don't think we need these mappings; they should be picked up automatically from the `ScalarOp`s' `nfunc_specs`&mdash;like they are in the JAX `dispatch` module.

Also, we might need to use "primitive" version of many of these basic math functions in order to make good use of `numba.vectorize`.  For instance, it's possible that the NumPy version of something like `+` is treated differently during Numba compilation, and the resulting loop might have more overhead when the NumPy function is used.  We might need to look at the compiled results to find out.
codecov[bot](2021-04-16 06:45:42):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/374?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#374](https://codecov.io/gh/pymc-devs/aesara/pull/374?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (4529cff) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/9f540975cdb7d464ac87d956602d4d2e8c0132d1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (9f54097) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/374/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/374?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #374   +/-   ##
=======================================
  Coverage   71.94%   71.94%           
=======================================
  Files         168      168           
  Lines       54779    54779           
=======================================
  Hits        39413    39413           
  Misses      15366    15366           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/374?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/scalar/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/374/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `84.67% <ø> (ø)` | |

codecov[bot](2021-04-18 01:04:41):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/380?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#380](https://codecov.io/gh/pymc-devs/aesara/pull/380?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (4249c12) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/05ea255fd69b311706c27e15f7a1380ebf30f89d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (05ea255) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/380/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/380?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #380      +/-   ##
==========================================
+ Coverage   71.99%   72.00%   +0.01%     
==========================================
  Files         170      170              
  Lines       54907    54931      +24     
==========================================
+ Hits        39530    39555      +25     
+ Misses      15377    15376       -1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/380?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/380/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `92.36% <100.00%> (+1.71%)` | :arrow_up: |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/pymc-devs/aesara/pull/380/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `91.14% <0.00%> (+0.09%)` | :arrow_up: |

codecov[bot](2021-04-18 02:20:25):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/382?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#382](https://codecov.io/gh/pymc-devs/aesara/pull/382?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (03d92df) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/bf8307dd1773b1bb1cfe30bdbac5c1e6df2c6b03?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (bf8307d) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/382/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/382?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #382   +/-   ##
=======================================
  Coverage   72.00%   72.01%           
=======================================
  Files         170      170           
  Lines       54931    54938    +7     
=======================================
+ Hits        39555    39563    +8     
+ Misses      15376    15375    -1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/382?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/382/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `89.35% <100.00%> (+0.04%)` | :arrow_up: |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/pymc-devs/aesara/pull/382/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `91.23% <100.00%> (+0.08%)` | :arrow_up: |

codecov[bot](2021-04-18 01:53:30):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/383?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#383](https://codecov.io/gh/pymc-devs/aesara/pull/383?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (804e1e2) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/05ea255fd69b311706c27e15f7a1380ebf30f89d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (05ea255) will **increase** coverage by `0.00%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/383/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/383?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #383   +/-   ##
=======================================
  Coverage   71.99%   71.99%           
=======================================
  Files         170      170           
  Lines       54907    54907           
=======================================
+ Hits        39530    39531    +1     
+ Misses      15377    15376    -1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/383?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/383/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `63.84% <0.00%> (+0.32%)` | :arrow_up: |

codecov[bot](2021-04-19 23:12:42):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/384?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> :exclamation: No coverage uploaded for pull request base (`master@5fbaecc`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#section-missing-base-commit).
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/384/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/384?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff            @@
##             master     #384   +/-   ##
=========================================
  Coverage          ?   72.02%           
=========================================
  Files             ?      170           
  Lines             ?    54942           
  Branches          ?        0           
=========================================
  Hits              ?    39570           
  Misses            ?    15372           
  Partials          ?        0           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/384?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.39% <100.00%> (ø)` | |
| [aesara/link/jax/linker.py](https://codecov.io/gh/pymc-devs/aesara/pull/384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2xpbmtlci5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `92.48% <100.00%> (ø)` | |
| [aesara/link/numba/linker.py](https://codecov.io/gh/pymc-devs/aesara/pull/384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvbGlua2VyLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/link/utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `63.96% <100.00%> (ø)` | |

codecov[bot](2021-04-22 15:11:24):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/385?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#385](https://codecov.io/gh/pymc-devs/aesara/pull/385?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (0152368) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/2d3cb77530f8b80f60767c187ac6913740d0d996?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (2d3cb77) will **not change** coverage.
> The diff coverage is `n/a`.

> :exclamation: Current head 0152368 differs from pull request most recent head 4a6d0af. Consider uploading reports for the commit 4a6d0af to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/385/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/385?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #385   +/-   ##
=======================================
  Coverage   72.02%   72.02%           
=======================================
  Files         170      170           
  Lines       54942    54942           
=======================================
  Hits        39570    39570           
  Misses      15372    15372           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/385?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/385/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <0.00%> (ø)` | |

kc611(2021-04-25 07:35:43):>These intervals look like they could be overkill.

Should I change them to singular integer values rather than an interval ?

> Also, take a look at the coverage..

What are the changes that I should make to improve that ?
michaelosthege(2021-04-25 07:46:11):Suggestions:
* split the list of Ops by their support and then just iterate them in a two tests, instead of creating a lot of tests with parametrize
* test for things that fail, not only things that work (what would that be?)
* The coverage did not increase, so either your tests test something that was already covered (or at least executed in other tests) - it does not mean that the other tests asserted something.. Or the code you are testing falls out of the coverage calculation because it is compiled
kc611(2021-04-26 17:42:12):Sorry for late response. 

> The coverage did not increase, so either your tests test something that was already covered

I think that's probably because `ScalarOp`s like `Add` and `Mul` are being used in `test_Elemwise`. My intention with this particular test is to check the `Numba` conversion of each `ScalarOp`. 
brandonwillard(2021-06-25 22:04:19):This PR looks like it's been overshadowed by more recent Numba developments, so I'm going to close it for now.
kc611(2021-04-22 14:20:21):The tests in `binary.py` check for a much larger interval. But that would make these tests a bit slow. So shortened the interval as we only need to see the functionality of the Numba `Op`.
michaelosthege(2021-04-22 15:05:36):Or you can use `np.linspace` on a large interval, with a specified number of points? Then they also take float values inbetween.
michaelosthege(2021-04-24 21:01:15):Definitely a flaky test: https://github.com/pymc-devs/aesara/pull/386/checks?check_run_id=2428543225#step:6:154
codecov[bot](2021-04-24 22:05:20):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/386?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#386](https://codecov.io/gh/pymc-devs/aesara/pull/386?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (31cac41) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/2d3cb77530f8b80f60767c187ac6913740d0d996?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (2d3cb77) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/386/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/386?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #386   +/-   ##
=======================================
  Coverage   72.02%   72.02%           
=======================================
  Files         170      170           
  Lines       54942    54942           
=======================================
  Hits        39570    39570           
  Misses      15372    15372           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/386?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/386/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <ø> (ø)` | |

twiecki(2021-04-26 13:07:29):Thanks @michaelosthege!
canyon289(2021-04-25 15:32:22):Whats FYI mean?
michaelosthege(2021-04-25 15:33:38):For your information?
canyon289(2021-04-25 17:28:44):Got it. I suggest removing it for a couple of reasons then. A docstring is implicitly for your information so its not needed, but more importantly even as an english speaker this acronym gave me pause so it could be especially confusing for other non english speaking folks.

Perhaps change it to a Notes section?
https://numpydoc.readthedocs.io/en/latest/format.html#notes

I know this is a bit picky so making the suggestion to make it easy if you agree (but not trying to force the issue if you don't agree)
```suggestion
    Notes
    -----
    Length of the support dimension is determined by the last
```
michaelosthege(2021-04-25 17:32:03):I bet you by a few seconds there, sorry :p
canyon289(2021-04-25 17:33:05):Haha no problem. Great minds think alike ;) 

Thanks for doing the real work of actually identifying and making the PR
twiecki(2021-04-26 07:31:34):Which second parameter?
michaelosthege(2021-04-26 09:42:05):The probabilities vector is the second parameter of the `MultinomialRV`.
Its parameters are `n, p` (see `rng_fn`).
codecov[bot](2021-04-28 03:13:38):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/388?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#388](https://codecov.io/gh/pymc-devs/aesara/pull/388?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (4b90624) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/32562a2981406f4faa6a830c802bf27c5508ab91?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (32562a2) will **increase** coverage by `0.10%`.
> The diff coverage is `98.50%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/388/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/388?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #388      +/-   ##
==========================================
+ Coverage   72.02%   72.12%   +0.10%     
==========================================
  Files         170      170              
  Lines       54942    55134     +192     
==========================================
+ Hits        39570    39766     +196     
+ Misses      15372    15368       -4     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/388?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.10% <98.40%> (+5.62%)` | :arrow_up: |
| [aesara/graph/fg.py](https://codecov.io/gh/pymc-devs/aesara/pull/388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `93.26% <100.00%> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `84.67% <100.00%> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `88.56% <100.00%> (+0.06%)` | :arrow_up: |

twiecki(2021-04-28 07:21:55):Great stuff!
brandonwillard(2021-04-28 15:25:18):> The `numba_funcify_AllocEmpty*` functions could use a few comments and for `empty` and `full` docstrings and type hints would be great.
> Other than that this looks technically fine to me.

The PR isn't finished yet; for instance, there are still more tests to add.  Plus, I need to figure out how to log coverage in these cases, because Numba appears to not evaluate the actual `njit`ed functions.
michaelosthege(2021-04-28 15:38:21):<img src="https://user-images.githubusercontent.com/5894642/116431364-02062180-a848-11eb-9bbe-2396cef1aa39.png" width="350">
👍 


For coverage calculation you can do `export NUMBA_DISABLE_JIT=1` (see https://github.com/michaelosthege/pyrff/blob/master/.github/workflows/pipeline.yml#L33). IIRC this was the only way when I looked it up in May 2020.
brandonwillard(2021-04-28 15:42:02):> For coverage calculation you can do `export NUMBA_DISABLE_JIT=1` (see https://github.com/michaelosthege/pyrff/blob/master/.github/workflows/pipeline.yml#L33). IIRC this was the only way when I looked it up in May 2020.

I'm aware, and rerunning all the tests with JITing disabled is too much.  We can simply do a single uncompiled call in `compare_numba_and_py`, for instance.
codecov[bot](2021-05-03 02:10:44):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/391?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#391](https://codecov.io/gh/pymc-devs/aesara/pull/391?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (9459193) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/8335bbfecf1f22fe72a103b5e799128500f6c2ed?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (8335bbf) will **increase** coverage by `0.03%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/391/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/391?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #391      +/-   ##
==========================================
+ Coverage   72.12%   72.16%   +0.03%     
==========================================
  Files         170      170              
  Lines       55134    55207      +73     
==========================================
+ Hits        39766    39839      +73     
  Misses      15368    15368              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/391?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/391/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.45% <100.00%> (+0.35%)` | :arrow_up: |

brandonwillard(2021-05-05 19:17:52):The CI errors are fixed by https://github.com/pymc-devs/aesara/pull/393.
codecov[bot](2021-05-05 21:37:14):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/392?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#392](https://codecov.io/gh/pymc-devs/aesara/pull/392?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (4dc4059) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/67d7f1402cccc39ad9341cdb3e4c40643e75a327?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (67d7f14) will **increase** coverage by `0.10%`.
> The diff coverage is `96.70%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/392/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/392?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #392      +/-   ##
==========================================
+ Coverage   72.17%   72.27%   +0.10%     
==========================================
  Files         170      170              
  Lines       55222    55451     +229     
==========================================
+ Hits        39855    40077     +222     
- Misses      15367    15374       +7     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/392?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/392/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.10% <96.66%> (-0.66%)` | :arrow_down: |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/392/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.39% <100.00%> (ø)` | |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/pymc-devs/aesara/pull/392/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `93.28% <100.00%> (ø)` | |

codecov[bot](2021-05-05 20:22:06):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/393?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#393](https://codecov.io/gh/pymc-devs/aesara/pull/393?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (66b9b1d) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/0f785bac19c5984a5be03fbf8934498b713f74e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (0f785ba) will **not change** coverage.
> The diff coverage is `50.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/393/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/393?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #393   +/-   ##
=======================================
  Coverage   72.16%   72.16%           
=======================================
  Files         170      170           
  Lines       55207    55207           
=======================================
  Hits        39839    39839           
  Misses      15368    15368           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/393?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/393/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.39% <0.00%> (ø)` | |
| [aesara/link/jax/linker.py](https://codecov.io/gh/pymc-devs/aesara/pull/393/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2xpbmtlci5weQ==) | `100.00% <100.00%> (ø)` | |

codecov[bot](2021-05-06 05:59:34):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/394?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#394](https://codecov.io/gh/pymc-devs/aesara/pull/394?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (1de7b25) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/28a7199abe8bd94dbe4f34f01f7031bb45255c32?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (28a7199) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/394/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/394?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #394   +/-   ##
=======================================
  Coverage   72.16%   72.17%           
=======================================
  Files         170      170           
  Lines       55207    55222   +15     
=======================================
+ Hits        39839    39855   +16     
+ Misses      15368    15367    -1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/394?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/394/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.76% <100.00%> (+0.30%)` | :arrow_up: |

twiecki(2021-05-06 07:45:25):Very neat, but would we expect speed-ups from this? As I understand object-mode just compiles to the C-API like the Python runtime would.
brandonwillard(2021-05-06 15:22:24):> Very neat, but would we expect speed-ups from this? As I understand object-mode just compiles to the C-API like the Python runtime would.

Some speed-ups are possible (e.g. Numba can do certain loop optimizations across object and no-python modes, I believe), but the point of this addition is that we can use the Numba compiled functions to run **everything**, which means we actually can replace the old C generation/compilation, thunks, linking, etc.
twiecki(2021-05-07 09:08:02):I think it can only replace the old C code if it's actually faster than a pure Python implementation (which we haven't tested).

Couldn't we first try to run `.perform()` in no-python mode and fall back to Object mode if that fails?
codecov[bot](2021-05-06 12:27:01):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/396?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#396](https://codecov.io/gh/pymc-devs/aesara/pull/396?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (423127f) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/28a7199abe8bd94dbe4f34f01f7031bb45255c32?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (28a7199) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/396/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/396?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #396   +/-   ##
=======================================
  Coverage   72.16%   72.16%           
=======================================
  Files         170      170           
  Lines       55207    55207           
=======================================
  Hits        39839    39839           
  Misses      15368    15368           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/396?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/configparser.py](https://codecov.io/gh/pymc-devs/aesara/pull/396/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbmZpZ3BhcnNlci5weQ==) | `90.07% <ø> (ø)` | |

codecov[bot](2021-05-07 19:26:34):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/397?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#397](https://codecov.io/gh/pymc-devs/aesara/pull/397?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (e726697) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/f2ecc2e52cb704cacc1b4642fb0bf9c849bd975f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (f2ecc2e) will **increase** coverage by `0.10%`.
> The diff coverage is `96.76%`.

> :exclamation: Current head e726697 differs from pull request most recent head f219d0c. Consider uploading reports for the commit f219d0c to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/397/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/397?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #397      +/-   ##
==========================================
+ Coverage   72.31%   72.42%   +0.10%     
==========================================
  Files         170      170              
  Lines       55399    55585     +186     
==========================================
+ Hits        40063    40255     +192     
+ Misses      15336    15330       -6     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/397?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/gpuarray/opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dwdWFycmF5L29wdC5weQ==) | `26.33% <ø> (+0.04%)` | :arrow_up: |
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `97.51% <96.47%> (-0.59%)` | :arrow_down: |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `82.05% <100.00%> (+0.65%)` | :arrow_up: |
| [aesara/tensor/nlinalg.py](https://codecov.io/gh/pymc-devs/aesara/pull/397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9ubGluYWxnLnB5) | `98.80% <100.00%> (-0.03%)` | :arrow_down: |

twiecki(2021-05-09 11:07:21):This looks great! After these and `scan` is anything missing?
brandonwillard(2021-05-09 20:07:28):> This looks great! After these and `scan` is anything missing?

Yes, any `Op` with a C implementation needs a Numba implementation, but we shouldn't need to focus on the Python-only `Op`s, unless we're adding _new_ low-level/Numba implementations to those.

Actually, that's the important thing about this PR: it introduces low-level implementations that didn't previously exist&mdash;i.e. that didn't have C implementations&mdash;such as the `Op`s in `theano.tensor.slinalg`.
twiecki(2021-05-09 11:02:51):Why do you remove this?
twiecki(2021-05-09 11:04:48):I don't see a difference between the two.
twiecki(2021-05-09 11:04:58):same.
twiecki(2021-05-09 11:06:02):Isn't this available through `numba-scipy`?
brandonwillard(2021-05-09 19:57:04):That `Op` was redundant, so it was removed.
brandonwillard(2021-05-09 19:58:13):That code is copied from the underlying `Op`.  The `else` clauses were supposed to convert the underlying dtypes, but the argument isn't supported in Numba, so it had to be removed.

I've updated this so that it casts to the output dtype.
brandonwillard(2021-05-09 20:00:37):No, right now, `numba-scipy` only uses the Cython signatures provided by `scipy.special.cython_special`.
twiecki(2021-05-07 16:31:46):I think we refactored so much that we don't need to deprecate this.
codecov[bot](2021-05-07 16:57:37):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/398?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#398](https://codecov.io/gh/pymc-devs/aesara/pull/398?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (378d393) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/25162ed0f8949aa2509e0b1a04ddfe71b03c9fdb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (25162ed) will **increase** coverage by `0.04%`.
> The diff coverage is `88.49%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/398/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/398?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #398      +/-   ##
==========================================
+ Coverage   72.27%   72.31%   +0.04%     
==========================================
  Files         170      170              
  Lines       55451    55399      -52     
==========================================
- Hits        40077    40063      -14     
+ Misses      15374    15336      -38     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/398?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/profiling.py](https://codecov.io/gh/pymc-devs/aesara/pull/398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `78.88% <ø> (-0.03%)` | :arrow_down: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `89.35% <ø> (ø)` | |
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `86.86% <ø> (-0.02%)` | :arrow_down: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `91.50% <86.25%> (-1.01%)` | :arrow_down: |
| [aesara/scalar/basic\_scipy.py](https://codecov.io/gh/pymc-devs/aesara/pull/398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpY19zY2lweS5weQ==) | `77.18% <94.73%> (+2.30%)` | :arrow_up: |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.39% <100.00%> (ø)` | |
| [aesara/sparse/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `88.96% <100.00%> (ø)` | |
| [aesara/tensor/inplace.py](https://codecov.io/gh/pymc-devs/aesara/pull/398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/pymc-devs/aesara/pull/398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `93.36% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/tensor/nnet/sigm.py](https://codecov.io/gh/pymc-devs/aesara/pull/398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9ubmV0L3NpZ20ucHk=) | `71.87% <100.00%> (-5.96%)` | :arrow_down: |

twiecki(2021-05-09 11:08:13):Thanks @ricardoV94 !
twiecki(2021-05-11 12:55:17):Thanks for taking this on so quickly.
1. We should open an issue for numba to support `size`.
2. For looping: As this gets JITed by `numba` do we really expect this to be slow?
3. Can we use something like `@vectorize` or `@guvectorize` (https://numba.pydata.org/numba-doc/dev/user/vectorize.html)?
codecov[bot](2021-05-11 13:24:50):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/403?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#403](https://codecov.io/gh/pymc-devs/aesara/pull/403?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (9e48cdd) into [main](https://codecov.io/gh/pymc-devs/aesara/commit/175e3e86013d9d592979ea398d8d1cfb36d5ef62?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (175e3e8) will **increase** coverage by `0.03%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 9e48cdd differs from pull request most recent head 86eccb0. Consider uploading reports for the commit 86eccb0 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/403/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/403?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##             main     #403      +/-   ##
==========================================
+ Coverage   72.52%   72.56%   +0.03%     
==========================================
  Files         174      174              
  Lines       55689    55758      +69     
==========================================
+ Hits        40390    40459      +69     
  Misses      15299    15299              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/403?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/403/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.17% <100.00%> (+0.13%)` | :arrow_up: |
| [aesara/link/numba/linker.py](https://codecov.io/gh/pymc-devs/aesara/pull/403/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvbGlua2VyLnB5) | `100.00% <100.00%> (ø)` | |

twiecki(2021-05-15 14:15:12):@kc611 This is shaping up nicely, what's missing?
kc611(2021-05-15 18:25:24):This pretty much is the core implementation for Numba RV. Anything we add now will probably be optimization the existing code.
brandonwillard(2021-05-16 19:52:03):I've added support for distribution parameters, but the current implementation still lacks some critical functionality.  Namely, it does not support distributions that aren't simply unadulterated calls to `numpy.random`.

This means that we need to restrict this Numba implementation to only the `RandomVariable`s that fit the aforementioned criteria.

Also, I noticed that the `Op.perform`-based approach won't work with `RandomVariable`s, because Numba cannot lower the `RandomState` returned by those `Op`s.  They're returned from Numba's object mode, so, no, object mode can't help us here.  

In other words, **we need to add support for `RandomState` types in Numba, or circumvent `RandomState`s altogether in `RandomVariable.perform` or our use of it (in this case)**.

The former is the prefered approach, of course.
kc611(2021-05-29 14:14:30):> This means that we need to restrict this Numba implementation to only the RandomVariables that fit the aforementioned criteria.

What's the preferred approach we should be taking here or supporting the other `RandomVariables`?. I tried that experimentation with `halfnormal` and deriving it from `standard_normal`. (But that was mostly because of `standard_normal` not accepting arguments like other distributions like `normal`). But was unsuccessful so far without falling back to object mode.  There are always inconsistencies between the exact values.

Or is that something we should be adding later on, and hold on till we can add `RandomState` types in Numba?
brandonwillard(2021-05-31 18:49:52):> What's the preferred approach we should be taking here or supporting the other `RandomVariables`

For now, we can create distinct dispatch functions for all the `RandomVariable`s that are based on `np.random` samplers, instead of trying to make a single general Numba implementation.  

Really, we can just add a bunch of `@numba_funcify.register(...)`s onto the one function that handles the simple case of directly calling `np.random.*` and create separate implementations for the rest.

Otherwise, we need object mode to work for the rest, and I think your `numba_typify_RandomState` changes do that.  We just need some good tests for those cases.

The most important aspect of this Numba work is that we can cover all `Op`s by using their Python implementations when necessary, because this is what allows us to ultimately simplify and remove the old Theano backend.


> Or is that something we should be adding later on, and hold on till we can add `RandomState` types in Numba?

If the `numba_typify_RandomState` changes (or a custom object-mode-based Numba conversion for `RandomVariable`s) remove the need to deal with `RandomState` in Numba, and simply get `RandomVariable`s working in a Numba compiled graph, then we're good for this PR.
kc611(2021-06-06 11:42:40):It was probably a good idea to add separate tests for each RV's (we've got failures in some that'll need fixing).

Other than that I've made a separate files for dispatches in `aesara.link.numba.modules` but I cant find a way to connect them to the original `numba_funcify` in `aesara.link.numba.dispatch` (pre-commit basically does not allow module imports at end of file). Any suggestions how to do that?
brandonwillard(2021-06-12 19:41:16):FYI: The current failures are due to `pytest` and its [`import-mode` setting](https://docs.pytest.org/en/6.2.x/pythonpath.html).  The `import-mode` needed to be changed due to the presence of new sub-packages named `numba`.  

Basically, the way `pytest` takes over the Python import processes creates issues for `import numba` statements under a subpackage with the name `numba`.  Changing `import-mode` fixes that, but introduces a new issue for `pickle`.  See [this issue](https://github.com/pytest-dev/pytest/issues/7245) for more information.
brandonwillard(2021-06-25 20:29:06):Ugh, I should've used something like `git merge` to split apart those files, because now these upstream changes need to be added manually.
codecov[bot](2021-06-25 22:45:09):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/403?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#403](https://codecov.io/gh/aesara-devs/aesara/pull/403?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (fcf784e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/46c772dac08e1fcd5f434f3a2ee059146370f85c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (46c772d) will **increase** coverage by `0.03%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/403/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/403?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #403      +/-   ##
==========================================
+ Coverage   76.61%   76.65%   +0.03%     
==========================================
  Files         148      148              
  Lines       46276    46349      +73     
  Branches    10184    10192       +8     
==========================================
+ Hits        35454    35528      +74     
+ Misses       8217     8216       -1     
  Partials     2605     2605              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/403?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/403/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `96.23% <100.00%> (+0.28%)` | :arrow_up: |
| [aesara/link/numba/linker.py](https://codecov.io/gh/aesara-devs/aesara/pull/403/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvbGlua2VyLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/random/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/403/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdmFyLnB5) | `100.00% <0.00%> (+4.54%)` | :arrow_up: |

twiecki(2021-05-11 14:09:05):Will this work for when dim of size is > 1?
kc611(2021-05-11 15:01:53):Ah, no this was just supposed to show how this thing would work in general. I'll change this as soon as we finalize how this "looping" should be done.
twiecki(2021-05-11 16:12:52):Got it, makes sense.
brandonwillard(2021-05-11 19:07:32):This line mentions JAX.
brandonwillard(2021-05-11 19:09:33):We should consider changing `numba_typify` so that it returns the "storage" list instead of just the contents of said list.  It seems like that would allow us to remove the explicit `RandomState` condition in this module.
brandonwillard(2021-05-11 19:16:29):Writing a manual loop here is fine&mdash;if necessary&mdash;because Numba can produce very performant loops.  My main concern is the overhead implied by a large number of independent calls to the underlying sampler code, instead of one call that handles the `size` parameter.  I still need to look at the Numba implementation to get a sense of that overhead, if any.

Regardless, a loop will work for now, and, to handle arbitrary dimensions in such a loop, we can just use `np.ndindex`.
kc611(2021-05-12 13:59:10):@brandonwillard Is this what you meant by changing `numba_typify` so that it returns the "storage" list ?
brandonwillard(2021-05-12 16:45:56):Yeah, just an implementation that takes/uses and returns a "storage" list, so that we can keep the `RandomState`-specific requirements in `numba_typify_RandomState` (i.e. recreate the "storage" list in _there_).

This particular change makes the primary `data` argument a `list`, though, which means we can't recreate a "storage" list in the dispatch specializations when/if that's needed.  Instead, we can change the first/`data` argument into a `storage` argument that contains the single-element "storage" list (i.e. `state` in `numba_typify_RandomState` will be a list containing the `RandomState` object) and make `numba_typify` return the same list.
kc611(2021-05-13 09:03:16):I don't exactly understand how this will be implemented though.

If you have a particular implementation in mind (and you don't mind), can you go ahead and implement that in this PR. (Cause the current implementation of `numba_typify` in this PR will have quite bit of overhead because of looping over each data member. )

Edit: For now I've removed the current implementation. 
brandonwillard(2021-05-15 18:30:21):We should be able to avoid this costly jump to object mode by using `numba.np.unsafe.ndarray.to_fixed_tuple` or `create_tuple_creator` and `tuple_setitem`.  See [`numba_funcify_Reshape`](https://github.com/pymc-devs/aesara/blob/abf6026c9c2bad19216275e127e3043f30d93360/aesara/link/numba/dispatch.py#L965) for an example of the latter.
brandonwillard(2021-05-15 18:39:36):I just tried changing `numba_funcify_Reshape` so that it uses `to_fixed_tuple`, and that approach works well&mdash;while also being a lot more succinct.
brandonwillard(2021-05-15 18:59:39):[Here's a PR](https://github.com/pymc-devs/aesara/pull/413) with those changes.
brandonwillard(2021-05-16 13:26:36):```suggestion
    tuple_size = get_vector_length(node.inputs[1])
```
Something like that should handle the non-`Constant` cases, as well.
kc611(2021-05-17 14:27:45):This is something I tried (without much success) as an attempt to support custom implemented distributions. Somehow the output from this function gets classified as a `pyobject` rather than the `numba` type of the output value. (Even though both of the functions used inside are supported by Numba individually.)

Note: This particular implementation is taken from `scipy.stats` which does something pretty close to this.

https://github.com/scipy/scipy/blob/36af73c98f71f40bc69efbeb4501b1f2b9c3d00c/scipy/stats/_continuous_distns.py#L3504
brandonwillard(2021-05-17 18:59:41):This is re-implementing single dispatch (inside of single dispatch); we can just create new `numba_funcify_*` functions for each custom implementation instead.

If we need to reuse some code from this function, let's abstract it out like we do in the other dispatch implementations.
brandonwillard(2021-05-18 02:56:48):Oh, also, if we want to simplify the process of creating dispatch functions and/or keep them closer/within their class definitions, we can consider doing something like we did for `Distribution` (see [here](https://github.com/pymc-devs/pymc3/blob/v4/pymc3/distributions/distribution.py#L99)).
kc611(2021-05-18 14:59:01):> we can just create new numba_funcify_* functions for each custom implementation instead.

Sure, we can do this too. But I recommend we at-least put the implementation of specific `RandomVariable`s in a different file cause it'll become more and more cluttered as we start to support more and more custom RV's. 

The exact implementation isn't the issue here though, I was (and still am) concerned  with why it isn't working. Or rather what am I missing here? 
brandonwillard(2021-05-21 20:25:14):> But I recommend we at-least put the implementation of specific `RandomVariable`s in a different file cause it'll become more and more cluttered as we start to support more and more custom RV's.

Definitely; we should've already split `*.numba.dispatch` into separate modules.  I'm not sure when it would make sense to start keeping these dispatch functions in the modules of their respective `Op`s, but that time should come.  Once we've tested the Numba backend enough, and established it as a true replacement for the C backend, we can absolutely start doing that.
kc611(2021-06-04 10:52:51):For now, we can get away with this way of implementing non numpy RV's but it'll be nice to have a 'object mode' to fall back to if this fails. (Since, this particular implementation assumes we can convert any RV from `scipy.stats` to it's corresponding Numpy/Numba version, but that might not be always the case)
brandonwillard(2021-06-04 23:04:07):Exactly!
kc611(2021-06-12 13:24:05):Just a minor question. Over here, for distributions that accept arrays as inputs. (For instance `beta`) this doesn't accept anything other than a `float` value. If so then how is it that we can pass arrays (as `dvector`s) in Aesara graphs with Numba ? (like done in `test_random.test_RandomVariable`) 
brandonwillard(2021-06-12 19:45:40):We're `numba.vectorize`ing these `np.random` functions via the Aesara Numba dispatch.  That's what makes them work with array inputs.

We can do the same for testing.
kc611(2021-06-13 11:30:07):I tried doing a `numba.vectorize` but it still doesn't work with array inputs. There's probably something else I'm missing here.

Also a bit hackish but it seems functions compiled with `numba.vectorize` (without the decorator defining types, probably), they don't accept functions without any arguments. So I passed a single dummy variable(that `a`). Is this an issue with Numba or is it supposed to work this way.
brandonwillard(2021-06-14 21:28:29):The body of the function is supposed to represent the _scalar_ operation that's broadcast across arrays (i.e. "vectorized"), which, in this case, would be one of the `np.random` functions.  In other words, the `numba.vectorized` function should have the same signature as `numpy_fn`&mdash;more or less.

Varargs (i.e. `*inputs`) might be an issue for `numba.vectorize`, though.  This is why we create functions via source code: to get past some vararg limitations in Numba.

See https://github.com/numba/numba/issues/6954.  Also, don't hesitate to attempt a solution for https://github.com/numba/numba/issues/6954 in Numba; the more we know about&mdash;and can help&mdash;Numba, the better.
kc611(2021-06-17 15:44:02):> Varargs (i.e. *inputs) might be an issue for numba.vectorize, though.

Yeah, that's a problem. We can just use the `make_numba_random_fn` in this case, If our goal at the end is just comparing the inputs with and without the Numba function being in the graph. 
brandonwillard(2021-06-25 21:39:59):We'll do this in a separate PR; I don't want to hold this up any longer.
codecov[bot](2021-05-11 23:28:00):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/405?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#405](https://codecov.io/gh/pymc-devs/aesara/pull/405?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (5d69618) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/fc7922c0a1cb69b4b8d4a30502cdaa5438932d9f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (fc7922c) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 5d69618 differs from pull request most recent head 3419169. Consider uploading reports for the commit 3419169 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/405/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/405?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #405   +/-   ##
=======================================
  Coverage   72.42%   72.43%           
=======================================
  Files         170      171    +1     
  Lines       55581    55587    +6     
=======================================
+ Hits        40256    40262    +6     
  Misses      15325    15325           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/405?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/configdefaults.py](https://codecov.io/gh/pymc-devs/aesara/pull/405/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `80.39% <ø> (ø)` | |
| [aesara/compile/mode.py](https://codecov.io/gh/pymc-devs/aesara/pull/405/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvbW9kZS5weQ==) | `88.50% <100.00%> (+0.11%)` | :arrow_up: |
| [aesara/link/numba/\_\_init\_\_.py](https://codecov.io/gh/pymc-devs/aesara/pull/405/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvX19pbml0X18ucHk=) | `100.00% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/405/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.10% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/link/numba/linker.py](https://codecov.io/gh/pymc-devs/aesara/pull/405/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvbGlua2VyLnB5) | `100.00% <100.00%> (ø)` | |

codecov[bot](2021-05-13 07:42:31):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/408?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#408](https://codecov.io/gh/pymc-devs/aesara/pull/408?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (9f2aa0b) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/9926e07c26f79e47727b5505d189f8e66ae53405?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (9926e07) will **decrease** coverage by `0.00%`.
> The diff coverage is `25.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/408/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/408?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #408      +/-   ##
==========================================
- Coverage   72.42%   72.42%   -0.01%     
==========================================
  Files         171      171              
  Lines       55584    55588       +4     
==========================================
+ Hits        40259    40260       +1     
- Misses      15325    15328       +3     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/408?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/cmodule.py](https://codecov.io/gh/pymc-devs/aesara/pull/408/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `57.57% <25.00%> (-0.11%)` | :arrow_down: |

twiecki(2021-05-13 07:51:23):Thanks @hectormz!
twiecki(2021-05-13 14:54:28):Thanks @mrtommyb!
twiecki(2021-05-13 14:53:44):```suggestion
++++++++++++++++++++++++++++++++
```
codecov[bot](2021-05-15 19:53:04):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/413?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#413](https://codecov.io/gh/pymc-devs/aesara/pull/413?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (3fd8d7c) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/86815d66af7cd93a44b20757efb01e7b21556145?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (86815d6) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/413/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #413      +/-   ##
==========================================
- Coverage   72.42%   72.42%   -0.01%     
==========================================
  Files         171      171              
  Lines       55588    55586       -2     
==========================================
- Hits        40260    40258       -2     
  Misses      15328    15328              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/413/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.09% <100.00%> (-0.01%)` | :arrow_down: |

larryshamalama(2021-05-17 19:14:55):Corrected a typ<b>o</b>*

Corrected `ChiSquareRV` and added tests. Upon briefly [experimenting](https://github.com/larryshamalama/pymc3-playground/blob/master/aesara-pr414.ipynb), I'm still unsure if my tests are written correctly, but I follow closely `test_gamma_samples`.
codecov[bot](2021-05-17 19:57:20):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/414?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#414](https://codecov.io/gh/pymc-devs/aesara/pull/414?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (8a2339f) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/5dc35990001fa10a008a630733a7138c304ad5cd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (5dc3599) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/414/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/414?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #414   +/-   ##
=======================================
  Coverage   72.42%   72.42%           
=======================================
  Files         171      171           
  Lines       55586    55593    +7     
=======================================
+ Hits        40258    40265    +7     
  Misses      15328    15328           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/414?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/414/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |

ricardoV94(2021-05-18 09:48:46):Ups I didn't squash and merge by accident :/

Thanks anyway @larryshamalama, that should be all that's needed from your part :D
codecov[bot](2021-05-18 10:31:21):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/417?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#417](https://codecov.io/gh/pymc-devs/aesara/pull/417?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (97a7a5e) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/5dc35990001fa10a008a630733a7138c304ad5cd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (5dc3599) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/417/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/417?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #417   +/-   ##
=======================================
  Coverage   72.42%   72.42%           
=======================================
  Files         171      171           
  Lines       55586    55590    +4     
=======================================
+ Hits        40258    40262    +4     
  Misses      15328    15328           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/417?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/graph/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/417/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `91.85% <100.00%> (+0.05%)` | :arrow_up: |

Spaak(2021-05-19 09:10:10):@brandonwillard @twiecki 

> What does deferring to a new `_[str|repr]_impl` method provide to `__[str|repr]__` that standard class inheritance and method overriding doesn't?

To quote the explanation I gave in https://github.com/pymc-devs/pymc3/pull/4692:

> The (only) reason that I used this dynamic type patching is that Python's builtin `str` will always call the `__str__` that is *defined on the object's class* (see [this answer on SO](https://stackoverflow.com/questions/5918003/python-override-str-in-an-exception-instance/5918210#5918210)). If we were to do `myvar.__str__ = somefun` then still `str(myvar)` would *not* call `somefun` (unlike any other method assignment). The reason that overriding built-in `str` and `repr` (which behaves in the same way) is desireable is for console support; only that way can we get behaviour like:
> 
> ```
> >>> y
> y ~ N(f(a, b), y_sigma)
> ```
> 
> otherwise the user would have to type `>>> pretty_print(y)` or so to get the same.

The **key question** here is: do we want to provide enhanced string representations when the user simply types a variable name `y` at the console prompt, or do we always want to require `pprint(y)`? At least in the PyMC3 case, for v4, if we want nice printing for simply typing a variable name, this requires *some* change in the way `__str__` is handled.

I can see five options:
1. Patching `__class__`
2. Deferring to `_[str|repr]_impl` in Aesara `Variable.__[str|repr]__` and patching the former in PyMC3
3. Re-instating the object-oriented approach for PyMC3 `Distribution`s added to `Model`s
4. Using a wrapper around Aesara `Variable`s when creating them in PyMC3
5. Not supporting quick formatted printing on the console at all
6. Supporting quick formatted printing only through [IPython.lib.pretty](https://ipython.readthedocs.io/en/stable/api/generated/IPython.lib.pretty.html) or similar

Contra 1: potential obscure side effects, as you rightly pointed out.

To me, option 2 has no clear downsides.

Contra 3: this would be a massive and unwanted overhaul of the approach taken with v4.

Contra 4: this would mean users no longer are dealing directly with Aesara `TensorVariable`s but with wrappers around those. Supporting the neat integration of PyMC3 objects with arbitrary Aesara math, deterministics, etc. with a wrapper class is non-trivial and would probably lead to unclear code.

Contra 5: quick formatted printing of variables on the console without having to explicitly invoke a special pretty printing function is great to have from a user experience perspective (and also very common in other widely used toolboxes).

Contra 6: this would somewhat limit the scope of when and where pretty-printed output is the default. Not a huge downside, I agree (though I still see the general solution in option 2 as preferable).

It's important to note that the **issue here is separate** from the more general discussion of which machinery to actually use to generate the string representations: either the relatively limited functionality in my PR https://github.com/pymc-devs/pymc3/pull/4692 (essentially a recreation and refactoring of what we had in v3); or more elaborate arbitrary graph renderings as in your code from `symbolic_pymc`. No matter which of these two options we choose, we need to make a decision on whether and how to support "quick console printing".
twiecki(2021-05-19 10:00:24):I want us to support "quick console printing", it's a really pleasant surprise to users when that works out, and for `aesara` I can never remember the `pprint` import and hence rarely use it. I agree that option 2 is a reasonable work-around this Python quirk.
twiecki(2021-05-19 19:17:01):> Contra 4: this would mean users no longer are dealing directly with Aesara TensorVariables but with wrappers around those. Supporting the neat integration of PyMC3 objects with arbitrary Aesara math, deterministics, etc. with a wrapper class is non-trivial and would probably lead to unclear code.

I don't think that's necessarily the case. We could wrap but still return a `TensorVariable`, no? I think in that case that might be preferable.
michaelosthege(2021-05-20 00:06:49):Thanks for the great overview of options @Spaak!

To me option 2 sounds best too. I agree with @twiecki about option 4, but if I'm afraid of introducing a lot of type clutter. 
Option 2 would also be implemented very close to the RandomVariable Ops, right?
brandonwillard(2021-05-20 06:02:30):> To quote the explanation I gave in
[pymc-devs/pymc3#4692](https://github.com/pymc-devs/pymc3/pull/4692):

So I can assume your response is essentially a positive answer to my question:

> To start, does this change only serve to aid in the implementation of
[pymc-devs/pymc3#4692](https://github.com/pymc-devs/pymc3/pull/4692)?

Again, since this `_[str|repr]_impl` indirection serves no apparent purpose for *this* library, it's hard to justify adding it.

> The **key question** here is: do we want to provide enhanced string representations when the user simply types a variable name `y` at the console prompt, or do we always want to require `pprint(y)`?

Actually, the key question is: **do we want to make a change to a core class that serves no purpose other than to allow pretty printing via `__[str|repr]__` in non-IPython/Jupyter consoles for certain `Variable` instances in certain situations via monkey patching**.  The answer is "No".

I'll attempt to clarify in the following.

## Unaddressed concerns

The added convenience of console-based pretty printing is minor&mdash;at best&mdash;and nowhere near the cost of widespread and dynamically occuring issues like https://github.com/pymc-devs/pymc3/issues/4240, which&mdash;by the way&mdash;we had to deal with while working on `pymc3-hmm`, because it actually affected _all_ custom `Distribution`s that didn't fit the low-level pretty printer's expectations.

If for some reason you believe a `try` block will solve all foreseeable problems, you're mistaken.  Consider, for instance, a seemingly clever developer who really tries to take this pretty printing thing to its logical conclusion and walks the `Variable`s' arguments. If they're not careful, they could easily bring simple string output for a large graph to a crawl, or&mdash;worse yet&mdash;their buggy implementation could lead to infinite recursions, forcing other hapless developers to wait until a silent `RecursionError` is raised.

You're noticeably downplaying the damage caused by bad `__[str|repr]__`s (especially ones that can be hot-swapped at any time) and playing up the extremely marginal benefits of this approach to pretty printing.

Does this mean we shouldn't try to make pretty printers?  Obviously not, but it does mean that we probably shouldn't substitute simple string printing with a haphazard approach to pretty printing. 

Keeping `__str__` and `__repr__` separate from the goals of pretty printing at least makes it possible to get a simple and consistent string representation for quick assessments during development and debugging.  Even fancy consoles like IPython that implement pretty printing generally won't take over the representation of objects in critical areas like a debugger.  Your proposed approach unfortunately does.

## Illustrations of this new feature

It appears as though you don't really understand how fundamentally limited this approach is, since you keep making statements implying that this PR and/or https://github.com/pymc-devs/pymc3/pull/4692 will add an unqualified level of console-agnostic pretty printing.  It won't, and, if you don't understand this, it's likely that anyone else following this discussion wouldn't either, so I'll try to illustrate.

In the following, I'll reproduce the exact intended use of these changes:
```python
import aesara
import aesara.tensor as at

from aesara.graph.basic import Variable



x = at.vector("x")

x._str_impl = lambda: "my custom __str__"

str(x)
# 'my custom __str__'
```

First off, we can't easily get information about the object we're customizing unless we use the unnecessarily cumbersome `types.MethodType` approach.  This is the first, and simplest, basic design flaw.


Let's say we only wanted to extend the existing `__str__` output of `x`:
```python
import types


x._str_impl = types.MethodType(lambda self: f"my custom {self}", x)


str(x)

# RecursionError: maximum recursion depth exceeded while calling a Python object
```


Uh oh; if this were used in https://github.com/pymc-devs/pymc3/pull/4692, here's where that silently caught `RecursionError` would noticeably slow down `str` output.  Looks like we need to be more careful about recursion, especially if we intend to use an object's existing `__str__`.

In a standard `__[str|repr]__` implementation this recursion would&mdash;hopefully&mdash;be much more apparent, but, in this context, there's a greater chance of it being masked by the unnecessary indirection, especially when an implementation is less trivial than this example.

Anyway, it seems like we only need to use the base class's `_repr_impl`:
```python
def my_str_impl(self):
    base_str = super()._str_impl()
    return f"my custom {base_str}"


x._str_impl = types.MethodType(my_str_impl, x)


str(x)
# RuntimeError: super(): __class__ cell not found
```

Nope; looks like we can't use the normal means of accessing base class implementations.  (Again, this would be a silent error in https://github.com/pymc-devs/pymc3/pull/4692.)

Now, while this goal can be accomplished using the less than ideal `Variable._str_impl(self)`, this exercise has already demonstrated how our earlier concerns are not overly conservative, since the sheer awkwardness of this approach can easily lead to errors.

But there's more.

Let's get what we're looking for out of this implementation:
```python
def my_str_impl(self):
    base_str = Variable._str_impl(self)
    return f"my custom {base_str}"


x._str_impl = types.MethodType(my_str_impl, x)


str(x)
# 'my custom x'
```

Now, let's see how well this pretty printing works:
```python
y = x * 2

str(y)
# 'Elemwise{mul,no_inplace}.0'
```

Clearly this pretty printing doesn't work at all if we don't apply it directly to each and every variable instance. That seems **considerably** more limited than `reprlib`, `pprint`, `IPython.lib.pretty`, `aesara.printing`, etc. All of the alternatives I provided can be made to work on _all_ `Variable` instances, so I think that's a major shortcoming of your previous considerations.

Let's try some pretty printing that does work for _all_ variables:
```python
x = at.vector()

x._str_impl = types.MethodType(lambda self: "this is a vector", x)

y = at.broadcast_to(x, (1, 2))

aesara.dprint(y)
# BroadcastTo [id A] ''
#  |this is a vector [id B]
#  |Subtensor{int64} [id C] ''
#  | |TensorConstant{[1 2]} [id D]
#  | |ScalarConstant{0} [id E]
#  |Subtensor{int64} [id F] ''
#    |TensorConstant{[1 2]} [id D]
#    |ScalarConstant{1} [id G]
```

Agh; looks like we've ruined the useful debug output of `aesara.dprint`, because now we can't tell which `Type` the pretty printed variable is.  Anyone debugging these altered `__str__`s will simply have to hope that the new `__str__` is at least as informative as the ones they're expecting.


Let's try a more motivating example:
```python
from aesara.tensor.random.basic import normal


x = normal(size=10)

def my_str_impl(self):
    return f"Normal({x.owner.inputs[3]}, {x.owner.inputs[4]}, {x.owner.inputs[1]})"


x._str_impl = types.MethodType(my_str_impl, x)

str(x)
# 'Normal(TensorConstant{0.0}, TensorConstant{1.0}, TensorConstant{(1,) of 10})'
```

That's more like it!  Now, let's make use of our new pretty printing, and transform this variable and observe the result in its more convenient pretty printed form:
```python
from aesara.tensor.random.opt import lift_rv_shapes


new_x = lift_rv_shapes(x.owner).outputs[1]

str(new_x)
# 'normal_rv.out'
```

Looks like we've lost the pretty printing again.

Let's try this with the other most common variable type:
```python
x = at.as_tensor([1, 2])


def my_str_impl(self):
    return f"{x.data}"

x._str_impl = types.MethodType(my_str_impl, x)


str(x)
# 'TensorConstant{[1 2]}'
```

No go.  Looks like we'll need to add this indirection "feature" to more classes in order to get reasonable pretty printing coverage.

In conclusion, the capabilities these changes provide are not even close to being on par with the alternatives, and the limited single capability it does provide isn't even as effective as changing the existing class `__[str|repr]__`s directly.

## Option Assessments

> Contra 1: potential obscure side effects, as you rightly pointed out.

No, not _potentially obscure_ side effects; very *obvious* side effects.

> To me, option 2 has no clear downsides.

By now, it should be clear that there are numerous demonstrable downsides and disadvantages.

> Contra 3: this would be a massive and unwanted overhaul of the approach taken with v4.

This could actually be done, but, to do it right, it would require changes in Aesara;
potentially welcome changes, though.

> Contra 4: this would mean users no longer are dealing directly with Aesara `TensorVariables` but with wrappers around those. Supporting the neat integration of PyMC3 objects with arbitrary Aesara math, deterministics, etc. with a wrapper class is non-trivial and would probably lead to unclear code.

This sounds like a lot of guessing mixed with unsubstantiated assertions.  For instance, why can't a wrapper or proxy also be a `TensorVariable`?  Why would either lead to unclear code? If all that's true, why would anyone ever use wrappers or proxy patterns?

> Contra 5: quick formatted printing of variables on the console without having to explicitly invoke a special pretty printing function is great to have from a user experience perspective...

You've somehow aligned these changes with "quick formatted printing"; that's not what this PR or https://github.com/pymc-devs/pymc3/pull/4692 really provides.  It's just a euphemism.

The only things under consideration that actually provide "quick formatted printing" are the alternatives I mentioned, but you seem to believe that the extra `pprint` or `aesara.dprint` aren't worth their ability to cover every case and variable thoroughly&mdash;and all without sacrificing the quality of Aesara or PyMC.

Worse yet, the ones that _do_ work without explicit function calls aren't good enough because...people might be using the vanilla Python console?

> ...(and also very common in other widely used toolboxes).

Really?  Which ones provide support for monkey patching their base object `__str__` and `__repr__` implementations?  Better yet, which tensor libraries pretty print their graphs on the console?  I had to implement that functionality myself in TensorFlow, and I don't even know how that could be a thing in JAX, since it doesn't have graph objects that are handled directly.  Does PyTorch do this?


Overall, you're conflating `__str__` and `__repr__` with pretty printing, and you're not actually weighing the pros and cons of the specific approach endorsed by these changes.

If you really care about the "user experience" and Aesara, please, consider _actually_ assessing these alternative approaches that are notably better for both your goals and this project.

Regardless, I can't afford to write detailed responses like this reiterating and illustrating every review concern I state, especially not when they're just going to be dismissed in favor of vague pleas to "usability" and the "user experience".  I would much rather we spend this time working through some of those better alternatives.  I'll leave this PR open in case you decide to use it for that purpose.

Spaak(2021-05-20 08:23:06):@brandonwillard 

To avoid any misunderstanding: I don't have a particular personal emotional attachment to my proposed route of implementation here.

> you're not actually weighing the pros and cons of the specific approach endorsed by these changes.

> consider *actually* assessing these alternative approaches that are notably better for both your goals and this project.

> they're just going to be dismissed in favor of vague pleas

Assessing the pros and cons is what I thought we were doing, and I don't think I dismissed any of your points (e.g., the reason for the `_str_impl` idea is that you convincingly argued that patching `__class__` was risky.) Reaching a different conclusion in a deliberation does not mean that there was no deliberation at all. For what it's worth: I again think you raise valid points, especially considering debug printing.
codecov[bot](2021-05-18 18:36:37):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/418?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#418](https://codecov.io/gh/pymc-devs/aesara/pull/418?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (3908202) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/7a987064deab49b1fe75b526498752854819cddc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (7a98706) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/418/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/418?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #418   +/-   ##
=======================================
  Coverage   72.42%   72.43%           
=======================================
  Files         171      171           
  Lines       55593    55603   +10     
=======================================
+ Hits        40265    40275   +10     
  Misses      15328    15328           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/418?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/op.py](https://codecov.io/gh/pymc-devs/aesara/pull/418/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `99.38% <100.00%> (-0.03%)` | :arrow_down: |
| [aesara/tensor/random/opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/418/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3B0LnB5) | `97.36% <100.00%> (+0.09%)` | :arrow_up: |
| [aesara/tensor/random/utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/418/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdXRpbHMucHk=) | `100.00% <100.00%> (ø)` | |

codecov[bot](2021-05-19 02:21:33):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/419?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#419](https://codecov.io/gh/pymc-devs/aesara/pull/419?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (f448f11) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/17ba075e5c7a9e34b71b8a1217a3390c3c14d401?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (17ba075) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/419/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/419?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #419   +/-   ##
=======================================
  Coverage   72.43%   72.43%           
=======================================
  Files         171      171           
  Lines       55603    55603           
=======================================
  Hits        40275    40275           
  Misses      15328    15328           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/419?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/scan/scan\_perform\_ext.py](https://codecov.io/gh/pymc-devs/aesara/pull/419/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NjYW4vc2Nhbl9wZXJmb3JtX2V4dC5weQ==) | `88.52% <100.00%> (ø)` | |

codecov[bot](2021-05-20 14:50:28):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/420?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#420](https://codecov.io/gh/pymc-devs/aesara/pull/420?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (876e5ca) into [main](https://codecov.io/gh/pymc-devs/aesara/commit/175e3e86013d9d592979ea398d8d1cfb36d5ef62?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (175e3e8) will **increase** coverage by `0.00%`.
> The diff coverage is `93.93%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/420/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/420?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##             main     #420   +/-   ##
=======================================
  Coverage   72.52%   72.53%           
=======================================
  Files         174      174           
  Lines       55689    55709   +20     
=======================================
+ Hits        40390    40407   +17     
- Misses      15299    15302    +3     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/420?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/monitormode.py](https://codecov.io/gh/pymc-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvbW9uaXRvcm1vZGUucHk=) | `78.26% <ø> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `88.73% <0.00%> (ø)` | |
| [aesara/tensor/random/op.py](https://codecov.io/gh/pymc-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `99.32% <80.00%> (ø)` | |
| [aesara/tensor/random/type.py](https://codecov.io/gh/pymc-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdHlwZS5weQ==) | `96.82% <93.10%> (-3.18%)` | :arrow_down: |
| [aesara/compile/nanguardmode.py](https://codecov.io/gh/pymc-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `70.99% <100.00%> (ø)` | |
| [aesara/gradient.py](https://codecov.io/gh/pymc-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `86.80% <100.00%> (-0.14%)` | :arrow_down: |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `82.31% <100.00%> (+0.26%)` | :arrow_up: |
| [aesara/link/jax/linker.py](https://codecov.io/gh/pymc-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2xpbmtlci5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/sandbox/rng\_mrg.py](https://codecov.io/gh/pymc-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NhbmRib3gvcm5nX21yZy5weQ==) | `90.86% <100.00%> (ø)` | |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |
| ... and [3 more](https://codecov.io/gh/pymc-devs/aesara/pull/420/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | |

kc611(2021-05-27 17:25:34):The convention I'm following for these tests migrations is:

`RandomState` -> `Generator` intitalization.

`.rand` -> `.random` function

`.randint` -> `.integers` function

`.random_sample` -> `.random` function

`randn` -> `.standard_normal` function
brandonwillard(2021-05-27 17:51:20):> The convention I'm following for these tests migrations is:
> 
> `RandomState` -> `Generator` intitalization.
> 
> `.rand` -> `.random` function
> 
> `.randint` -> `.integers` function
> 
> `.random_sample` -> `.random` function
> 
> `randn` -> `.standard_normal` function

Sounds correct to me (i.e. in line with the NumPy API changes).
kc611(2021-05-29 06:22:00):In `tests.unittest_tools` the function `set_seed()` :

https://github.com/pymc-devs/aesara/blob/fbde872ef7cb6098b23ad442b82613eb41702de3/tests/unittest_tools.py#L54

Depends upon the Numpy's `random.seed()` function, which should probably be removed since it internally seeds the `RandomState` only. (And it's use is not recommended by Numpy either). 

Instead we can just define a Generator as `np.random.default_rng(utt.fetch_seed())` where-ever the consistency is required between random arrays. And having a externally accessible Generator and calling random methods from that is much more convenient than internally using `set_seed()` and calling random function using `numpy.random` module. 
kc611(2021-05-29 14:07:07):I think the current failing test is caused by some kind of inconsistency between `rng` states. I just can't figure out where. (Maybe it's related to removing the unit test module's `set_seed` method?) And I can't replicate this issue locally. (The tests pass, locally).

@brandonwillard Any guesses?
brandonwillard(2021-05-29 17:09:25):> Instead we can just define a Generator as `np.random.default_rng(utt.fetch_seed())` where-ever the consistency is required between random arrays.

Definitely; however, I would also add that tests should always use their own explicitly seeded `Generator`s.  This is another big problem we've inherited from Theano: we have too many tests that use a global/shared RNG, which makes all the tests inherently coupled.

One can see this clearly when trying to refactor, because the RNG state-sensitive tests start to fail when new tests are added or moved and cause the test order&mdash;and, thus, RNG state&mdash;to change.
brandonwillard(2021-05-29 17:10:35):> I think the current failing test is caused by some kind of inconsistency between `rng` states. I just can't figure out where.

I may have accidentally provided a reason in my previous comment.
kc611(2021-06-01 08:21:00): I think the migration to `Generator`s is mostly done. 
 
 A few compromises I needed to make:
 
Had to increase the tolerance over here for gradient verification: (increased from 0.01 to 0.05, tests will also pass if it's set to 0.02, but there may be, and still are, flaky failures)
 https://github.com/pymc-devs/aesara/blob/c32c1d34f9ea7e11e877bd454cb9b08305812720/tests/unittest_tools.py#L79

Had to increase tolerance in test/tensor/test_blas for GEMM(increased form 1e-8 to 2e-8, but this one is seed based test and I'm pretty sure we can find a seed which will still have a tolerance of 1e-08)
https://github.com/pymc-devs/aesara/blob/c32c1d34f9ea7e11e877bd454cb9b08305812720/tests/tensor/test_blas.py#L674

The Jax tests for `Generators` are marked as `xfail` for now, it'll be better if we do that in a separate PR. 

Regarding code coverage I think most of the negative coverage (about `-0.06`) comes from the dictionaries defined in `tensor/type.py`. Other than the ones added in `tests/tensor/test_type` I don't think there's need for extra tests. 
brandonwillard(2021-06-04 20:28:00):I just rebased and updated the NumPy requirement (so that these changes won't fail for older versions).
codecov[bot](2021-06-09 15:18:55):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/420?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#420](https://codecov.io/gh/aesara-devs/aesara/pull/420?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0859755) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/08f49d16b1d14f4792e32bd2438d40bb46ab6fe3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (08f49d1) will **increase** coverage by `4.02%`.
> The diff coverage is `91.07%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/420/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/420?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #420      +/-   ##
==========================================
+ Coverage   72.45%   76.48%   +4.02%     
==========================================
  Files         174      147      -27     
  Lines       55675    46422    -9253     
  Branches        0    10227   +10227     
==========================================
- Hits        40339    35504    -4835     
+ Misses      15336     8300    -7036     
- Partials        0     2618    +2618     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/420?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/monitormode.py](https://codecov.io/gh/aesara-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvbW9uaXRvcm1vZGUucHk=) | `71.73% <ø> (-6.53%)` | :arrow_down: |
| [aesara/sandbox/rng\_mrg.py](https://codecov.io/gh/aesara-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvcm5nX21yZy5weQ==) | `84.54% <0.00%> (-6.33%)` | :arrow_down: |
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <ø> (ø)` | |
| [aesara/compile/nanguardmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `56.48% <33.33%> (-14.51%)` | :arrow_down: |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `78.53% <42.85%> (-6.17%)` | :arrow_down: |
| [aesara/tensor/random/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `98.65% <60.00%> (-0.68%)` | :arrow_down: |
| [aesara/tensor/random/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdHlwZS5weQ==) | `90.62% <84.61%> (-9.38%)` | :arrow_down: |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `80.20% <94.44%> (-1.85%)` | :arrow_down: |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `85.15% <95.83%> (-3.59%)` | :arrow_down: |
| [aesara/gradient.py](https://codecov.io/gh/aesara-devs/aesara/pull/420/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `77.20% <100.00%> (-9.74%)` | :arrow_down: |
| ... and [147 more](https://codecov.io/gh/aesara-devs/aesara/pull/420/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

kc611(2021-06-09 17:33:20):> We need to check the handling of these dict representations and make sure they can be used inside a compiled Aesara function.

Is the current approach (splitting the big integer into individual digits) a viable one ?

brandonwillard(2021-06-20 22:40:21):> Is the current approach (splitting the big integer into individual digits) a viable one ?

I've updated the approach a little bit, and it should work well enough for now.

The changes involve splitting and recombining `Generator`'s 128 bit `int`s in terms of 32 bit `int`s.  Since JAX's RNG states appear to consist of two 32 bit `int`s, this approach seems compatible.
kc611(2021-06-22 16:49:12):`RandIntRV` currently uses `.integers`, Sure we can rename that to `IntegersRV`. But I don't see any other use case for two different RNG `Type`s outside of this. (Since the interfaces are so similar except for `.random`/`.integers` method).

One other thing we can do is add a case for `.integers` in `RandomVariable` which will just change the `name` to `.random` if underling RNG is a `RandomState` which can be done either during initialization or the actual sampling. Since Aesara as well as Numpy is now `Generators` based and keeping `RandomStates` for backwards compatibility, I think having different `Types` would be overkill if this is the only use case. Or is it ?
brandonwillard(2021-06-22 17:05:48):> But I don't see any other use case for two different RNG `Type`s outside of this. (Since the interfaces are so similar except for `.random`/`.integers` method).

This will likely reappear when/if we get Numba support for `Generator`s, because then we'll need to be able to determine that the underlying RNG is truly a `Generator`.

Currently, we're hiding the type of the underlying non-symbolic object with our dual-purpose symbolic `Type`, and that invites all sorts of trouble (and effectively breaks the implicit API/object contract in certain ways).
brandonwillard(2021-06-24 18:06:53):There's a very weird [segmentation fault](https://github.com/aesara-devs/aesara/pull/420/checks?check_run_id=2907426448#step:6:44) showing up in the Numba tests.  I don't see how this is related to these `Generator` changes, and I can't reproduce it locally.

I added a test commit (to be removed) that only runs those tests, and it appears to be very reproducible in the CI environment.

@kc611, can you reproduce it locally?
brandonwillard(2021-06-25 01:52:56):The segmentation fault is fixed in https://github.com/aesara-devs/aesara/pull/498.
brandonwillard(2021-05-23 01:13:34):```suggestion
        if isinstance(a, (np.random.Generator, np.random.RandomState)):
```
kc611(2021-05-27 17:54:11):Regarding the Jax conversion. I was thinking maybe we could generate a `PRNG` over here (and do the same with `RandomState`) and store it in the `state` dictionary as `jax_key`.

And in the `RandomVariable` conversion down below we could update this `jax_key` instead of the Numpy's state key. 

This way we could implement support for all `Generators` since we'll simply have to change the way `PRNG` is created for each of them. Which is easy if it's being done in this part of code rather than the `RandomVariable` part.
brandonwillard(2021-05-27 17:56:17):As long as `jax_key` stays localized to the JAX compilation process and its results (e.g. we don't have to alter the generic `RandomState`/`Generator` types to explicitly account for it), we should be fine.
brandonwillard(2021-05-29 17:17:09):It looks like this will reset the state on the second call to `random`.  Try creating `rng = np.random.default_rng(utt.fetch_seed())` once and using `rng` for both these cases.
kc611(2021-05-29 17:34:15):Already tried, and also tried passing that rng all the way to `verify_grad` it still fails. And strangely I can't replicate any of this locally. I have to commit and 'uncommit' each time. 

This is just one of my (random) unsuccessful attempts.

I think it might be an issue with 'verify_grad' itself. Either that or its interface in unit test tools. Since there are also changes in both. 
brandonwillard(2021-05-29 18:32:07):Well, let's keep that change anyway. 

Otherwise, the failures could simply be due to the underlying RNG change generating a new set of samples, so we can update the test for this difference (e.g. the accepted error ranges and such), find a more advantageous seed, or something else.  Changing the seed is the least preferrable, though.
codecov[bot](2021-05-20 00:06:20):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/422?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#422](https://codecov.io/gh/pymc-devs/aesara/pull/422?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (8d06c93) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/14c7373e4dd1d49ef2e73cfa08063a1a79e85380?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (14c7373) will **decrease** coverage by `0.00%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/422/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/422?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #422      +/-   ##
==========================================
- Coverage   72.43%   72.43%   -0.01%     
==========================================
  Files         171      171              
  Lines       55603    55601       -2     
==========================================
- Hits        40275    40273       -2     
  Misses      15328    15328              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/422?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/graph/fg.py](https://codecov.io/gh/pymc-devs/aesara/pull/422/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `93.22% <ø> (-0.05%)` | :arrow_down: |

codecov[bot](2021-05-21 01:41:48):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/429?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#429](https://codecov.io/gh/pymc-devs/aesara/pull/429?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (511b8f6) into [main](https://codecov.io/gh/pymc-devs/aesara/commit/eb4f92f4cd139e2e6f425ed95de57a888c76b57e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (eb4f92f) will **decrease** coverage by `0.03%`.
> The diff coverage is `57.14%`.

> :exclamation: Current head 511b8f6 differs from pull request most recent head 71b33c4. Consider uploading reports for the commit 71b33c4 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/429/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/429?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##             main     #429      +/-   ##
==========================================
- Coverage   72.52%   72.49%   -0.04%     
==========================================
  Files         174      173       -1     
  Lines       55689    55638      -51     
==========================================
- Hits        40390    40332      -58     
- Misses      15299    15306       +7     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/429?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/\_version.py](https://codecov.io/gh/pymc-devs/aesara/pull/429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL192ZXJzaW9uLnB5) | `44.20% <ø> (ø)` | |
| [aesara/compile/builders.py](https://codecov.io/gh/pymc-devs/aesara/pull/429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `79.88% <ø> (-0.18%)` | :arrow_down: |
| [aesara/compile/debugmode.py](https://codecov.io/gh/pymc-devs/aesara/pull/429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `68.02% <ø> (ø)` | |
| [aesara/compile/function/pfunc.py](https://codecov.io/gh/pymc-devs/aesara/pull/429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `89.78% <ø> (ø)` | |
| [aesara/compile/ops.py](https://codecov.io/gh/pymc-devs/aesara/pull/429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvb3BzLnB5) | `90.64% <ø> (ø)` | |
| [aesara/compile/profiling.py](https://codecov.io/gh/pymc-devs/aesara/pull/429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `78.88% <ø> (ø)` | |
| [aesara/configdefaults.py](https://codecov.io/gh/pymc-devs/aesara/pull/429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `80.39% <ø> (ø)` | |
| [aesara/configparser.py](https://codecov.io/gh/pymc-devs/aesara/pull/429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbmZpZ3BhcnNlci5weQ==) | `90.07% <ø> (ø)` | |
| [aesara/d3viz/formatting.py](https://codecov.io/gh/pymc-devs/aesara/pull/429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2Qzdml6L2Zvcm1hdHRpbmcucHk=) | `12.82% <ø> (ø)` | |
| [aesara/gpuarray/basic\_ops.py](https://codecov.io/gh/pymc-devs/aesara/pull/429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dwdWFycmF5L2Jhc2ljX29wcy5weQ==) | `27.70% <ø> (ø)` | |
| ... and [75 more](https://codecov.io/gh/pymc-devs/aesara/pull/429/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | |

hectormz(2021-05-26 13:46:56):@ColCarroll this branch is now up to date with master and I added a few more fixes
brandonwillard(2021-06-06 22:22:52):I've resolved the merge conflicts on this PR, so, if you want to do any further work on this branch, you'll need to pull those changes.  Also, we've changed the `master` branch to `main`, so be sure to update your local repository accordingly.
hectormz(2021-06-06 23:19:47):Great, thanks @brandonwillard no more typos for now, but can do another sweep in the future. Thanks for the update on `main`
twiecki(2021-06-07 08:22:06):Thanks @hectormz!
michaelosthege(2021-06-07 09:26:20):And thanks @brandonwillard for rebasing it!
Good to see this PR merged :)
ColCarroll(2021-05-21 00:48:01):```suggestion
        if x.type.format == "csc" or x.type.format == "coo":
```
ColCarroll(2021-05-21 00:48:27):(see https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.html#scipy.sparse.coo_matrix)
hectormz(2021-05-21 00:58:57):Thanks for the fix! I manually blocked this correction elsewhere, but this snuck by me.
codecov[bot](2021-05-22 21:23:32):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/433?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#433](https://codecov.io/gh/pymc-devs/aesara/pull/433?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (bd68923) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/4403e1311ff57a8a5e1805ab72f965a79bb03205?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (4403e13) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/433/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/433?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #433      +/-   ##
==========================================
+ Coverage   72.43%   72.45%   +0.01%     
==========================================
  Files         171      173       +2     
  Lines       55601    55651      +50     
==========================================
+ Hits        40273    40320      +47     
- Misses      15328    15331       +3     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/433?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `88.73% <100.00%> (+0.16%)` | :arrow_up: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/pymc-devs/aesara/pull/433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `93.32% <100.00%> (+0.04%)` | :arrow_up: |
| [aesara/graph/toolbox.py](https://codecov.io/gh/pymc-devs/aesara/pull/433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL3Rvb2xib3gucHk=) | `0.00% <0.00%> (-70.69%)` | :arrow_down: |
| [aesara/graph/fg.py](https://codecov.io/gh/pymc-devs/aesara/pull/433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `93.22% <0.00%> (ø)` | |
| [aesara/graph/op.py](https://codecov.io/gh/pymc-devs/aesara/pull/433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `76.95% <0.00%> (ø)` | |
| [aesara/link/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `89.23% <0.00%> (ø)` | |
| [aesara/tensor/blas.py](https://codecov.io/gh/pymc-devs/aesara/pull/433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9ibGFzLnB5) | `86.88% <0.00%> (ø)` | |
| [aesara/graph/features.py](https://codecov.io/gh/pymc-devs/aesara/pull/433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `67.35% <0.00%> (ø)` | |
| [aesara/graph/opt\_utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL29wdF91dGlscy5weQ==) | `97.10% <0.00%> (ø)` | |
| [aesara/compile/function/types.py](https://codecov.io/gh/pymc-devs/aesara/pull/433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `84.80% <0.00%> (+0.01%)` | :arrow_up: |

codecov[bot](2021-05-22 22:00:28):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/434?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#434](https://codecov.io/gh/pymc-devs/aesara/pull/434?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (0132926) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/4403e1311ff57a8a5e1805ab72f965a79bb03205?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (4403e13) will **increase** coverage by `0.00%`.
> The diff coverage is `72.67%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/434/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/434?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #434   +/-   ##
=======================================
  Coverage   72.43%   72.43%           
=======================================
  Files         171      173    +2     
  Lines       55601    55623   +22     
=======================================
+ Hits        40273    40292   +19     
- Misses      15328    15331    +3     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/434?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/graph/toolbox.py](https://codecov.io/gh/pymc-devs/aesara/pull/434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL3Rvb2xib3gucHk=) | `0.00% <0.00%> (-70.69%)` | :arrow_down: |
| [aesara/ifelse.py](https://codecov.io/gh/pymc-devs/aesara/pull/434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `52.25% <0.00%> (ø)` | |
| [aesara/gpuarray/opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dwdWFycmF5L29wdC5weQ==) | `26.33% <33.33%> (ø)` | |
| [aesara/graph/features.py](https://codecov.io/gh/pymc-devs/aesara/pull/434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `67.35% <67.35%> (ø)` | |
| [aesara/graph/opt\_utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL29wdF91dGlscy5weQ==) | `97.10% <97.10%> (ø)` | |
| [aesara/compile/debugmode.py](https://codecov.io/gh/pymc-devs/aesara/pull/434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `68.02% <100.00%> (ø)` | |
| [aesara/compile/function/types.py](https://codecov.io/gh/pymc-devs/aesara/pull/434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `84.80% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/graph/destroyhandler.py](https://codecov.io/gh/pymc-devs/aesara/pull/434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL2Rlc3Ryb3loYW5kbGVyLnB5) | `74.36% <100.00%> (ø)` | |
| [aesara/graph/fg.py](https://codecov.io/gh/pymc-devs/aesara/pull/434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `93.22% <100.00%> (ø)` | |
| [aesara/graph/op.py](https://codecov.io/gh/pymc-devs/aesara/pull/434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `76.95% <100.00%> (ø)` | |
| ... and [9 more](https://codecov.io/gh/pymc-devs/aesara/pull/434/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | |

codecov[bot](2021-05-23 02:29:21):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/435?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#435](https://codecov.io/gh/pymc-devs/aesara/pull/435?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (cd60e9d) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/1c11dd44327655d033a1aa22fa3c14d648a35886?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (1c11dd4) will **increase** coverage by `0.02%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/435/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/435?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #435      +/-   ##
==========================================
+ Coverage   72.45%   72.47%   +0.02%     
==========================================
  Files         173      173              
  Lines       55651    55642       -9     
==========================================
+ Hits        40320    40327       +7     
+ Misses      15331    15315      -16     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/435?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/mode.py](https://codecov.io/gh/pymc-devs/aesara/pull/435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvbW9kZS5weQ==) | `88.50% <100.00%> (ø)` | |
| [aesara/gpuarray/optdb.py](https://codecov.io/gh/pymc-devs/aesara/pull/435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dwdWFycmF5L29wdGRiLnB5) | `93.75% <100.00%> (ø)` | |
| [aesara/graph/opt\_utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL29wdF91dGlscy5weQ==) | `97.10% <100.00%> (ø)` | |
| [aesara/graph/optdb.py](https://codecov.io/gh/pymc-devs/aesara/pull/435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL29wdGRiLnB5) | `89.45% <100.00%> (+4.89%)` | :arrow_up: |
| [aesara/misc/ordered\_set.py](https://codecov.io/gh/pymc-devs/aesara/pull/435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL21pc2Mvb3JkZXJlZF9zZXQucHk=) | `83.65% <0.00%> (+2.88%)` | :arrow_up: |

brandonwillard(2021-05-23 22:18:26):> On a separate note, none of these random methods show up in the docs do they?

I don't recall updating the list manually, but definitely seems like something that should be generated automatically.
codecov[bot](2021-05-23 23:21:27):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/436?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#436](https://codecov.io/gh/pymc-devs/aesara/pull/436?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (ccede9b) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/1c11dd44327655d033a1aa22fa3c14d648a35886?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (1c11dd4) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/436/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/436?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #436      +/-   ##
==========================================
- Coverage   72.45%   72.44%   -0.01%     
==========================================
  Files         173      173              
  Lines       55651    55640      -11     
==========================================
- Hits        40320    40309      -11     
  Misses      15331    15331              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/436?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/436/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.09% <ø> (-0.01%)` | :arrow_down: |
| [aesara/scalar/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/436/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `84.68% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/tensor/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/436/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `88.73% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/436/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/random/op.py](https://codecov.io/gh/pymc-devs/aesara/pull/436/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `99.32% <100.00%> (-0.06%)` | :arrow_down: |
| [aesara/tensor/type.py](https://codecov.io/gh/pymc-devs/aesara/pull/436/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `93.35% <100.00%> (ø)` | |

ricardoV94(2021-05-24 06:44:28):Typo here "previously named Aesara"
ricardoV94(2021-05-24 06:47:53):Typo "and simply the"
codecov[bot](2021-05-24 20:15:46):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/439?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#439](https://codecov.io/gh/pymc-devs/aesara/pull/439?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (cfae0a6) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/1366221b10a977aa91fb9460a2e8441616f5a4e7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (1366221) will **increase** coverage by `0.00%`.
> The diff coverage is `95.45%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/439/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/439?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #439   +/-   ##
=======================================
  Coverage   72.47%   72.47%           
=======================================
  Files         173      173           
  Lines       55631    55634    +3     
=======================================
+ Hits        40316    40319    +3     
  Misses      15315    15315           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/439?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/profiling.py](https://codecov.io/gh/pymc-devs/aesara/pull/439/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `78.88% <ø> (ø)` | |
| [aesara/gpuarray/dnn.py](https://codecov.io/gh/pymc-devs/aesara/pull/439/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dwdWFycmF5L2Rubi5weQ==) | `23.78% <ø> (ø)` | |
| [aesara/tensor/inplace.py](https://codecov.io/gh/pymc-devs/aesara/pull/439/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <ø> (ø)` | |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/439/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `91.50% <93.33%> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/439/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `84.69% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/tensor/math.py](https://codecov.io/gh/pymc-devs/aesara/pull/439/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `93.36% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/tensor/nnet/batchnorm.py](https://codecov.io/gh/pymc-devs/aesara/pull/439/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9ubmV0L2JhdGNobm9ybS5weQ==) | `83.76% <100.00%> (ø)` | |

michaelosthege(2021-05-24 19:38:16):Maybe add the [`deprecated`](https://github.com/pymc-devs/aesara/blob/master/aesara/utils.py#L149) decorator from `aesara.util`?
brandonwillard(2021-05-24 20:29:32):The `deprecated` wrapper works fine for deprecating _functions_, but this is a class and a class instance, and we don't want to unnecessarily break things by changing the expected types of these objects.

We would need to use something like `__init_subclass__` or a meta class solution to add deprecation warnings in these cases.
codecov[bot](2021-05-25 00:57:45):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/443?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#443](https://codecov.io/gh/pymc-devs/aesara/pull/443?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (27c1d24) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/dd75c2d56ce2755721dafccc2c080fcbffdd5793?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (dd75c2d) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/443/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/443?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #443   +/-   ##
=======================================
  Coverage   72.48%   72.49%           
=======================================
  Files         173      173           
  Lines       55634    55637    +3     
=======================================
+ Hits        40329    40332    +3     
  Misses      15305    15305           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/443?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/443/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3B0LnB5) | `97.43% <100.00%> (+0.06%)` | :arrow_up: |

ricardoV94(2021-05-27 16:32:49):@fanshi, thanks for opening the PR. It seems that there are more places where the imports need to be changed, gauging from the failing tests. You will also have to check whether any doc examples make reference to the affected imports. 
fanshi118(2021-05-27 19:16:20):> @fanshi, thanks for opening the PR. It seems that there are more places where the imports need to be changed, gauging from the failing tests. You will also have to check whether any doc examples make reference to the affected imports.

Thanks for reviewing. I made some additional changes in places I found needed. Let me know how this looks!
(I can't seem to link issues, but this one pertains to #379 .)
codecov[bot](2021-05-27 21:17:59):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/445?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#445](https://codecov.io/gh/pymc-devs/aesara/pull/445?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (04289cb) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/c32c1d34f9ea7e11e877bd454cb9b08305812720?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (c32c1d3) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/445/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/445?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #445   +/-   ##
=======================================
  Coverage   72.49%   72.49%           
=======================================
  Files         173      173           
  Lines       55641    55641           
=======================================
  Hits        40337    40337           
  Misses      15304    15304           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/445?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/scalar/math.py](https://codecov.io/gh/pymc-devs/aesara/pull/445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `77.18% <ø> (ø)` | |
| [aesara/gpuarray/elemwise.py](https://codecov.io/gh/pymc-devs/aesara/pull/445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dwdWFycmF5L2VsZW13aXNlLnB5) | `12.59% <100.00%> (ø)` | |
| [aesara/gpuarray/opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dwdWFycmF5L29wdC5weQ==) | `26.33% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.09% <100.00%> (ø)` | |

ricardoV94(2021-05-29 19:32:35):@fanshi118 I made two extra fixes in `tests/tensor/test_math_opt.py` where there was still a `aes.basic_scipy.imported_scipy_special`. I also squashed your commits into a single one, so if you need to do any further changes you'll have to rebase from here.

Edit: And just rebased from master
fanshi118(2021-06-01 15:02:36):> @fanshi118 I made two extra fixes in `tests/tensor/test_math_opt.py` where there was still a `aes.basic_scipy.imported_scipy_special`. I also squashed your commits into a single one, so if you need to do any further changes you'll have to rebase from here.
> 
> Edit: And just rebased from master

Ah I missed those. Thanks for coming through!
ricardoV94(2021-06-01 17:33:31):Thanks @fanshi118!
brandonwillard(2021-06-01 17:37:44):This branch appears to have had two merge commits.  Just as a reminder: we don't want those kinds of commits in the main branch.
ricardoV94(2021-06-01 17:38:51):I rebased when merging assuming it would "erase" those. 
brandonwillard(2021-06-01 17:40:33):It did; I should have prefaced that with "warning" or "reminder".

Updated the original comment.
ricardoV94(2021-05-27 19:17:02):This looks like it should be `import xxx as aesm` by looking at the others
fanshi118(2021-05-27 19:47:57):Sounds good. Will update.
codecov[bot](2021-05-28 06:32:02):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/446?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#446](https://codecov.io/gh/pymc-devs/aesara/pull/446?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (0b09746) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/175e3e86013d9d592979ea398d8d1cfb36d5ef62?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (175e3e8) will **decrease** coverage by `0.01%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 0b09746 differs from pull request most recent head ee56644. Consider uploading reports for the commit ee56644 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/446/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/446?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #446      +/-   ##
==========================================
- Coverage   72.52%   72.50%   -0.02%     
==========================================
  Files         174      173       -1     
  Lines       55689    55649      -40     
==========================================
- Hits        40390    40350      -40     
  Misses      15299    15299              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/446?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3B0LnB5) | `97.43% <ø> (ø)` | |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/random/op.py](https://codecov.io/gh/pymc-devs/aesara/pull/446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `99.29% <100.00%> (-0.04%)` | :arrow_down: |
| [aesara/link/utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `63.96% <0.00%> (-1.56%)` | :arrow_down: |
| [aesara/scalar/basic\_scipy.py](https://codecov.io/gh/pymc-devs/aesara/pull/446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpY19zY2lweS5weQ==) | | |
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.09% <0.00%> (+0.05%)` | :arrow_up: |

brandonwillard(2021-05-31 16:01:39):OK, we'll need to immediately follow up with updates to PyMC3 `v4`, so we should probably have a PR for that ready before merging here.
twiecki(2022-02-02 13:23:06):I think we should try and get this merged, code looks ready but has conflicts now.
brandonwillard(2022-02-02 15:59:24):> I think we should try and get this merged, code looks ready but has conflicts now.

The conflicts should be easy to fix, so I'll merge this when I get a minute.  Just be prepared to make follow-ups in PyMC.
codecov[bot](2022-02-04 02:47:54):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/446?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#446](https://codecov.io/gh/aesara-devs/aesara/pull/446?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (be39df2) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/da86d351979c0a29fc80da16db965551e9e8c14f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (da86d35) will **increase** coverage by `0.00%`.
> The diff coverage is `92.85%`.

> :exclamation: Current head be39df2 differs from pull request most recent head f4decde. Consider uploading reports for the commit f4decde to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/446/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/446?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #446   +/-   ##
=======================================
  Coverage   78.44%   78.44%           
=======================================
  Files         152      152           
  Lines       47820    47834   +14     
  Branches    10890    10896    +6     
=======================================
+ Hits        37512    37524   +12     
- Misses       7762     7763    +1     
- Partials     2546     2547    +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/446?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3B0LnB5) | `94.11% <ø> (ø)` | |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.46% <91.30%> (-0.42%)` | :arrow_down: |
| [aesara/tensor/random/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `97.57% <100.00%> (+0.04%)` | :arrow_up: |

twiecki(2021-05-28 17:44:11):Do we need that check for all multivariate RVs? Is this check independent of the change of how `size` gets interpreted?
brandonwillard(2021-05-28 18:08:02):Yes, we need to check that, because `size` and the overlapping parts of the parameters (i.e. the "independent parameter" dimensions) may not be equal, and&mdash;in some cases&mdash;that can only be determined at runtime.
codecov[bot](2021-05-29 22:21:06):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/448?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#448](https://codecov.io/gh/pymc-devs/aesara/pull/448?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (773e9c5) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/fbde872ef7cb6098b23ad442b82613eb41702de3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (fbde872) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/448/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #448   +/-   ##
=======================================
  Coverage   72.49%   72.49%           
=======================================
  Files         173      173           
  Lines       55638    55638           
=======================================
  Hits        40334    40334           
  Misses      15304    15304           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/448/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3B0LnB5) | `97.43% <ø> (ø)` | |

Sayam753(2021-05-29 23:14:09):I could have simply overwritten the `_shape_from_params` method of RandomVariable. As also done for `MultinomialRV` -
https://github.com/pymc-devs/aesara/blob/94254c7df072494bb564fbe2990f1b9acf0b076f/aesara/tensor/random/basic.py#L518-L521
Sorry for a little mess.
codecov[bot](2021-05-30 01:30:20):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/450?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#450](https://codecov.io/gh/pymc-devs/aesara/pull/450?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (c2b5dae) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/94254c7df072494bb564fbe2990f1b9acf0b076f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (94254c7) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/450/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/450?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #450   +/-   ##
=======================================
  Coverage   72.49%   72.49%           
=======================================
  Files         173      173           
  Lines       55638    55641    +3     
=======================================
+ Hits        40334    40337    +3     
  Misses      15304    15304           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/450?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/builders.py](https://codecov.io/gh/pymc-devs/aesara/pull/450/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `80.05% <100.00%> (+0.17%)` | :arrow_up: |

ricardoV94(2021-05-30 06:20:59):The sigmoid binary crossentropy in your second commit, I don't think that was moved out of nnet
codecov[bot](2021-05-31 01:10:03):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/452?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#452](https://codecov.io/gh/pymc-devs/aesara/pull/452?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (fb37adb) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/f9a85474509ea02647771ad6540b11f02fab59a8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (f9a8547) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/452/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/452?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #452   +/-   ##
=======================================
  Coverage   72.49%   72.49%           
=======================================
  Files         173      173           
  Lines       55641    55641           
=======================================
  Hits        40337    40337           
  Misses      15304    15304           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/452?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/op.py](https://codecov.io/gh/pymc-devs/aesara/pull/452/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `99.32% <100.00%> (ø)` | |

codecov[bot](2021-06-01 07:08:55):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/455?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#455](https://codecov.io/gh/pymc-devs/aesara/pull/455?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (2996078) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/d3bc8b816d4e0b925334b1c42341620672653aeb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (d3bc8b8) will **increase** coverage by `0.01%`.
> The diff coverage is `96.00%`.

> :exclamation: Current head 2996078 differs from pull request most recent head 1daa821. Consider uploading reports for the commit 1daa821 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/455/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/455?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##           master     #455      +/-   ##
==========================================
+ Coverage   72.49%   72.50%   +0.01%     
==========================================
  Files         173      173              
  Lines       55641    55648       +7     
==========================================
+ Hits        40337    40349      +12     
+ Misses      15304    15299       -5     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/455?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/function/types.py](https://codecov.io/gh/pymc-devs/aesara/pull/455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `84.80% <50.00%> (ø)` | |
| [aesara/compile/debugmode.py](https://codecov.io/gh/pymc-devs/aesara/pull/455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `68.02% <100.00%> (ø)` | |
| [aesara/compile/mode.py](https://codecov.io/gh/pymc-devs/aesara/pull/455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvbW9kZS5weQ==) | `89.21% <100.00%> (+0.71%)` | :arrow_up: |
| [aesara/compile/monitormode.py](https://codecov.io/gh/pymc-devs/aesara/pull/455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvbW9uaXRvcm1vZGUucHk=) | `78.26% <100.00%> (+1.51%)` | :arrow_up: |
| [aesara/compile/nanguardmode.py](https://codecov.io/gh/pymc-devs/aesara/pull/455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `70.99% <100.00%> (ø)` | |
| [aesara/graph/fg.py](https://codecov.io/gh/pymc-devs/aesara/pull/455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `93.22% <100.00%> (ø)` | |
| [aesara/tensor/random/op.py](https://codecov.io/gh/pymc-devs/aesara/pull/455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `99.32% <100.00%> (ø)` | |
| [aesara/tensor/random/opt.py](https://codecov.io/gh/pymc-devs/aesara/pull/455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3B0LnB5) | `97.43% <100.00%> (ø)` | |
| [aesara/graph/optdb.py](https://codecov.io/gh/pymc-devs/aesara/pull/455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL29wdGRiLnB5) | `91.13% <0.00%> (+1.68%)` | :arrow_up: |

codecov[bot](2021-06-01 21:41:39):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/456?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#456](https://codecov.io/gh/pymc-devs/aesara/pull/456?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (4507b29) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/d0b198d2d0e737e12b8b47d8175f1ee464c0a760?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (d0b198d) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/456/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #456   +/-   ##
=======================================
  Coverage   72.50%   72.50%           
=======================================
  Files         173      174    +1     
  Lines       55648    55651    +3     
=======================================
+ Hits        40349    40352    +3     
  Misses      15299    15299           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/scalar/basic\_scipy.py](https://codecov.io/gh/pymc-devs/aesara/pull/456/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpY19zY2lweS5weQ==) | `100.00% <100.00%> (ø)` | |

codecov[bot](2021-06-04 00:09:07):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/459?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#459](https://codecov.io/gh/pymc-devs/aesara/pull/459?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (0e592d7) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/a2671ea48eb5d7d892c728a88d194ee5922b3c50?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (a2671ea) will **increase** coverage by `0.00%`.
> The diff coverage is `97.29%`.

> :exclamation: Current head 0e592d7 differs from pull request most recent head 8f5cdc5. Consider uploading reports for the commit 8f5cdc5 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/459/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #459   +/-   ##
=======================================
  Coverage   72.50%   72.51%           
=======================================
  Files         174      174           
  Lines       55651    55670   +19     
=======================================
+ Hits        40352    40370   +18     
- Misses      15299    15300    +1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/459/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `64.77% <95.45%> (+0.81%)` | :arrow_up: |
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/459/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.11% <100.00%> (+0.02%)` | :arrow_up: |

codecov[bot](2021-06-04 00:09:07):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/459?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#459](https://codecov.io/gh/pymc-devs/aesara/pull/459?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (0e592d7) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/a2671ea48eb5d7d892c728a88d194ee5922b3c50?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (a2671ea) will **increase** coverage by `0.00%`.
> The diff coverage is `97.29%`.

> :exclamation: Current head 0e592d7 differs from pull request most recent head 8f5cdc5. Consider uploading reports for the commit 8f5cdc5 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/459/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #459   +/-   ##
=======================================
  Coverage   72.50%   72.51%           
=======================================
  Files         174      174           
  Lines       55651    55670   +19     
=======================================
+ Hits        40352    40370   +18     
- Misses      15299    15300    +1     
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/459/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `64.77% <95.45%> (+0.81%)` | :arrow_up: |
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/459/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.11% <100.00%> (+0.02%)` | :arrow_up: |

codecov[bot](2021-06-04 01:43:13):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/460?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#460](https://codecov.io/gh/pymc-devs/aesara/pull/460?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (7cd0946) into [master](https://codecov.io/gh/pymc-devs/aesara/commit/1bee84344e34408a88cb1c42070a868eb7d5b705?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (1bee843) will **increase** coverage by `0.00%`.
> The diff coverage is `96.66%`.

[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/460/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/460?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@           Coverage Diff           @@
##           master     #460   +/-   ##
=======================================
  Coverage   72.51%   72.52%           
=======================================
  Files         174      174           
  Lines       55670    55689   +19     
=======================================
+ Hits        40371    40390   +19     
  Misses      15299    15299           
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/460?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/460/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.03% <96.29%> (-0.08%)` | :arrow_down: |
| [aesara/link/utils.py](https://codecov.io/gh/pymc-devs/aesara/pull/460/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `65.51% <100.00%> (+0.42%)` | :arrow_up: |

codecov[bot](2021-06-06 06:39:43):# [Codecov](https://codecov.io/gh/pymc-devs/aesara/pull/463?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) Report
> Merging [#463](https://codecov.io/gh/pymc-devs/aesara/pull/463?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (eeb84b0) into [main](https://codecov.io/gh/pymc-devs/aesara/commit/eb4f92f4cd139e2e6f425ed95de57a888c76b57e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) (eb4f92f) will **decrease** coverage by `0.00%`.
> The diff coverage is `88.23%`.

> :exclamation: Current head eeb84b0 differs from pull request most recent head 0bb28cb. Consider uploading reports for the commit 0bb28cb to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/pymc-devs/aesara/pull/463/graphs/tree.svg?width=650&height=150&src=pr&token=WVwr8nZYmc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)](https://codecov.io/gh/pymc-devs/aesara/pull/463?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs)

```diff
@@            Coverage Diff             @@
##             main     #463      +/-   ##
==========================================
- Coverage   72.52%   72.52%   -0.01%     
==========================================
  Files         174      174              
  Lines       55689    55680       -9     
==========================================
- Hits        40390    40381       -9     
  Misses      15299    15299              
```


| [Impacted Files](https://codecov.io/gh/pymc-devs/aesara/pull/463?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | Coverage Δ | |
|---|---|---|
| [aesara/gpuarray/dnn.py](https://codecov.io/gh/pymc-devs/aesara/pull/463/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dwdWFycmF5L2Rubi5weQ==) | `23.78% <ø> (ø)` | |
| [aesara/graph/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/463/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `91.79% <ø> (ø)` | |
| [aesara/graph/fg.py](https://codecov.io/gh/pymc-devs/aesara/pull/463/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `93.22% <ø> (ø)` | |
| [aesara/graph/op.py](https://codecov.io/gh/pymc-devs/aesara/pull/463/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `76.90% <ø> (-0.06%)` | :arrow_down: |
| [aesara/graph/type.py](https://codecov.io/gh/pymc-devs/aesara/pull/463/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `84.07% <ø> (ø)` | |
| [aesara/link/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/463/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `89.23% <ø> (ø)` | |
| [aesara/link/c/interface.py](https://codecov.io/gh/pymc-devs/aesara/pull/463/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvYy9pbnRlcmZhY2UucHk=) | `94.04% <ø> (ø)` | |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/pymc-devs/aesara/pull/463/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `82.05% <ø> (ø)` | |
| [aesara/scalar/math.py](https://codecov.io/gh/pymc-devs/aesara/pull/463/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `77.18% <ø> (ø)` | |
| [aesara/sparse/basic.py](https://codecov.io/gh/pymc-devs/aesara/pull/463/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `88.96% <ø> (ø)` | |
| ... and [7 more](https://codecov.io/gh/pymc-devs/aesara/pull/463/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=pymc-devs) | |

brandonwillard(2021-06-06 21:15:01):> Good stuff - looks like a lot of work!
> 
> I noticed some inconsistency in the spaces and colons on the type hints in docstrings. The linked resources could help to explain & resolve them.

These changes come from an accumulation of doc-related stashes over the past few months.  Those empty `:`s were there to indicate portions of the docstrings that still needed to be filled out; however, now that we've been adding type annotations, I would rather not maintain two copies of the same information, and simply automate the docstring parameters production via the type annotations (e.g. [`sphinx-autodoc-typehints`](https://github.com/agronholm/sphinx-autodoc-typehints)).

With that in mind, we should focus less on manually meeting the subtleties of NumPy's parameter formatting, since it will ultimately be a wasted effort.  Likewise, the entire project doesn't adhere to a single, consistent docstring format, but, once one is formally established, that would entail a `pre-commit` linter and updates to all the existing docstrings.  This can&mdash;and should&mdash;be done independently.

In the meantime, we need to fix the obvious formatting issues in the rendered documentation, and that's what this PR primarily does.
michaelosthege(2021-06-06 09:24:08):You may have run into a [Sphinx bug](https://github.com/readthedocs/sphinx_rtd_theme/issues/766) here.
This led to confusion in PyMC3 a while back - see [my comment back then](https://github.com/pymc-devs/aesara/pull/256#issuecomment-753302196). For PyMC3 it's not that easy, because we use a custom doc them, but the Aesara doc theme is a standard one, so I would expect it to work with exact numpydoc style if the versions are correct.

The [numpydoc style guide](https://numpydoc.readthedocs.io/en/latest/format.html#parameters) is very clear about the spaces:
> The colon must be preceded by a space, or omitted if the type is absent.


Further below you _added_ the spaces...
michaelosthege(2021-06-06 09:29:46):```suggestion
    ``construction_observers`` are only called when a `Variable` is
```
michaelosthege(2021-06-06 09:30:54):Same spaces thing as above (and below in L367)
michaelosthege(2021-06-06 09:32:24):According to the style guide these should not have colons:
> The colon must be preceded by a space, or omitted if the type is absent.
michaelosthege(2021-06-06 09:34:13):no type, no colon (see above)
brandonwillard(2021-06-06 20:49:43):> You may have run into a [Sphinx bug](https://github.com/readthedocs/sphinx_rtd_theme/issues/766) here.

No, that bug was not involved.
michaelosthege(2021-06-07 09:33:06):```suggestion
^^^^^^^^^^^^^^^^^^^^^
```
ricardoV94(2021-06-08 01:59:48):Are we running any of the jobs with float32? I am puzzled as to why the custom tests fail here but pass locally and also pass on the PyMC3 PR.

The original precision of 7 decimals should be fine on float64, whereas for float32 it should be 3. The current is 4 so that could explain it.

Edit: I see now it was float32, it's specified during the create matrix id part of the job. Wonder if that could also be part of the test title. It got me by surprise
brandonwillard(2021-06-08 03:13:38):> I see know it was float32, it's specified during the create matrix id part of the job. Wonder if that could also be part of the test title. It got me by surprise

Yes, it's also something we need to refactor entirely, because rerunning all the tests under a default of float32 is extremely time consuming and does not provide any additional coverage that couldn't be achieved more directly for a fraction of the time.
ricardoV94(2021-06-09 16:50:09):I am getting a ValueError in the test that expects a `nan` return. It passes if I run the exact same code in the REPL, but not in the tests (also fails locally). Can't make much of the traceback

<details>
<summary> Details: ValueError: Scalar check failed (npy_float64)</summary>

```python

test_math.py::TestBetaIncGrad::test_stan_grad_combined FAILED            [100%]
tests/scalar/test_math.py:54 (TestBetaIncGrad.test_stan_grad_combined)
self = <aesara.compile.function.types.Function object at 0x7f411e2dc400>
args = (1.0, 1.0, 1.0), kwargs = {}
restore_defaults = <function Function.__call__.<locals>.restore_defaults at 0x7f411e2aa820>
profile = None, t0 = 1623257249.2276874, output_subset = None, i = 3, arg = 1.0
s = <array(1.)>, c = <array(1.)>

    def __call__(self, *args, **kwargs):
        """
        Evaluates value of a function on given arguments.
    
        Parameters
        ----------
        args : list
            List of inputs to the function. All inputs are required, even when
            some of them are not necessary to calculate requested subset of
            outputs.
    
        kwargs : dict
            The function inputs can be passed as keyword argument. For this, use
            the name of the input or the input instance as the key.
    
            Keyword argument ``output_subset`` is a list of either indices of the
            function's outputs or the keys belonging to the `output_keys` dict
            and represent outputs that are requested to be calculated. Regardless
            of the presence of ``output_subset``, the updates are always calculated
            and processed. To disable the updates, you should use the ``copy``
            method with ``delete_updates=True``.
    
        Returns
        -------
        list
            List of outputs on indices/keys from ``output_subset`` or all of them,
            if ``output_subset`` is not passed.
        """
    
        def restore_defaults():
            for i, (required, refeed, value) in enumerate(self.defaults):
                if refeed:
                    if isinstance(value, Container):
                        value = value.storage[0]
                    self[i] = value
    
        profile = self.profile
        t0 = time.time()
    
        output_subset = kwargs.pop("output_subset", None)
        if output_subset is not None and self.output_keys is not None:
            output_subset = [self.output_keys.index(key) for key in output_subset]
    
        # Reinitialize each container's 'provided' counter
        if self.trust_input:
            i = 0
            for arg in args:
                s = self.input_storage[i]
                s.storage[0] = arg
                i += 1
        else:
            for c in self.input_storage:
                c.provided = 0
    
            if len(args) + len(kwargs) > len(self.input_storage):
                raise TypeError("Too many parameter passed to aesara function")
    
            # Set positional arguments
            i = 0
            for arg in args:
                # TODO: provide a Param option for skipping the filter if we
                #      really want speed.
                s = self.input_storage[i]
                # see this emails for a discuation about None as input
                # https://groups.google.com/group/theano-dev/browse_thread/thread/920a5e904e8a8525/4f1b311a28fc27e5
                if arg is None:
                    s.storage[0] = arg
                else:
                    try:
                        s.storage[0] = s.type.filter(
                            arg, strict=s.strict, allow_downcast=s.allow_downcast
                        )
    
                    except Exception as e:
                        function_name = "aesara function"
                        argument_name = "argument"
                        if self.name:
                            function_name += ' with name "' + self.name + '"'
                        if hasattr(arg, "name") and arg.name:
                            argument_name += ' with name "' + arg.name + '"'
                        where = get_variable_trace_string(self.maker.inputs[i].variable)
                        if len(e.args) == 1:
                            e.args = (
                                "Bad input "
                                + argument_name
                                + " to "
                                + function_name
                                + f" at index {int(i)} (0-based). {where}"
                                + e.args[0],
                            )
                        else:
                            e.args = (
                                "Bad input "
                                + argument_name
                                + " to "
                                + function_name
                                + f" at index {int(i)} (0-based). {where}"
                            ) + e.args
                        restore_defaults()
                        raise
                s.provided += 1
                i += 1
    
        # Set keyword arguments
        if kwargs:  # for speed, skip the items for empty kwargs
            for k, arg in kwargs.items():
                self[k] = arg
    
        if (
            not self.trust_input
            and
            # The getattr is only needed for old pickle
            getattr(self, "_check_for_aliased_inputs", True)
        ):
            # Collect aliased inputs among the storage space
            args_share_memory = []
            for i in range(len(self.input_storage)):
                i_var = self.maker.inputs[i].variable
                i_val = self.input_storage[i].storage[0]
                if hasattr(i_var.type, "may_share_memory"):
                    is_aliased = False
                    for j in range(len(args_share_memory)):
    
                        group_j = zip(
                            [
                                self.maker.inputs[k].variable
                                for k in args_share_memory[j]
                            ],
                            [
                                self.input_storage[k].storage[0]
                                for k in args_share_memory[j]
                            ],
                        )
                        if any(
                            [
                                (
                                    var.type is i_var.type
                                    and var.type.may_share_memory(val, i_val)
                                )
                                for (var, val) in group_j
                            ]
                        ):
    
                            is_aliased = True
                            args_share_memory[j].append(i)
                            break
    
                    if not is_aliased:
                        args_share_memory.append([i])
    
            # Check for groups of more than one argument that share memory
            for group in args_share_memory:
                if len(group) > 1:
                    # copy all but the first
                    for j in group[1:]:
                        self.input_storage[j].storage[0] = copy.copy(
                            self.input_storage[j].storage[0]
                        )
    
        # Check if inputs are missing, or if inputs were set more than once, or
        # if we tried to provide inputs that are supposed to be implicit.
        if not self.trust_input:
            for c in self.input_storage:
                if c.required and not c.provided:
                    restore_defaults()
                    raise TypeError(
                        f"Missing required input: {getattr(self.inv_finder[c], 'variable', self.inv_finder[c])}"
                    )
                if c.provided > 1:
                    restore_defaults()
                    raise TypeError(
                        f"Multiple values for input: {getattr(self.inv_finder[c], 'variable', self.inv_finder[c])}"
                    )
                if c.implicit and c.provided > 0:
                    restore_defaults()
                    raise TypeError(
                        f"Tried to provide value for implicit input: {getattr(self.inv_finder[c], 'variable', self.inv_finder[c])}"
                    )
    
        # Do the actual work
        t0_fn = time.time()
        try:
            outputs = (
>               self.fn()
                if output_subset is None
                else self.fn(output_subset=output_subset)
            )
E           ValueError: Scalar check failed (npy_float64)

../../aesara/compile/function/types.py:976: ValueError

During handling of the above exception, another exception occurred:

self = <tests.scalar.test_math.TestBetaIncGrad object at 0x7f413a7f8d00>

    def test_stan_grad_combined(self):
        a, b, z = aet.scalars("a", "b", "z")
        betainc_out = betainc(a, b, z)
        betainc_grad = aet.grad(betainc_out, [a, b], null_gradients="return")
        f_grad = function([a, b, z], betainc_grad)
    
        for test_a, test_b, test_z, expected_dda, expected_ddb in (
            (1.0, 1.0, 1.0, 0, np.nan),
            (1.0, 1.0, 0.4, -0.36651629, 0.30649537),
        ):
            assert_allclose(
>               f_grad(test_a, test_b, test_z), [expected_dda, expected_ddb]
            )

test_math.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../aesara/compile/function/types.py:989: in __call__
    raise_with_op(
../../aesara/link/utils.py:522: in raise_with_op
    raise exc_value.with_traceback(exc_trace)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <aesara.compile.function.types.Function object at 0x7f411e2dc400>
args = (1.0, 1.0, 1.0), kwargs = {}
restore_defaults = <function Function.__call__.<locals>.restore_defaults at 0x7f411e2aa820>
profile = None, t0 = 1623257249.2276874, output_subset = None, i = 3, arg = 1.0
s = <array(1.)>, c = <array(1.)>

    def __call__(self, *args, **kwargs):
        """
        Evaluates value of a function on given arguments.
    
        Parameters
        ----------
        args : list
            List of inputs to the function. All inputs are required, even when
            some of them are not necessary to calculate requested subset of
            outputs.
    
        kwargs : dict
            The function inputs can be passed as keyword argument. For this, use
            the name of the input or the input instance as the key.
    
            Keyword argument ``output_subset`` is a list of either indices of the
            function's outputs or the keys belonging to the `output_keys` dict
            and represent outputs that are requested to be calculated. Regardless
            of the presence of ``output_subset``, the updates are always calculated
            and processed. To disable the updates, you should use the ``copy``
            method with ``delete_updates=True``.
    
        Returns
        -------
        list
            List of outputs on indices/keys from ``output_subset`` or all of them,
            if ``output_subset`` is not passed.
        """
    
        def restore_defaults():
            for i, (required, refeed, value) in enumerate(self.defaults):
                if refeed:
                    if isinstance(value, Container):
                        value = value.storage[0]
                    self[i] = value
    
        profile = self.profile
        t0 = time.time()
    
        output_subset = kwargs.pop("output_subset", None)
        if output_subset is not None and self.output_keys is not None:
            output_subset = [self.output_keys.index(key) for key in output_subset]
    
        # Reinitialize each container's 'provided' counter
        if self.trust_input:
            i = 0
            for arg in args:
                s = self.input_storage[i]
                s.storage[0] = arg
                i += 1
        else:
            for c in self.input_storage:
                c.provided = 0
    
            if len(args) + len(kwargs) > len(self.input_storage):
                raise TypeError("Too many parameter passed to aesara function")
    
            # Set positional arguments
            i = 0
            for arg in args:
                # TODO: provide a Param option for skipping the filter if we
                #      really want speed.
                s = self.input_storage[i]
                # see this emails for a discuation about None as input
                # https://groups.google.com/group/theano-dev/browse_thread/thread/920a5e904e8a8525/4f1b311a28fc27e5
                if arg is None:
                    s.storage[0] = arg
                else:
                    try:
                        s.storage[0] = s.type.filter(
                            arg, strict=s.strict, allow_downcast=s.allow_downcast
                        )
    
                    except Exception as e:
                        function_name = "aesara function"
                        argument_name = "argument"
                        if self.name:
                            function_name += ' with name "' + self.name + '"'
                        if hasattr(arg, "name") and arg.name:
                            argument_name += ' with name "' + arg.name + '"'
                        where = get_variable_trace_string(self.maker.inputs[i].variable)
                        if len(e.args) == 1:
                            e.args = (
                                "Bad input "
                                + argument_name
                                + " to "
                                + function_name
                                + f" at index {int(i)} (0-based). {where}"
                                + e.args[0],
                            )
                        else:
                            e.args = (
                                "Bad input "
                                + argument_name
                                + " to "
                                + function_name
                                + f" at index {int(i)} (0-based). {where}"
                            ) + e.args
                        restore_defaults()
                        raise
                s.provided += 1
                i += 1
    
        # Set keyword arguments
        if kwargs:  # for speed, skip the items for empty kwargs
            for k, arg in kwargs.items():
                self[k] = arg
    
        if (
            not self.trust_input
            and
            # The getattr is only needed for old pickle
            getattr(self, "_check_for_aliased_inputs", True)
        ):
            # Collect aliased inputs among the storage space
            args_share_memory = []
            for i in range(len(self.input_storage)):
                i_var = self.maker.inputs[i].variable
                i_val = self.input_storage[i].storage[0]
                if hasattr(i_var.type, "may_share_memory"):
                    is_aliased = False
                    for j in range(len(args_share_memory)):
    
                        group_j = zip(
                            [
                                self.maker.inputs[k].variable
                                for k in args_share_memory[j]
                            ],
                            [
                                self.input_storage[k].storage[0]
                                for k in args_share_memory[j]
                            ],
                        )
                        if any(
                            [
                                (
                                    var.type is i_var.type
                                    and var.type.may_share_memory(val, i_val)
                                )
                                for (var, val) in group_j
                            ]
                        ):
    
                            is_aliased = True
                            args_share_memory[j].append(i)
                            break
    
                    if not is_aliased:
                        args_share_memory.append([i])
    
            # Check for groups of more than one argument that share memory
            for group in args_share_memory:
                if len(group) > 1:
                    # copy all but the first
                    for j in group[1:]:
                        self.input_storage[j].storage[0] = copy.copy(
                            self.input_storage[j].storage[0]
                        )
    
        # Check if inputs are missing, or if inputs were set more than once, or
        # if we tried to provide inputs that are supposed to be implicit.
        if not self.trust_input:
            for c in self.input_storage:
                if c.required and not c.provided:
                    restore_defaults()
                    raise TypeError(
                        f"Missing required input: {getattr(self.inv_finder[c], 'variable', self.inv_finder[c])}"
                    )
                if c.provided > 1:
                    restore_defaults()
                    raise TypeError(
                        f"Multiple values for input: {getattr(self.inv_finder[c], 'variable', self.inv_finder[c])}"
                    )
                if c.implicit and c.provided > 0:
                    restore_defaults()
                    raise TypeError(
                        f"Tried to provide value for implicit input: {getattr(self.inv_finder[c], 'variable', self.inv_finder[c])}"
                    )
    
        # Do the actual work
        t0_fn = time.time()
        try:
            outputs = (
>               self.fn()
                if output_subset is None
                else self.fn(output_subset=output_subset)
            )
E           ValueError: Scalar check failed (npy_float64)
E           Apply node that caused the error: mul(second.0, betainc_ddb.0)
E           Toposort index: 9
E           Inputs types: [Scalar(float64), Scalar(float64)]
E           Inputs shapes: [(), 'No shapes']
E           Inputs strides: [(), 'No strides']
E           Inputs values: [1.0, nan]
E           Outputs clients: [[TensorFromScalar(mul.0)]]
E           
E           Backtrace when the node is created (use Aesara flag traceback__limit=N to make it longer):
E             File "/home/ricardo/Documents/Projects/aesara/aesara/gradient.py", line 1441, in <listcomp>
E               rval = [access_grad_cache(elem) for elem in wrt]
E             File "/home/ricardo/Documents/Projects/aesara/aesara/gradient.py", line 1394, in access_grad_cache
E               term = access_term_cache(node)[idx]
E             File "/home/ricardo/Documents/Projects/aesara/aesara/gradient.py", line 1059, in access_term_cache
E               output_grads = [access_grad_cache(var) for var in node.outputs]
E             File "/home/ricardo/Documents/Projects/aesara/aesara/gradient.py", line 1059, in <listcomp>
E               output_grads = [access_grad_cache(var) for var in node.outputs]
E             File "/home/ricardo/Documents/Projects/aesara/aesara/gradient.py", line 1394, in access_grad_cache
E               term = access_term_cache(node)[idx]
E             File "/home/ricardo/Documents/Projects/aesara/aesara/gradient.py", line 1221, in access_term_cache
E               input_grads = node.op.L_op(inputs, node.outputs, new_output_grads)
E             File "/home/ricardo/Documents/Projects/aesara/aesara/scalar/basic.py", line 1138, in L_op
E               return self.grad(inputs, output_gradients)
E             File "/home/ricardo/Documents/Projects/aesara/aesara/scalar/math.py", line 1094, in grad
E               gz * betainc_ddb_scalar(a, b, x),
E           
E           HINT: Use the Aesara flag `exception_verbosity=high` for a debug print-out and storage map footprint of this Apply node.

../../aesara/compile/function/types.py:976: ValueError
```
</details>
brandonwillard(2021-06-19 19:17:04):> I am getting a ValueError in the test that expects a `nan` return. It passes if I run the exact same code in the REPL, but not in the tests (also fails locally). Can't make much of the traceback

That `nan` isn't a valid value for that scalar input in the C implementation of `aesara.scalar.basic.Scalar`.  For instance, if you run the test in Python mode (e.g. `config.change_flags(cxx="")`), it should pass.
ricardoV94(2021-06-21 08:54:58):> That `nan` isn't a valid value for that scalar input in the C implementation of `aesara.scalar.basic.Scalar`. For instance, if you run the test in Python mode (e.g. `config.change_flags(cxx="")`), it should pass.

You are right. Is this something that should be worked around, and if so, how?

brandonwillard(2021-07-01 21:55:15):We can perform the test with the `nan` input using the `Elemwise` version of `betainc`, because `TensorType`s support `nan`s.  I just added this change and rebased.
codecov[bot](2021-07-02 11:47:10):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/464?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#464](https://codecov.io/gh/aesara-devs/aesara/pull/464?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5388d61) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/b5313f1eed6b6107b7b31113743fefdde720f380?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b5313f1) will **increase** coverage by `0.05%`.
> The diff coverage is `99.09%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/464/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/464?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #464      +/-   ##
==========================================
+ Coverage   76.66%   76.71%   +0.05%     
==========================================
  Files         148      148              
  Lines       46400    46510     +110     
  Branches    10202    10213      +11     
==========================================
+ Hits        35573    35682     +109     
  Misses       8219     8219              
- Partials     2608     2609       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/464?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/464/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `83.91% <99.07%> (+3.52%)` | :arrow_up: |
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/464/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/464/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `88.75% <100.00%> (+0.01%)` | :arrow_up: |

ricardoV94(2021-07-03 07:40:08):All tests are passing now and coverage looks good.

The `grad` was very sensitive to dtypes when using the Scalar Op (not only for `nan`s) but it's fine when using the tensor Elemwise version. 

Calling the derivative scalar ops directly is also fine but it seems more reasonable to test the derivatives via the `grad` as this is how they will be used.

I would open an issue to test an aesara pure implementation of the derivatives and merge this for the time being (if the code looks good)
brandonwillard(2021-06-06 22:34:45):Is the/a Aesara implementation of `_betainc_derivative` prohibitively slow compared to this Python implementation?  

If not, we should definitely use the Aesara implementation.  If it is, we need to figure out why and open an independent line of investigation for why that's the case, and fix it.
brandonwillard(2021-06-06 22:46:55):Looks like you might need to increase the max difference to get past the [CI error](https://github.com/pymc-devs/aesara/pull/464/checks?check_run_id=2757314270#step:6:894).
ricardoV94(2021-06-07 05:02:17):I actually did not write it! 

The BetaInc code which was just a copy of the c code behind the scipy.special.betainc was what was known to be prohibitively slow (to compile specially), as were the autodiff derivatives obtained from it. I have some crude benchmarks here: https://github.com/ricardoV94/derivatives_betainc/blob/master/comparison_aesara.ipynb

If we want a test case for exploring the slowness of scan that seems like a good start, as we have the scipy vs aesara with the exact same algorithm under the hood.

The derivatives are a complete different algorithm so they might be fine. Do you think it's worth trying to convert them to aesara code? I guess the concern here is that they break the auto-diff chain? Or is it an issue for the backends that would need custom dispatch?
ricardoV94(2021-06-07 05:06:31):Yeah, I was just surprised because it passes locally. Is it expected to vary between machines (I am on Linux 64bit)?
brandonwillard(2021-07-03 17:16:20):Before we merge this, let's combine these into a single `Op` with a boolean `wrtp` attribute.  The `_betainc_derivative` function can then become the entire `impl` method.
ricardoV94(2021-07-05 07:41:44):Done, is my latest push what you had in mind?
brandonwillard(2021-07-05 15:01:39):If you refactor `_betainc_derivative` to be `BetaIncDdb.impl`, then yes.
ricardoV94(2021-07-05 16:53:19):Got it
ricardoV94(2021-06-06 18:06:38):The expression `log(exp(x) + exp(y))` would also return `nan` with `-inf` inputs. This one relied on the more limited `local_log_add` optimization which only worked for the addition of two exponentiated terms. I changed the logic to emulate the `local_log_sum_exp` opt and re-extended it to work with more than 2 inputs (from the comments, it seems they tried without success to have `maximum` accept more than 2 inputs, and perhaps did not try to apply it recursively instead). 

It required changing the registration signature so that it doesn't keep optimizing recursively. I don't know what is the best signature, so I simply copied the one from `log_sum_exp`.
ricardoV94(2021-06-07 08:53:12):I pushed changes to both `local_log_add_exp` and `local_log_sum_exp` that make the opt stable by placing the switch just before the `exp`. They appear as separate commits from the previous two just for ease of comparison during review, but I can merge them if we decide to keep them.
ricardoV94(2021-06-07 09:10:11):Alternatively, would it be better to check if the graph looks like it's already under the optimization and just ignore in that case (I think that was you other suggestion @brandonwillard, right)?
brandonwillard(2021-06-07 16:36:47):> Alternatively, would it be better to check if the graph looks like it's already under the optimization and just ignore in that case (I think that was you other suggestion @brandonwillard, right)?

No, I don't think it would necessarily be better.
brandonwillard(2021-06-07 16:38:51):> I pushed changes to both `local_log_add_exp` and `local_log_sum_exp` that make the opt stable by placing the switch just before the `exp`. They appear as separate commits from the previous two just for ease of comparison during review, but I can merge them if we decide to keep them.

If the latest commits undo/overwrite edits from the commits before them, it would be better to merge them into single commits.
ricardoV94(2021-06-07 16:58:08):Cleaned the commits 
codecov[bot](2021-06-09 08:06:36):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/465?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#465](https://codecov.io/gh/aesara-devs/aesara/pull/465?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a5f5767) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/b84ac43a8dd23c888131e9b3f5654f81402da76c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b84ac43) will **decrease** coverage by `0.06%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/465/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/465?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #465      +/-   ##
==========================================
- Coverage   72.52%   72.45%   -0.07%     
==========================================
  Files         174      174              
  Lines       55678    55675       -3     
==========================================
- Hits        40379    40339      -40     
- Misses      15299    15336      +37     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/465?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/465/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `92.14% <100.00%> (-0.02%)` | :arrow_down: |
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/465/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `64.88% <0.00%> (-3.14%)` | :arrow_down: |

ricardoV94(2021-06-09 08:33:08):@brandonwillard I am still unsure about the best procedure for PRs when the main branch gets ahead of it.

If I do a local rebase, older reviews are automatically dismissed when I force-push. If I do a merge commit, they remain in place. Is there a specific procedure I can do to both rebase and not dismiss older reviews? Or should we request a review after every rebase / merge anyway.
brandonwillard(2021-06-09 14:07:39):> @brandonwillard I am still unsure about the best procedure for PRs when the main branch gets ahead of it.
> 
> If I do a local rebase, older reviews are automatically dismissed when I force-push. If I do a merge commit, they remain in place. Is there a specific procedure I can do to both rebase and not dismiss older reviews? Or should we request a review after every rebase / merge anyway.

Yeah, request a review after rebasing.  Sometimes rebases introduce new problems, so it's often worth another look.
brandonwillard(2021-06-07 01:25:08):We don't want to remove these optimizations from the "stabilization" and "specialization" databases; otherwise, we&mdash;for instance&mdash;remove the ability to apply all stabilizations/specializations with a single optimizer query, and people are forced to either use all the `fast_run` optimizations or know about this particular optimization and apply it manually.
brandonwillard(2021-06-07 01:28:39):The result was previously returned as a `logp1`.  That change is what prevents the fixed-point (aka "equilibrium") optimizers (e.g. the optimizer behind "stabilize") from converging, since it produces yet another `log(exp(...) + exp(...))` form into the graph, and that matches the implicit "pattern" of `local_log_add_exp`, etc., etc.

We can rewrite this so that it doesn't return the same form it replaces, or we can attempt to determine whether or not this `node` is already in the desired form (i.e. add a guard).  The former is generally easier and more consistent.
brandonwillard(2021-06-07 02:19:49):Consider something like this:
```suggestion
                exp_sum_pre = switch(isinf(max_pre), 0, exp(add(*[p - max_pre for p in pre_exp])))
                ret = max_pre + log1p(exp_sum_pre)
```
ricardoV94(2021-06-07 05:17:33):Thanks for the suggestion, I think there is an inherent limitation to the `log1p` trick, that does not allow for the switch safeguard nor even for more than two inputs (regardless of the safe guard), but I have to double check. Your suggestion is slightly different than what I tried first so it might solve both
brandonwillard(2021-06-07 05:20:11):See [here](https://github.com/pymc-devs/aesara/pull/465#discussion_r646232449).
ricardoV94(2021-06-07 05:28:30):For instance if you have three inputs of `0` being exp added the log1p trick fails already. The result should be log(3) but it returns log(2). I don't remember now if putting back the exp inside the add solves it. 

Edit it doesn't: Otherwise you would get log(3) when you should get log(2) for two 0 inputs. 
brandonwillard(2021-06-07 05:36:11):Can you move this `switch` into the `add` you were using (i.e. without the `log1p`)?  That would break the `log(add(exp(...), ...))` pattern by producing `log(add(switch(..., 0, exp(...)), ...))`.
ricardoV94(2021-06-07 05:45:28):Maybe. Will check it. 
ricardoV94(2021-06-07 08:10:43):This works, even though it feels a bit less elegant:
```python
max_pre = reduce(maximum, pre_exp)
ret = max_pre + log(add(*[
  switch(isinf(max_pre), exp(max_pre), exp(p - max_pre))
  for p in pre_exp
]))
```
Compared to the non-stable
```python
max_pre = reduce(maximum, pre_exp)
max_pre = switch(isinf(max_pre), 0, max_pre)
ret = max_pre + log(add(*[exp(p - max_pre) for p in pre_exp]))
```

What do you think? 

This could also be used in the `local_log_sum_exp`, allowing the same register signature.
michaelosthege(2021-06-07 17:48:26):Is that a reference to the old `master` branch?
brandonwillard(2021-06-07 17:51:52):Not sure; it uses `master` in the JS variable name, but doesn't/didn't seem to refer to a specific branch.
michaelosthege(2021-06-07 18:22:02):Oh it's just a variable name, I didn't see that. Then it's nothing to worry about.
codecov[bot](2021-06-08 04:45:16):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/471?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#471](https://codecov.io/gh/aesara-devs/aesara/pull/471?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (105b619) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/3a3adaee3b8ceccff6d0208996f117fcd5e5eb6f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3a3adae) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/471/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/471?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #471   +/-   ##
=======================================
  Coverage   72.52%   72.52%           
=======================================
  Files         174      174           
  Lines       55678    55678           
=======================================
  Hits        40379    40379           
  Misses      15299    15299           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/471?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/471/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.03% <100.00%> (ø)` | |

codecov[bot](2021-06-08 21:31:40):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/473?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#473](https://codecov.io/gh/aesara-devs/aesara/pull/473?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4b068d4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/3bde5122e5b140229ea7c05a1f08fcc7f986ccf1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3bde512) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/473/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/473?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #473      +/-   ##
==========================================
+ Coverage   76.88%   76.90%   +0.01%     
==========================================
  Files         149      149              
  Lines       46671    46703      +32     
  Branches    10244    10250       +6     
==========================================
+ Hits        35885    35917      +32     
  Misses       8202     8202              
  Partials     2584     2584              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/473?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/473/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `96.33% <100.00%> (+0.09%)` | :arrow_up: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/473/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `86.16% <100.00%> (+0.05%)` | :arrow_up: |

ricardoV94(2021-08-09 07:44:08):Marking as draft temporarily as this includes (and depends) on commits from #549 
ricardoV94(2021-08-09 18:04:32):I narrowed the scope of this PR to the two fundamental rewrites
ricardoV94(2021-06-08 20:43:56):The `local_sigmoid_logit2` and the `local_sub_softplus` are only needed if users manually specifiy one of the alternative `logit` functions shown in the tests (or if those graphs emerge after more complicated rewrites, but I have no evidence that this could happen):
1. `log(x) - log(1-x)`
2. `log(x) - log1p(-x)`.

They are not needed for the default `log(x/(1-x))` expression. If we don't think people are much likely to generate those alternative forms, we can exclude the two opts
ricardoV94(2021-06-09 16:25:30):This one was actually mentioned in a previous discussion here: https://github.com/aesara-devs/aesara/issues/29#issuecomment-680818970

Seems like two passes are warranted

ricardoV94(2021-06-13 05:41:59):I probably should just check if the output is a deepcopy of x
brandonwillard(2021-08-01 22:45:32):This looks like it will introduce a subgraph that itself needs to be canonicalized (e.g. `x - (-y)` to `x + y`).  We need to avoid things like that&mdash;when possible.

What is it exactly that's preventing the first substitution from being applicable?
brandonwillard(2021-08-01 22:48:30):Why wouldn't we have a substitution for the logit and then one for the sigmoid/logit identity?
brandonwillard(2021-08-01 22:51:22):For canonicalization, something like `log1p(x)` should really be replaced with `log(1 + x)`.

We can also consider specialized `Op`s like `log1p` to mean that the user is "forcing" it to be viewed as a canonical term.  

We're implicitly taking the latter approach, but we need to be much more consistent about the `Op`s used by helper functions throughout this library (i.e. don't allow premature optimizations that use specialization/stabilization `Op`s), because we end up conflicting with this approach in a few places by introducing such `Op`s at the user-level.  

I fixed an important case of this recently in #520, but we still have more to repair.
ricardoV94(2021-08-02 07:52:13):It's the same, the second line is just making clear that `log(x / (1-x))` is a `logit`
ricardoV94(2021-08-02 07:54:40):We don't have a `logit` `Op`, that's why I am being explicit
ricardoV94(2021-08-02 08:00:27):The output graph from this `PatternSub` is just `x`. 

What is complicated is the input pattern that we are matching. The issue is that default Aesara rewrites of the `logit(sigmoid)` expressions tend to generate the specific intermediate graph `-softplus(-x) - (-softplus(x))` which Aesara does not know is equivalent to the simpler form `softplus(x) - softplus(-x)`
ricardoV94(2021-08-02 08:02:34):We could also consider adding a `logit` `Op`, is that what you were talking about?
ricardoV94(2021-08-02 08:09:07):> For canonicalization, something like log1p(x) should really be replaced with log(1 + x).

This seems to touch on the same issue described in https://github.com/aesara-devs/aesara/issues/441.

I agree with canonicalizing `log1p` to `log(1+x)` and later specializing / stabilizing with it. That however should be done in a separate PR as it will touch on many other previous rewrites.

> We can also consider specialized Ops like log1p to mean that the user is "forcing" it to be viewed as a canonical term.

I don't think we should take the explicit `log1p` to mean that a user does not want this graph to be temporarily canonicalized "away". That would be a very implicitly (and invisible) form of control, that is better addressed by manually disabling some of the default rewrites if they are not of interest. 
ricardoV94(2021-08-02 08:09:51):Also we should have a much more exhaustive documentation of which rewrites are applied and where if we want to give back control to users
brandonwillard(2021-08-03 03:56:35):Sorry, I didn't mean "introduce", but "rely on/expect".  The former would be a lot worse!

The canonicalizations should get rid of those kinds of double negative expressions.
ricardoV94(2021-08-03 07:58:43):Seems like we are missing a canonicalization for `sub(x, neg(y))`: https://github.com/aesara-devs/aesara/issues/546

```python
import aesara
import aesara.tensor as at

x = at.scalar("x")
y = x - (-x)

f = aesara.function([x], y)
aesara.dprint(f)
```
```
Elemwise{sub,no_inplace} [id A] ''   
 |x [id B]
 |Elemwise{neg,no_inplace} [id C] ''   
   |x [id B]
```
dhirschfeld(2021-06-09 02:37:54):Since you're exposing `fastmath` it would be interesting if using the `svml` also made a difference:

![image](https://user-images.githubusercontent.com/881019/121283427-6d9ade80-c91e-11eb-80ec-4171f853bd48.png)

https://numba.pydata.org/numba-doc/latest/user/performance-tips.html#intel-svml


dhirschfeld(2021-06-09 02:45:01):Also was wondering if it makes sense to set the `nogil` argument?
dhirschfeld(2021-06-09 02:52:46):...and for `jit` calls, setting the [`error_model`](https://github.com/numba/numba/blob/d0ca288f24eccff3ba1f86e38f0de07a717f8d4c/numba/core/decorators.py#L70-L74) to `numpy` (which I think makes it faster)


twiecki(2021-06-09 07:21:12):Closes https://github.com/aesara-devs/aesara/issues/409.
brandonwillard(2021-06-09 17:01:47):> Since you're exposing `fastmath` it would be interesting if using the `svml` also made a difference:
> 
> ![image](https://user-images.githubusercontent.com/881019/121283427-6d9ade80-c91e-11eb-80ec-4171f853bd48.png)
> 
> https://numba.pydata.org/numba-doc/latest/user/performance-tips.html#intel-svml

We could probably measure something like that via #404; that's been the source/motivation for all these recent Numba updates.  In other words, we've just begun to truly investigate the Aesara-generated Numba code, and that's the example we've been using.
dgerlanc(2021-06-11 22:24:27):> Since you're exposing `fastmath` it would be interesting if using the `svml` also made a difference:
> 
> ![image](https://user-images.githubusercontent.com/881019/121283427-6d9ade80-c91e-11eb-80ec-4171f853bd48.png)
> 
> https://numba.pydata.org/numba-doc/latest/user/performance-tips.html#intel-svml

I'm not sure if you need to do anything additional to use `SVML` besides have the shared library installed and in `numba`'s path. It appears there are both `fastmath` and non-`fastmath` (high and low accuracy) versions of the `SVML` functions. Though would be interesting to see the performance differences like in #404
codecov[bot](2021-09-17 05:31:06):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/475?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#475](https://codecov.io/gh/aesara-devs/aesara/pull/475?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8f29ffe) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5335e72932dde19e47b8539705e53dca762cb008?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5335e72) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/475/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/475?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #475   +/-   ##
=======================================
  Coverage   76.86%   76.86%           
=======================================
  Files         149      149           
  Lines       46593    46606   +13     
  Branches    10230    10231    +1     
=======================================
+ Hits        35813    35826   +13     
  Misses       8198     8198           
  Partials     2582     2582           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/475?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/475/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `71.75% <100.00%> (+0.29%)` | :arrow_up: |
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/475/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `96.34% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/475/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `57.36% <0.00%> (-1.33%)` | :arrow_down: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/475/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `43.88% <0.00%> (+4.82%)` | :arrow_up: |

codecov[bot](2021-06-09 03:32:01):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/476?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#476](https://codecov.io/gh/aesara-devs/aesara/pull/476?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5da10a6) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/b84ac43a8dd23c888131e9b3f5654f81402da76c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b84ac43) will **decrease** coverage by `0.06%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/476/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #476      +/-   ##
==========================================
- Coverage   72.52%   72.46%   -0.07%     
==========================================
  Files         174      174              
  Lines       55678    55688      +10     
==========================================
- Hits        40379    40352      -27     
- Misses      15299    15336      +37     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.07% <100.00%> (+0.03%)` | :arrow_up: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `91.97% <100.00%> (-0.03%)` | :arrow_down: |
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `64.88% <0.00%> (-3.14%)` | :arrow_down: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `92.14% <0.00%> (-0.02%)` | :arrow_down: |

twiecki(2021-06-10 09:43:11):Nice, this should speed things up quite a bit, no?
brandonwillard(2021-06-10 16:01:13):> Nice, this should speed things up quite a bit, no?

Definitely
brandonwillard(2021-06-15 17:17:29):It works; I just tried rebasing and it canceled the old `Tests` workflow!
codecov[bot](2021-06-15 18:06:27):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/479?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#479](https://codecov.io/gh/aesara-devs/aesara/pull/479?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9fecdd4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/3acdd78e7a5d27e70cd8de3fc00bd5f010c65ee3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3acdd78) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/479/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #479   +/-   ##
=======================================
  Coverage   72.46%   72.46%           
=======================================
  Files         174      174           
  Lines       55688    55688           
=======================================
  Hits        40352    40352           
  Misses      15336    15336           
```



codecov[bot](2021-06-19 01:06:59):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/483?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#483](https://codecov.io/gh/aesara-devs/aesara/pull/483?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (14b62d4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/08f49d16b1d14f4792e32bd2438d40bb46ab6fe3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (08f49d1) will **increase** coverage by `0.00%`.
> The diff coverage is `92.59%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/483/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/483?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #483   +/-   ##
=======================================
  Coverage   72.45%   72.46%           
=======================================
  Files         174      174           
  Lines       55675    55695   +20     
=======================================
+ Hits        40339    40359   +20     
  Misses      15336    15336           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/483?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <ø> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `84.70% <42.85%> (+0.01%)` | :arrow_up: |
| [aesara/compile/nanguardmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `70.99% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `98.07% <100.00%> (+0.03%)` | :arrow_up: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `91.97% <100.00%> (-0.03%)` | :arrow_down: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `93.31% <100.00%> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `93.38% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `92.15% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `87.55% <100.00%> (ø)` | |

codecov[bot](2021-06-19 22:42:13):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/484?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#484](https://codecov.io/gh/aesara-devs/aesara/pull/484?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4d4a7e9) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/430d068d029a11a92e29f23a2e6065c662022301?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (430d068) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/484/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #484   +/-   ##
=======================================
  Coverage   72.46%   72.46%           
=======================================
  Files         174      174           
  Lines       55695    55695           
=======================================
  Hits        40359    40359           
  Misses      15336    15336           
```



codecov[bot](2021-06-21 04:29:51):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/486?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#486](https://codecov.io/gh/aesara-devs/aesara/pull/486?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5db2c3b) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/69dc7d15734002d75901906c84bf3349b462c57e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (69dc7d1) will **increase** coverage by `3.99%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/486/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/486?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #486      +/-   ##
==========================================
+ Coverage   72.46%   76.46%   +3.99%     
==========================================
  Files         174      147      -27     
  Lines       55695    46330    -9365     
  Branches        0    10208   +10208     
==========================================
- Hits        40359    35424    -4935     
+ Misses      15336     8294    -7042     
- Partials        0     2612    +2612     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/486?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `85.15% <100.00%> (-3.59%)` | :arrow_down: |
| [aesara/scan/checkpoints.py](https://codecov.io/gh/aesara-devs/aesara/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vY2hlY2twb2ludHMucHk=) | `71.42% <0.00%> (-16.33%)` | :arrow_down: |
| [aesara/misc/safe\_asarray.py](https://codecov.io/gh/aesara-devs/aesara/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL21pc2Mvc2FmZV9hc2FycmF5LnB5) | `53.84% <0.00%> (-15.39%)` | :arrow_down: |
| [aesara/compile/nanguardmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `56.48% <0.00%> (-14.51%)` | :arrow_down: |
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `66.66% <0.00%> (-13.59%)` | :arrow_down: |
| [aesara/link/c/cvm.py](https://codecov.io/gh/aesara-devs/aesara/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jdm0ucHk=) | `81.25% <0.00%> (-12.50%)` | :arrow_down: |
| [aesara/tensor/nnet/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L29wdC5weQ==) | `40.16% <0.00%> (-12.30%)` | :arrow_down: |
| [aesara/link/c/lazylinker\_c.py](https://codecov.io/gh/aesara-devs/aesara/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9sYXp5bGlua2VyX2MucHk=) | `64.83% <0.00%> (-12.09%)` | :arrow_down: |
| [aesara/tensor/blas\_scipy.py](https://codecov.io/gh/aesara-devs/aesara/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ibGFzX3NjaXB5LnB5) | `85.71% <0.00%> (-11.43%)` | :arrow_down: |
| [aesara/link/c/cutils.py](https://codecov.io/gh/aesara-devs/aesara/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jdXRpbHMucHk=) | `68.18% <0.00%> (-11.37%)` | :arrow_down: |
| ... and [128 more](https://codecov.io/gh/aesara-devs/aesara/pull/486/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

codecov[bot](2021-06-21 11:32:58):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/490?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#490](https://codecov.io/gh/aesara-devs/aesara/pull/490?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c61a63a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/89cfea013a6963ef28c5f18640d2972bda59e3ae?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (89cfea0) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/490/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/490?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #490   +/-   ##
=======================================
  Coverage   76.46%   76.46%           
=======================================
  Files         147      147           
  Lines       46330    46334    +4     
  Branches    10208    10209    +1     
=======================================
+ Hits        35424    35428    +4     
  Misses       8294     8294           
  Partials     2612     2612           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/490?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/490/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `88.71% <100.00%> (+0.04%)` | :arrow_up: |

ricardoV94(2021-06-23 17:20:52):Getting a Segmentation fault in the runs, could this possibly be related to the PR?

https://github.com/aesara-devs/aesara/pull/495/checks?check_run_id=2897338941#step:6:588
codecov[bot](2021-06-25 17:45:05):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/495?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#495](https://codecov.io/gh/aesara-devs/aesara/pull/495?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5d09583) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e92e5e309a8377cfd95a67143787b158e3c9bed7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e92e5e3) will **increase** coverage by `0.01%`.
> The diff coverage is `87.75%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/495/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/495?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #495      +/-   ##
==========================================
+ Coverage   76.65%   76.66%   +0.01%     
==========================================
  Files         148      148              
  Lines       46351    46400      +49     
  Branches    10193    10202       +9     
==========================================
+ Hits        35530    35573      +43     
- Misses       8216     8219       +3     
- Partials     2605     2608       +3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/495?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/495/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `84.45% <76.92%> (-0.14%)` | :arrow_down: |
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/495/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `80.38% <100.00%> (+0.88%)` | :arrow_up: |
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/495/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/495/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `88.73% <100.00%> (+0.02%)` | :arrow_up: |

ricardoV94(2021-06-25 20:02:24):Unrelated failing test: https://github.com/aesara-devs/aesara/pull/495/checks?check_run_id=2916583682#step:6:999 
`Python` scan ran faster than the `C` version, I guess?
brandonwillard(2021-06-25 20:14:47):> `Python` scan ran faster than the `C` version, I guess?

Ha, yeah, just barely.  You can set those to a soft `xfail`, if you want.
ricardoV94(2021-06-25 20:25:22):Have you seen this one fail before? If it's just a one time thing I would leave it unchanged. 

I need to rebase anyway :b
brandonwillard(2021-06-25 20:26:25):> Have you seen this one fail before? If it's just a one time thing I would leave it unchanged.

I don't think I have, but it doesn't completely surprise me.
ricardoV94(2021-06-30 06:01:05):> In general, the implementation of `Log1mexp` should be covered by existing `Op`s, so it would be best if we could use something like `at.switch(at.lt(x, at.log(0.5)), at.log1p(-at.exp(x)), at.log(-at.expm1(x)))` instead.

When I openend #360 the suggestion was to go for a new `Op`.

However, looking at the final result I feel that using raw Aesara `Op`s would be the best in this case. The rewrite only appears late in the process and with the `exp(log(...))` rewrites we have now,  the custom "undoing" rewrite that I implemented here is not needed at all.

The only question I have, is whether we should add a helper `log1mexp` that returns the non-optimized `log(1 - exp(x))` graph?


ricardoV94(2021-06-30 12:01:34):Hmm, it's another one of those rewrites that does not stabilize

```python
log1pmexp_to_log1mexp = PatternSub(
    (log1p, (neg, (exp, "x"))),
    (
        switch,
        (le, "x", np.log(0.5)),
        (log1p, (neg, (exp, "x"))),  # Same format as original
        (log, (neg, (expm1, "x"))),
     ),
)
register_stabilize(log1pmexp_to_log1mexp, name="log1pmexp_to_log1mexp")
```
brandonwillard(2021-06-30 19:23:05):> Hmm, it's another one of those rewrites that does not stabilize

Yeah, it looks like we need to expand the stabilize optimizations into distinct fixed-point steps and single-pass steps.  Forcing everything into a single fixed-point step is not reasonable.

Additionally, we need more advanced pattern-based replacements (e.g. don't replace terms in subgraphs that already match the replacement form).
brandonwillard(2021-06-30 00:41:13):We need a case that covers this.
brandonwillard(2021-06-30 00:53:00):When we need to test an optimization/rewrite's logic, we should manually set the compilation mode to use Python&mdash;so that it will run even when a C compiler isn't available&mdash;and include only the relevant rewrites (e.g. use `mode = Mode("py", opts)`).

A test or two may be necessary to determine whether or not a rewrite works in combination with all the other rewrites, so it's not entirely unreasonable to use something like `FAST_RUN`, but try to do most/all of the rewrite-specific testing without the need for other rewrites.  In other words, *rewrite tests should work in isolation*.  When they don't, they tend to be very difficult to understand or update later on.
ricardoV94(2021-06-30 16:25:09):This one should have been reached by the tests in `tensor/test_math_scipy.py::TestLog1mexpBroadcast` when running on `floatX == "float32"` mode.  It is reached locally
brandonwillard(2021-06-30 19:46:07):The difference is just the `float` literal character?  We should simplify that to a condition in an f-string, especially since we're not even using that old string-interpolation syntax anymore (except in code that still hasn't been updated).
ricardoV94(2021-07-01 05:30:31):> The difference is just the `float` literal character? We should simplify that to a condition in an f-string, especially since we're not even using that old string-interpolation syntax anymore (except in code that still hasn't been updated).

What syntax are we using now for inline c-code?

Edit: I guess an f-string instead of the `locals()`
brandonwillard(2021-07-01 20:45:40):> Edit: I guess an f-string instead of the `locals()`

Yeah, that's all I was talking about.
twiecki(2021-06-24 07:25:54):I wonder if we should merge `nlinalg` and `slinalg` into just `linalg`. I think the reason that they did that was that they wanted to have `scipy` be an optional dependency.
brandonwillard(2021-06-25 04:42:57):> I wonder if we should merge `nlinalg` and `slinalg` into just `linalg`. I think the reason that they did that was that they wanted to have `scipy` be an optional dependency.

I would like to do this, but combining those would make for one large file, and, since the NumPy/SciPy division is at least consistent, it's probably better if we keep them separate.  At the very least, it will relieve some pressure on our editors.
ricardoV94(2021-06-25 04:46:36):> I would like to do this, but combining those would make for one large file, and, since the NumPy/SciPy division is at least consistent, it's probably better if we keep them separate.  At the very least, it will relieve some pressure on our editors.

What about having linalg just expose the methods from the two files?


brandonwillard(2021-06-25 04:48:29):> What about having linalg just expose the methods from the two files?

Yeah, I was considering adding a stub `linalg` module that we could expose exclusively for interface purposes.  That's part of the reason why I added those `__all__` entries to `[n|s]linalg`.

Update: I've added it.  Now, we have an `aesara.tensor.linalg` module that consists of both `nlinalg` and `slinalg`.
codecov[bot](2021-06-25 18:22:23):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/497?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> :exclamation: No coverage uploaded for pull request base (`main@2c91b5a`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/497/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/497?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #497   +/-   ##
=======================================
  Coverage        ?   76.61%           
=======================================
  Files           ?      148           
  Lines           ?    46276           
  Branches        ?    10184           
=======================================
  Hits            ?    35454           
  Misses          ?     8217           
  Partials        ?     2605           
```



codecov[bot](2021-06-25 03:23:15):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/498?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#498](https://codecov.io/gh/aesara-devs/aesara/pull/498?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5dec990) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/fcd466890c10f334148354cc0478dd4cd587bbde?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (fcd4668) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/498/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/498?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #498   +/-   ##
=======================================
  Coverage   76.46%   76.46%           
=======================================
  Files         147      147           
  Lines       46334    46334           
  Branches    10209    10208    -1     
=======================================
  Hits        35428    35428           
  Misses       8294     8294           
  Partials     2612     2612           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/498?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `95.90% <100.00%> (-0.01%)` | :arrow_down: |
| [aesara/link/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `60.74% <100.00%> (+0.24%)` | :arrow_up: |

codecov[bot](2021-06-28 23:52:57):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/502?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#502](https://codecov.io/gh/aesara-devs/aesara/pull/502?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (957568d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5213962b97c5c8be6353427c212a3d9254f0845f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5213962) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/502/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/502?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #502   +/-   ##
=======================================
  Coverage   76.65%   76.65%           
=======================================
  Files         148      148           
  Lines       46349    46351    +2     
  Branches    10192    10193    +1     
=======================================
+ Hits        35528    35530    +2     
  Misses       8216     8216           
  Partials     2605     2605           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/502?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/502/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `96.24% <100.00%> (+<0.01%)` | :arrow_up: |

codecov[bot](2021-07-01 10:15:42):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/503?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#503](https://codecov.io/gh/aesara-devs/aesara/pull/503?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (eb45251) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/6157b6512a6b79538dc03eac12179cf6d0a1b467?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (6157b65) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/503/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/503?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #503   +/-   ##
=======================================
  Coverage   77.27%   77.28%           
=======================================
  Files         151      151           
  Lines       47014    47020    +6     
  Branches    10921    10923    +2     
=======================================
+ Hits        36332    36339    +7     
  Misses       8098     8098           
+ Partials     2584     2583    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/503?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/503/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3B0LnB5) | `95.34% <100.00%> (+1.03%)` | :arrow_up: |

brandonwillard(2021-07-01 20:51:30):> The custom name of `RV` Ops are lost during rewrites.
> 
> I am not sure if this is something we want to accommodate, so I implemented a "fix" just for the `local_dimshuffle_rv_lift` opt. If this sounds like a good idea, I can check whether it is also needed for the other opts and implement it.

That's a tough one, because new terms produced by a rewrite are&mdash;well&mdash;new, so it might not make sense to give them the old variables' names; however, for cases like `local_dimshuffle_rv_lift` the output is related enough to the original un-lifted variable to justify some use of the original name.
ricardoV94(2021-08-05 05:44:30):> Also, a test for this functionality is better off as something entirely independent from the main functionality tests, especially since it's not something that needs to be checked as often as it is in this approach.

I removed the check from the main tests but I think we don't gain anything from it. Two tests had to be copied.

Also if a new output branch is added to the optimization in the future, the author will have to add a new test for that branch (nothing will happen if they forget to propagate the name).

If it's part of the default tests it will be automatically covered. Also it's not really any substantial overhead, just a string equality check.
brandonwillard(2021-09-17 03:15:51):```suggestion
def test_Dimshuffle_lift_rename(ds_order, lifted, dist_op, dist_params, size, rtol):
```
brandonwillard(2021-11-26 04:03:25):```suggestion
def test_DimShuffle_lift(ds_order, lifted, dist_op, dist_params, size, rtol):
```
codecov[bot](2021-07-06 23:06:38):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/504?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#504](https://codecov.io/gh/aesara-devs/aesara/pull/504?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (71c2703) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/7d07260bb28add3548790e706acbc61209d19a6b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7d07260) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/504/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/504?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #504      +/-   ##
==========================================
+ Coverage   76.78%   76.80%   +0.01%     
==========================================
  Files         149      149              
  Lines       46711    46741      +30     
  Branches    10264    10265       +1     
==========================================
+ Hits        35868    35898      +30     
  Misses       8238     8238              
  Partials     2605     2605              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/504?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/slinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/504/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zbGluYWxnLnB5) | `83.89% <100.00%> (+1.80%)` | :arrow_up: |

brandonwillard(2021-07-01 20:30:09):You can add these to the implementation.
brandonwillard(2021-07-01 20:30:30):```suggestion
    """Solve the linear equations A x = b, given the Cholesky factorization of A.
    
    Parameters
```
brandonwillard(2021-07-01 20:32:51):```suggestion
                (C, self.lower), b,
```

You might need to set up `pre-commit` in your repo, especially if it didn't catch this.
brandonwillard(2021-07-01 20:36:16):It looks like this test might've been added inside of `TestSolve`.  You can probably just copy and paste it after `TestSolve` to fix that.
brandonwillard(2021-07-01 20:41:41):In order to make the `lower` and `check_finite` options available, you can create a helper function that constructs `CholeskySolve` `Op`s like this.

For example:
```suggestion
def cho_solve(c_and_lower, b, check_finite=True):
    A, lower = c_and_lower
    return CholeskySolve(lower=lower, check_finite=check_finite)(A, b)
```

You can also move the `CholeskySolve` docstring to the helper function; that way, it will appear more readily to users.
brandonwillard(2021-07-06 21:26:27):```suggestion
        return f"CholeskySolve{{{self._props()}}}"
```
brandonwillard(2021-07-07 03:14:23):This test appears to be in the middle of `TestSolve`, because `TestSolve`'s `verify_solve_grad` and `test_solve_grad` methods are now in the new `TestCholeskySolve`, but they should be in `TestSolve`.
brandonwillard(2021-07-07 03:14:59):We need at least one of the tests to call this function.
codecov[bot](2021-07-07 04:42:20):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/507?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#507](https://codecov.io/gh/aesara-devs/aesara/pull/507?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d8723d7) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2b78c67f5e1a85dff377fab27ab96365f5fb7393?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2b78c67) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/507/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/507?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #507   +/-   ##
=======================================
  Coverage   76.71%   76.72%           
=======================================
  Files         148      148           
  Lines       46510    46519    +9     
  Branches    10213    10215    +2     
=======================================
+ Hits        35682    35691    +9     
  Misses       8219     8219           
  Partials     2609     2609           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/507?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/507/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `98.65% <ø> (ø)` | |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/507/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `99.77% <100.00%> (+<0.01%)` | :arrow_up: |

codecov[bot](2021-07-07 17:07:20):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/509?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#509](https://codecov.io/gh/aesara-devs/aesara/pull/509?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ff88827) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5b58807dfcad33b3eab2c68d5503081dc85c0dff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5b58807) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/509/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/509?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #509   +/-   ##
=======================================
  Coverage   76.72%   76.72%           
=======================================
  Files         148      148           
  Lines       46519    46525    +6     
  Branches    10215    10219    +4     
=======================================
+ Hits        35691    35697    +6     
+ Misses       8219     8218    -1     
- Partials     2609     2610    +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/509?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/509/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `88.51% <100.00%> (+0.17%)` | :arrow_up: |
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/509/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `90.95% <100.00%> (+0.41%)` | :arrow_up: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/509/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `78.11% <0.00%> (-0.24%)` | :arrow_down: |

twiecki(2021-07-09 07:44:19):Why did you close this?
codecov[bot](2021-07-08 18:47:30):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/513?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#513](https://codecov.io/gh/aesara-devs/aesara/pull/513?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (13d3984) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0ae63d1b02daf81dd8203c26e24ceddc5d49176d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0ae63d1) will **increase** coverage by `0.01%`.
> The diff coverage is `82.79%`.

> :exclamation: Current head 13d3984 differs from pull request most recent head 924e8c4. Consider uploading reports for the commit 924e8c4 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/513/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/513?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #513      +/-   ##
==========================================
+ Coverage   76.89%   76.91%   +0.01%     
==========================================
  Files         149      149              
  Lines       46602    46689      +87     
  Branches    10230    10242      +12     
==========================================
+ Hits        35833    35909      +76     
- Misses       8190     8196       +6     
- Partials     2579     2584       +5     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/513?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/513/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `84.52% <82.79%> (+0.43%)` | :arrow_up: |

twiecki(2021-08-06 06:26:51):Is speed a concern here with a pure-Python implementation?
ricardoV94(2021-08-06 06:37:50):> Is speed a concern here with a pure-Python implementation?

Definitely. We have to fix #512 before deciding on how to proceed in #514 (pure Aesara function or this Op with specialized C/Numba dispatch).

If it's the latter we still want to keep the Python code for fast compilation mode
ricardoV94(2021-09-17 08:31:44):> Do you want to create a follow-up issue for the non-Python implementation and merge this in the meantime?

There is already a follow up issue here: https://github.com/aesara-devs/aesara/issues/514

Yes, I think we can merge this already
brandonwillard(2021-09-18 21:25:32):The last commit was a merge commit; I've rebased instead.
codecov[bot](2021-07-11 18:09:23):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/516?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#516](https://codecov.io/gh/aesara-devs/aesara/pull/516?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3520d65) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5b58807dfcad33b3eab2c68d5503081dc85c0dff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5b58807) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/516/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/516?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #516   +/-   ##
=======================================
  Coverage   76.72%   76.72%           
=======================================
  Files         148      148           
  Lines       46519    46532   +13     
  Branches    10215    10219    +4     
=======================================
+ Hits        35691    35704   +13     
+ Misses       8219     8218    -1     
- Partials     2609     2610    +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/516?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `85.15% <ø> (ø)` | |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `88.46% <100.00%> (+0.12%)` | :arrow_up: |
| [aesara/tensor/random/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `98.66% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/tensor/random/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdXRpbHMucHk=) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaGFwZS5weQ==) | `87.53% <100.00%> (+0.11%)` | :arrow_up: |
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `90.95% <100.00%> (+0.41%)` | :arrow_up: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `78.11% <0.00%> (-0.24%)` | :arrow_down: |

ricardoV94(2021-07-11 04:56:22):Do you want to keep these comments?
codecov[bot](2021-07-14 05:27:44):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/520?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#520](https://codecov.io/gh/aesara-devs/aesara/pull/520?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f51f563) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5248aa9ae9ab8b002b45cb78215c5772b3f25831?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5248aa9) will **decrease** coverage by `0.02%`.
> The diff coverage is `95.78%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/520/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/520?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #520      +/-   ##
==========================================
- Coverage   76.72%   76.70%   -0.03%     
==========================================
  Files         148      149       +1     
  Lines       46532    46590      +58     
  Branches    10219    10229      +10     
==========================================
+ Hits        35704    35738      +34     
- Misses       8218     8245      +27     
+ Partials     2610     2607       -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/520?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `94.66% <94.66%> (ø)` | |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `84.08% <100.00%> (-0.29%)` | :arrow_down: |
| [aesara/tensor/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaGFwZS5weQ==) | `88.72% <100.00%> (+1.18%)` | :arrow_up: |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `86.14% <100.00%> (-0.17%)` | :arrow_down: |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `85.95% <100.00%> (-0.18%)` | :arrow_down: |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `78.75% <0.00%> (-1.46%)` | :arrow_down: |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `62.88% <0.00%> (-0.52%)` | :arrow_down: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `77.75% <0.00%> (-0.36%)` | :arrow_down: |
| ... and [1 more](https://codecov.io/gh/aesara-devs/aesara/pull/520/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

codecov[bot](2021-11-28 03:45:50):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/523?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#523](https://codecov.io/gh/aesara-devs/aesara/pull/523?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5cf3730) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/f8d06511a6c168a2642adef10ded8a5ed772a1c7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f8d0651) will **increase** coverage by `0.24%`.
> The diff coverage is `99.48%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/523/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/523?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #523      +/-   ##
==========================================
+ Coverage   77.35%   77.59%   +0.24%     
==========================================
  Files         151      152       +1     
  Lines       47029    46923     -106     
  Branches    10923    10884      -39     
==========================================
+ Hits        36377    36409      +32     
+ Misses       8041     7904     -137     
+ Partials     2611     2610       -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/523?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/unify.py](https://codecov.io/gh/aesara-devs/aesara/pull/523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3VuaWZ5LnB5) | `99.33% <99.33%> (+54.98%)` | :arrow_up: |
| [aesara/graph/kanren.py](https://codecov.io/gh/aesara-devs/aesara/pull/523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2thbnJlbi5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `65.47% <100.00%> (-0.74%)` | :arrow_down: |
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `91.23% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/graph/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `75.92% <0.00%> (-0.75%)` | :arrow_down: |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `87.37% <0.00%> (+0.34%)` | :arrow_up: |

brandonwillard(2021-12-03 02:38:32):The current state of this PR has `logical-unification`, `etuple`s, and `kanren` working with Aesara graphs, and the latter is integrated into Aesara's optimization system via `KanrenRelationSub`.

I'm hesitant to merge this PR as is, because it would entail having two distinct unification implementations, so I would like to replace the old one (as stated in the description).  The issue with replacing the old one is that it has an ad hoc constraint checking feature that we would need to hack into `logical-unification`.

It might be possible to accomplish this with a custom `Var` type and `_unify` implementation.
brandonwillard(2021-12-04 05:43:48):A complete replacement for `PatternSub` has been implemented.

The only major difference between this implementation and the original is that the constraints feature can no longer be applied to arbitrary patterns.  This feature isn't used in the library and is arguably redundant, so there's no real loss there.
ricardoV94(2021-12-04 08:31:43):> The only major difference between this implementation and the original is that the constraints feature can no longer be applied to arbitrary patterns. This feature isn't used in the library and is arguably redundant, so there's no real loss there.

Could you provide an example of how to achieve this type of arbitrary constraint now, perhaps we could include it in the docstrings and mention it in a deprecation error if a user has been using it?

I have never used it, but I imagine one example is: I always want to match a specific subgraph BUT only if it's not wrapped in a `Log`
brandonwillard(2021-12-05 07:28:04):> Could you provide an example of how to achieve this type of arbitrary constraint now, perhaps we could include it in the docstrings and mention it in a deprecation error if a user has been using it?
> 
> I have never used it, but I imagine one example is: I always want to match a specific subgraph BUT only if it's not wrapped in a `Log`

There aren't any other existing examples from which to work, because it was never used, so I'll just use yours.

If you want to match things not wrapped in a `Log` `Op`, do that constraint check on the `Op` before attempting to unify its inputs against your other unconstrained terms.  More generally, do the unifications in stages, so that the logic is clearer.  

The current/old approach was simply a clunky workaround for orchestrating multiple staged unifications.  Now that unification and reification are simple to do on/with arbitrary graphs, the whole thing is unnecessary.  For that matter, `PatternSub` itself is now just a minor convenience function for simple types of unification and reification, and we really should phase it out.

Here's an illusration:
```python
import aesara
import aesara.tensor as at
import numpy as np
from aesara.graph.opt_utils import optimize_graph
from cons import cons
from etuples import etuple, etuplize
from unification import reify, unify, var


def expand_mul_no_log(in_graph):
    rator_lv = var()
    rands_lv = var()
    s = unify(cons(rator_lv, rands_lv), test_graph)

    if s[rator_lv] == at.log:
        return None

    rands = s[rands_lv]

    x_lv = var()
    s = unify(etuple(at.mul, at.as_tensor(2), x_lv), rands[0], s)

    res = reify(etuple(rator_lv, etuple(at.add, x_lv, x_lv)), s)
    res = res.evaled_obj
    return res


x_at = at.vector("x")
test_graph = at.log(2 * x_at)
test_graph = optimize_graph(test_graph)

expand_mul_no_log(test_graph)
# None

test_graph = at.exp(2 * x_at)
test_graph = optimize_graph(test_graph)

res = expand_mul_no_log(test_graph)
aesara.dprint(res)
# Elemwise{exp,no_inplace} [id A] ''
#  |Elemwise{add,no_inplace} [id B] ''
#    |x [id C]
#    |x [id C]
```
ricardoV94(2021-12-05 07:53:41):So I gather that type of rewrite can be easily done but does not really map easily/efficiently to the Op by Op PatternSub constraint?

To implement such rewrite one should use a traditional local_optimizer?

On another note I think it would be really important to add some examples to the documentation on the new Kanren / Unification tools that are now available for advanced users and developers. Even explaining small things like the meaning of these `rator`, `rands` terminology. This could be done later of course.
brandonwillard(2021-12-05 08:48:07):> So I gather that type of rewrite can be easily done but does not really map easily/efficiently to the Op by Op PatternSub constraint?
> 
> To implement such rewrite one should use a traditional local_optimizer?

Yes, using `unify` and `reify` in a `local_optimizer`-decorated function is the best approach to doing more sophisticated things right now.  

`PatternSub` does offer a more machine parsable form of search-and-replace operations, and having most/all of our rewrites in such a form will be an important part of more advanced work later down the line, but&mdash;unfortunately&mdash;those old constraints ruin that parsability anyway.

Ideally, we'll have something like the miniKanren DSL, which is very parsable, and that can provide constraints of sufficient sophistication.

> On another note I think it would be really important to add some examples to the documentation on the new Kanren / Unification tools that are now available for advanced users and developers. Even explaining small things like the meaning of these `rator`, `rands` terminology. This could be done later of course.

Yes, it would be nice to have some expository material.  The first step along that path is to make it possible to do the things we're trying to demonstrate, and the work in this PR is just that.  We'll definitely have more than a few interesting things to showcase after introducing this...

I'll add a small example to the docstring, but attempting to teach the basics of `kanren` is well out of scope for this repository (that includes related terminology).  The same goes for `logical-unification`; however, there aren't any relevant docstrings to use, so a documentation page is probably necessary.  Even so, `logical-unification` is only replacing the old unification code in this PR, and that old code was strictly internal to `PatternSub`, so the replacement code can be viewed as strictly internal as well.

In general, we should link to those other projects, which do have examples, tutorials, etc.  All we need to do in this repository is make it clear when, where, and how those other libraries are being integrated with and/or used by Aesara.

brandonwillard(2021-12-05 08:49:50):Also, we can start adapting some of [the documentation/example material from `symbolic-pymc`](https://pymc-devs.github.io/symbolic-pymc/) after this is in place.
brandonwillard(2021-12-06 22:15:02):All right, I'm almost ready to merge this, but there's one performance-level thing I'm concerned about: in order to unify `etuple`s and `Variable`s, [we're currently converting the `Variable`s to `etuple` graphs using `etuplize`](https://github.com/brandonwillard/aesara/blob/08e9989e6320a28f547f0b56bfe6bfee16906058/aesara/graph/unify.py#L151).  `etuplize` will essentially walk the `Variable` graph via `car` and `cdr` (from the `cons`) package and reconstruct it using `etuple`s.

While this is rather cheap to do, it's still pretty wasteful, especially since it happens often.  It would be better if we cached the `etuplize` results or avoided their construction altogether.  

We need the `etuple`s as a means of specifying "pattern" graphs, because we can't put logic variables in Aesara graphs, but we shouldn't need them (in their entirety) when an existing `etuple` is being unified with a `Variable` (i.e. we shouldn't need to completely `etuplize` the `Variable`).
brandonwillard(2021-12-07 00:11:57):I've made some updates that avoid the need to call `etuplize` in certain cases and prevent `etuplize` from doing anything other than a "shallow" (i.e. depth one) conversion to an `etuple`.

The shallow `etuplize` calls basically just extract the `Op` and inputs from a `Variable`'s owner and create a single `etuple` from them.  This is still necessary in order to preserve identity when/if a `Variable`'s `Op` and inputs are ever used to reconstructed the original `Variable` (i.e. `apply(car(var), cdr(var)) is var`).

It would still be nice to have some amount of memoization, because that would save on re-constructing `etuple`s for `Variable`s that have already been `etuplize`d, but it isn't necessary now.
ricardoV94(2021-12-04 08:26:31):I think I put this condition because it was suported by the PatternSub according to the docstrings

https://github.com/aesara-devs/aesara/blob/9fc8113c8f87bd4735b32413c8c467fcc13b7a84/aesara/graph/opt.py#L1578
kc611(2021-12-04 12:12:28):Won't this iteration restrict the graphs to have single clients till top level inputs of the graph and not the inputs to the pattern we're trying to detect ? Or was the former the intention to begin with ?
brandonwillard(2021-12-05 06:31:07):If I remember the current/old logic correctly, it would check `allow_multiple_clients` as it walked up the graph during unification; now, we're performing that check before attempting to unify the graphs.

It would be a bit more efficient to do this check iteratively instead of making two passes (that's part of the reason behind my TODO comment), but I believe it performs the same check in both cases.

Otherwise, it's not entirely clear what that option is supposed to mean at a high-level, but I'm assuming&mdash;when `False`&mdash;it means that a graph shouldn't be replaced if it contains terms with more than one client.  I don't know why it's set to `False` by default, though, because that seems oddly restrictive and likely to cause confusion.
brandonwillard(2021-12-05 06:47:07):The pattern still accepts them; now, they're converted to `Variable`s when the pattern is parsed.

The current/old approach would let those "native" numeric types pass through the optimization framework unconverted.  In this particular case, that wasn't a problem, because, when `var.type.filter_variable` is eventually called, it would fall back on `MyType`'s inherited `Type.filter_variable` and produce a raw `Constant`.

The new approach forces the types to be explicit upfront, which should help avoid confusion and unexpected errors.
ricardoV94(2021-12-05 07:38:41):Yeah I think the default should be True, that's how most local optimizers work. But back compatibility is annoying
codecov[bot](2021-07-15 23:10:35):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/526?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#526](https://codecov.io/gh/aesara-devs/aesara/pull/526?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c12d1ff) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/95deb922b2a3a965e1d09308b6edde54358a8b67?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (95deb92) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/526/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/526?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #526   +/-   ##
=======================================
  Coverage   76.72%   76.72%           
=======================================
  Files         148      148           
  Lines       46532    46532           
  Branches    10219    10219           
=======================================
  Hits        35704    35704           
  Misses       8218     8218           
  Partials     2610     2610           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/526?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/526/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `88.46% <100.00%> (ø)` | |

zoj613(2021-07-20 10:02:19):force-pushed to deal with the pre-commit fail. Not sure why it did not catch it since I ran it locally.
zoj613(2021-07-20 11:35:44):Okay, for some reason the RandomStream class is still not picking up the new attribute at: https://github.com/aesara-devs/aesara/blob/a7840844030503651e763dee923094e18f19134f/aesara/tensor/random/utils.py#L167-L169

EDIT: I see the issue now.

the partial function is not seen as an instance of `RandomVariable`. The test fails here:
https://github.com/aesara-devs/aesara/blob/a7840844030503651e763dee923094e18f19134f/aesara/tensor/random/utils.py#L174-L183


zoj613(2021-07-21 19:38:15):@twiecki lets try one more time. I fixed the test failure caused by the linter.
codecov[bot](2021-07-21 21:02:37):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/530?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#530](https://codecov.io/gh/aesara-devs/aesara/pull/530?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d248e69) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/57a1eb72b89ade64920fe5b7196062792f2d6e8a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (57a1eb7) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/530/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #530   +/-   ##
=======================================
  Coverage   76.54%   76.55%           
=======================================
  Files         149      149           
  Lines       46726    46730    +4     
  Branches    10264    10264           
=======================================
+ Hits        35768    35772    +4     
  Misses       8350     8350           
  Partials     2608     2608           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/530/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `99.77% <100.00%> (+<0.01%)` | :arrow_up: |

twiecki(2021-07-22 05:52:43):Thanks @zoj613!
codecov[bot](2021-07-21 12:55:17):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/531?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#531](https://codecov.io/gh/aesara-devs/aesara/pull/531?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (05b4431) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/a7840844030503651e763dee923094e18f19134f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a784084) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/531/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #531   +/-   ##
=======================================
  Coverage   76.54%   76.54%           
=======================================
  Files         149      149           
  Lines       46725    46726    +1     
  Branches    10264    10264           
=======================================
+ Hits        35767    35768    +1     
  Misses       8350     8350           
  Partials     2608     2608           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/531/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `84.46% <100.00%> (+0.01%)` | :arrow_up: |

codecov[bot](2021-07-26 00:58:34):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/534?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#534](https://codecov.io/gh/aesara-devs/aesara/pull/534?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c0e014e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/12ef382ba8fcbcceef1931687fd3e143f37557bb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (12ef382) will **increase** coverage by `0.22%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/534/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/534?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #534      +/-   ##
==========================================
+ Coverage   76.55%   76.77%   +0.22%     
==========================================
  Files         149      149              
  Lines       46730    46732       +2     
  Branches    10264    10265       +1     
==========================================
+ Hits        35772    35880     +108     
+ Misses       8350     8245     -105     
+ Partials     2608     2607       -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/534?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/534/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vdXRpbHMucHk=) | `87.76% <100.00%> (+14.18%)` | :arrow_up: |
| [aesara/scan/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/534/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vYmFzaWMucHk=) | `87.71% <0.00%> (+0.24%)` | :arrow_up: |

codecov[bot](2021-07-29 03:50:05):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/537?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#537](https://codecov.io/gh/aesara-devs/aesara/pull/537?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1d71605) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/7c95979758fba0b3791da18c06eb817119c9c1d2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7c95979) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/537/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/537?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #537   +/-   ##
=======================================
  Coverage   76.77%   76.78%           
=======================================
  Files         149      149           
  Lines       46732    46711   -21     
  Branches    10265    10264    -1     
=======================================
- Hits        35880    35868   -12     
+ Misses       8245     8238    -7     
+ Partials     2607     2605    -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/537?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/537/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `75.92% <ø> (ø)` | |
| [aesara/link/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/537/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `60.74% <ø> (ø)` | |
| [aesara/tensor/random/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/537/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdHlwZS5weQ==) | `89.77% <ø> (-0.86%)` | :arrow_down: |
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/537/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `90.95% <ø> (ø)` | |
| [aesara/link/vm.py](https://codecov.io/gh/aesara-devs/aesara/pull/537/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `86.84% <100.00%> (+1.63%)` | :arrow_up: |
| [aesara/tensor/random/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/537/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `98.56% <100.00%> (-0.11%)` | :arrow_down: |

brandonwillard(2021-07-29 05:55:17):@msibaev, do you also own the account for @porgrammerr, or was this commit cherry picked from somewhere?  I ask because @porgrammerr is the user/email assigned to the commit in this PR.
msibaev(2021-07-29 05:58:11):Yes, that's the old name. I didn't really use github but had the account for ages with a silly name. I renamed it recently, but I guess it didn't come through cleanly.
brandonwillard(2021-07-29 06:06:01):> Yes, that's the old name. I didn't really use github but had the account for ages with a silly name. I renamed it recently, but I guess it didn't come through cleanly.

It's not exactly a problem, but you could miss out on some notifications and/or attributions (e.g. things won't show up when searching via your new username).  If you're interested, the solution might only involve updating the Git config on your machine to use the email associated with your new account (e.g. `git config --global user.email ...`).  

If you're interested in email privacy, GitHub offers a unique no-reply address for each account (see [here](https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account/managing-email-preferences/setting-your-commit-email-address#setting-your-commit-email-address-on-github)).
ghost(2021-07-29 06:10:15):Thanks, I'll double check that. Yeah turns out the old account is a separate account. I'll just delete it later. 

Anyway, I just need this bug fixed
brandonwillard(2021-07-29 06:24:17):@aesara-devs/core, it's late here, so feel free to merge this once the tests pass, because I might not get to it anytime soon.
brandonwillard(2021-07-31 00:07:10):From the test failure, it looks like this behavior is functional and intended, and that the problem might be in the debug graph printing.
brandonwillard(2021-07-31 00:17:23):This `.update` attribute feature looks similar to the `default_update` feature, but this one seems `Scan`-specific.

In AeHMC, we had to set `default_update` on the shared variables of the updates in the inner-`Scan` of a nested `Scan` graph (see [here](https://github.com/aesara-devs/aehmc/blob/1311d4d5911f7420096899f78a0ccea4164a029f/aehmc/trajectory.py#L376)).  Without this, the code would raise missing input errors during compilation.  I don't believe we were able to reproduce the issue without recreating the exact graph constructed by the test in AeHMC, but it looks broadly related to the code we're investigating here.

It would be good to know how nested `Scan`s and their updates should be handled (e.g. using `update` or `default_update`) and&mdash;preferrably&mdash;automate this so that users aren't surprised by it.
brandonwillard(2021-07-31 01:58:00):After going through https://github.com/aesara-devs/aesara/issues/543, I think those duplicate `RandomVariable` `Scan` outputs represent the `Scan`'s updates.
brandonwillard(2021-08-01 23:11:46):Was your question sufficiently answered?  If so, we can close this.
brandonwillard(2021-07-30 22:25:44):```suggestion
    def __call__(
            self,
            loc: np.ndarray,
            scale: np.ndarray,
            **kwargs
    ) -> RandomVariable:
```

The `RandomVariable` interface requires other keyword arguments here (see [`RandomVariable.__call__`](https://github.com/aesara-devs/aesara/blob/main/aesara/tensor/random/op.py#L303)).
brandonwillard(2021-07-30 22:29:50):```suggestion
    def rng_fn(
```

The `rng_fn_scipy` method is only used by `ScipyRandomVariable`, and it simply re-adds dimensions that are mistakenly dropped by some of SciPy's distributions.  `scipy.signal.lfilter` might not drop dimensions, so it's not clear whether or not you should be using `ScipyRandomVariable`.
codecov[bot](2021-08-06 04:44:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/548?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#548](https://codecov.io/gh/aesara-devs/aesara/pull/548?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (43bd142) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/7d07260bb28add3548790e706acbc61209d19a6b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7d07260) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/548/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/548?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #548   +/-   ##
=======================================
  Coverage   76.78%   76.78%           
=======================================
  Files         149      149           
  Lines       46711    46713    +2     
  Branches    10264    10264           
=======================================
+ Hits        35868    35870    +2     
  Misses       8238     8238           
  Partials     2605     2605           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/548?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/nnet/sigm.py](https://codecov.io/gh/aesara-devs/aesara/pull/548/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L3NpZ20ucHk=) | `69.69% <100.00%> (+0.94%)` | :arrow_up: |

codecov[bot](2021-08-06 19:04:22):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/549?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#549](https://codecov.io/gh/aesara-devs/aesara/pull/549?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1846741) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/77df6673fd56f368c3d174d09f2bbda3d3837504?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (77df667) will **increase** coverage by `0.00%`.
> The diff coverage is `96.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/549/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/549?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #549   +/-   ##
=======================================
  Coverage   74.09%   74.10%           
=======================================
  Files         174      174           
  Lines       48605    48622   +17     
  Branches    10340    10348    +8     
=======================================
+ Hits        36014    36030   +16     
  Misses      10305    10305           
- Partials     2286     2287    +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/549?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/rewriting/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/549/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvbWF0aC5weQ==) | `86.34% <96.00%> (+0.08%)` | :arrow_up: |

</details>
ricardoV94(2021-08-07 06:44:55):I should take a look if somethings can be removed from here after this PR: 

https://github.com/aesara-devs/aesara/blob/391e2cfbd9ebd8403ee95591c6f654253964d0fe/aesara/tensor/math_opt.py#L2686

There seems to be a lot of redundancy going on
rlouf(2022-10-17 08:01:40):Rebased the branch on `main` and resolved the merge conflicts as this looks still relevant.
ricardoV94(2021-08-06 17:49:04):Not sure if this casting is ever needed. 

I think `neg` would not change the dtype, and addition and subtraction would upcast to the same dtype, regardless of the removed `neg`. The only difference is that `sub` does not allow for `bool`, but neither does `neg` so it shouldn't come up in these rewrites
brandonwillard(2021-08-06 22:26:35):If your reasoning checks out, then we can't come up with any tests that will hit this and we should remove it.
brandonwillard(2021-08-06 22:30:00):I'm always very wary of these compound canonicalization steps.  Is there an independent canonicalization we're missing that would get rid of this `DimShuffle`?  If so, let's add that instead.
brandonwillard(2021-08-06 22:30:30):See my comment above about compound canonicalization steps.
ricardoV94(2021-08-07 05:02:51):You mean like pushing the dimshuffle inside the`neg`? That would be a less efficient graph when we are not removing the `neg`, no?

Or would we revert it in a later stage?

Looking at other rewrites in that file, more often than not there is a TODO comment saying the rewrite should also have looked for dimshuffles. So finding a general solution would probably be useful beyond these new rewrites.
brandonwillard(2021-08-07 05:06:40):> That would be a less efficient graph when we are not removing the `neg`, no?

In what sense?
ricardoV94(2021-08-07 05:10:27):That applying the `neg` after a dimshuffle would be slower than applying it before. 
ricardoV94(2021-08-07 05:28:59):Is canonicalization applied only once? In which case, should we also register these for the stabilize and specialize phases so that the rewrites are used in intermediate graphs as well?

Thinking about #473
brandonwillard(2021-08-07 05:47:07):Canonicalization isn't about producing a graph that evaluates faster; those kinds of rewrites are applied afterward.

If we have a sense of when it is slower, we should write a rewrite that works on the canonicalized form.
brandonwillard(2021-08-07 05:55:05):> should we also register these for the stabilize and specialize phases

No, if those phases need canonicalization, they should apply it themselves in its entirety, or apply specific canonicalization steps themselves&mdash;i.e. canonicalization steps should not register to other optimizers or DBs.
codecov[bot](2021-08-06 21:18:34):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/550?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#550](https://codecov.io/gh/aesara-devs/aesara/pull/550?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4537f3b) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/d0a9488a006aed6181b9a9f6fe4e402dac2b1b28?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d0a9488) will **decrease** coverage by `0.04%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 4537f3b differs from pull request most recent head 082fc73. Consider uploading reports for the commit 082fc73 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/550/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/550?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #550      +/-   ##
==========================================
- Coverage   76.88%   76.83%   -0.05%     
==========================================
  Files         149      149              
  Lines       46663    46724      +61     
  Branches    10241    10263      +22     
==========================================
+ Hits        35875    35900      +25     
- Misses       8203     8226      +23     
- Partials     2585     2598      +13     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/550?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/nnet/sigm.py](https://codecov.io/gh/aesara-devs/aesara/pull/550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L3NpZ20ucHk=) | `72.46% <100.00%> (+2.76%)` | :arrow_up: |
| [aesara/tensor/signal/conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaWduYWwvY29udi5weQ==) | `73.17% <0.00%> (-2.51%)` | :arrow_down: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `84.95% <0.00%> (-1.16%)` | :arrow_down: |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `86.14% <0.00%> (-0.60%)` | :arrow_down: |
| [aesara/link/vm.py](https://codecov.io/gh/aesara-devs/aesara/pull/550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `86.84% <0.00%> (-0.33%)` | :arrow_down: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `84.08% <0.00%> (-0.16%)` | :arrow_down: |
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `78.14% <0.00%> (-0.11%)` | :arrow_down: |
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `72.45% <0.00%> (+0.99%)` | :arrow_up: |

ricardoV94(2021-08-07 07:06:17):By the way I just came across this: https://github.com/NTimmons/FastActivations.jl

They claim they have faster and better approximations than this one...

Also discussed here on the old Theano repo:
https://github.com/Theano/Theano/issues/6731
brandonwillard(2021-08-08 21:44:11):> By the way I just came across this: https://github.com/NTimmons/FastActivations.jl
> 
> They claim they have faster and better approximations than this one...
> 
> Also discussed here on the old Theano repo:
> [Theano/Theano#6731](https://github.com/Theano/Theano/issues/6731)

Good call, let's use that!
ricardoV94(2021-08-11 14:32:47):I am still not sure what is the real problem here. Is this not how one would want to create an `inplace` version of the `UltraFastSigmoid`?

```python
import aesara
import aesara.tensor as at
from aesara.compile.mode import get_mode
from aesara.tensor.nnet.sigm import ultra_fast_sigmoid_inplace

x = at.vector('x')
out = at.sigmoid(x + 1)

mode = (
    get_mode("FAST_RUN")
    .including("local_ultra_fast_sigmoid")
    .including("inplace")  # Change to excluding, to skip inplace rewrite
    .excluding("fusion")  # Just to make checks easier 
)

aesara.config.optimizer_verbose = True
f = aesara.function([x], out, mode=mode)
assert f.maker.fgraph.outputs[0].owner.op == ultra_fast_sigmoid_inplace

```
```
>>> local_add_canonizer Elemwise{add,no_inplace}.0 Elemwise{add,no_inplace}.0
>>> constant_folding InplaceDimShuffle{x}.0 TensorConstant{(1,) of 1.0}
>>> local_ultra_fast_sigmoid Elemwise{sigmoid,no_inplace}.0 ultra_fast_sigmoid.0
>>> inplace_elemwise_optimizer ultra_fast_sigmoid.0 Elemwise{UltraFastScalarSigmoid}[(0, 0)].0
```
jeffreyenos(2021-08-11 15:17:51):> I am still not sure what is the real problem here. Is this not how one would want to create an `inplace` version of the `UltraFastSigmoid`?

This may be a more common scenario, but I don't think it handles the case where you already have a `sigmoid_inplace` operator in your graph. In the current setup (without this PR), even if you add `sigmoid_inplace` to `tracks` for `local_ultra_fast_sigmoid` you'll end up replacing `sigmoid_inplace` with `ultra_fast_sigmoid` (not in-place). So if you're not using the `inplace` optimization in addition, as you are above, you lose that in-place operator.
ricardoV94(2021-08-11 15:42:23):> This may be a more common scenario, but I don't think it handles the case where you already have a `sigmoid_inplace` operator in your graph. In the current setup (without this PR), even if you add `sigmoid_inplace` to `tracks` for `local_ultra_fast_sigmoid` you'll end up replacing `sigmoid_inplace` with `ultra_fast_sigmoid` (not in-place). So if you're not using the `inplace` optimization in addition, as you are above, you lose that in-place operator.

Yes I know that. However, the documentation emphasizes strongly that `inplace ops` are not supposed to be used directly but only introduced during rewrites: https://aesara.readthedocs.io/en/latest/extending/inplace.html#inplace-operations

The reason I am asking is that I don't think any other rewrites are checking for `inplace` patterns and returning the equivalent forms. That makes this change look a bit arbitrary unless there is a good reason for this specific rewrite to be this specialized.



brandonwillard(2021-08-11 16:30:06):> Yes I know that. However, the documentation emphasizes strongly that `inplace ops` are not supposed to be used directly but only introduced during rewrites: https://aesara.readthedocs.io/en/latest/extending/inplace.html#inplace-operations

@jeffreyenos's comment doesn't appear to assume that only users are putting these in-place `Op`s in graphs.  Just as you noted, they can get into a graph via other rewrites/optimizations.

> The reason I am asking is that I don't think any other rewrites are checking for `inplace` patterns and returning the equivalent forms. That makes this change look a bit arbitrary unless there is a good reason for this specific rewrite to be this specialized.

Many rewrites don't need to do that because they reuse the existing `Op`s (e.g. via their `__call__` or `make_node` methods).  That can't be done here because an entirely new `Op` is replacing an existing one, so the equivalent `Op` properties must be copied over.
ricardoV94(2021-08-11 16:34:58):>  Just as you noted, they can get into a graph via other rewrites/optimizations.

My (limited) understanding was that the inplace Ops should be introduced only at later stages or rewriting, when everything else is pretty much done

> Many rewrites don't need to do that because they reuse the existing `Op`s (e.g. via their `__call__` or `make_node` methods). That can't be done here because an entirely new `Op` is replacing an existing one, so the equivalent `Op` properties must be copied over.

I guess I am a bit biased towards the rewrites in `math_opt` that mostly replace expressions by different Ops.

My more general question is, should we have a look at the rest of the codebase for possible issues like this (if we agree this is an issue...)?


twiecki(2021-08-18 07:37:54):@jeffreyenos Any update here? Looks like you need to update.
jeffreyenos(2021-08-19 19:19:48):> @jeffreyenos Any update here? Looks like you need to update.

I rebased so should be up-to-date. Otherwise we do still have [this conversation](https://github.com/aesara-devs/aesara/pull/550#discussion_r691720488) around the value for `tracks`  that needs resolution.
ricardoV94(2021-08-07 05:07:41):I am curious if we can keep the original signature? It still applies to sigmoid Ops no?
brandonwillard(2021-08-07 05:37:12):It might only track that `Op` instance.
ricardoV94(2021-08-07 05:39:53):I see. And we can't tell it to track two types of Op?

It's not very important since this is not a default rewrite, I am just curious how it works.
jeffreyenos(2021-08-09 17:01:14):We could change the signature to `@local_optimizer([sigmoid, sigmoid_inplace])` so the optimizer is dispatched on the default inplace `Elemwise`. But like @brandonwillard mentioned I don't think that will handle custom `Op`s that use `Sigmoid` (or a subclass of it) as the scalar op.
ricardoV94(2021-08-09 17:45:11):I think the `[sigmoid, sigmoid_inplace]` should be fine. I am not aware of any `Op`s subclassing from `Sigmoid`. Not even these ones do it, right?
brandonwillard(2021-08-09 17:51:59):There are two parts to this: 1) whether or not `tracks` even being used in this case, and 2) that we don't want to unnecessarily/unintentionally restrict the applicability of rewrites.

If `tracks` is being used, we will be allowing case 2; if it isn't, then the change is pointless.

The best approach is to fix/update the `tracks` mechanism so that it can operate using `isinstance`/`issubclass` (even for "meta"/"composite" `Op`s like `Elemwise`).  This would also allow us to reduce the redundant `isinstance` checks that appear in so many `LocalOptimizer`s.
brandonwillard(2021-08-09 17:55:31):I think this is the relevant issue: https://github.com/aesara-devs/aesara/issues/51
ricardoV94(2021-08-09 17:57:57):> whether or not `tracks` even being used in this case

What do you mean? As far as I can see, tracks is working well, at least in the default `canonicalize` / `specialize` rewrites. It also seems to work well for `Elemwise` types.

Edit: Is the problem that it only works with `Elemwise`?

brandonwillard(2021-08-09 18:20:07):I just created a much more relevant issue for this: https://github.com/aesara-devs/aesara/issues/557
jeffreyenos(2021-08-19 01:59:32):> I just created a much more relevant issue for this: #557

Should this PR wait on #557? I'm not clear on which signature (`None` or `[sigmoid, sigmoid_inplace]`) is best at this point.
brandonwillard(2021-08-19 19:29:12):`None` is fine.
neelriyer(2021-08-19 10:53:08):> It looks like `pre-commit` might not be set up correctly in your project environment.

Thanks @brandonwillard I think I set it up properly now.


brandonwillard(2021-08-19 16:27:20):OK, now you might've reached a common difficulty: implicit changes in an underlying RNG state that cause tests to fail.

[One of the CI failures](https://github.com/aesara-devs/aesara/pull/551/checks?check_run_id=3371064681#step:6:106), appears to involve an unseeded (or poorly seeded) draw.  Try running this test a few times locally and see if it will occasionally pass.  

If that's the case, then these changes have probably altered the run order of the tests and&mdash;as a result&mdash;changed the draws that this brittle test uses.  The answer would then involve another commit that fixes this test by explicitly creating a seeded RNG and using that (e.g. `rng = np.random.default_rng(98324)` then use `rng.random((5, 10))` instead).


neelriyer(2021-08-22 10:22:50):Thanks @brandonwillard. I changed the `tests/tensor/nnet/test_basic.py` file to include `rng = np.random.default_rng(98324)` and then use rng.random((5, 10)). Let me know if I've done this incorrectly.

Hopefully this passes the CI tests now!
neelriyer(2021-08-29 06:47:17):@brandonwillard just wanted to get an update on this?
ricardoV94(2021-08-29 06:55:26):What is this binary file added in https://github.com/aesara-devs/aesara/pull/551/commits/b6e38b2206ab1cab7312fdc3d9ab16c2242f0a78 ?
neelriyer(2021-08-29 07:04:43):I'm not sure @ricardoV94. Sorry I must've done a `git add .`. I'll remove it and recommit.
ricardoV94(2021-08-29 07:12:20):Thanks @spiyer99 

Could you also squash/drop/rebase away the extra commits so that this PR only has two commits, the first moving the `opt` and the second seeding the moved test?
ricardoV94(2021-08-29 07:22:29):Also there might be a couple other opts that the original issue had in mind like

* local_useless_slice
* local_subtensor_lift
* local_subtensor_merge
* local_subtensor_remove_broadcastable_index
* local_subtensor_of_alloc
* and others that are centered on `subtensor`

Do you want to address those as well?
neelriyer(2021-08-29 07:34:17):Thanks @ricardoV94 I'll address the other opts and drop the extra commits. I'll get back to you when I'm done.
ricardoV94(2021-08-29 07:36:15):@brandonwillard should we also move opts related to any of `SetSubtensor`, `IncSubtensor`, and `Advanced` variations?

The description from the original issue does not mention these
brandonwillard(2021-08-30 22:02:01):> @brandonwillard should we also move opts related to any of `SetSubtensor`, `IncSubtensor`, and `Advanced` variations?
> 
> The description from the original issue does not mention these

Yes, definitely.
neelriyer(2021-09-05 08:15:16):@ricardoV94, thanks for your help. I submitted another PR (#581) as this one was becoming a bit too messy. I hope that’s alright. 

The new PR has two commits, one for moving the `opt` and the second seeding the moved test. 

It also takes into account the `*local*` functions and the `SetSubtensor`, `IncSubtensor`, `Advanced` variations. Please let me know if I’ve missed anything.
ricardoV94(2021-09-05 08:17:07):Yeah that's fine

brandonwillard(2021-09-17 02:59:25):Isn't this supposed to be closed by #581?  Looks like it's already closed, though.
codecov[bot](2021-08-08 22:20:13):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/552?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#552](https://codecov.io/gh/aesara-devs/aesara/pull/552?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (858d2e8) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/bf5938c77eecbda0d6350a34094607dc37419dba?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (bf5938c) will **decrease** coverage by `0.04%`.
> The diff coverage is `87.13%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/552/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/552?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #552      +/-   ##
==========================================
- Coverage   76.90%   76.86%   -0.05%     
==========================================
  Files         149      149              
  Lines       46704    46593     -111     
  Branches    10250    10230      -20     
==========================================
- Hits        35918    35813     -105     
+ Misses       8202     8198       -4     
+ Partials     2584     2582       -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/552?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/views.py](https://codecov.io/gh/aesara-devs/aesara/pull/552/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vdmlld3MucHk=) | `85.71% <ø> (-3.18%)` | :arrow_down: |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/552/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `49.57% <11.11%> (ø)` | |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/552/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `39.06% <66.66%> (ø)` | |
| [aesara/scan/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/552/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `82.05% <72.58%> (-0.09%)` | :arrow_down: |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/552/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `81.87% <89.97%> (+0.18%)` | :arrow_up: |
| [aesara/scan/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/552/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vdXRpbHMucHk=) | `87.01% <96.00%> (-0.76%)` | :arrow_down: |
| [aesara/graph/features.py](https://codecov.io/gh/aesara-devs/aesara/pull/552/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `62.62% <100.00%> (-0.10%)` | :arrow_down: |
| [aesara/scan/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/552/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vYmFzaWMucHk=) | `87.04% <100.00%> (-0.67%)` | :arrow_down: |
| [aesara/scan/scan\_perform\_ext.py](https://codecov.io/gh/aesara-devs/aesara/pull/552/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vc2Nhbl9wZXJmb3JtX2V4dC5weQ==) | `80.32% <100.00%> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/552/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `85.15% <100.00%> (ø)` | |
| ... and [6 more](https://codecov.io/gh/aesara-devs/aesara/pull/552/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

brandonwillard(2021-09-12 22:32:09):We should start merging these updates incrementally, so I'm going to break this up into multiple PRs.

See #584.
codecov[bot](2021-08-09 20:36:38):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/555?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#555](https://codecov.io/gh/aesara-devs/aesara/pull/555?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f6db054) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/812a8f9bb90796a357be90bd8a71462c7964ba5a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (812a8f9) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/555/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/555?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #555   +/-   ##
=======================================
  Coverage   76.87%   76.88%           
=======================================
  Files         149      149           
  Lines       46660    46663    +3     
  Branches    10241    10241           
=======================================
+ Hits        35869    35875    +6     
+ Misses       8204     8203    -1     
+ Partials     2587     2585    -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/555?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/555/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `86.11% <100.00%> (+0.23%)` | :arrow_up: |

ricardoV94(2021-08-12 10:55:39):Removed the `track` changes
ricardoV94(2021-08-09 21:04:09):```suggestion
            # Functions may have casted integer input to float
```

ricardoV94(2021-08-11 13:58:30):@brandonwillard Should I revert this until #557 is sorted?
brandonwillard(2021-08-11 16:01:52):Yeah, because when `tracks` is used, this will likely limit the optimization to only these exact instances.
brandonwillard(2021-08-11 16:02:13):See above.
brandonwillard(2021-08-11 16:02:21):See above.
brandonwillard(2021-08-11 16:02:27):See above.
ricardoV94(2021-08-11 16:10:52):Just to be clear, what would other instances be? `inplace` versions or something else?
ricardoV94(2021-08-11 16:31:10):The reason I am asking is because I feel the `isinstance` checks inside would be no less restrictive that these `tracks`.
codecov[bot](2021-08-09 20:17:59):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/556?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#556](https://codecov.io/gh/aesara-devs/aesara/pull/556?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7015e9e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/36e2e1a507f86fdef1a1262ee9231948ea9a49dd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (36e2e1a) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/556/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/556?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #556   +/-   ##
=======================================
  Coverage   76.80%   76.80%           
=======================================
  Files         149      149           
  Lines       46743    46743           
  Branches    10265    10265           
=======================================
  Hits        35900    35900           
  Misses       8238     8238           
  Partials     2605     2605           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/556?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/556/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `85.95% <100.00%> (ø)` | |

brandonwillard(2021-08-09 20:54:36):Well, that might've been easier than I thought.
brandonwillard(2021-08-09 21:32:13):> On the user side this could be problematic if someone was using TensorVariable checks as a way to exclude Constants... Hopefully nobody did that

Exactly; we'll have to clarify this in the release notes.
codecov[bot](2021-08-11 02:12:54):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/560?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#560](https://codecov.io/gh/aesara-devs/aesara/pull/560?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a07c91c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/477f4e5dd757b1ccd3deaf59bf75fc27d7ab9cf6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (477f4e5) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/560/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/560?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #560   +/-   ##
=======================================
  Coverage   76.80%   76.80%           
=======================================
  Files         149      149           
  Lines       46743    46745    +2     
  Branches    10265    10265           
=======================================
+ Hits        35900    35902    +2     
  Misses       8238     8238           
  Partials     2605     2605           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/560?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/560/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvb3BzLnB5) | `83.68% <100.00%> (+0.23%)` | :arrow_up: |

brandonwillard(2021-08-11 04:30:29):> Shape inference was already being tested?

It's enabled by default for most graphs compiled during testing.
codecov[bot](2021-08-18 00:44:19):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/561?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#561](https://codecov.io/gh/aesara-devs/aesara/pull/561?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (85b0be1) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2ca4199899e57ef1428ae13250c64c4f19a262dc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2ca4199) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/561/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/561?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #561   +/-   ##
=======================================
  Coverage   77.28%   77.29%           
=======================================
  Files         151      151           
  Lines       47025    47031    +6     
  Branches    10923    10925    +2     
=======================================
+ Hits        36344    36352    +8     
+ Misses       8098     8097    -1     
+ Partials     2583     2582    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/561?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/561/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `87.17% <100.00%> (+0.10%)` | :arrow_up: |
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/561/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `84.57% <100.00%> (+0.23%)` | :arrow_up: |

twiecki(2021-12-05 07:50:26):Nice, any idea how much faster this is? 4x?
brandonwillard(2021-12-05 07:52:25):> Nice, any idea how much faster this is? 4x?

Yeah, [last time I tried](https://github.com/aesara-devs/aesara/pull/561#issue-965429738), it was around there.
kc611(2021-09-17 05:35:38):We might want to have a small note over here stating that it's the `x[indices] += y` operation that ignores the duplicates and is faster than the `add.at`. Otherwise LGTM!
twiecki(2021-10-15 09:48:44):```suggestion
        Don't use. Aesara will do in-place operations itself, when possible.
```
ricardoV94(2021-10-29 07:03:51):```suggestion
        (i.e. using ``x[indices] += y``) can improve the speed of this `Op`
```
codecov[bot](2021-08-11 15:06:55):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/562?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#562](https://codecov.io/gh/aesara-devs/aesara/pull/562?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (cb5a2f0) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/15c64971dc5d033a8c4c2a425ebcb126d808fbd7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (15c6497) will **increase** coverage by `0.02%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/562/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/562?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #562      +/-   ##
==========================================
+ Coverage   76.80%   76.83%   +0.02%     
==========================================
  Files         149      149              
  Lines       46745    46721      -24     
  Branches    10265    10262       -3     
==========================================
- Hits        35902    35896       -6     
+ Misses       8238     8226      -12     
+ Partials     2605     2599       -6     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/562?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/562/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `63.04% <100.00%> (+0.15%)` | :arrow_up: |
| [aesara/graph/opt\_utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/562/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdF91dGlscy5weQ==) | `94.80% <100.00%> (+0.60%)` | :arrow_up: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/562/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `84.95% <100.00%> (+0.49%)` | :arrow_up: |
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/562/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `78.14% <0.00%> (+0.11%)` | :arrow_up: |
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/562/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `84.09% <0.00%> (+0.17%)` | :arrow_up: |
| [aesara/graph/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/562/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `76.66% <0.00%> (+0.74%)` | :arrow_up: |

ricardoV94(2021-08-17 19:34:39):> Looks good, aside from a few small things.
> 
> Otherwise, I'm noticing that you want to set instance-based `tracks` on more rewrites; is there a reason for this?  Have you seen a noticable improvement under these `tracks` changes that outweighs the development and library design constraints they impose?

The PatternSub always works with tracks under the hood actually. By default it tracks the first op in the input pattern. These tracks for more rare ops make it be "dispatched" less times (only when the more rare op is found), but are no less restrictive.

When we change how tracks works for the general rewrites we might change these, but for now we might as well make use of the features it has. There is no trade-off with PatternSub AFAIK.

https://github.com/aesara-devs/aesara/blob/15c64971dc5d033a8c4c2a425ebcb126d808fbd7/aesara/graph/opt.py#L1676-L1679

Similarly the actual pattern matching relies on class equality:
https://github.com/aesara-devs/aesara/blob/15c64971dc5d033a8c4c2a425ebcb126d808fbd7/aesara/graph/opt.py#L1700

https://github.com/aesara-devs/aesara/blob/15c64971dc5d033a8c4c2a425ebcb126d808fbd7/aesara/graph/opt.py#L1724
brandonwillard(2021-08-17 20:46:57):> The PatternSub always works with tracks under the hood actually. By default it tracks the first op in the input pattern. These tracks for more rare ops make it be "dispatched" less times (only when the more rare op is found), but are no less restrictive.

> When we change how tracks works for the general rewrites we might change these as well, but for now we might as well make use of the features it has. There is no trade-off with PatternSub AFAIK.

You haven't answered the question: are there any noticeable benefits to these changes?  If not, we're just **assuming** that these options are worth setting (and that they're even being utilized, in some cases), and, because the general `tracks`-based filtering **is** overly restrictive when `Op` instances are used, these additions only add more changes to be made down the line.

Since this has come up a few times already, here's an example that illustrates exactly how `tracks` is too restrictive and why these kinds of `tracks` changes aren't generally warranted:
```python
from copy import copy

import aesara
import aesara.tensor as at

from aesara.tensor.elemwise import Elemwise
from aesara.tensor.math_opt import get_clients

from aesara.graph.opt import out2in, local_optimizer, LocalOptGroup
from aesara.graph.opt_utils import optimize_graph
from aesara.misc.frozendict import frozendict


aesara.config.on_opt_error = "raise"


@local_optimizer([at.add])
def ps(fgraph, node):

    if not (
        isinstance(node.op, Elemwise)
        and isinstance(node.op.scalar_op, type(at.add.scalar_op))
    ):
        return

    return at.add(node.inputs[1], node.inputs[0]).owner.outputs


opt_grp = LocalOptGroup(ps)
test_opt = out2in(opt_grp, name="ps", ignore_newtrees=True)

x, y = at.vectors("xy")
z = at.add(x, y)

z_new = optimize_graph(z, [], custom_opt=test_opt)


aesara.dprint(z)
# Elemwise{add,no_inplace} [id A] ''
#  |x [id B]
#  |y [id C]

aesara.dprint(z_new)
# Elemwise{add,no_inplace} [id A] ''
#  |y [id B]
#  |x [id C]


new_add = copy(at.add)
# This can/will be changed when an `Op` is in-placed
new_add.inplace_pattern = frozendict({0: 0})

assert new_add != at.add

z = new_add(x, y)

z_new = optimize_graph(z, [], custom_opt=test_opt)

# XXX: Doesn't work, because `tracks` is too restrictive due to its use of
# `__eq__` instead of a more appropriate type-based filtering
aesara.dprint(z_new)
# Elemwise{add,no_inplace} [id A] ''
#  |x [id B]
#  |y [id C]
```

Now, if the example rewrite _shouldn't_ be performed on in-placed subgraphs, that's a different story altogether, and `tracks` isn't a good approach for that&mdash;especially since such concerns are already covered by the `Supervisor` and `DestroyHandler` `Feature`s.  Any other concerns that have to do with the exact details of this example rewrite&mdash;or the specifics of in-placing&mdash;are irrelevant; this example demonstrates that, when `tracks` is used (which is already a big question in some caess), an `Op` instance is too restrictive for the majority of our rewrites (or quite possibly _all_ of them).
ricardoV94(2021-08-17 20:53:56):Your example would not work without the tracks set explicitly either (PatternSub always uses tracks). You are hinting at a more general limitation of PatternSub, which is all based on op equality.

In terms of performance for the specific changes introduced in this PR: they do not affect how fast the rewrite runs, it simply prevents it from being called when handling a graph for which it would fail anyway (e.g., because there is no sigmoid op in it to begin with).

The performance benefits would be observed in graphs  that do not benefit from this rewrite, not in those that do.
brandonwillard(2021-08-17 21:16:11):> Your example would not work without the tracks set explicitly either (PatternSub always uses tracks). You are hinting at a more general limitation of PatternSub, which is all based on op equality.

I've updated the example to reflect the actual cases within Aesara where `tracks` is an obvious limitation.  The same can be done for `PatternSub`, but it will require the use of a different example `Op`, `Op` property, and/or a more sophisticated unification pattern (e.g. using constraints).

Nevertheless, these `tracks` changes are neither necessary nor have they been demonstrated to be beneficial (again, `tracks` is only used in _some_ cases).


Regarding these exact cases of `PatternSub`, you're right, we can set `tracks` without affecting these rewrites, because the unification patterns are already restricted by `__eq__`.  I would still like to know that these are actually beneficial, though.

(N.B.: We're also replacing `PatternSub`, and one of the reasons is that it's not flexible enough to succinctly specify unification patterns for general classes of `Op`s.  See https://github.com/aesara-devs/aesara/pull/523) 
ricardoV94(2021-08-11 13:51:34):The assert prints were not really helpful, since they would all just be `Elemwise<...>`
ricardoV94(2021-08-11 13:52:18):The intermediate `mul(-1, x)` gets optimized to `neg(x)`, now that the test includes the specialization rewrite phase
ricardoV94(2021-08-11 13:53:48):One less node from the extra rewrite phase. These number of nodes tests seem a bit too brittle however...
ricardoV94(2021-08-11 13:55:31):I guess this branch was never hit in the tests because it's obviously a bug, as `ret` is supposed to be an iterable given the `assert` above
ricardoV94(2021-08-12 04:50:36):For the `PatternSub`, the new tracks is no more restrictive than before as the internal matching logic is all based on the restrictive Op equality
ricardoV94(2021-08-12 13:13:46):This check doesn't make sense here. There is no reason why it should be treated differently than the normal `self.transform` case
ricardoV94(2021-08-12 13:14:40):AFAIK, `PatternSub` will only work with one input variable as the "out_pattern"
brandonwillard(2021-08-17 17:19:04):This docstring isn't formatted correctly.
brandonwillard(2021-08-17 17:21:24):Why is `"inplace"` added here?
brandonwillard(2021-08-17 17:22:42):Same question about `"inplace"` here.
brandonwillard(2021-08-17 17:24:08):Understandable, but these changes belong in a separate commit.
brandonwillard(2021-08-17 17:27:11):Again, we don't want to use specific `Op` instances as `tracks` arguments, unless we need to for some reason.
brandonwillard(2021-08-17 17:29:53):Then it would seem like this change isn't necessary and only adds more code that we would need to change in the future, no?
brandonwillard(2021-08-17 17:30:13):Same issue here.
ricardoV94(2021-08-17 19:36:17):Makes the op checks easier to write. Otherwise we have to check against the inplace variations
ricardoV94(2021-08-17 19:37:06):See my comment on the general thread. PatternSub always uses tracks under the hood
brandonwillard(2021-08-18 13:25:20):Can you come up with a better name?
ricardoV94(2021-08-18 14:00:31):Definitely
brandonwillard(2021-08-18 17:06:57):Remember, **all this is going to be replaced with a more capable/mature unification library**, so there aren't really any TODOs here.
ricardoV94(2021-08-18 18:05:28):I didn't touch the `tround` warning because it was added in `theano-0.9`

But that was in 2017 I think... so we can consider it as well
codecov[bot](2021-08-19 07:00:24):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/565?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#565](https://codecov.io/gh/aesara-devs/aesara/pull/565?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8cb7d0a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/a5b7b68f424f63ed317e0e073893e8dfa505fb49?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a5b7b68) will **increase** coverage by `0.04%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/565/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/565?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #565      +/-   ##
==========================================
+ Coverage   76.83%   76.87%   +0.04%     
==========================================
  Files         149      149              
  Lines       46721    46660      -61     
  Branches    10262    10241      -21     
==========================================
- Hits        35896    35869      -27     
+ Misses       8226     8204      -22     
+ Partials     2599     2587      -12     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/565?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `71.46% <ø> (-1.00%)` | :arrow_down: |
| [aesara/link/vm.py](https://codecov.io/gh/aesara-devs/aesara/pull/565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `87.16% <ø> (+0.32%)` | :arrow_up: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `84.23% <ø> (+0.15%)` | :arrow_up: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `85.87% <ø> (+0.91%)` | :arrow_up: |
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `78.24% <ø> (+0.10%)` | :arrow_up: |
| [aesara/tensor/signal/conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaWduYWwvY29udi5weQ==) | `75.67% <ø> (+2.50%)` | :arrow_up: |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `86.73% <ø> (+0.59%)` | :arrow_up: |

codecov[bot](2021-08-18 19:53:44):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/566?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#566](https://codecov.io/gh/aesara-devs/aesara/pull/566?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a952d12) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/15c64971dc5d033a8c4c2a425ebcb126d808fbd7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (15c6497) will **increase** coverage by `0.02%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/566/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/566?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #566      +/-   ##
==========================================
+ Coverage   76.80%   76.83%   +0.02%     
==========================================
  Files         149      149              
  Lines       46745    46721      -24     
  Branches    10265    10262       -3     
==========================================
- Hits        35902    35896       -6     
+ Misses       8238     8226      -12     
+ Partials     2605     2599       -6     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/566?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/566/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vYmFzaWMucHk=) | `87.71% <ø> (ø)` | |
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/566/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `78.14% <0.00%> (+0.11%)` | :arrow_up: |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/566/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `63.04% <0.00%> (+0.15%)` | :arrow_up: |
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/566/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `84.09% <0.00%> (+0.17%)` | :arrow_up: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/566/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `84.95% <0.00%> (+0.49%)` | :arrow_up: |
| [aesara/graph/opt\_utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/566/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdF91dGlscy5weQ==) | `94.80% <0.00%> (+0.60%)` | :arrow_up: |
| [aesara/graph/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/566/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `76.66% <0.00%> (+0.74%)` | :arrow_up: |

codecov[bot](2021-08-19 12:47:47):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/567?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#567](https://codecov.io/gh/aesara-devs/aesara/pull/567?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7fb6aed) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/41253900f7df00b6ab2fb638c3c6ae706a370312?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4125390) will **increase** coverage by `0.00%`.
> The diff coverage is `80.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/567/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/567?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #567   +/-   ##
=======================================
  Coverage   77.02%   77.02%           
=======================================
  Files         157      157           
  Lines       46924    46929    +5     
  Branches    10267    10268    +1     
=======================================
+ Hits        36145    36149    +4     
  Misses       8196     8196           
- Partials     2583     2584    +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/567?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/567/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `85.11% <80.00%> (-0.02%)` | :arrow_down: |

ricardoV94(2021-09-22 19:44:08):No idea why the codecov is complaining...
brandonwillard(2021-08-27 17:20:47):```suggestion
    """Equivalent of `numpy.full_like`.
```
brandonwillard(2021-08-27 17:21:12):Let's use type annotations from now on.
brandonwillard(2021-08-27 17:21:29):```suggestion
        tensor the shape of `a` containing `fill_value` of the type of dtype.
```
brandonwillard(2021-08-27 17:23:00):Why not use `aesara.config.floatX`?
ricardoV94(2021-09-19 10:57:53):Couldn't find a good type hint for `dtype`, suggestions?
brandonwillard(2021-09-19 19:59:40):`Union[str, np.generic, np.dtype]` should be valid.
codecov[bot](2021-08-24 00:30:45):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/570?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#570](https://codecov.io/gh/aesara-devs/aesara/pull/570?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b259f42) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/4caaa7ff67d3a537aabb4d29fefbfe786e4cce90?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4caaa7f) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/570/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/570?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #570   +/-   ##
=======================================
  Coverage   76.88%   76.88%           
=======================================
  Files         149      149           
  Lines       46666    46669    +3     
  Branches    10242    10244    +2     
=======================================
+ Hits        35879    35882    +3     
  Misses       8203     8203           
  Partials     2584     2584           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/570?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/570/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `96.23% <100.00%> (-0.02%)` | :arrow_down: |
| [aesara/tensor/random/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/570/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3B0LnB5) | `94.30% <100.00%> (+0.29%)` | :arrow_up: |

codecov[bot](2021-08-25 04:00:26):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/572?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#572](https://codecov.io/gh/aesara-devs/aesara/pull/572?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a298bf2) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0427130df14a438d963de5a629974c2d439665da?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0427130) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/572/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/572?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #572   +/-   ##
=======================================
  Coverage   76.88%   76.88%           
=======================================
  Files         149      149           
  Lines       46669    46671    +2     
  Branches    10244    10244           
=======================================
+ Hits        35882    35885    +3     
+ Misses       8203     8202    -1     
  Partials     2584     2584           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/572?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/572/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `86.21% <100.00%> (+0.26%)` | :arrow_up: |

twiecki(2021-08-30 06:43:49):Also closes https://github.com/aesara-devs/aesara/issues/564
twiecki(2021-08-30 15:28:00):Ah, I probably shouldn't have pushed that button.
codecov[bot](2021-08-28 00:26:13):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/575?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#575](https://codecov.io/gh/aesara-devs/aesara/pull/575?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (299a741) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/3bde5122e5b140229ea7c05a1f08fcc7f986ccf1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3bde512) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/575/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/575?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #575   +/-   ##
=======================================
  Coverage   76.88%   76.89%           
=======================================
  Files         149      149           
  Lines       46671    46674    +3     
  Branches    10244    10245    +1     
=======================================
+ Hits        35885    35888    +3     
  Misses       8202     8202           
  Partials     2584     2584           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/575?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/575/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `96.24% <100.00%> (+0.01%)` | :arrow_up: |

codecov[bot](2021-08-28 22:02:36):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/577?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#577](https://codecov.io/gh/aesara-devs/aesara/pull/577?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d462fb9) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/00c9e1f73cf809c3fc26e232de1e9ae6aca6ef35?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (00c9e1f) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/577/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/577?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #577      +/-   ##
==========================================
+ Coverage   76.89%   76.90%   +0.01%     
==========================================
  Files         149      149              
  Lines       46674    46697      +23     
  Branches    10245    10250       +5     
==========================================
+ Hits        35888    35911      +23     
  Misses       8202     8202              
  Partials     2584     2584              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/577?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/577/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `96.33% <100.00%> (+0.08%)` | :arrow_up: |

dgerlanc(2021-08-31 21:50:35):> I think we can include a `pip` section with `-r requirements.txt`, no? That would automatically cover some of the requirements.

We can always do `pip install --no-deps -r requirements.txt` in the `pip` section, though I believe we captured all the dependencies from `requirements.txt` and `requirements-rtd.txt`

Note that I left out `gnumpy`, `pydot2`, and `pydot-ng`, present in `requirements-rtd.txt`, as these appear to no longer be maintained.

ricardoV94(2021-09-05 08:18:06):That binary file seems to have cropped in again
neelriyer(2021-09-07 06:55:38):> These changes look good, thanks!
> 
> If you remove the added file, we can run the tests and finish the review.


Thanks @brandonwillard! I’ve removed the binary file (sorry I need to be less careless with things like that).
brandonwillard(2021-09-07 20:41:07):It looks like the last rebase might have removed the commits.
neelriyer(2021-09-07 21:58:00):Yeah sorry I'll need to redo this. I don't know what I messed up.
brandonwillard(2021-09-07 22:03:52):> Yeah sorry I'll need to redo this. I don't know what I messed up.

No problem; if you want to describe the `git` actions you're taking, we might be able to help.
neelriyer(2021-09-08 00:36:22):Thanks! I couldn't get `git rebase -i` to work. So instead I used the logic [described here](https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git) to undo the previous commits and redo them with my changes added in. It probably wasn't the best thing to do in hindsight. 

Is there a way we could keep this PR open?
neelriyer(2021-09-09 10:00:36):@ricardoV94, @brandonwillard I re-commited the work. I think I figured out what I did wrong earlier. 

@ricardoV94 I also removed the comment lines that you specified earlier. 

codecov[bot](2021-09-09 11:04:40):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/581?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#581](https://codecov.io/gh/aesara-devs/aesara/pull/581?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (32f5733) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/3bde5122e5b140229ea7c05a1f08fcc7f986ccf1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3bde512) will **increase** coverage by `0.01%`.
> The diff coverage is `83.75%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/581/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/581?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #581      +/-   ##
==========================================
+ Coverage   76.88%   76.90%   +0.01%     
==========================================
  Files         149      149              
  Lines       46671    46723      +52     
  Branches    10244    10251       +7     
==========================================
+ Hits        35885    35933      +48     
- Misses       8202     8205       +3     
- Partials     2584     2585       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/581?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `83.90% <82.63%> (-10.77%)` | :arrow_down: |
| [aesara/link/numba/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gucHk=) | `96.33% <100.00%> (+0.09%)` | :arrow_up: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `84.84% <100.00%> (+0.60%)` | :arrow_up: |
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `90.97% <0.00%> (+0.02%)` | :arrow_up: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `86.16% <0.00%> (+0.05%)` | :arrow_up: |

ricardoV94(2021-09-10 05:22:14):Looks good so far @spiyer99 

The last thing we need to do is move the related subtensor tests in `tests/tensor/test_basic_opt` to `tests/tensor/test_subtensor_opt`

neelriyer(2021-09-11 10:09:20):@ricardoV94 - thanks for your help.  I moved the tests in the latest commit.

ricardoV94(2021-09-12 21:34:10):> @ricardoV94 - thanks for your help.  I moved the tests in the latest commit.
 

Seems like you copied the tests to the new location but might not have removed them from the old one?

Otherwise looks good
neelriyer(2021-09-14 00:27:09):@ricardoV94 thanks - I've updated the commit now.
neelriyer(2021-09-21 11:43:01):@brandonwillard I noticed you dismissed the review?
brandonwillard(2021-09-21 15:47:13):> @brandonwillard I noticed you dismissed the review?

Yes, I dismissed my old review requesting changes because it was stale.
ricardoV94(2021-09-05 08:20:46):These comment lines can be removed
neelriyer(2021-09-07 06:55:35):@ricardov94, thanks for the suggestion. What’s the best way to change a previous commit in this case? Should I use `git reset HEAD~` or something like that?
ricardoV94(2021-09-07 07:30:54):You can make a new commit and then squash it with the old one in interactive rebase
neelriyer(2021-09-07 09:56:44):Thanks will do. I'll also fix the error that the tests are reflecting.
codecov[bot](2021-09-12 23:34:29):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/583?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#583](https://codecov.io/gh/aesara-devs/aesara/pull/583?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (bf68178) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/d960e510ffd052d6f02028878d0d8a17171d9cee?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d960e51) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/583/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/583?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #583   +/-   ##
=======================================
  Coverage   76.90%   76.90%           
=======================================
  Files         149      149           
  Lines       46703    46704    +1     
  Branches    10250    10250           
=======================================
+ Hits        35917    35918    +1     
  Misses       8202     8202           
  Partials     2584     2584           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/583?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/583/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `90.97% <100.00%> (+0.02%)` | :arrow_up: |

codecov[bot](2021-09-15 20:09:03):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/586?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#586](https://codecov.io/gh/aesara-devs/aesara/pull/586?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5739f71) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5335e72932dde19e47b8539705e53dca762cb008?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5335e72) will **increase** coverage by `0.02%`.
> The diff coverage is `87.50%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/586/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/586?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #586      +/-   ##
==========================================
+ Coverage   76.86%   76.88%   +0.02%     
==========================================
  Files         149      149              
  Lines       46593    46597       +4     
  Branches    10230    10229       -1     
==========================================
+ Hits        35813    35828      +15     
+ Misses       8198     8190       -8     
+ Partials     2582     2579       -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/586?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/d3viz/formatting.py](https://codecov.io/gh/aesara-devs/aesara/pull/586/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2Qzdml6L2Zvcm1hdHRpbmcucHk=) | `12.88% <0.00%> (+0.06%)` | :arrow_up: |
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/586/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `58.74% <25.00%> (+0.04%)` | :arrow_up: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/586/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `78.13% <75.00%> (+0.38%)` | :arrow_up: |
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/586/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `72.67% <100.00%> (+0.24%)` | :arrow_up: |
| [aesara/graph/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/586/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `67.94% <100.00%> (+0.62%)` | :arrow_up: |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/586/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `81.86% <100.00%> (-0.02%)` | :arrow_down: |
| [aesara/scan/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/586/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vdXRpbHMucHk=) | `87.25% <0.00%> (+0.24%)` | :arrow_up: |
| [aesara/link/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/586/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `85.15% <0.00%> (+1.31%)` | :arrow_up: |

codecov[bot](2021-09-15 20:38:20):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/587?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#587](https://codecov.io/gh/aesara-devs/aesara/pull/587?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8107aa2) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5335e72932dde19e47b8539705e53dca762cb008?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5335e72) will **increase** coverage by `0.00%`.
> The diff coverage is `74.79%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/587/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/587?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #587   +/-   ##
=======================================
  Coverage   76.86%   76.86%           
=======================================
  Files         149      149           
  Lines       46593    46598    +5     
  Branches    10230    10231    +1     
=======================================
+ Hits        35813    35818    +5     
  Misses       8198     8198           
  Partials     2582     2582           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/587?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/587/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `57.36% <50.00%> (-1.33%)` | :arrow_down: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/587/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `43.88% <74.78%> (+4.82%)` | :arrow_up: |
| [aesara/graph/features.py](https://codecov.io/gh/aesara-devs/aesara/pull/587/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `62.62% <100.00%> (ø)` | |

codecov[bot](2021-09-17 16:42:26):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/589?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#589](https://codecov.io/gh/aesara-devs/aesara/pull/589?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d29731d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/15c64971dc5d033a8c4c2a425ebcb126d808fbd7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (15c6497) will **increase** coverage by `0.08%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/589/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/589?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #589      +/-   ##
==========================================
+ Coverage   76.80%   76.88%   +0.08%     
==========================================
  Files         149      149              
  Lines       46745    46601     -144     
  Branches    10265    10229      -36     
==========================================
- Hits        35902    35831      -71     
+ Misses       8238     8191      -47     
+ Partials     2605     2579      -26     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/589?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `48.83% <100.00%> (-0.13%)` | :arrow_down: |
| [aesara/compile/monitormode.py](https://codecov.io/gh/aesara-devs/aesara/pull/589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvbW9uaXRvcm1vZGUucHk=) | `63.04% <0.00%> (-8.70%)` | :arrow_down: |
| [aesara/scan/views.py](https://codecov.io/gh/aesara-devs/aesara/pull/589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vdmlld3MucHk=) | `85.71% <0.00%> (-3.18%)` | :arrow_down: |
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `57.42% <0.00%> (-1.28%)` | :arrow_down: |
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `71.46% <0.00%> (-1.00%)` | :arrow_down: |
| [aesara/scan/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vYmFzaWMucHk=) | `87.04% <0.00%> (-0.67%)` | :arrow_down: |
| [aesara/scan/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vdXRpbHMucHk=) | `87.25% <0.00%> (-0.52%)` | :arrow_down: |
| [aesara/graph/features.py](https://codecov.io/gh/aesara-devs/aesara/pull/589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `62.62% <0.00%> (-0.10%)` | :arrow_down: |
| [aesara/scan/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `82.05% <0.00%> (-0.09%)` | :arrow_down: |
| ... and [22 more](https://codecov.io/gh/aesara-devs/aesara/pull/589/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

codecov[bot](2021-09-17 23:12:05):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/591?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#591](https://codecov.io/gh/aesara-devs/aesara/pull/591?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (18681ee) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0ae63d1b02daf81dd8203c26e24ceddc5d49176d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0ae63d1) will **increase** coverage by `0.02%`.
> The diff coverage is `96.52%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/591/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/591?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #591      +/-   ##
==========================================
+ Coverage   76.89%   76.91%   +0.02%     
==========================================
  Files         149      156       +7     
  Lines       46602    46656      +54     
  Branches    10230    10230              
==========================================
+ Hits        35833    35887      +54     
  Misses       8190     8190              
  Partials     2579     2579              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/591?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.78% <92.78%> (ø)` | |
| [aesara/link/numba/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvdGVuc29yX2Jhc2ljLnB5) | `97.26% <97.26%> (ø)` | |
| [aesara/link/numba/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2NhbGFyLnB5) | `97.50% <97.50%> (ø)` | |
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.51% <97.51%> (ø)` | |
| [aesara/link/numba/dispatch/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZXh0cmFfb3BzLnB5) | `97.76% <97.76%> (ø)` | |
| [aesara/link/numba/dispatch/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvX19pbml0X18ucHk=) | `100.00% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/nlinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvbmxpbmFsZy5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvcmFuZG9tLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/link/numba/linker.py](https://codecov.io/gh/aesara-devs/aesara/pull/591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvbGlua2VyLnB5) | `100.00% <100.00%> (ø)` | |
| ... and [7 more](https://codecov.io/gh/aesara-devs/aesara/pull/591/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

codecov[bot](2021-09-18 19:26:59):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/592?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#592](https://codecov.io/gh/aesara-devs/aesara/pull/592?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3ddf7f3) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/d4696e6b755507b80730623b13acc2914e0db387?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d4696e6) will **increase** coverage by `0.03%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/592/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/592?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #592      +/-   ##
==========================================
+ Coverage   76.91%   76.95%   +0.03%     
==========================================
  Files         156      156              
  Lines       46656    46680      +24     
  Branches    10230    10235       +5     
==========================================
+ Hits        35887    35921      +34     
+ Misses       8190     8184       -6     
+ Partials     2579     2575       -4     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/592?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/592/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `87.03% <100.00%> (+0.29%)` | :arrow_up: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/592/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `45.62% <100.00%> (+1.74%)` | :arrow_up: |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/592/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `81.91% <100.00%> (+0.05%)` | :arrow_up: |

codecov[bot](2021-09-22 06:23:57):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/594?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#594](https://codecov.io/gh/aesara-devs/aesara/pull/594?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d658c89) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/b41197d0af304d83f0cfe82cd1786b06e8c62f93?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b41197d) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/594/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/594?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #594   +/-   ##
=======================================
  Coverage   76.96%   76.96%           
=======================================
  Files         156      156           
  Lines       46785    46785           
  Branches    10247    10247           
=======================================
  Hits        36010    36010           
  Misses       8194     8194           
  Partials     2581     2581           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/594?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/594/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `86.73% <100.00%> (ø)` | |

fanshi118(2021-09-24 19:21:59):This PR is for #529 .

Here's at a high level how we want to implement the custom vectorize method:
```python
import numba
import numpy as np
from functools import reduce


def func(*arrays):
    return np.sum(arrays)

def dev_test(*np_arrays, res=None):
    broadcast_shape = np.broadcast_shapes(*(np.shape(a) for a in np_arrays))
    broadcasted_arrays = [
        np.broadcast_to(a, broadcast_shape) for a in np_arrays
    ]
    
    if res is None:
        res = np.empty(broadcast_shape, dtype=np.float64)
    
    for index in np.ndindex(*broadcast_shape):
        res[index] = reduce(func, [a[index] for a in broadcasted_arrays])

    return res


a = np.random.normal(size=(2, 2))
b = np.random.normal(size=(2,))
c = np.random.normal(size=(4, 2, 1))
d = np.random.normal(size=(1, 2))

np_func = np.vectorize(func)
np_res = np_func(a, b, c, d)
res = dev_test(a, b, c, d)
assert np.array_equal(res, np_res)
```
Essentially implementing the above in `numba`.
codecov[bot](2021-09-24 20:51:16):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/595?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#595](https://codecov.io/gh/aesara-devs/aesara/pull/595?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f53ddae) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/62d2c048ac86d4b3e4a4480f72aa95f0af58548a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (62d2c04) will **decrease** coverage by `0.01%`.
> The diff coverage is `43.75%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/595/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/595?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #595      +/-   ##
==========================================
- Coverage   76.96%   76.95%   -0.02%     
==========================================
  Files         156      156              
  Lines       46785    46801      +16     
  Branches    10247    10254       +7     
==========================================
+ Hits        36010    36017       +7     
- Misses       8194     8202       +8     
- Partials     2581     2582       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/595?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/595/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `93.54% <43.75%> (-3.97%)` | :arrow_down: |

ericmjl(2021-09-26 21:09:49):@ricardoV94 and @twiecki sorry to bug you guys about this, but do you know if I've structured the test case correctly here? I think I have the input and output to FunctionGraph done right, but I think I might be missing something as I'm basically doing pattern-matching in my head right now.
ericmjl(2021-09-29 10:24:55):Hmmm, running tests locally I appear to be running into import errors. I'm a bit hesitant to dig in and find out which imports should be used because of my current unfamiliarity with the codebase. @ricardoV94 would you be kind enough to help? 

Here is the error stack trace from running my tests.

<details>
<code><pre>
❯ pytest -k test_erf
============================================================ test session starts ============================================================
platform linux -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-0.13.1
rootdir: /home/ericmjl/github/software/aesara, configfile: setup.cfg, testpaths: tests/
plugins: xdist-2.4.0, forked-1.3.0, cov-2.12.1
collected 6589 items / 9 errors / 6589 deselected / 4 skipped                                                                               

================================================================== ERRORS ===================================================================
_____________________________________________ ERROR collecting tests/gpuarray/test_basic_ops.py _____________________________________________
ImportError while importing test module '/home/ericmjl/github/software/aesara/tests/gpuarray/test_basic_ops.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../anaconda/envs/aesara-dev/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/gpuarray/test_basic_ops.py:32: in <module>
    from tests.tensor.test_basic import (
E   ImportError: cannot import name 'TestComparison' from 'tests.tensor.test_basic' (/home/ericmjl/github/software/aesara/tests/tensor/test_basic.py)
_______________________________________________ ERROR collecting tests/gpuarray/test_blas.py ________________________________________________
ImportError while importing test module '/home/ericmjl/github/software/aesara/tests/gpuarray/test_blas.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../anaconda/envs/aesara-dev/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/gpuarray/test_blas.py:32: in <module>
    from tests.gpuarray.test_basic_ops import makeTester, rand
tests/gpuarray/test_basic_ops.py:32: in <module>
    from tests.tensor.test_basic import (
E   ImportError: cannot import name 'TestComparison' from 'tests.tensor.test_basic' (/home/ericmjl/github/software/aesara/tests/tensor/test_basic.py)
_____________________________________________ ERROR collecting tests/gpuarray/test_elemwise.py ______________________________________________
ImportError while importing test module '/home/ericmjl/github/software/aesara/tests/gpuarray/test_elemwise.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../anaconda/envs/aesara-dev/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/gpuarray/test_elemwise.py:31: in <module>
    from tests.gpuarray.test_basic_ops import rand_gpuarray
tests/gpuarray/test_basic_ops.py:32: in <module>
    from tests.tensor.test_basic import (
E   ImportError: cannot import name 'TestComparison' from 'tests.tensor.test_basic' (/home/ericmjl/github/software/aesara/tests/tensor/test_basic.py)
______________________________________________ ERROR collecting tests/gpuarray/test_linalg.py _______________________________________________
ImportError while importing test module '/home/ericmjl/github/software/aesara/tests/gpuarray/test_linalg.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../anaconda/envs/aesara-dev/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/gpuarray/test_linalg.py:30: in <module>
    from tests.gpuarray.test_basic_ops import random
tests/gpuarray/test_basic_ops.py:32: in <module>
    from tests.tensor.test_basic import (
E   ImportError: cannot import name 'TestComparison' from 'tests.tensor.test_basic' (/home/ericmjl/github/software/aesara/tests/tensor/test_basic.py)
________________________________________________ ERROR collecting tests/gpuarray/test_opt.py ________________________________________________
ImportError while importing test module '/home/ericmjl/github/software/aesara/tests/gpuarray/test_opt.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../anaconda/envs/aesara-dev/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/gpuarray/test_opt.py:55: in <module>
    from tests.tensor.test_basic import TestSpecifyShape
E   ImportError: cannot import name 'TestSpecifyShape' from 'tests.tensor.test_basic' (/home/ericmjl/github/software/aesara/tests/tensor/test_basic.py)
______________________________________________ ERROR collecting tests/gpuarray/test_others.py _______________________________________________
ImportError while importing test module '/home/ericmjl/github/software/aesara/tests/gpuarray/test_others.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../anaconda/envs/aesara-dev/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/gpuarray/test_others.py:17: in <module>
    from tests.tensor import test_opt
E   ImportError: cannot import name 'test_opt' from 'tests.tensor' (/home/ericmjl/github/software/aesara/tests/tensor/__init__.py)
_______________________________________________ ERROR collecting tests/gpuarray/test_pool.py ________________________________________________
ImportError while importing test module '/home/ericmjl/github/software/aesara/tests/gpuarray/test_pool.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../anaconda/envs/aesara-dev/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/gpuarray/test_pool.py:24: in <module>
    from tests.gpuarray.test_basic_ops import random
tests/gpuarray/test_basic_ops.py:32: in <module>
    from tests.tensor.test_basic import (
E   ImportError: cannot import name 'TestComparison' from 'tests.tensor.test_basic' (/home/ericmjl/github/software/aesara/tests/tensor/test_basic.py)
_____________________________________________ ERROR collecting tests/gpuarray/test_reduction.py _____________________________________________
ImportError while importing test module '/home/ericmjl/github/software/aesara/tests/gpuarray/test_reduction.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../anaconda/envs/aesara-dev/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/gpuarray/test_reduction.py:15: in <module>
    from tests.gpuarray.test_basic_ops import rand_gpuarray
tests/gpuarray/test_basic_ops.py:32: in <module>
    from tests.tensor.test_basic import (
E   ImportError: cannot import name 'TestComparison' from 'tests.tensor.test_basic' (/home/ericmjl/github/software/aesara/tests/tensor/test_basic.py)
_______________________________________________ ERROR collecting tests/gpuarray/test_type.py ________________________________________________
ImportError while importing test module '/home/ericmjl/github/software/aesara/tests/gpuarray/test_type.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../anaconda/envs/aesara-dev/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/gpuarray/test_type.py:15: in <module>
    from tests.gpuarray.test_basic_ops import rand_gpuarray
tests/gpuarray/test_basic_ops.py:32: in <module>
    from tests.tensor.test_basic import (
E   ImportError: cannot import name 'TestComparison' from 'tests.tensor.test_basic' (/home/ericmjl/github/software/aesara/tests/tensor/test_basic.py)
============================================================= warnings summary ==============================================================
../../../anaconda/envs/aesara-dev/lib/python3.9/site-packages/pygpu/dtypes.py:74
  /home/ericmjl/anaconda/envs/aesara-dev/lib/python3.9/site-packages/pygpu/dtypes.py:74: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    register_dtype(np.bool, ["ga_bool", "bool"])

tests/gpuarray/test_extra_ops.py:45
  /home/ericmjl/github/software/aesara/tests/gpuarray/test_extra_ops.py:45: PytestUnknownMarkWarning: Unknown pytest.mark.parametrized - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.parametrized("mode", ["mul", "add"])

tests/gpuarray/test_extra_ops.py:54
  /home/ericmjl/github/software/aesara/tests/gpuarray/test_extra_ops.py:54: PytestUnknownMarkWarning: Unknown pytest.mark.parametrized - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.parametrized("mode", ["mul", "add"])

tests/gpuarray/test_extra_ops.py:85
  /home/ericmjl/github/software/aesara/tests/gpuarray/test_extra_ops.py:85: PytestUnknownMarkWarning: Unknown pytest.mark.parametrized - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.parametrized("mode", ["mul", "add"])

tests/gpuarray/test_extra_ops.py:116
  /home/ericmjl/github/software/aesara/tests/gpuarray/test_extra_ops.py:116: PytestUnknownMarkWarning: Unknown pytest.mark.parametrized - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.parametrized("mode", ["mul", "add"])

tests/gpuarray/test_extra_ops.py:147
  /home/ericmjl/github/software/aesara/tests/gpuarray/test_extra_ops.py:147: PytestUnknownMarkWarning: Unknown pytest.mark.parametrized - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.parametrized("mode", ["mul", "add"])

tests/gpuarray/test_extra_ops.py:170
  /home/ericmjl/github/software/aesara/tests/gpuarray/test_extra_ops.py:170: PytestUnknownMarkWarning: Unknown pytest.mark.parametrized - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.parametrized("mode", ["mul", "add"])

tests/gpuarray/test_extra_ops.py:211
  /home/ericmjl/github/software/aesara/tests/gpuarray/test_extra_ops.py:211: PytestUnknownMarkWarning: Unknown pytest.mark.parametrized - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.parametrized("mode", ["mul", "add"])

tests/gpuarray/test_extra_ops.py:263
  /home/ericmjl/github/software/aesara/tests/gpuarray/test_extra_ops.py:263: PytestUnknownMarkWarning: Unknown pytest.mark.parametrized - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.parametrized("mode", ["mul", "add"])

aesara/graph/utils.py:148
  /home/ericmjl/github/software/aesara/aesara/graph/utils.py:148: PytestCollectionWarning: cannot collect test class 'TestValueError' because it has a __init__ constructor (from: tests/graph/test_op.py)
    class TestValueError(Exception):

-- Docs: https://docs.pytest.org/en/stable/warnings.html
========================================================== short test summary info ==========================================================
ERROR tests/gpuarray/test_basic_ops.py
ERROR tests/gpuarray/test_blas.py
ERROR tests/gpuarray/test_elemwise.py
ERROR tests/gpuarray/test_linalg.py
ERROR tests/gpuarray/test_opt.py
ERROR tests/gpuarray/test_others.py
ERROR tests/gpuarray/test_pool.py
ERROR tests/gpuarray/test_reduction.py
ERROR tests/gpuarray/test_type.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 9 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
======================================== 4 skipped, 6589 deselected, 10 warnings, 9 errors in 20.31s ========================================
</pre></code>
</details>

I suspect this might take a few rounds of editing, appreciate the help here!
ricardoV94(2021-09-29 13:46:57):I pushed a commit that fixes the test. It should use the `aesara.tensor.erf` and not the class in `aesara.scalar.Erf` as you had originally. Also passed `[5.0]` as a test input.

I can run the test locally via `pytest tests/link/test_jax.py -k "test_erf"`
codecov[bot](2021-09-29 16:01:37):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/596?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#596](https://codecov.io/gh/aesara-devs/aesara/pull/596?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f48046d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/03858395328baff9fc3adc3a445698f3468fa9ed?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0385839) will **decrease** coverage by `0.03%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head f48046d differs from pull request most recent head 5357cf6. Consider uploading reports for the commit 5357cf6 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/596/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/596?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #596      +/-   ##
==========================================
- Coverage   77.00%   76.97%   -0.04%     
==========================================
  Files         157      156       -1     
  Lines       46877    46802      -75     
  Branches    10261    10248      -13     
==========================================
- Hits        36098    36026      -72     
+ Misses       8196     8194       -2     
+ Partials     2583     2582       -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/596?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `79.31% <100.00%> (+0.56%)` | :arrow_up: |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `81.91% <0.00%> (-0.07%)` | :arrow_down: |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.78% <0.00%> (-0.07%)` | :arrow_down: |
| [aesara/link/numba/dispatch/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvX19pbml0X18ucHk=) | `100.00% <0.00%> (ø)` | |
| [aesara/link/numba/dispatch/scan.py](https://codecov.io/gh/aesara-devs/aesara/pull/596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2Nhbi5weQ==) | | |

ericmjl(2021-09-30 02:26:02):Wonderful, thank you @ricardoV94. cc: @twiecki.

This is going to be a good template for me to do other erf-related functions. Thank you! :smile:
ricardoV94(2021-09-30 07:04:29):I updated the docstrings of `compare_jax_and_py` helper function to be more clear, and squashed the other commits. 

Should be ready for review
ericmjl(2021-10-06 23:08:33):@ricardoV94 could you run the tests, please? Being a first-time contributor I'll need a maintainer to approve running workflows.
brandonwillard(2021-10-09 19:25:51):I just updated the commits, so, when/if the tests pass, we can merge.
ericmjl(2021-10-10 00:56:09):Thanks @brandonwillard!
brandonwillard(2021-10-10 01:19:32):Thanks for the PR!
ricardoV94(2021-09-29 03:18:09):```suggestion
def jax_funcify_Erf(op, **kwargs):
```
Optional, just to standardize with other methods in the module

ricardoV94(2021-09-29 03:24:23):I think the second argument should be a numeric (non-symbolic) input with which the output of python and Jax graphs are compared.
ricardoV94(2021-09-29 03:27:14):We should probably update the docstrings for `inputs` and even the name to something like `test_inputs`
ricardoV94(2021-09-29 03:35:27):```suggestion
    fg = FunctionGraph([x], [out])
```

I think the inputs have to be lists, but I am not sure. Does the test pass locally for you?

ricardoV94(2021-10-02 10:52:39):Should we use the naive operations in the meanwhile? https://www.mathworks.com/help/matlab/ref/erfcx.html
ericmjl(2021-10-02 12:39:37):I dug around on the internet; the naive implementation can work but we'll probably very frequently run into underflow and overflow issues. (The matlab reference says so too.) 

I also looked on the JAX issue tracker. [Issue #1987](https://github.com/google/jax/issues/1987) is still open, but they're looking for (1) a license-compatible implementation (see [here](https://github.com/google/jax/pull/7372)) that is (2) not the naive version (see [here](https://github.com/google/jax/pull/3856)). 

In theory, we could copy the code from [Stack Overflow](https://stackoverflow.com/questions/39777360/accurate-computation-of-scaled-complementary-error-function-erfcx/39777361#39777361) but I'm not sure if it'll be license-compatible for us either.
ricardoV94(2021-10-02 12:52:40):I think the SO license is fine for us, we just have to add a link in comment or something like that. But we can ask around to be sure
ericmjl(2021-10-02 20:02:52):Intuitively, this feels like an issue to raise and should be excluded from this PR, especially if it pertains to code licenses.
ricardoV94(2021-10-02 20:14:41):Definitely. We don't need to decide on this for the PR.

I am not sure about leaving the commented blocks in though
ericmjl(2021-10-06 11:40:29):Personal opinion: leaving notes behind is better than not leaving notes behind, otherwise context is lost. But you guys are long-term maintainers, so I'll follow your lead here.
brandonwillard(2021-10-07 04:48:35):We can leave this as a draft until that's implemented in JAX, or continue with the rest and open an issue for the unimplemented function.  In the meantime, we don't need to add the commented-out implementation.
ericmjl(2021-10-08 21:49:35):Okie dokes, I will take out the commented-out implementation and raise issues instead.
ferrine(2021-09-28 11:13:04):@brandonwillard I'm planning to do small incremental PRs for the #597 issue, this one is ready to merge
codecov[bot](2021-09-29 11:50:15):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/599?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#599](https://codecov.io/gh/aesara-devs/aesara/pull/599?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7574fb2) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/6fe9f839e7d3e90e00b0fb71094fb9a3a3d9a9c4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (6fe9f83) will **increase** coverage by `0.00%`.
> The diff coverage is `94.02%`.

> :exclamation: Current head 7574fb2 differs from pull request most recent head b4c8fb0. Consider uploading reports for the commit b4c8fb0 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/599/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/599?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #599   +/-   ##
=======================================
  Coverage   78.36%   78.36%           
=======================================
  Files         152      152           
  Lines       47693    47742   +49     
  Branches    10880    10879    -1     
=======================================
+ Hits        37373    37415   +42     
- Misses       7772     7778    +6     
- Partials     2548     2549    +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/599?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/599/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `96.00% <93.27%> (-1.64%)` | :arrow_down: |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/599/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.01% <100.00%> (+0.22%)` | :arrow_up: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/599/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `85.14% <0.00%> (-0.08%)` | :arrow_down: |
| [aesara/link/numba/dispatch/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/599/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZXh0cmFfb3BzLnB5) | `98.09% <0.00%> (-0.06%)` | :arrow_down: |

kc611(2021-11-23 19:00:49):Yeah, so if you have a look at the `create_elemwise_reducer`, we actually do make custom `for` loops for the kind of input array that we're given. Actually back when I built this I made it specifically for the `reduce` or `at` kind of functions so it's basically an custom vectorized implementation minus all the broadcasting logic for multiple inputs.

Anyways,  the broadcasting logic can surely be added, but the main issue here (and I think @fanshi118 and I discussed a bit about it during that time) is that even with custom loops built entirely in Numba we weren't approaching Numpy performance whenever we scaled up the arrays. 

For reference this is the gist that we benchmarked. 
https://gist.github.com/kc611/22760dca36cc9062a401da89ee60ced8
(Updated it a bit to remove the parallelization stuff that we added for extra performance)
brandonwillard(2021-11-23 19:28:00):> Anyways, the broadcasting logic can surely be added, but the main issue here (and I think @fanshi118 and I discussed a bit about it during that time) is that even with custom loops built entirely in Numba we weren't approaching Numpy performance whenever we scaled up the arrays.
> 
> For reference this is the gist that we benchmarked. https://gist.github.com/kc611/22760dca36cc9062a401da89ee60ced8 (Updated it a bit to remove the parallelization stuff that we added for extra performance)

I'm not sure I understand that Gist, but the example Gist in my earlier comment appears to demonstrate NumPy-comparable results for at least `axis=0`.  

We should start by exending that example with a simple handwritten Numba implementation for `axis=1`&mdash;one that performs at least as well as NumPy, of course.  If that's not possible, we should confirm as much and report to the Numba folk.

After that, we can consider how to generalize the two handwritten implementations.
kc611(2021-11-23 19:43:21):I assume here that by handwritten Numba implementation you mean a for loop in which the indices of the inner loop are manually added. For a two dimensional array with axis = 1 that'd be `a[i][j]` where j is the inner loop while i is the outer loop variable.  

If so then the gist that I mentioned above does exactly that, It generalizes the outer loops of vectorization using ndindex and the inner-most loop using a simple for loop. In fact it's more or less how Numpy itself does the generalization. Except we use a string based function generator. 

Anyways, we do even have a handwritten gist for fixed 2/3 dimension array on which we tested all this before we actually generalized it like that. It won't make much of a difference though since the functions generated in both cases are exactly the same. 

Link to fixed dimension loop gist: https://gist.github.com/kc611/7cc0451c6b5b53c9ce46fdc57c6a0da1
(Updated to remove the indexing logic in favor of `np.ndindex`)
brandonwillard(2021-11-23 22:50:29):I've updated the [`np.max.reduce` example Gist](https://gist.github.com/brandonwillard/0302f061fc9f89a65b5517170347a6f0) to include all the approaches we've considered.

> If so then the gist that I mentioned above does exactly that, It generalizes the outer loops of vectorization using ndindex and the inner-most loop using a simple for loop.

Your Gist includes some generalizations that are only important to us; I was talking about a very simple Gist that only focuses on the very narrow `np.max.reduce` with `axis=1` case and includes all the timings/relative benchmarks, so that it's easier for others (e.g. the Numba folk) to follow.

brandonwillard(2021-12-13 05:10:44):To move forward, we might need to start implementing custom conversions for specific `CAReduce` `Op`s and&mdash;possibly&mdash;`axis` values.  We already have an implementation for `max`, so we'll need to time the others like we did for that, and find acceptable implementations for those, as well.

By the way, I've updated the `max` [example Gist](https://gist.github.com/brandonwillard/0302f061fc9f89a65b5517170347a6f0); it now contains some helpful debug print-outs of the CFG plots for the generated LLVM IR.  

Those plots seem to imply that the slow version performs unnecessary writes to the output array (i.e. `res[i] = res[i]` when `res[i] >= x[i, j]`).  Apparently the unnecessary `else` clause in `custom_max` isn't being removed during optimization.

Anyway, we can get past this pretty easily with a custom implementation.

kc611(2021-12-22 14:03:07):The current failing test seems to be some issue with boolean typecasting in Numba.

```python
import numpy as np
import numba

def careduce_axis(x):
    res_shape = 1
    res = np.full(res_shape, True, dtype=np.bool)
    x = x.astype(np.bool)
    for idx_arr in np.ndindex(res_shape):
        for i in range(x.shape[0]):
            res[0] = res[0] & x[i]
    return res

numba_careduce_axis = numba.njit(careduce_axis)

x = np.random.random(10)

careduce_axis(x) # Works
numba_careduce_axis(x) # Doesn't work 
```
kc611(2022-01-01 17:20:57):Is there anything that further needs to be done in this PR ?
brandonwillard(2022-01-19 00:40:39):I changed the benchmark test so that it necessarily uses only the `Max` `Op`.  I also 
created a follow-up issue about cleaning up the `MaxAndArgmax` `Op` situation (i.e. #765).

The results of benchmarking only the `Max` `Op` are within the same range of Numba vs. NumPy timing values as [the case study Gist](https://gist.github.com/brandonwillard/0302f061fc9f89a65b5517170347a6f0#file-numba-careduce-mwe-py), so the results are acceptable.
kc611(2021-09-28 14:55:09):We can also make this faster in case of last axes by replacing the `reduce_elemwise_def_src` for that particular case by something that directly uses corresponding Numpy reduce `ufuncs` over last axis of array instead of looping over the last axis. (So that we take advantage of C-order similar to Numpy). 
kc611(2021-09-28 14:58:16):One question with his approach is how exactly should we perform the elementary operation over here. Having a `np.add` for instance would add an extra overhead over here, no?
kc611(2022-01-03 16:56:22):Looks like the performance isn't that good with this implementation either. 

(I suspect it might have something to do with the `dtype` casting we're doing at the end of `CAReduce` functions in Numba)
brandonwillard(2022-01-03 17:35:18):We might need to pre-compile those `CAReduce` loops using [`use_optimized_cheap_pass`](https://gist.github.com/brandonwillard/0302f061fc9f89a65b5517170347a6f0#file-numba-careduce-mwe-py-L96).
brandonwillard(2022-01-03 17:44:08):We need to use [`timeit`](https://docs.python.org/3/library/timeit.html) for these kinds of comparisons; it has a few important considerations for performance comparisons.  

(Also, see [`time.perf_counter`](https://docs.python.org/3/library/time.html#time.perf_counter) as a slightly better alternative to `time.time`.)
oscargus(2022-01-04 11:53:42):```suggestion
def run_numpy_benchmark(fgraph, numpy_fn, inputs, numpy_inputs, performance_factor=1):
```
(And correspondingly below.)
kc611(2022-01-07 17:05:32):I just pushed changes adding that. But it doesn't look like it's making any difference in performance, can you confirm if it's correctly implemented ? (with respect to the `exec` interface) 
brandonwillard(2022-01-18 16:52:35):The context manager needs to be used when Numba JIT compiles a function, but it looks like it's been added to the Python source string compilation utility.
brandonwillard(2022-01-18 16:54:26):This is a general utility module for linking, so we can't put this Numba-specific code here.
brandonwillard(2022-01-18 16:55:34):Same here; this function is supposed to be applicable to _any_ string-to-Python-code conversion, so we can't add Numba-specific code to it.
codecov[bot](2021-10-01 00:42:44):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/601?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#601](https://codecov.io/gh/aesara-devs/aesara/pull/601?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (04aa919) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/62d2c048ac86d4b3e4a4480f72aa95f0af58548a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (62d2c04) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/601/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/601?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #601   +/-   ##
=======================================
  Coverage   76.96%   76.96%           
=======================================
  Files         156      156           
  Lines       46785    46785           
  Branches    10247    10247           
=======================================
  Hits        36010    36010           
  Misses       8194     8194           
  Partials     2581     2581           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/601?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/601/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vdXRpbHMucHk=) | `87.25% <100.00%> (ø)` | |

codecov[bot](2021-10-01 03:09:36):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/602?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#602](https://codecov.io/gh/aesara-devs/aesara/pull/602?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ad037ce) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/61c3e37bc2a84f01b04142457e8384140b44b769?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (61c3e37) will **decrease** coverage by `0.00%`.
> The diff coverage is `80.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/602/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/602?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #602      +/-   ##
==========================================
- Coverage   76.96%   76.96%   -0.01%     
==========================================
  Files         156      156              
  Lines       46785    46789       +4     
  Branches    10247    10248       +1     
==========================================
+ Hits        36010    36013       +3     
  Misses       8194     8194              
- Partials     2581     2582       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/602?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/602/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `85.12% <80.00%> (-0.03%)` | :arrow_down: |

codecov[bot](2021-10-04 13:37:41):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/607?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#607](https://codecov.io/gh/aesara-devs/aesara/pull/607?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0b83dc6) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e51e87870f0a67fcfe1679e0aa75b5d3fbc0e995?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e51e878) will **increase** coverage by `0.03%`.
> The diff coverage is `95.45%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/607/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/607?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #607      +/-   ##
==========================================
+ Coverage   76.96%   77.00%   +0.03%     
==========================================
  Files         156      157       +1     
  Lines       46789    46877      +88     
  Branches    10248    10261      +13     
==========================================
+ Hits        36013    36098      +85     
- Misses       8194     8196       +2     
- Partials     2582     2583       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/607?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/scan.py](https://codecov.io/gh/aesara-devs/aesara/pull/607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2Nhbi5weQ==) | `95.23% <95.23%> (ø)` | |
| [aesara/link/numba/dispatch/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvX19pbml0X18ucHk=) | `100.00% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.85% <100.00%> (+0.06%)` | :arrow_up: |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `81.98% <0.00%> (+0.06%)` | :arrow_up: |

kc611(2021-10-05 15:57:26):One of the current issue with this particular implementation is that when we provide the `n_steps` explicitly , it is provided to the Numba function as an 0-d array unlike when `scan` derives it on its own (the case in which it is provided as an `int`). Hence during initial compilation's type-checking the code that follows the `n_steps` in the function produced i.e. ```for i in range(n_steps)``` fails. Since Numba doesn't have an inbuilt type for range with 0-d array. 
brandonwillard(2021-10-05 18:07:00):Sounds like `.item` is needed when it's a 0d array, and not otherwise.  There are some existing Numba conversions that do this, as well.
codecov[bot](2021-10-10 07:13:40):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/610?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#610](https://codecov.io/gh/aesara-devs/aesara/pull/610?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1144dc6) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2dbeb7816975f7683f045b6464f6d477c1facc8f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2dbeb78) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/610/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/610?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #610   +/-   ##
=======================================
  Coverage   77.01%   77.01%           
=======================================
  Files         157      157           
  Lines       46890    46896    +6     
  Branches    10261    10262    +1     
=======================================
+ Hits        36111    36117    +6     
  Misses       8196     8196           
  Partials     2583     2583           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/610?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/610/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvdGVuc29yX2Jhc2ljLnB5) | `97.46% <100.00%> (+0.20%)` | :arrow_up: |

ricardoV94(2021-10-14 09:14:49):Black didn't like the formatting. I force pushed the changes for you.
codecov[bot](2021-10-14 10:19:39):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/613?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#613](https://codecov.io/gh/aesara-devs/aesara/pull/613?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9b79151) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/29032f3483c8c36fa5575fdac07b62cea644320b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (29032f3) will **not change** coverage.
> The diff coverage is `0.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/613/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #613   +/-   ##
=======================================
  Coverage   77.01%   77.01%           
=======================================
  Files         157      157           
  Lines       46896    46896           
  Branches    10262    10262           
=======================================
  Hits        36117    36117           
  Misses       8196     8196           
  Partials     2583     2583           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/613/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `48.83% <0.00%> (ø)` | |

ricardoV94(2021-10-13 17:12:02):```suggestion
        if (
            not any("arm" in flag or "riscv" in flag for flag in cxxflags) 
            and not any(arch in platform.machine() for arch in ["arm", "aarch", "riscv"])
        ):
```

Something like that?
alexfanqi(2021-10-14 06:14:21):Thanks so much! shouldn't have made that mistake.
ferrine(2021-10-14 10:57:18):@brandonwillard libgpuarray appears in interesting places:
for example, here
https://github.com/aesara-devs/aesara/blob/main/aesara/compile/profiling.py#L911
It does something that makes sense but not working anymore. 

Do you think it is better to just remove this functionality?

brandonwillard(2021-10-14 15:10:42):> Do you think it is better to just remove this functionality?

In general, yes.  The way that GPU code has been integrated into non-GPU code definitely needs to be reconsidered entirely, so don't hesitate to scrap most/all of that.
ferrine(2021-10-14 15:30:39):ok, I'll remove all the mentions of GPU then entirely, so you would never think it is usable with GPU. Once we decide to add GPU backends, we'll have to work on interfaces
ferrine(2021-10-27 11:25:18):Another random note.
not sure what we do here

https://github.com/aesara-devs/aesara/blob/main/aesara/scan/scan_perform.pyx#L354
ferrine(2021-10-27 11:39:31):GPU logic is so tight in the codebase so it becomes unnecessarily complicated.
brandonwillard(2021-10-27 18:10:26):> Another random note. not sure what we do here
> 
> https://github.com/aesara-devs/aesara/blob/main/aesara/scan/scan_perform.pyx#L354

That doesn't look like a direct dependency on `libgpuarray`, so we can ignore it for now.  Just create a separate issue for updating that `Scan` code, so we don't forget.
codecov[bot](2022-03-11 18:48:24):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/614?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#614](https://codecov.io/gh/aesara-devs/aesara/pull/614?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (cdd9df4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c803c67e4e334125eb8918a67a89c006f567a069?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c803c67) will **increase** coverage by `0.29%`.
> The diff coverage is `61.11%`.

> :exclamation: Current head cdd9df4 differs from pull request most recent head d23cf2c. Consider uploading reports for the commit d23cf2c to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/614/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/614?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #614      +/-   ##
==========================================
+ Coverage   78.55%   78.85%   +0.29%     
==========================================
  Files         154      152       -2     
  Lines       47971    47631     -340     
  Branches    10899    10841      -58     
==========================================
- Hits        37686    37561     -125     
+ Misses       7740     7565     -175     
+ Partials     2545     2505      -40     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/614?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/function/pfunc.py](https://codecov.io/gh/aesara-devs/aesara/pull/614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `84.23% <ø> (ø)` | |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `80.05% <0.00%> (+0.54%)` | :arrow_up: |
| [aesara/compile/sharedvalue.py](https://codecov.io/gh/aesara-devs/aesara/pull/614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvc2hhcmVkdmFsdWUucHk=) | `77.46% <ø> (ø)` | |
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `66.48% <ø> (-5.21%)` | :arrow_down: |
| [aesara/d3viz/d3viz.py](https://codecov.io/gh/aesara-devs/aesara/pull/614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2Qzdml6L2Qzdml6LnB5) | `23.68% <ø> (ø)` | |
| [aesara/d3viz/formatting.py](https://codecov.io/gh/aesara-devs/aesara/pull/614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2Qzdml6L2Zvcm1hdHRpbmcucHk=) | `12.88% <ø> (ø)` | |
| [aesara/gradient.py](https://codecov.io/gh/aesara-devs/aesara/pull/614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `77.46% <ø> (ø)` | |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `88.36% <ø> (ø)` | |
| [aesara/graph/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `93.44% <ø> (ø)` | |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `49.85% <ø> (-0.01%)` | :arrow_down: |
| ... and [79 more](https://codecov.io/gh/aesara-devs/aesara/pull/614/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

twiecki(2022-03-14 10:01:43):Can't believe the code-base is getting a smooth 50k LOC lighter.
ferrine(2022-03-14 11:17:33):@twiecki this PR is going to be a huge mess. I have little idea how to structure the changes. GPU is interlinked with every single file and function. There are no delegation and fallback functions, just if statements inside functions. For now, I follow this approach supported by @brandonwillard 

> The way that GPU code has been integrated into non-GPU code definitely needs to be reconsidered entirely, so don't hesitate to scrap most/all of that.

Unfortunately, I can't create nice small commits as it would take forever. 
ferrine(2022-03-17 09:45:03):@brandonwillard I removed a lot of stuff related to GPUs, modified docstring to at least represent it does not work on GPU. There were places that were claiming they work for GPU so I removed these mentions all at once because we do not support that anymore. Same for tests, I worked on making them CPU only and verified it is impossible to misspecify the cuda/gpu device in config. 

Is there anything else left to refactor?
twiecki(2022-04-04 07:56:42):While I didn't go through it line-by-line I have kept checking things periodically and skimmed it and didn't spot anything that looked misplaced :+1:. Hope we can merge this soon so that we don't have to keep solving conflicts.
brandonwillard(2022-04-07 00:37:35):All right, we have to get this through before the need to constantly rebase grows.

@ferrine, thanks a lot; this was a huge push!
ferrine(2022-04-07 12:46:12):Great
codecov[bot](2021-10-15 12:08:45):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/615?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#615](https://codecov.io/gh/aesara-devs/aesara/pull/615?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (093c107) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c2e3dbb1feb94d943cd066b2c70e23952ac87639?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c2e3dbb) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 093c107 differs from pull request most recent head eb12443. Consider uploading reports for the commit eb12443 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/615/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/615?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #615   +/-   ##
=======================================
  Coverage   77.01%   77.01%           
=======================================
  Files         157      157           
  Lines       46896    46905    +9     
  Branches    10262    10263    +1     
=======================================
+ Hits        36117    36126    +9     
  Misses       8196     8196           
  Partials     2583     2583           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/615?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/615/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `93.05% <100.00%> (+0.19%)` | :arrow_up: |

brandonwillard(2021-10-15 16:00:04):You could use only this test case and parameterize it on different values for `a`; that would get the required coverage for both branches of the `if` condition implemented in Numba.
brandonwillard(2021-10-16 13:37:41):This might be more efficient, but I'm not entirely sure:
```suggestion
        return res if n_outs > 1 else res.item()
```

Also, the last `if` shouldn't need to be evaluated at run-time, and I'm assuming either the Numba or LLVM optimizations will handle that; otherwise, we could manually handle that here or at the Numba type level.

Regarding the latter approach, there should be a `to_scalar` helper function in Aesara.
kc611(2022-01-01 17:23:00):I think we can close this PR. If I find any more bugs within Numba implementations, I'll simply report as separate issues.
codecov[bot](2021-10-21 19:36:22):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/625?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#625](https://codecov.io/gh/aesara-devs/aesara/pull/625?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (cda0357) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0f8c81c379c321af2ae6062ceb3c3d138bd6c93c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0f8c81c) will **increase** coverage by `0.00%`.
> The diff coverage is `86.66%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/625/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/625?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #625   +/-   ##
=======================================
  Coverage   77.02%   77.02%           
=======================================
  Files         157      157           
  Lines       46915    46918    +3     
  Branches    10265    10266    +1     
=======================================
+ Hits        36136    36139    +3     
  Misses       8196     8196           
  Partials     2583     2583           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/625?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/625/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.54% <86.66%> (+0.03%)` | :arrow_up: |

brandonwillard(2021-10-22 15:06:59):I don't think we want to start returning NumPy scalars.  We want to use native scalars instead; otherwise, we'll  likely end up creating NumPy arrays in many different places and lose performance.
codecov[bot](2021-10-21 20:04:54):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/626?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#626](https://codecov.io/gh/aesara-devs/aesara/pull/626?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8dd10c5) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0f8c81c379c321af2ae6062ceb3c3d138bd6c93c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0f8c81c) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/626/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/626?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #626   +/-   ##
=======================================
  Coverage   77.02%   77.02%           
=======================================
  Files         157      157           
  Lines       46915    46917    +2     
  Branches    10265    10266    +1     
=======================================
+ Hits        36136    36138    +2     
  Misses       8196     8196           
  Partials     2583     2583           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/626?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/626/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `93.21% <100.00%> (+0.04%)` | :arrow_up: |

brandonwillard(2021-10-22 15:00:31):Is this line necessary?
brandonwillard(2021-10-22 15:02:24):Is `allow_input_downcasts` being used?
kc611(2021-10-22 15:09:28):Looks like I pushed the wrong stuff, corrected it in latest commit.
kc611(2021-10-22 15:09:37):Corrected it in latest commit.
codecov[bot](2021-10-21 20:31:31):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/627?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#627](https://codecov.io/gh/aesara-devs/aesara/pull/627?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (00ab327) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e6c2fbc9afbf82969fba3dc3fc194fa1df2710f4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e6c2fbc) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/627/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/627?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #627   +/-   ##
=======================================
  Coverage   77.02%   77.02%           
=======================================
  Files         157      157           
  Lines       46911    46915    +4     
  Branches    10265    10265           
=======================================
+ Hits        36132    36136    +4     
  Misses       8196     8196           
  Partials     2583     2583           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/627?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2NhbGFyLnB5) | `97.61% <100.00%> (+0.11%)` | :arrow_up: |

codecov[bot](2021-10-22 17:54:56):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/628?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#628](https://codecov.io/gh/aesara-devs/aesara/pull/628?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e7d3b6b) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c2e3dbb1feb94d943cd066b2c70e23952ac87639?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c2e3dbb) will **increase** coverage by `0.00%`.
> The diff coverage is `95.00%`.

> :exclamation: Current head e7d3b6b differs from pull request most recent head d183385. Consider uploading reports for the commit d183385 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/628/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/628?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #628   +/-   ##
=======================================
  Coverage   77.01%   77.02%           
=======================================
  Files         157      157           
  Lines       46896    46915   +19     
  Branches    10262    10265    +3     
=======================================
+ Hits        36117    36136   +19     
  Misses       8196     8196           
  Partials     2583     2583           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/628?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/628/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `48.83% <0.00%> (ø)` | |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/628/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `93.17% <100.00%> (+0.31%)` | :arrow_up: |
| [aesara/link/numba/dispatch/scan.py](https://codecov.io/gh/aesara-devs/aesara/pull/628/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2Nhbi5weQ==) | `95.45% <100.00%> (+0.21%)` | :arrow_up: |

ricardoV94(2021-10-25 17:12:52):> The `axis` argument _can_ be symbolic, so this change isn't consistent.

I tried this locally with a `axis = at.scalar("axis")`... Did not realize the `TypeError` that is raised was from the `dtype` and not the being symbolic.
ricardoV94(2021-10-25 17:45:20):Reevaluating:

1. That explicit `IndexError` does not seem necessary, JAX would raise it anyway
2. JAX cannot take symbolic (or variable) axis arguments, (before or after omnistaging). We should probably try to inform the user but that's besides the point of this PR. https://jax.readthedocs.io/en/latest/errors.html#jax.errors.ConcretizationTypeError)

It seems we should still remove that `IndexError`, so it at least works for non-symbolic axis in the latest versions.
ricardoV94(2021-10-25 17:57:16):Could we add a mechanism to specify JAX `static_argnums`?

This work fine on the JAX end:

```python
from functools import partial

import numpy as np

from jax import jit
import jax.numpy as jnp

@partial(jit, static_argnums=1)
def func(x, axis):
   return jnp.concatenate([x, x], axis=axis)

func(np.eye(2), 1)
```

Update: It still wouldn't be happy with receiving a numpy_array as input, even if scalar ... so probably too much trouble
codecov[bot](2021-10-25 19:29:18):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/631?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#631](https://codecov.io/gh/aesara-devs/aesara/pull/631?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9bcc953) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/b0ba476b6db26bd57642c47c5ab34764cbeafc2b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b0ba476) will **increase** coverage by `0.00%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/631/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/631?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #631   +/-   ##
=======================================
  Coverage   77.02%   77.03%           
=======================================
  Files         157      157           
  Lines       46929    46926    -3     
  Branches    10268    10267    -1     
=======================================
  Hits        36149    36149           
+ Misses       8196     8193    -3     
  Partials     2584     2584           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/631?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/631/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `79.79% <ø> (+0.48%)` | :arrow_up: |

ricardoV94(2021-10-26 07:05:45):I think that already happens to some extent in these lines: https://github.com/aesara-devs/aesara/blob/2c91b5a30a68c7ca69c57536d564662843971ac8/aesara/link/jax/linker.py#L20-L23

***

Without compiling each function separately I don't see a good way to mark `static_argnums` for non constant values.

Anyway, even this wouldn't suffice because scalar arrays are not accepted as a `static` arguments, due to not being hashable, and we use those internally for symbolic scalars.

```python
@partial(jit, static_argnums=1)
def func(x, axis):
   return jnp.concatenate([x, x], axis=axis)

func(np.eye(2), np.array(0))  # Fails
```


codecov[bot](2021-10-27 23:57:56):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/632?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#632](https://codecov.io/gh/aesara-devs/aesara/pull/632?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (58ea5f3) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2edc7339b8b07ce8119f4edd52f748b58f3af11e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2edc733) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/632/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/632?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #632      +/-   ##
==========================================
+ Coverage   77.03%   77.04%   +0.01%     
==========================================
  Files         157      157              
  Lines       46926    46923       -3     
  Branches    10267    10259       -8     
==========================================
+ Hits        36149    36154       +5     
+ Misses       8193     8187       -6     
+ Partials     2584     2582       -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/632?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `85.34% <100.00%> (+0.23%)` | :arrow_up: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `87.00% <100.00%> (+0.10%)` | :arrow_up: |
| [aesara/tensor/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaGFwZS5weQ==) | `88.82% <100.00%> (+0.09%)` | :arrow_up: |
| [aesara/tensor/sharedvar.py](https://codecov.io/gh/aesara-devs/aesara/pull/632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaGFyZWR2YXIucHk=) | `81.81% <100.00%> (+1.33%)` | :arrow_up: |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `86.90% <100.00%> (+0.17%)` | :arrow_up: |

codecov[bot](2021-10-28 23:07:49):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/635?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#635](https://codecov.io/gh/aesara-devs/aesara/pull/635?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (afefb01) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/cbf91122296b68ee2ad592b2312d56f6ff65ba53?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (cbf9112) will **decrease** coverage by `0.01%`.
> The diff coverage is `86.44%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/635/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/635?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #635      +/-   ##
==========================================
- Coverage   77.16%   77.14%   -0.02%     
==========================================
  Files         156      156              
  Lines       47007    47022      +15     
  Branches    10281    10282       +1     
==========================================
+ Hits        36271    36277       +6     
- Misses       8150     8157       +7     
- Partials     2586     2588       +2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/635?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/635/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvb3BzLnB5) | `83.57% <ø> (-0.12%)` | :arrow_down: |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/635/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `63.21% <0.00%> (ø)` | |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/635/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `81.98% <ø> (ø)` | |
| [aesara/scan/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/635/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `81.30% <ø> (-0.75%)` | :arrow_down: |
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/635/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `91.21% <ø> (-0.03%)` | :arrow_down: |
| [aesara/scan/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/635/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vdXRpbHMucHk=) | `87.25% <50.00%> (ø)` | |
| [aesara/tensor/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/635/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaGFwZS5weQ==) | `88.40% <60.00%> (-0.42%)` | :arrow_down: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/635/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `84.67% <77.77%> (-0.04%)` | :arrow_down: |
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/635/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `84.33% <91.30%> (+0.16%)` | :arrow_up: |
| [aesara/link/numba/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/635/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvcmFuZG9tLnB5) | `100.00% <100.00%> (ø)` | |
| ... and [6 more](https://codecov.io/gh/aesara-devs/aesara/pull/635/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

codecov[bot](2021-10-29 05:52:06):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/636?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#636](https://codecov.io/gh/aesara-devs/aesara/pull/636?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (594c7c4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e08dac2a367a5c6ad326c242e143d84f2ba5c64b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e08dac2) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/636/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/636?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #636   +/-   ##
=======================================
  Coverage   77.04%   77.05%           
=======================================
  Files         157      157           
  Lines       46923    46924    +1     
  Branches    10259    10259           
=======================================
+ Hits        36154    36155    +1     
  Misses       8187     8187           
  Partials     2582     2582           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/636?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/636/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `87.00% <ø> (ø)` | |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/636/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `86.24% <100.00%> (+0.02%)` | :arrow_up: |

codecov[bot](2021-11-10 18:09:49):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/639?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#639](https://codecov.io/gh/aesara-devs/aesara/pull/639?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (14ec70a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c34f37f140a4e3c2006107b7a4dedc26064bb249?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c34f37f) will **increase** coverage by `0.00%`.
> The diff coverage is `98.60%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/639/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/639?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #639   +/-   ##
=======================================
  Coverage   78.35%   78.35%           
=======================================
  Files         152      152           
  Lines       47667    47685   +18     
  Branches    10879    10881    +2     
=======================================
+ Hits        37348    37364   +16     
- Misses       7772     7773    +1     
- Partials     2547     2548    +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/639?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/639/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.63% <96.66%> (+0.03%)` | :arrow_up: |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/639/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `91.79% <97.22%> (+0.19%)` | :arrow_up: |
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/639/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `71.68% <100.00%> (+0.36%)` | :arrow_up: |
| [aesara/link/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/639/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `85.27% <100.00%> (+0.05%)` | :arrow_up: |
| [aesara/link/numba/dispatch/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/639/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZXh0cmFfb3BzLnB5) | `98.09% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/link/numba/dispatch/nlinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/639/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvbmxpbmFsZy5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/639/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvcmFuZG9tLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/639/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2NhbGFyLnB5) | `98.00% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/scan.py](https://codecov.io/gh/aesara-devs/aesara/pull/639/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2Nhbi5weQ==) | `95.55% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/639/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvdGVuc29yX2Jhc2ljLnB5) | `97.95% <100.00%> (ø)` | |
| ... and [2 more](https://codecov.io/gh/aesara-devs/aesara/pull/639/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

kc611(2021-12-25 15:21:39):> The issue appears to be caused by the `__global__`s (e.g. perhaps inherited from `aesara.link.utils`).
> 
> If you change `some_fn = compile_function_src(fn_src, "some_fn")` to `some_fn = compile_function_src(fn_src, "some_fn", globals=globals())` it will work.

Should we move forward with this PR by passing `__globals__` to the compilation function or should we wait for a fix of https://github.com/numba/numba/issues/7641 ?

Passing the `__globals__` doesn't seem to be too computationally expensive though it's a workaround.
brandonwillard(2021-12-28 00:42:37):> > The issue appears to be caused by the `__global__`s (e.g. perhaps inherited from `aesara.link.utils`).
> > If you change `some_fn = compile_function_src(fn_src, "some_fn")` to `some_fn = compile_function_src(fn_src, "some_fn", globals=globals())` it will work.
> 
> Should we move forward with this PR by passing `__globals__` to the compilation function or should we wait for a fix of [numba/numba#7641](https://github.com/numba/numba/issues/7641) ?
> 
> Passing the `__globals__` doesn't seem to be too computationally expensive though it's a workaround.

Yeah, that's perfectly fine.
kc611(2022-01-12 18:32:21):The missing coverage seems to be pointing towards lines which are basically just the decorator changed to a different name. Any idea why it's coming up as missing coverage ?
brandonwillard(2022-01-12 20:13:38):> The missing coverage seems to be pointing towards lines which are basically just the decorator changed to a different name. Any idea why it's coming up as missing coverage ?

Maybe that `keepdims` branch isn't/wasn't being tested?  Otherwise, I have no idea, and we can ignore it for now.
kc611(2022-01-16 10:24:02):So can we go ahead with this merging this PR ?
kc611(2021-11-10 17:20:18):Trying to cache the `Scalar` `Op`s raises an: Can't pickle `PyCapsule` objects error from within Numba. 
kc611(2021-11-10 17:23:16):Similar thing happens when we try to cache the numba.vectorized functions. 
kc611(2021-11-10 17:23:22):For some reason the `eval_python_only` throws error related to `Type` even though it just there for Pythonic coverage. Is this because of the changed mock keys (`numa.njit` to `numba_njit`)?
brandonwillard(2021-11-15 18:17:47):Why is that?
brandonwillard(2021-11-15 18:19:19):If you add an option to `numba_njit`, you'll probably need to account for it in the mock for `numba_njit`, as well.
kc611(2021-11-16 06:07:53):Seems like some issue with the way we're compiling string encoded functions:

```python
import numba
from aesara.link.numba.dispatch.basic import create_numba_signature
from aesara.link.utils import compile_function_src

a = 10.0
b = 20.0

fn_src = """
def some_fn(x, y):
    return x + y
"""

some_fn = compile_function_src(fn_src, "some_fn")

print(some_fn(a, b)) # Works
signature = numba.types.float64(numba.types.float64, numba.types.float64)

fn = numba.njit(signature, cache=True)(
    some_fn
)

# Above line fails with
# Traceback (most recent call last):
#   File "/home/kc611/Desktop/Workspaces/Aesara WorkSpace/issues/addnumbacache/pycapsule_issue.py", line 20, in <module>
#     fn = numba.njit(signature, cache=True)(
#   File "/home/kc611/anaconda3/envs/aesara/lib/python3.8/site-packages/numba/core/decorators.py", line 226, in wrapper
#     disp.compile(sig)
#   File "/home/kc611/anaconda3/envs/aesara/lib/python3.8/site-packages/numba/core/dispatcher.py", line 986, in compile
#     self._cache.save_overload(sig, cres)
#   File "/home/kc611/anaconda3/envs/aesara/lib/python3.8/site-packages/numba/core/caching.py", line 661, in save_overload
#     self._save_overload(sig, data)
#   File "/home/kc611/anaconda3/envs/aesara/lib/python3.8/site-packages/numba/core/caching.py", line 671, in _save_overload
#     self._cache_file.save(key, data)
#   File "/home/kc611/anaconda3/envs/aesara/lib/python3.8/site-packages/numba/core/caching.py", line 489, in save
#     self._save_data(data_name, data)
#   File "/home/kc611/anaconda3/envs/aesara/lib/python3.8/site-packages/numba/core/caching.py", line 547, in _save_data
#     data = self._dump(data)
#   File "/home/kc611/anaconda3/envs/aesara/lib/python3.8/site-packages/numba/core/caching.py", line 560, in _dump
#     return pickle.dumps(obj, protocol=-1)
# TypeError: cannot pickle 'PyCapsule' object

print(fn(a, b))
```
brandonwillard(2021-12-10 00:45:20):The issue appears to be caused by the `__global__`s (e.g. perhaps inherited from `aesara.link.utils`).

If you change `some_fn = compile_function_src(fn_src, "some_fn")` to `some_fn = compile_function_src(fn_src, "some_fn", globals=globals())` it will work.
brandonwillard(2021-12-10 00:56:47):I just created an issue for this: https://github.com/numba/numba/issues/7641.
kc611(2021-12-28 19:04:08):I tried mock patching numba_njit directly, it says that it cannot find a target for patch. I guess we'd have to keep the current patch target i.e. numba.njit find suitable implementation for that. I'm not exactly familiar with how this patching works, so having a bit of trouble coming up with one. 
brandonwillard(2022-01-11 23:18:14):This approach will require distinct `mock.patch`es for every module that creates these (e.g. `mock.patch("aesara.link.numba.dispatch.*.[numba_njit, numba_vectorize]", ...)`).  Instead, if you use something like `import aesara.link.numba.dispatch.basic as numba_basic` and `numba_basic.numba_njit` everywhere, all you'll need is a single mock for `aesara.link.numba.dispatch.basic.numba_jit`.

`mock`'s ability to patch an environment is fairly constrained, and not all import and access paths to patched objects are covered, so it's best to simplify the patched function import and access to a single, simple import from one module.
brandonwillard(2022-01-17 23:36:28):Did we mean to disable these cases?  If so, we should change them to `pytest.mark.xfail` cases and give a reason.
codecov[bot](2021-10-30 09:38:08):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/640?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#640](https://codecov.io/gh/aesara-devs/aesara/pull/640?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7c5a08e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/9e7aea88b99bd7bf8b1cd75a3680d4989778f5cd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9e7aea8) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/640/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/640?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #640   +/-   ##
=======================================
  Coverage   77.05%   77.05%           
=======================================
  Files         157      157           
  Lines       46924    46932    +8     
  Branches    10259    10259           
=======================================
+ Hits        36155    36163    +8     
  Misses       8187     8187           
  Partials     2582     2582           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/640?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/640/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdHlwZS5weQ==) | `90.62% <100.00%> (+0.85%)` | :arrow_up: |

codecov[bot](2021-11-01 19:40:39):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/643?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#643](https://codecov.io/gh/aesara-devs/aesara/pull/643?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3a3b122) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/eedc5e88af08a6778c3818d3f22824fa689b9066?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (eedc5e8) will **increase** coverage by `0.04%`.
> The diff coverage is `90.84%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/643/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/643?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #643      +/-   ##
==========================================
+ Coverage   77.10%   77.15%   +0.04%     
==========================================
  Files         156      156              
  Lines       46909    47007      +98     
  Branches    10259    10281      +22     
==========================================
+ Hits        36170    36269      +99     
+ Misses       8158     8151       -7     
- Partials     2581     2587       +6     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/643?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/643/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `71.39% <ø> (-0.08%)` | :arrow_down: |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/643/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `49.71% <ø> (+0.14%)` | :arrow_up: |
| [aesara/tensor/exceptions.py](https://codecov.io/gh/aesara-devs/aesara/pull/643/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leGNlcHRpb25zLnB5) | `100.00% <ø> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/643/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `85.57% <81.25%> (+0.22%)` | :arrow_up: |
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/643/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `84.17% <86.66%> (+0.26%)` | :arrow_up: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/643/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `84.71% <87.67%> (-0.16%)` | :arrow_down: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/643/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `85.83% <91.11%> (-0.33%)` | :arrow_down: |
| [aesara/graph/features.py](https://codecov.io/gh/aesara-devs/aesara/pull/643/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `65.95% <100.00%> (+3.32%)` | :arrow_up: |
| [aesara/graph/fg.py](https://codecov.io/gh/aesara-devs/aesara/pull/643/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `88.70% <100.00%> (ø)` | |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/643/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `63.21% <100.00%> (+0.04%)` | :arrow_up: |
| ... and [10 more](https://codecov.io/gh/aesara-devs/aesara/pull/643/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

kc611(2021-11-03 16:34:00):Is this logic repetition intentional ?
L283-296 and L298-310 seems to be doing the same thing. 
kc611(2021-11-03 16:55:05):If this function is useful, and there's not much alternatives to it, we can add a `raises` keyword argument `get_scalar_constant_value` and make this function call inside `get_scalar_constant_value`. Something like:

```python
def extract_constant(x, only_process_constants=False, raises=True):
    if not raises:
      if isinstance(x, aes.ScalarVariable) or isinstance(
          x, aes.sharedvar.ScalarSharedVariable
      ):
          if x.owner and isinstance(x.owner.op, ScalarFromTensor):
              x = x.owner.inputs[0]
          else:
              x = tensor_from_scalar(x)
      return x
    raise NotScalarConstantError()
```
kc611(2021-11-03 17:25:41):The current test failures seems to be originating from this particular constraint. It seems to be failing on cases like: `[1]` or `[[1]]` i.e. n-dimensional scalar values (even though there's no such thing as an n dimensional scalar :-P).

>If `v` is the output of dimshuffles, fills, allocs, rebroadcasts,
>cast, OutputGuard, DeepCopyOp, ScalarFromTensor, ScalarOp, Elemwise
>and some pattern with Subtensor, this function digs through them

Is this function still expected to take care of cases like those ?

 
codecov[bot](2021-11-02 02:30:44):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/647?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#647](https://codecov.io/gh/aesara-devs/aesara/pull/647?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (05a94fe) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/dc7cd4c9c98ee34e9d3002430c41d428729c0792?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (dc7cd4c) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/647/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/647?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #647      +/-   ##
==========================================
+ Coverage   77.05%   77.06%   +0.01%     
==========================================
  Files         157      157              
  Lines       46932    46934       +2     
  Branches    10259    10260       +1     
==========================================
+ Hits        36163    36170       +7     
+ Misses       8187     8183       -4     
+ Partials     2582     2581       -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/647?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/647/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `84.86% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/647/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `63.16% <0.00%> (+0.12%)` | :arrow_up: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/647/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `78.49% <0.00%> (+0.35%)` | :arrow_up: |

brandonwillard(2021-11-02 23:10:24):Oh, you may also need to set up `pre-commit` (e.g. `pip install -r requirements.txt` and then `pre-commit install`); that will help catch the current errors locally.
Carlosbogo(2021-11-03 09:26:45):About making it a stand-alone function, I am wondering about where should the definition of the function be, in order to keep things as organised as possible, as there are many different .py files.

I will try to change that and then rebase and squash the commit you added.
Carlosbogo(2021-11-09 13:03:57):Thank you for understanding. To be honest I'm still getting used to how git and github work so I don't know how rebasing or squashing work, but if you don't mind I would still like to do it myself so that I can learn.

I'll try to delete the method I created and substitute it for a new function wherever needed as soon as possible.
codecov[bot](2021-11-16 00:17:13):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/650?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#650](https://codecov.io/gh/aesara-devs/aesara/pull/650?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a765d62) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/cbf91122296b68ee2ad592b2312d56f6ff65ba53?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (cbf9112) will **increase** coverage by `0.00%`.
> The diff coverage is `95.65%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/650/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/650?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #650   +/-   ##
=======================================
  Coverage   77.16%   77.16%           
=======================================
  Files         156      156           
  Lines       47007    47015    +8     
  Branches    10281    10282    +1     
=======================================
+ Hits        36271    36278    +7     
  Misses       8150     8150           
- Partials     2586     2587    +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/650?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `85.80% <92.85%> (-0.04%)` | :arrow_down: |
| [aesara/scan/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `82.05% <100.00%> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `85.58% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `85.84% <100.00%> (+<0.01%)` | :arrow_up: |

codecov[bot](2021-11-04 15:55:55):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/655?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#655](https://codecov.io/gh/aesara-devs/aesara/pull/655?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (327bd1e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/620edabea58853a581cc715e3fe407ea4e63520d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (620edab) will **increase** coverage by `0.00%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/655/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/655?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #655   +/-   ##
=======================================
  Coverage   77.15%   77.16%           
=======================================
  Files         156      156           
  Lines       47007    47007           
  Branches    10281    10281           
=======================================
+ Hits        36269    36271    +2     
+ Misses       8151     8150    -1     
+ Partials     2587     2586    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/655?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/655/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `68.37% <ø> (+0.42%)` | :arrow_up: |

ricardoV94(2021-11-13 18:20:38):> Looks like the regex pattern needs adjustment.

Weird. It was passing locally... Will have a look
ricardoV94(2021-11-15 18:12:34):It was a float32 test thing... Should be fixed now
brandonwillard(2021-11-04 17:38:34):Instead of printing all the expected/received pairs, let's print only the conflicting ones (and which number input it was, of course).
brandonwillard(2021-11-04 17:40:52):Actually, it might help to provide context by printing the `str` representation of the `Op` beforehand, too.
brandonwillard(2021-11-04 17:42:19):E.g. 
```
f"Op {self} expected inputs of ..."
```
ricardoV94(2021-11-04 18:09:10):Yeah, I like that idea
ricardoV94(2021-11-05 08:27:20):Updated the top message with the new output format
brandonwillard(2021-11-09 00:20:54):Not important, but, if this is only used once below, we might as well call `len` where it's used and avoid creating `n_inputs` altogether.
codecov[bot](2021-11-05 13:47:21):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/656?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#656](https://codecov.io/gh/aesara-devs/aesara/pull/656?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5050a98) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/bca9a381817478bffd316007d6b1123a1a2693e1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (bca9a38) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/656/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/656?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #656   +/-   ##
=======================================
  Coverage   77.66%   77.66%           
=======================================
  Files         152      152           
  Lines       46952    46952           
  Branches    10891    10891           
=======================================
  Hits        36466    36466           
  Misses       7888     7888           
  Partials     2598     2598           
```



brandonwillard(2021-11-08 20:26:19):> 1. Right now we're following versioneer's convention of using the last release version as the base version. This is the simplest to implement, but it might be more sensible to use the `setuptools_scm` convention of using the current release + one minor increment as the base version.

That sounds fine.  We could also change the `rel-*` pattern to something more standard.
brandonwillard(2021-11-14 23:29:34):I've added the token.  Is there a good way to test this before merging?  If not, we can merge this and follow up from there.
dfm(2021-12-13 22:26:28):@brandonwillard: Sorry I never responded to your questions. Let's see how this runs tonight and, it it doesn't work, I'll take a stab at fixing it.
brandonwillard(2021-12-13 22:28:54):> @brandonwillard: Sorry I never responded to your questions. Let's see how this runs tonight and, it it doesn't work, I'll take a stab at fixing it.

No problem; I realized shortly after asking that testing these kinds of changes almost always requires merging first, then I got busy and forgot to follow up.
dfm(2021-12-14 02:32:27):Looks like the workflow ran and the package got published: https://pypi.org/project/aesara-nightly/#history

But running `pip install aesara-nightly` gives me a metadata error. Let me try to diagnose the issue and send an updated patch.
brandonwillard(2021-11-15 17:49:17):I see that this is a duplicate of #650; I'm going to close this one and rebase the old one.
codecov[bot](2021-11-16 17:33:30):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/667?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#667](https://codecov.io/gh/aesara-devs/aesara/pull/667?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (075c580) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/972694585039e65cf67b7f8d829ccdd3694dede5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9726945) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/667/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/667?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #667      +/-   ##
==========================================
+ Coverage   77.14%   77.16%   +0.01%     
==========================================
  Files         156      156              
  Lines       47022    47045      +23     
  Branches    10282    10283       +1     
==========================================
+ Hits        36277    36300      +23     
  Misses       8157     8157              
  Partials     2588     2588              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/667?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/667/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `93.21% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/667/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvcmFuZG9tLnB5) | `100.00% <100.00%> (ø)` | |

brandonwillard(2021-11-16 22:03:38):Can we do this without making Numba-specific changes to generic types?
kc611(2021-11-17 07:54:56):The only way I could find to do this without making Numba-specific changes to generic types is that if we make `RandomState` an acceptable datatype in Numba. 

It doesn't necessarily need to hold all the information of the `RandomState` just be a 'fake' placeholder type just to get `RandomState` objects accepted in Numba and whenever it needs to be reconstructed as a `RandomState` (to get it out of the Numba function) we can do that using Numba's internal state array. 
brandonwillard(2021-11-18 16:15:36):Yeah, let's add a type for it to Numba; that sounds great.
kc611(2021-11-20 17:56:10):Doesn't look like the actual states stay consistent though. (looks like Numba's internal state changes, probably due to some unrelated operations, even if we aren't doing anything with it in the user side of the code.)

Normally doing something like this works:

```python
import numba
import numpy as np
from numba import _helperlib
rng = np.random.RandomState(1)
ints, index = rng.get_state()[1:3]
ptr = _helperlib.rnd_get_np_state_ptr()
_helperlib.rnd_set_state(ptr, (index, [int(x) for x in ints]))
state_list = _helperlib.rnd_get_state(_helperlib.rnd_get_np_state_ptr())[1]
assert np.all(ints == state_list) #Works
```
brandonwillard(2021-11-21 07:16:24):```suggestion
    """Convert a `RandomState` object to a native `RandomStateNumbaModel` structure.
```
brandonwillard(2021-11-21 07:17:04):```suggestion
    `RandomState` objects accepted in Numba functions but the actual information
    of the Numba's random state is stored internally and can be accessed
    anytime using ``numba._helperlib.rnd_get_np_state_ptr()``.
```
brandonwillard(2021-11-21 07:17:28):```suggestion
    """Convert a native `RandomStateNumbaModel` structure to an `RandomState` object
    using Numba's internal state array.
```
brandonwillard(2021-11-21 07:17:43):```suggestion
    Note that `RandomStateNumbaModel` is just a placeholder structure with no
```
brandonwillard(2021-11-21 07:18:08):```suggestion
    is instead retrieved from Numba using ``_helperlib.rnd_get_state()`` and a new
    `RandomState` is constructed using the Numba's current internal state.
```
kc611(2021-11-21 11:35:40):Nevermind, they're consistent now. 

I had the misconception that `RandomState(state_list)` is equivalent to `RandomState().set_state(("MT19937", state_list, pos))`, spoiler alert, it isn't. The former actually uses the array as seed to generate an entirely different state array. 
codecov[bot](2021-11-18 19:57:34):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/670?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#670](https://codecov.io/gh/aesara-devs/aesara/pull/670?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (04db98d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/117b40c9a3b421a7dccfd7c0ee04eab4a6f0716c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (117b40c) will **not change** coverage.
> The diff coverage is `0.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/670/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/670?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #670   +/-   ##
=======================================
  Coverage   77.14%   77.14%           
=======================================
  Files         156      156           
  Lines       47022    47022           
  Branches    10282    10282           
=======================================
  Hits        36277    36277           
  Misses       8157     8157           
  Partials     2588     2588           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/670?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/version.py](https://codecov.io/gh/aesara-devs/aesara/pull/670/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ZlcnNpb24ucHk=) | `66.66% <0.00%> (ø)` | |

codecov[bot](2021-11-20 07:07:04):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/672?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#672](https://codecov.io/gh/aesara-devs/aesara/pull/672?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d604273) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/972694585039e65cf67b7f8d829ccdd3694dede5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9726945) will **increase** coverage by `0.12%`.
> The diff coverage is `98.13%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/672/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/672?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #672      +/-   ##
==========================================
+ Coverage   77.14%   77.27%   +0.12%     
==========================================
  Files         156      151       -5     
  Lines       47022    47004      -18     
  Branches    10282    10270      -12     
==========================================
+ Hits        36277    36323      +46     
+ Misses       8157     8098      -59     
+ Partials     2588     2583       -5     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/672?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/672/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `76.66% <ø> (ø)` | |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/672/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `64.84% <80.00%> (+1.62%)` | :arrow_up: |
| [aesara/raise\_op.py](https://codecov.io/gh/aesara-devs/aesara/pull/672/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3JhaXNlX29wLnB5) | `98.64% <98.63%> (+98.64%)` | :arrow_up: |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/672/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `85.57% <100.00%> (ø)` | |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/672/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `84.77% <100.00%> (+0.09%)` | :arrow_up: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/672/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `88.46% <100.00%> (ø)` | |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/672/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `85.83% <100.00%> (ø)` | |
| [aesara/tensor/nnet/abstract\_conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/672/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Fic3RyYWN0X2NvbnYucHk=) | `76.87% <100.00%> (ø)` | |
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/672/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `78.24% <100.00%> (ø)` | |
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/672/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `84.33% <100.00%> (ø)` | |
| ... and [8 more](https://codecov.io/gh/aesara-devs/aesara/pull/672/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

twiecki(2021-11-22 12:46:57):Why not remove this?
brandonwillard(2021-11-23 23:29:06):We should consider re-enabling it some time, so I don't want to remove it yet.
codecov[bot](2021-11-24 17:07:35):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/673?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#673](https://codecov.io/gh/aesara-devs/aesara/pull/673?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9ce41da) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/34375f41ea385fa5db5b15ff10948dc5d43beff3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (34375f4) will **increase** coverage by `0.05%`.
> The diff coverage is `97.98%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/673/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/673?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #673      +/-   ##
==========================================
+ Coverage   77.61%   77.66%   +0.05%     
==========================================
  Files         152      152              
  Lines       46915    46952      +37     
  Branches    10883    10891       +8     
==========================================
+ Hits        36413    36466      +53     
+ Misses       7895     7888       -7     
+ Partials     2607     2598       -9     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/673?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/673/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `80.06% <97.22%> (+1.93%)` | :arrow_up: |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/673/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `80.27% <100.00%> (+0.31%)` | :arrow_up: |
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/673/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.78% <100.00%> (+0.23%)` | :arrow_up: |

ricardoV94(2021-11-25 16:49:38):I did not implement multiple axis as in `softmax(x, axis=(0, 1))` because I did not realize that was a thing until later xD. If anyone knows how to do this with the NumPy C-API and it is not too much additional code I can consider including it. 

Otherwise we can wait until we drop the C-backend, and it will be straightforward to do it for the numba and jax dispatchers. This PR is already a step forward in that:
1. It covers most cases which are likely to be zero or 1 axis.
2. It breaks away with the assumption shared in multiple places in the codebase that the softmax is only applicable to matrices and/or that it reshapes vectors to row matrices.

The case for `axis=None` is implemented, but it required a completely different branch in the 3 Ops. If someone knows how to do it with a single logic that would also be neat, but not critical.
brandonwillard(2021-11-26 03:36:24):> * Move `Softmax/LogSoftmax` contents from `nnet/basic.py` to `tensor/softmax.py`?
> * Rename `logsoftmax` -> `log_softmax` for consistency with scipy (with deprecated alias)?

These sound good.
ricardoV94(2021-11-26 04:23:28):> It would be good to know exactly why/if we should have special Ops for these composite operations nowadays.
>
> Do they necessarily perform better than their equivalents that are built using other Ops?

I explored that option. It was not so much a question of performance but pattern matching difficulties and subsequent numerical stability because of forms that were not being captured. 

This was specially relevant for the SoftmaxGrad which can have many different patterns depending on which grads are being requested. This is related to all those tests that are being skipped.

Thinking about it, we might be able to get rid of the log_softmax and use the expression based on logsumpexp that scipy also uses. That would already be something. I'll check that
ricardoV94(2021-11-26 09:13:27):> > * Move `Softmax/LogSoftmax` contents from `nnet/basic.py` to `tensor/softmax.py`?
> > * Rename `logsoftmax` -> `log_softmax` for consistency with scipy (with deprecated alias)?
> 
> These sound good.

I am waiting until all other changes are sorted out / reviewed so as to not suffer with interactive rebases
brandonwillard(2021-11-26 21:48:43):> I explored that option. It was not so much a question of performance but pattern matching difficulties and subsequent numerical stability because of forms that were not being captured.

Both of these are important enough to address directly and immediately; otherwise, the library will simply not improve or advance.  The approach taken by `Softmax` and `SoftmaxGrad` is essentially antithetical to the design and intent of this library.  In other words, if something as simple as `Softmax` cannot be implemented sufficiently using this library itself, then we have much bigger and more important problems.

Regarding the latter issue, where is this demonstrated?
ricardoV94(2021-11-26 22:03:21):What latter issue are you referring to?
brandonwillard(2021-11-26 22:49:21):> What latter issue are you referring to?

The numerical stability and forms that aren't being captured.
brandonwillard(2021-11-27 01:12:42):I just looked over the `*Softmax*`-related optimizations, and there don't appear to be any that substantially depend on the encapsulation provided by those specialized `Op` classes.  The few optimizations that are in place only serve to replace those specialized `Op`s with other specialized `Op`s (e.g. turn `log(softmax(...))` into a `LogSoftmax`, turn `softmax(sum(...))` into a `softmax_w_bias(...)`, simplify `log(SoftmaxGrad)`, etc.)  

The only one that looks like it might require any real pattern matching in the absence of those `Op`s is the misplaced and misnamed `local_argmax_pushdown` specialization.  It appears to lift `MaxAndArgmax`s through monotonic `Op`s only when the arg-max part of the output is being used in a graph.

This optimization could easily be replaced by simple pattern matching.  Also, anything that aspires to do this kind of thing beyond a few simple cases will ultimately need to use more general functional properties anyway (e.g. employ monotonic/convex function closure identities from which a soft-max/plus, sigmoid, etc., could be easily derived).
ricardoV94(2021-11-27 08:32:44):Both the softmax and log_softmax graphs are easy to identify and replace by the numerical stable versions that shift by the max.

The issues I found concerned the gradients of both ops (as well as the gradient of SoftmaxGrad) which introduce new softmax terms and would also need the shifting by the max to become stable. These are difficult to match because they can have different patterns depending on which gradients are actually being requested. 

You can see that the existing rewrites seem to concern mostly the gradients and the old Theano issue I linked (https://github.com/Theano/Theano/issues/4452) was concerned about not having a rewrite to match the gradient of the softmax when the specialized Op was not being used from the beginning.

I also checked what would happen if softmax and log_softmax returned the numerically stable graph immediately, but the Aesara generated gradients were still unstable.

I am not saying it's impossible, just that for the specific goal of adding axes, it turned out to be less trouble to update the Ops and rewrites.

These changes do not preclude a future replacement by symbolic graphs when the gradient pattern matching issues are figured out.
brandonwillard(2021-11-27 20:27:57):> The issues I found concerned the gradients of both ops (as well as the gradient of SoftmaxGrad) which introduce new softmax terms and would also need the shifting by the max to become stable. These are difficult to match because they can have different patterns depending on which gradients are actually being requested.

Yes, this is the detail I was looking for.  If this doesn't have an issue, it needs one.

> You can see that the existing rewrites seem to concern mostly the gradients and the old Theano issue I linked ([Theano/Theano#4452](https://github.com/Theano/Theano/issues/4452)) was concerned about not having a rewrite to match the gradient of the softmax when the specialized Op was not being used from the beginning.


If I'm understanding https://github.com/Theano/Theano/issues/4452 correctly, it doesn't sound like a good solution for this at all.  It seems like it's akin to using `OpFromGraph` to replace the need for pattern matching. These kinds of things only shift the work to different areas, which more often than not doesn't actually imply less work, just different work.  

For instance, we would need to carefully orchestrate the compilation phases to make sure that rewrites are applied after this proposed `GradOp` is unfolded/expanded.  Doing so requires multiple re-runs of entire optimization phases (e.g. more canonicalization passes), and that's the last direction we want to go just for some mild short-term conveniences&mdash;if anything, it's something we need to avoid.

> I am not saying it's impossible, just that for the specific goal of adding axes, it turned out to be less trouble to update the Ops and rewrites.

It might only _seem_ like less trouble when the scope is narrow; however, if we address whatever problems underlie this issue, we are very likely to improve more things than just the `Softmax` `Op`, as well as avoid future pitfalls, like time spent on `Op`-specific extensions and maintenance (e.g. writing those C/Numba/JAX implementations and their tests).

> These changes do not preclude a future replacement by symbolic graphs when the gradient pattern matching issues are figured out.

No, but the time we spend creating and maintaining these work-arounds takes away from priority improvements like that gradient issue.  Remember, if these rewrites can stabilize graphs that aren't explicit `Softmax` and `SoftmaxGrad` `Op`s, then they'll be able to stabilize more graphs, and _that's_ what we want.


brandonwillard(2021-11-27 23:15:33):I created an issue for this: https://github.com/aesara-devs/aesara/issues/682.  We can continue the conversation there; otherwise, we can still merge this in the meantime, but we need to give priority to solving that issue.
brandonwillard(2021-12-13 04:50:37):@ricardoV94, do you want to move the `Op`s out of `nnet` in this PR or another?
ricardoV94(2021-12-13 06:55:25):I will move them in a PR immediately after this one
ricardoV94(2021-11-25 09:19:53):I couldn't figure out the purpose of the two lines I have commented out. It was introduced in this PR without context and AFAICT no tests cover this situation: https://github.com/Theano/Theano/pull/3363/files

Any ideas?
ricardoV94(2021-11-25 09:22:33):Could also add the LogSoftmax in here, but I am not sure it's worth it
ricardoV94(2021-11-25 09:27:13):I couldn't find any existing rewrite that is supposed to cover this situation: `grad(softmax_graph) -> SoftmaxGrad` where `softmax_graph` is the symbolic softmax expression not using the Softmax Op directly.
ricardoV94(2021-11-25 09:30:54):This was brought up in the second point of this old Theano issue: https://github.com/Theano/Theano/issues/4452
brandonwillard(2021-11-26 03:31:47):It looks like it might be trying to broadcast `grads` manually so that it matches the `aet_sum(grads, axis=1, keepdims=True) * sm` term.  In doing so, it appears to make a pretty strong assumption about the dimensionality/axes of the problem.
ricardoV94(2021-11-29 15:11:54):Could this be because of the vector -> row matrix transformation that softmax used to do? Perhaps that's why this line was commented out `# sm_input = node.inputs[1].owner.inputs[0]`
codecov[bot](2021-11-28 03:28:16):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/675?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#675](https://codecov.io/gh/aesara-devs/aesara/pull/675?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c606f8a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/87a01157ff24b25026ec5b2ccc15c84af5489507?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (87a0115) will **increase** coverage by `0.01%`.
> The diff coverage is `97.22%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/675/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/675?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #675      +/-   ##
==========================================
+ Coverage   77.39%   77.41%   +0.01%     
==========================================
  Files         151      151              
  Lines       47037    47031       -6     
  Branches    10929    10929              
==========================================
+ Hits        36405    36409       +4     
+ Misses       8045     8038       -7     
+ Partials     2587     2584       -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/675?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/675/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `78.24% <50.00%> (ø)` | |
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/675/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `84.76% <71.42%> (+0.43%)` | :arrow_up: |
| [aesara/scan/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/675/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `81.30% <100.00%> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/675/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `85.59% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/675/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `89.33% <100.00%> (+0.57%)` | :arrow_up: |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/675/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `85.80% <100.00%> (ø)` | |

codecov[bot](2021-11-25 20:20:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/676?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#676](https://codecov.io/gh/aesara-devs/aesara/pull/676?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (dc0333c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/14705dbf5f808978374ffdc9aa4d1af1dd709181?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (14705db) will **increase** coverage by `0.33%`.
> The diff coverage is `97.84%`.

> :exclamation: Current head dc0333c differs from pull request most recent head 1ddf96a. Consider uploading reports for the commit 1ddf96a to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/676/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/676?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #676      +/-   ##
==========================================
+ Coverage   77.27%   77.60%   +0.33%     
==========================================
  Files         151      152       +1     
  Lines       47004    46936      -68     
  Branches    10270    10886     +616     
==========================================
+ Hits        36323    36427     +104     
+ Misses       8098     7902     -196     
- Partials     2583     2607      +24     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/676?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/optdb.py](https://codecov.io/gh/aesara-devs/aesara/pull/676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdGRiLnB5) | `85.34% <ø> (-0.31%)` | :arrow_down: |
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `78.13% <50.00%> (-0.12%)` | :arrow_down: |
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `84.86% <75.00%> (+0.52%)` | :arrow_up: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `48.95% <93.33%> (+4.07%)` | :arrow_up: |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `85.80% <93.33%> (-0.04%)` | :arrow_down: |
| [aesara/tensor/slinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zbGluYWxnLnB5) | `85.26% <95.45%> (+1.37%)` | :arrow_up: |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `65.47% <97.56%> (+0.63%)` | :arrow_up: |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `89.41% <99.32%> (+2.34%)` | :arrow_up: |
| [aesara/graph/unify.py](https://codecov.io/gh/aesara-devs/aesara/pull/676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3VuaWZ5LnB5) | `99.33% <99.33%> (+54.98%)` | :arrow_up: |
| [aesara/graph/kanren.py](https://codecov.io/gh/aesara-devs/aesara/pull/676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2thbnJlbi5weQ==) | `100.00% <100.00%> (ø)` | |
| ... and [34 more](https://codecov.io/gh/aesara-devs/aesara/pull/676/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

fshart(2021-12-06 09:27:56):Seeing your edits to the code, are there guidelines to ensure that a PR fits the code style of the main repository?

As far as I understand the current test runs, only "raise *Error" lines, a new comment and the new __repr__ are not covered. Could you comment on what remains still to do, as this eludes me.

Should the "raise *Error" lines be covered by an try-except test?
fshart(2021-12-10 15:40:51):The missing requested points are now implemented.
The changes should now be ready for the main repository up to my rebase maybe not working out...
> If I recall correctly, this branch needed to be rebased because it had a merge commit. PRs cannot be merged if they are not "linear"; that's a repository restriction.
fshart(2021-12-13 12:04:25):The rebase and final changes were incorporated.

The changes should now be able to be merged into the main repository.
brandonwillard(2021-11-25 20:58:00):Our convention is to use f-strings for string interpolation.  (The old `Solve` hasn't been updated.)
brandonwillard(2021-11-25 20:59:10):Although the old code used assertions, these should really be checks that raise `ValueError`/`TypeError`s instead.
brandonwillard(2021-11-26 00:30:03):This test isn't run, because the method name doesn't start with `test_*`.  

Regardless, this is a somewhat large enumeration of cases, and, unless every case covers a distinct, untested, and otherwise worthwhile "code path" in `Solve`, we can't introduce the redundancies.
brandonwillard(2021-11-26 00:35:10):Just a note: we generally use a [NumPy-like docstring format](https://numpydoc.readthedocs.io/en/latest/format.html) and Python type annotations over type-based docstring notes.
brandonwillard(2021-11-26 00:36:57):```suggestion
```
brandonwillard(2021-11-26 01:44:42):Since a lot of code is duplicated between `Solve` and `SolveTriangular`, we should consolidate the logic and testing by creating an abstract base class&mdash;or by making `SolveTriangular` a subclass of `Solve`.
fshart(2021-12-03 11:32:48):Updated __repr__ to f_strings in new SolveBase class.
fshart(2021-12-03 11:32:53):Updated make_node to raise ValueErrors in new SolveBase class.
fshart(2021-12-03 11:36:30):Shortened this testcase to a second scenario in test_solve_correctness.
fshart(2021-12-03 11:37:23):Removed by shortened testcase .
fshart(2021-12-03 11:38:01):Updated __init__ in new SolveBase class.
fshart(2021-12-03 11:38:12):Created new SolveBase class.
brandonwillard(2021-12-10 23:13:13):```suggestion
    def test__init__(self):
        with pytest.raises(ValueError) as excinfo:
            Solve(assume_a="test")
```
brandonwillard(2021-12-10 23:14:58):FYI: the `match` keyword to `pytest.raises` can be used to verify the exception message more succinctly.
fshart(2021-12-13 12:02:26):The idea was incorporated to shorten the test
codecov[bot](2021-11-26 02:51:21):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/678?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#678](https://codecov.io/gh/aesara-devs/aesara/pull/678?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8befeaf) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/14705dbf5f808978374ffdc9aa4d1af1dd709181?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (14705db) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/678/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/678?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #678   +/-   ##
=======================================
  Coverage   77.27%   77.27%           
=======================================
  Files         151      151           
  Lines       47004    47005    +1     
  Branches    10270    10270           
=======================================
+ Hits        36323    36324    +1     
  Misses       8098     8098           
  Partials     2583     2583           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/678?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/678/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `78.58% <100.00%> (+<0.01%)` | :arrow_up: |

codecov[bot](2021-11-26 21:46:05):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/680?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#680](https://codecov.io/gh/aesara-devs/aesara/pull/680?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0d4887f) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ed759a0954ed980af3cb2198c0783427529abe12?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ed759a0) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/680/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/680?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #680   +/-   ##
=======================================
  Coverage   77.27%   77.27%           
=======================================
  Files         151      151           
  Lines       47005    47006    +1     
  Branches    10270    10271    +1     
=======================================
+ Hits        36324    36325    +1     
  Misses       8098     8098           
  Partials     2583     2583           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/680?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/680/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdXRpbHMucHk=) | `100.00% <100.00%> (ø)` | |

codecov[bot](2021-11-30 19:01:09):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/681?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#681](https://codecov.io/gh/aesara-devs/aesara/pull/681?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e1f2bc3) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2ca4199899e57ef1428ae13250c64c4f19a262dc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2ca4199) will **increase** coverage by `0.10%`.
> The diff coverage is `95.87%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/681/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/681?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #681      +/-   ##
==========================================
+ Coverage   77.28%   77.39%   +0.10%     
==========================================
  Files         151      151              
  Lines       47025    47037      +12     
  Branches    10923    10929       +6     
==========================================
+ Hits        36344    36405      +61     
+ Misses       8098     8045      -53     
- Partials     2583     2587       +4     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/681?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/681/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `48.95% <93.33%> (+4.07%)` | :arrow_up: |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/681/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `88.75% <97.29%> (+1.68%)` | :arrow_up: |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/681/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `85.58% <100.00%> (ø)` | |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/681/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `85.12% <100.00%> (+0.35%)` | :arrow_up: |
| [aesara/tensor/blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/681/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ibGFzLnB5) | `81.28% <100.00%> (ø)` | |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/681/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `86.96% <100.00%> (ø)` | |
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/681/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/681/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `88.76% <100.00%> (ø)` | |
| [aesara/tensor/nnet/sigm.py](https://codecov.io/gh/aesara-devs/aesara/pull/681/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L3NpZ20ucHk=) | `72.46% <100.00%> (ø)` | |
| ... and [1 more](https://codecov.io/gh/aesara-devs/aesara/pull/681/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

codecov[bot](2021-11-29 13:46:49):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/683?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#683](https://codecov.io/gh/aesara-devs/aesara/pull/683?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c775588) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/6157b6512a6b79538dc03eac12179cf6d0a1b467?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (6157b65) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/683/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/683?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #683   +/-   ##
=======================================
  Coverage   77.27%   77.28%           
=======================================
  Files         151      151           
  Lines       47014    47019    +5     
  Branches    10921    10921           
=======================================
+ Hits        36332    36337    +5     
  Misses       8098     8098           
  Partials     2584     2584           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/683?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/683/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `79.95% <100.00%> (+0.16%)` | :arrow_up: |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/683/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `88.76% <100.00%> (+0.01%)` | :arrow_up: |

brandonwillard(2021-12-04 08:16:24):There's a disparity between the automatic `tracks` checking and the use of `tracks` by `LocalOptGroup`.  Specifically, the former uses `isinstance(node.op, ...)` with the classes in `tracks` and the latter uses `type(node.op) in ...`.

We probably need the two to be consistent, but, if we make the automatic checking follow `LocalOptGroup`'s approach, it will be too limited to be useful in many cases (e.g. `tests.tensor.random.test_opt.test_inplace_optimization`).  The best option might involve an update to `LocalOptGroup` that makes it use `singledispatch` instead of [`self.track_map[type(node.op)`](https://github.com/aesara-devs/aesara/blob/87a01157ff24b25026ec5b2ccc15c84af5489507/aesara/graph/opt.py#L1341), which would make it behave like `isinstance(node.op, tracks)`.
codecov[bot](2021-12-05 06:34:42):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/688?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#688](https://codecov.io/gh/aesara-devs/aesara/pull/688?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (976c8a4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/18b6925bcfe1d8bff66f6d413bd303f37f2f90ce?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (18b6925) will **decrease** coverage by `0.07%`.
> The diff coverage is `95.65%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/688/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/688?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #688      +/-   ##
==========================================
- Coverage   77.42%   77.35%   -0.08%     
==========================================
  Files         151      151              
  Lines       47037    47029       -8     
  Branches    10931    10923       -8     
==========================================
- Hits        36417    36377      -40     
- Misses       8037     8041       +4     
- Partials     2583     2611      +28     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/688?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/optdb.py](https://codecov.io/gh/aesara-devs/aesara/pull/688/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdGRiLnB5) | `85.34% <ø> (-0.31%)` | :arrow_down: |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/688/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `66.20% <95.65%> (+1.36%)` | :arrow_up: |
| [aesara/tensor/blas\_scipy.py](https://codecov.io/gh/aesara-devs/aesara/pull/688/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ibGFzX3NjaXB5LnB5) | `80.00% <0.00%> (-5.72%)` | :arrow_down: |
| [aesara/tensor/opt\_uncanonicalize.py](https://codecov.io/gh/aesara-devs/aesara/pull/688/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9vcHRfdW5jYW5vbmljYWxpemUucHk=) | `95.83% <0.00%> (-1.67%)` | :arrow_down: |
| [aesara/tensor/random/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/688/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3B0LnB5) | `93.79% <0.00%> (-1.56%)` | :arrow_down: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/688/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `83.78% <0.00%> (-1.34%)` | :arrow_down: |
| [aesara/scan/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/688/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `80.18% <0.00%> (-1.13%)` | :arrow_down: |
| [aesara/sparse/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/688/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9vcHQucHk=) | `74.78% <0.00%> (-0.85%)` | :arrow_down: |
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/688/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `72.09% <0.00%> (-0.59%)` | :arrow_down: |
| [aesara/sandbox/rng\_mrg.py](https://codecov.io/gh/aesara-devs/aesara/pull/688/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvcm5nX21yZy5weQ==) | `84.07% <0.00%> (-0.47%)` | :arrow_down: |
| ... and [6 more](https://codecov.io/gh/aesara-devs/aesara/pull/688/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

brandonwillard(2021-12-05 07:40:01):All right, I've updated all the code that currently uses `LocalOptimizer.tracks` so that it uses `isinstance`-based filtering.  In other words  `@local_optimizer(tracks)` means that the local optimizer will be applied to `node` when `isinstance(node.op, tuple(t for t in tracks if isinstance(t, type)))`&mdash;in all contexts.

One big advantage of this is that our optimizations will now automatically apply to all subclasses of `Op`s, as well, so&mdash;for example&mdash;user extensions to basic `Op`s will be optimized as well.
ricardoV94(2021-12-05 08:10:51):Does this mean we can start reintroducing tracks / removing isinstance checks at the top of our local_optimizers? 

brandonwillard(2021-12-05 08:51:18):> Does this mean we can start reintroducing tracks / removing isinstance checks at the top of our local_optimizers?

Yes, definitely.
ricardoV94(2021-12-05 08:09:34):This is really neat! 

Any idea of how much slower the tracks pre-filtering should be now?
brandonwillard(2021-12-05 08:53:15):Not much at all, especially since the MRO-based matching calls are cached.
codecov[bot](2021-12-09 03:02:29):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/693?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#693](https://codecov.io/gh/aesara-devs/aesara/pull/693?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (96d6a5c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5a2fb70b48f5549369c4e6591d7816cc26649957?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5a2fb70) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/693/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/693?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #693   +/-   ##
=======================================
  Coverage   77.59%   77.59%           
=======================================
  Files         152      152           
  Lines       46923    46926    +3     
  Branches    10884    10885    +1     
=======================================
+ Hits        36409    36412    +3     
  Misses       7904     7904           
  Partials     2610     2610           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/693?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/693/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3B0LnB5) | `93.93% <100.00%> (+0.14%)` | :arrow_up: |

codecov[bot](2021-12-09 22:28:40):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/694?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#694](https://codecov.io/gh/aesara-devs/aesara/pull/694?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c67e71b) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/4e1077210721deb007b4f556f08702cec5a74dfb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4e10772) will **increase** coverage by `0.02%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/694/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/694?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #694      +/-   ##
==========================================
+ Coverage   77.59%   77.61%   +0.02%     
==========================================
  Files         152      152              
  Lines       46926    46915      -11     
  Branches    10885    10883       -2     
==========================================
+ Hits        36412    36413       +1     
+ Misses       7904     7895       -9     
+ Partials     2610     2607       -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/694?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/694/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `86.17% <100.00%> (+0.58%)` | :arrow_up: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/694/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `88.46% <100.00%> (ø)` | |
| [aesara/tensor/random/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/694/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `98.57% <100.00%> (-0.07%)` | :arrow_down: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/694/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `83.91% <0.00%> (+0.12%)` | :arrow_up: |

codecov[bot](2021-12-14 04:36:06):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/700?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#700](https://codecov.io/gh/aesara-devs/aesara/pull/700?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d1cdf81) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/79961a6252d9b1c6afd392c166fa767d3d0baee7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (79961a6) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/700/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/700?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #700   +/-   ##
=======================================
  Coverage   77.66%   77.66%           
=======================================
  Files         152      152           
  Lines       46973    46973           
  Branches    10894    10894           
=======================================
  Hits        36480    36480           
  Misses       7895     7895           
  Partials     2598     2598           
```



codecov[bot](2021-12-15 20:59:49):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/701?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#701](https://codecov.io/gh/aesara-devs/aesara/pull/701?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a119a25) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/79961a6252d9b1c6afd392c166fa767d3d0baee7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (79961a6) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/701/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/701?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #701      +/-   ##
==========================================
- Coverage   77.66%   77.66%   -0.01%     
==========================================
  Files         152      152              
  Lines       46973    46961      -12     
  Branches    10894    10891       -3     
==========================================
- Hits        36480    36470      -10     
+ Misses       7895     7894       -1     
+ Partials     2598     2597       -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/701?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/701/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `80.27% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/701/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.78% <100.00%> (ø)` | |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/701/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `87.13% <100.00%> (+0.16%)` | :arrow_up: |
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/701/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/701/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaGFwZS5weQ==) | `88.20% <100.00%> (-0.21%)` | :arrow_down: |

ricardoV94(2021-12-15 09:35:22):```suggestion
    PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param augment must be C-contiguous.");
```
ricardoV94(2021-12-15 09:40:29):Why must it be C-contiguous? The loop below should work fine regardless of memory layout no?
ricardoV94(2021-12-15 09:50:48):Seems like the new code is not using the `ndim` anymore, which the failing test depended on: https://github.com/aesara-devs/aesara/runs/4530278695?check_suite_focus=true#step:6:336

https://github.com/Theano/Theano/pull/5616/files#r102949026
brandonwillard(2021-12-15 19:44:45):Not sure; those checks might've originally been there for the `PyArray_DATA` calls.  Regardless, we don't actually need those anymore&mdash;e.g. we could use `PyArray_GetPtr` in the new code instead.
brandonwillard(2021-12-15 19:55:21):I just made that change.
codecov[bot](2021-12-16 22:48:56):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/704?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#704](https://codecov.io/gh/aesara-devs/aesara/pull/704?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1dfe3bf) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/9b787864acd905fa6b3d3190d242cc60cb867a75?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9b78786) will **increase** coverage by `0.01%`.
> The diff coverage is `70.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/704/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/704?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #704      +/-   ##
==========================================
+ Coverage   77.66%   77.67%   +0.01%     
==========================================
  Files         152      152              
  Lines       46961    46964       +3     
  Branches    10891    10892       +1     
==========================================
+ Hits        36470    36479       +9     
+ Misses       7894     7891       -3     
+ Partials     2597     2594       -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/704?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/704/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `78.49% <0.00%> (ø)` | |
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/704/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `74.06% <100.00%> (+1.97%)` | :arrow_up: |

codecov[bot](2021-12-30 00:31:56):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/711?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#711](https://codecov.io/gh/aesara-devs/aesara/pull/711?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f266c52) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/51792feaf099e4d8378e8dfb986ff91ef938a070?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (51792fe) will **increase** coverage by `0.18%`.
> The diff coverage is `87.14%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/711/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/711?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #711      +/-   ##
==========================================
+ Coverage   78.17%   78.35%   +0.18%     
==========================================
  Files         152      152              
  Lines       47663    47679      +16     
  Branches    10881    10879       -2     
==========================================
+ Hits        37260    37360     +100     
+ Misses       7846     7772      -74     
+ Partials     2557     2547      -10     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/711?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/d3viz/d3viz.py](https://codecov.io/gh/aesara-devs/aesara/pull/711/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2Qzdml6L2Qzdml6LnB5) | `23.68% <0.00%> (ø)` | |
| [aesara/graph/features.py](https://codecov.io/gh/aesara-devs/aesara/pull/711/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `65.95% <ø> (ø)` | |
| [aesara/link/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/711/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `85.21% <0.00%> (ø)` | |
| [aesara/link/vm.py](https://codecov.io/gh/aesara-devs/aesara/pull/711/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `87.19% <ø> (ø)` | |
| [aesara/tensor/nnet/batchnorm.py](https://codecov.io/gh/aesara-devs/aesara/pull/711/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2JhdGNobm9ybS5weQ==) | `77.04% <ø> (ø)` | |
| [aesara/tensor/nnet/neighbours.py](https://codecov.io/gh/aesara-devs/aesara/pull/711/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L25laWdoYm91cnMucHk=) | `91.26% <0.00%> (ø)` | |
| [aesara/tensor/nnet/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/711/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L29wdC5weQ==) | `42.96% <0.00%> (ø)` | |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/711/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `86.23% <22.22%> (-0.01%)` | :arrow_down: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/711/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `78.62% <33.33%> (ø)` | |
| [aesara/scan/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/711/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `80.31% <33.33%> (ø)` | |
| ... and [57 more](https://codecov.io/gh/aesara-devs/aesara/pull/711/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

ricardoV94(2021-12-30 08:25:37):This is really interesting progress. 

I don't have anything to add just yet, but adding this link to an old Theano devs discussion that seems relevant after this PR (when mixing fixed and non-fixed shape variables): https://groups.google.com/g/theano-dev/c/OKiVysM4ySg/m/6Q4iHLseBwAJ
kc611(2021-12-30 11:12:46):> This aligns closes with the approach described in the old typeattr.txt file above, since the TensorType.shape would need to encode missing shape information with something like Nones (e.g. TensorType.shape = (None, 1, None) would be equivalent to TensorType.broadcastable = (False, True, False)).

I have a question over here. If we have the full static shape information at the Type level, what are the cases in which we might be needing this ? 

I might be misunderstanding what we mean by `full static shape information`, I assume it is the literal information about the shape. (as a tuple of integers or something which helps us derive that.)
brandonwillard(2021-12-30 17:23:06):> > This aligns closes with the approach described in the old typeattr.txt file above, since the TensorType.shape would need to encode missing shape information with something like Nones (e.g. TensorType.shape = (None, 1, None) would be equivalent to TensorType.broadcastable = (False, True, False)).
> 
> I have a question over here. If we have the full static shape information at the Type level, what are the cases in which we might be needing this ?
> 
> I might be misunderstanding what we mean by `full static shape information`, I assume it is the literal information about the shape. (as a tuple of integers or something which helps us derive that.)

Yes, that's exactly what it is; one can create a `TensorVariable` (or a subclass thereof) that has fixed, concrete shape information, such that `var.shape` would return a `tuple` of `int`s.

Aside from providing exact shapes upfront, it can also simplify a lot of the shape inference and remove the need for some graph elements (e.g. `Shape`, `Rebroadcast`, and similar `Op`s).  

More immediately, we simplify our `Op` implementations, which currently have no consistent means of modeling fixed-size/shape terms.  For instance, we're forced to use vararg inputs, or `Op`-level constants that specify the number of inputs/dimensions (e.g. `Op.ndim`), in order to model shape-like arguments, but those approaches quickly become cumbersome or even not applicable in the face of multiple such inputs.  `Join`, `Split`, `MakeVector`,  and `Alloc` are all good examples.  With these changes, it would be possible to use a single fixed-length/shape input in these `Op`s (e.g. `MakeVector`'s `*inputs` could be `input`, if `input` were fixed-length).  (Note that this could also be addressed with support for a `tuple`-like type.)

For the same reasons, to fix #608 we would need to change `RandomVariable` so that it carries around the concrete length of its `size` input, just like those other `Op`s; however, we can address this&mdash;and much more&mdash;with the changes here.

There are also a few other related interfaces (e.g. #93) that can be improved along the way, like `TensorConstant.shape`, which can be made consistent with its premise of modeling a known constant and&mdash;thus&mdash;a known shape.
brandonwillard(2022-01-10 05:13:16):I removed the additional `FixedShape*` classes and simply updated `TensorType` so that it now has a `TensorType.shape` that contains all shape information.  `None` is used to encode unknown/no static shape information.

The most noticeable change is probably in the `TensorType` interface: where we once had `broadcastable`, we now have `shape`.  One can still use the `bool` tuples/lists to specify broadcastable dimensions (i.e. `1` and `None`-patterned shapes), but the keywords arguments have changed.
ricardoV94(2022-01-10 06:21:11):Is there a (way to) warn about the broadcastable deprecation before removing it completely? 
brandonwillard(2022-01-10 16:20:05):> Is there a (way to) warn about the broadcastable deprecation before removing it completely?

Do you mean the the `TensorType(..., broadcastable=...)` keyword argument?  There aren't too many user-level cases for the use of this interface, and, the changes necessary are simply `broadcastable` -> `shape`, so this change shouldn't be a big issue; however, we could smooth it out with a deprecation warning.
brandonwillard(2022-01-10 18:26:58):I removed the `FixedShape*` types and extended `TensorType` instead.  It definitely seems like the better option overall.

Otherwise, this is almost ready to go; I just need to go through the uncovered lines and add any missing tests for the new/changed functionality.
brandonwillard(2022-01-12 19:54:37):@aesara-devs/aesara I'm ready to merge this one, so get ready for follow-ups and potential unforeseen issues! 
twiecki(2022-01-13 03:47:54):Nice, this is a big one 🥳 .
twiecki(2022-01-13 03:48:31):I know you don't like to talk about JAX ;) but does that help at all with omnistaging?
brandonwillard(2022-01-13 03:55:04):> I know you don't like to talk about JAX ;) but does that help at all with omnistaging?

It actually could, but there are still a few follow-ups needed in order to consistently propagate this new static shape information.  I'll try to provide those in the next couple days.
kc611(2021-12-30 10:43:29):I presume over here (and at all the other similar TODOs) we'd need to check something like `node.inputs[0].type.is_compatible(some_type)` for `some_type` in `complex_types` 

I may be misunderstanding the issue over here though. 
kc611(2021-12-30 10:48:01):Can you explain to me why we aren't able to use `Type.is_compatible` over here (and similar such places) ? 
brandonwillard(2021-12-30 17:01:57):Those specific TODOs need to be addressed, I haven't gotten to them yet.  At this point, I only want to identify all the places where strict `Type` comparisons are made.
  
More importantly, a lot of the changes in that one commit (i.e. a670243) need to carefully reconsidered, because `Type.is_compatible` is not symmetric (i.e. `t1.is_compatible(t2)` is not equal to `t2.is_compatible(t1)` unless `t1 == t2`), and some of those order choices might not be correct.
brandonwillard(2021-12-30 17:02:41):See [the comment above](https://github.com/aesara-devs/aesara/pull/711#discussion_r776805017).
kc611(2022-01-10 06:30:31):> Is there a (way to) warn about the broadcastable deprecation before removing it completely?

@ricardoV94 It's still there (atleast the user facing part of it) except that it's now derived from the static shape. I guess we can put in a warning here if we intend to remove it.
ricardoV94(2022-01-10 06:51:34):Thanks, I was missing it!
brandonwillard(2022-01-10 16:17:33):Oh, I hadn't planned to remove that.  We will need to change a lot more things after this PR is merged, but those are related to using more static shape information, instead of the `broadcastable` values that we've been using.
brandonwillard(2021-12-31 05:24:15):Thanks for the PR!

I noticed that there's a merge commit in this branch.  We won't be able to merge this PR with such commits present, so you'll need to rebase this onto `upstream/main` in order to remove the commits.
codecov[bot](2021-12-31 06:30:25):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/713?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#713](https://codecov.io/gh/aesara-devs/aesara/pull/713?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ea8a1d4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/20581c3f4281483f7763a19d104fd83bb2031d7b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (20581c3) will **increase** coverage by `0.13%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/713/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/713?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #713      +/-   ##
==========================================
+ Coverage   78.03%   78.17%   +0.13%     
==========================================
  Files         152      152              
  Lines       47719    47719              
  Branches    10893    10893              
==========================================
+ Hits        37237    37302      +65     
+ Misses       7889     7849      -40     
+ Partials     2593     2568      -25     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/713?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/signal/pool.py](https://codecov.io/gh/aesara-devs/aesara/pull/713/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaWduYWwvcG9vbC5weQ==) | `69.34% <0.00%> (+8.16%)` | :arrow_up: |

aerubanov(2022-01-01 06:43:31):@brandonwillard , Thanks for quick responce! I rebased the branch.
brandonwillard(2022-01-01 20:45:24):The failure observed in CI should be fixed by #716.
kc611(2022-01-01 18:19:25):@oscargus Thank you for the PR. 

Looks like that particular if-else case was just there to access the `blas-info` directly without printing any system related info to the user. Seems to me it was just there for user convenience. 

cc @brandonwillard 
codecov[bot](2022-01-01 18:53:20):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/716?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#716](https://codecov.io/gh/aesara-devs/aesara/pull/716?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (807aa39) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ff4b91dddede43d63d348bdec8fe1079932146b0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ff4b91d) will **increase** coverage by `0.35%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 807aa39 differs from pull request most recent head 9b3559a. Consider uploading reports for the commit 9b3559a to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/716/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/716?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #716      +/-   ##
==========================================
+ Coverage   77.67%   78.03%   +0.35%     
==========================================
  Files         152      152              
  Lines       46964    47716     +752     
  Branches    10892    10892              
==========================================
+ Hits        36479    37234     +755     
+ Misses       7891     7889       -2     
+ Partials     2594     2593       -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/716?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `49.45% <100.00%> (+0.62%)` | :arrow_up: |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.92% <0.00%> (-0.85%)` | :arrow_down: |
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.60% <0.00%> (-0.19%)` | :arrow_down: |
| [aesara/tensor/xlogx.py](https://codecov.io/gh/aesara-devs/aesara/pull/716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci94bG9neC5weQ==) | `100.00% <0.00%> (ø)` | |
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <0.00%> (ø)` | |
| [aesara/typed\_list/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3R5cGVkX2xpc3Qvb3B0LnB5) | `100.00% <0.00%> (ø)` | |
| [aesara/tensor/random/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdXRpbHMucHk=) | `100.00% <0.00%> (ø)` | |
| [aesara/link/numba/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvcmFuZG9tLnB5) | `100.00% <0.00%> (ø)` | |
| [aesara/link/numba/dispatch/nlinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvbmxpbmFsZy5weQ==) | `100.00% <0.00%> (ø)` | |
| [aesara/graph/unify.py](https://codecov.io/gh/aesara-devs/aesara/pull/716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3VuaWZ5LnB5) | `99.34% <0.00%> (+<0.01%)` | :arrow_up: |
| ... and [54 more](https://codecov.io/gh/aesara-devs/aesara/pull/716/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

oscargus(2022-01-01 19:20:16):As it was not tested with NumPy 1.22 I added all later Python versions to the tests. Maybe not how it should be in the long run, but to see if the tests can be run with NumPy 1.22...
brandonwillard(2022-01-01 19:48:48):> As it was not tested with NumPy 1.22 I added all later Python versions to the tests. Maybe not how it should be in the long run, but to see if the tests can be run with NumPy 1.22...

It's worth running all these in this PR, but we need to find a lighter weight way of adding new versions, because all these will extend the testing time by too much.  I'll create a separate issue for that (https://github.com/aesara-devs/aesara/issues/717), and, once a single run of the PR in this form passes, we can remove those changes and follow up later.
oscargus(2022-01-01 20:14:19):Yes, running all are not really a worthwhile idea. Also, it seems like there are things in 3.10 that are probably compiled as it currently has been installing dependencies for almost half an hour...

Also, I realized that you are installing through mamba and at least recently 1.22 was not available there.

Python 3.6 has reached end of life recently, so at least that can be dropped I guess. Let me know which version I should include and I can push another one, either here or after.
brandonwillard(2022-01-01 20:26:03):> Yes, running all are not really a worthwhile idea. Also, it seems like there are things in 3.10 that are probably compiled as it currently has been installing dependencies for almost half an hour...

Ouch.  Yeah, we'll have to look into that one.

> Also, I realized that you are installing through mamba and at least recently 1.22 was not available there.

Good to know, thanks!  If anything, it seems like we might need to an explicit test for the latest NumPy.


> Python 3.6 has reached end of life recently, so at least that can be dropped I guess. Let me know which version I should include and I can push another one, either here or after.

Yes, we can drop 3.6 and shift the tests to cover 3.7 and 3.9 for now.  We should probably test the upper and lower ranges instead (i.e. 3.7 and 3.10), but I want to look at those 3.10 runs separately first.

oscargus(2022-01-01 20:27:47):New attempt without 3.6 (obsolete) and 3.10 (long time installing).
brandonwillard(2022-01-01 20:29:01):Looks like [the 3.10 failure](https://github.com/aesara-devs/aesara/runs/4680838635?check_suite_focus=true#step:5:13) might be due to the VM running out of memory during the Mamba install step.
brandonwillard(2022-01-01 21:35:19):All right, everything looks good!  If you don't mind dropping 3.8 from the test matrix, we can merge this right now and cut a release.
oscargus(2022-01-01 23:02:07):I've dropped 3.8 now, so should be good to go.
brandonwillard(2022-01-01 23:02:48):Much appreciated!
codecov[bot](2022-01-02 01:08:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/719?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#719](https://codecov.io/gh/aesara-devs/aesara/pull/719?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9992e0a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/cb6fd028137494bbbc7b1812aee32057cc0edbb3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (cb6fd02) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/719/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/719?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #719   +/-   ##
=======================================
  Coverage   78.03%   78.03%           
=======================================
  Files         152      152           
  Lines       47716    47719    +3     
  Branches    10892    10893    +1     
=======================================
+ Hits        37234    37237    +3     
  Misses       7889     7889           
  Partials     2593     2593           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/719?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/719/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `86.05% <100.00%> (+0.08%)` | :arrow_up: |

brandonwillard(2022-01-02 01:39:32):Thanks again, @oscargus!
ricardoV94(2022-01-02 08:45:33):This breaks a bit with how other variable names are displayed in the `dprint` (after the `id`)
oscargus(2022-01-02 13:24:40):> This breaks a bit with how other variable names are displayed in the `dprint` (after the `id`)

Ahh, now I understand how it was meant to be for that case... (I had a quick look at debugprint and, well, it was not straightforward from a quick look how it works...) As I understands it, the first part is simply the `str` of the object, id, and then name. But, well, it works for the expression so should be possible to solve for TensorConstant as well.
ricardoV94(2022-01-02 13:27:00):> > This breaks a bit with how other variable names are displayed in the `dprint` (after the `id`)
> 
> Ahh, now I understand how it was meant to be for that case... (I had a quick look at debugprint and, well, it was not straightforward from a quick look how it works...) As I understands it, the first part is simply the `str` of the object, id, and then name. But, well, it works for the expression so should be possible to solve for TensorConstant as well.

Do you want to try it in a followup PR?
oscargus(2022-01-02 18:00:49):> Do you want to try it in a followup PR?

I think it should be quite straightforward, except for a fundamental issue. 

Right now it prints as:
https://github.com/aesara-devs/aesara/blob/20581c3f4281483f7763a19d104fd83bb2031d7b/aesara/printing.py#L572

It is straightforward to change this to something like:
https://github.com/aesara-devs/aesara/blob/20581c3f4281483f7763a19d104fd83bb2031d7b/aesara/printing.py#L484
i.e. add a `'r.name'` in the correct place.

`print(r)` and the `{r}` part in the first line will out of necessity give the same output. So the option is to provide a new property, `_debug_print` that gives the `TensorConstant{1}` string (the `__str__` method can then return that if name is not defined).

I should admit that I have not used aesara, but just wanted to fix the NumPy issue for SymPy reasons, so I do not really know about all the different cases that may end up here, but to get something that prints as expected for `TensorConstant` (and hopefully doesn't break anything else) should be quite doable.

Are there some more complex example expressions to play around with somewhere?
brandonwillard(2022-01-02 19:18:36):> This breaks a bit with how other variable names are displayed in the `dprint` (after the `id`)

Only in that it adds/retains the data print-out, but that's fine, because `Constant`s are the only type of `Variable` that have data elements to print in the first place (aside from their shared counterparts, of course), so there isn't a relevant precedence there.

Otherwise, with regard to `dprint` printing the name after the `id` block: that isn't relevant here, because `Constant`s don't have "owners" (i.e. they aren't the outputs of `Apply` nodes, they're "atomic"), and that style of name printing is only applicable to `Variable`s with owners.

Under this PR we get the following:
```python
import aesara
import aesara.tensor as at


z = at.constant(1, name='z')
aesara.dprint(z * 2)
# Elemwise{mul,no_inplace} [id A] ''
#  |z{1} [id B]
#  |TensorConstant{2} [id C]
```

Now, here's an example that's easily the most similar to the case above (and its output was not affected by this PR):
```python
# `a.owner is None`, which is the same for `z`
a = at.scalar("a")
aesara.dprint(a * 2)
# Elemwise{mul,no_inplace} [id A] ''
#  |a [id B]
#  |TensorConstant{2} [id C]
```


Again, the only difference is that the `Constant` will also print its value, which has been the standard for a while.  Now, the name _and_ the value are printed, which is perfectly fine and doesn't break with anything.


codecov[bot](2022-01-03 14:22:38):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/721?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#721](https://codecov.io/gh/aesara-devs/aesara/pull/721?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (616c38d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/20581c3f4281483f7763a19d104fd83bb2031d7b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (20581c3) will **increase** coverage by `0.00%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/721/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/721?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #721   +/-   ##
=======================================
  Coverage   78.03%   78.03%           
=======================================
  Files         152      152           
  Lines       47719    47717    -2     
  Branches    10893    10893           
=======================================
- Hits        37237    37236    -1     
+ Misses       7889     7888    -1     
  Partials     2593     2593           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/721?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/blas\_c.py](https://codecov.io/gh/aesara-devs/aesara/pull/721/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ibGFzX2MucHk=) | `83.14% <ø> (ø)` | |
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/721/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `80.43% <ø> (ø)` | |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/721/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `86.20% <ø> (+0.14%)` | :arrow_up: |

brandonwillard(2022-01-03 21:08:27):Looks great; thanks again!
codecov[bot](2022-01-03 15:01:13):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/722?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#722](https://codecov.io/gh/aesara-devs/aesara/pull/722?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (cdf2e15) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/20581c3f4281483f7763a19d104fd83bb2031d7b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (20581c3) will **decrease** coverage by `0.00%`.
> The diff coverage is `74.28%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/722/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/722?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #722      +/-   ##
==========================================
- Coverage   78.03%   78.03%   -0.01%     
==========================================
  Files         152      152              
  Lines       47719    47718       -1     
  Branches    10893    10893              
==========================================
- Hits        37237    37236       -1     
  Misses       7889     7889              
  Partials     2593     2593              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/722?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvb3BzLnB5) | `83.57% <0.00%> (ø)` | |
| [aesara/d3viz/d3viz.py](https://codecov.io/gh/aesara-devs/aesara/pull/722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2Qzdml6L2Qzdml6LnB5) | `23.68% <0.00%> (ø)` | |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `50.27% <ø> (ø)` | |
| [aesara/misc/check\_blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL21pc2MvY2hlY2tfYmxhcy5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/misc/latence\_gpu\_transfert.py](https://codecov.io/gh/aesara-devs/aesara/pull/722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL21pc2MvbGF0ZW5jZV9ncHVfdHJhbnNmZXJ0LnB5) | `0.00% <0.00%> (ø)` | |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `48.95% <0.00%> (ø)` | |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `82.04% <ø> (ø)` | |
| [aesara/tensor/nnet/corr.py](https://codecov.io/gh/aesara-devs/aesara/pull/722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvcnIucHk=) | `75.29% <0.00%> (ø)` | |
| [aesara/tensor/nnet/corr3d.py](https://codecov.io/gh/aesara-devs/aesara/pull/722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvcnIzZC5weQ==) | `75.82% <0.00%> (ø)` | |
| [aesara/tensor/nnet/ctc.py](https://codecov.io/gh/aesara-devs/aesara/pull/722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2N0Yy5weQ==) | `41.86% <0.00%> (ø)` | |
| ... and [33 more](https://codecov.io/gh/aesara-devs/aesara/pull/722/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

brandonwillard(2022-01-03 21:18:14):Oh, also, you don't have to put a period after commit messages.  We've been using [this convention](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html) (mostly).
codecov[bot](2022-01-05 13:04:54):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/725?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#725](https://codecov.io/gh/aesara-devs/aesara/pull/725?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2f6c33d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/cfa867b3c48ca66de48d2299233fb0bff40f480d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (cfa867b) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/725/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/725?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #725   +/-   ##
=======================================
  Coverage   78.17%   78.17%           
=======================================
  Files         152      152           
  Lines       47716    47718    +2     
  Branches    10893    10893           
=======================================
+ Hits        37300    37302    +2     
  Misses       7848     7848           
  Partials     2568     2568           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/725?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/725/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `84.97% <100.00%> (+0.04%)` | :arrow_up: |

codecov[bot](2022-01-07 18:06:02):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/728?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#728](https://codecov.io/gh/aesara-devs/aesara/pull/728?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (00bef72) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/f2be96993cf2178973b5f2b48c84913e06dd169d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f2be969) will **not change** coverage.
> The diff coverage is `89.88%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/728/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/728?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #728   +/-   ##
=======================================
  Coverage   78.15%   78.15%           
=======================================
  Files         152      152           
  Lines       47635    47635           
  Branches    10878    10878           
=======================================
  Hits        37231    37231           
  Misses       7846     7846           
  Partials     2558     2558           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/728?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/breakpoint.py](https://codecov.io/gh/aesara-devs/aesara/pull/728/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2JyZWFrcG9pbnQucHk=) | `55.00% <ø> (ø)` | |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/728/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `87.45% <ø> (ø)` | |
| [aesara/raise\_op.py](https://codecov.io/gh/aesara-devs/aesara/pull/728/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3JhaXNlX29wLnB5) | `98.64% <ø> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/728/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `86.25% <ø> (ø)` | |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/728/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `84.37% <ø> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/728/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `89.67% <ø> (ø)` | |
| [aesara/tensor/nnet/ctc.py](https://codecov.io/gh/aesara-devs/aesara/pull/728/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2N0Yy5weQ==) | `41.86% <25.00%> (ø)` | |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/728/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `82.41% <50.00%> (ø)` | |
| [aesara/tensor/signal/pool.py](https://codecov.io/gh/aesara-devs/aesara/pull/728/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaWduYWwvcG9vbC5weQ==) | `69.34% <65.71%> (ø)` | |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/728/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `65.74% <66.66%> (ø)` | |
| ... and [32 more](https://codecov.io/gh/aesara-devs/aesara/pull/728/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

ricardoV94(2022-01-10 06:59:55):> LGTM! Doesn't look like there are any unexpected changes. 
> 
> One more thing, should we be doing the same for `aesara.scalar` i.e. `aes` -> `as` ? 

`as` is a Python syntax word (not sure if hard or soft reserved), so probably not. Anyway scalar is mostly used internally so it shouldn't matter if it's more verbose
twiecki(2022-01-10 07:05:22):Thanks @kc611, I rebased to solve the conflicts and merge once tests pass.
twiecki(2022-01-10 07:06:31):@kc611 Need a new approval.
codecov[bot](2022-01-08 18:13:40):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/734?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#734](https://codecov.io/gh/aesara-devs/aesara/pull/734?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (89b4839) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e476ebcdd4222758cddd4523cd19248c88fb4dd2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e476ebc) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/734/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/734?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #734   +/-   ##
=======================================
  Coverage   78.17%   78.17%           
=======================================
  Files         152      152           
  Lines       47718    47718           
  Branches    10893    10893           
=======================================
  Hits        37302    37302           
  Misses       7848     7848           
  Partials     2568     2568           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/734?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/734/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `78.57% <100.00%> (ø)` | |
| [aesara/graph/features.py](https://codecov.io/gh/aesara-devs/aesara/pull/734/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `65.95% <100.00%> (ø)` | |
| [aesara/graph/fg.py](https://codecov.io/gh/aesara-devs/aesara/pull/734/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `88.70% <100.00%> (ø)` | |

anooptp(2022-01-08 18:18:12):Thank you @brandonwillard 
codecov[bot](2022-01-08 21:35:21):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/735?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#735](https://codecov.io/gh/aesara-devs/aesara/pull/735?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (304a60c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/4355a58fda5da691d7739f2259e75b2239a9fcb4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4355a58) will **decrease** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/735/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/735?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #735      +/-   ##
==========================================
- Coverage   78.17%   78.15%   -0.02%     
==========================================
  Files         152      152              
  Lines       47718    47635      -83     
  Branches    10893    10878      -15     
==========================================
- Hits        37302    37231      -71     
+ Misses       7848     7846       -2     
+ Partials     2568     2558      -10     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/735?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/735/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `71.31% <ø> (-0.08%)` | :arrow_down: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/735/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `78.62% <100.00%> (+0.05%)` | :arrow_up: |
| [aesara/graph/fg.py](https://codecov.io/gh/aesara-devs/aesara/pull/735/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `86.77% <0.00%> (-1.94%)` | :arrow_down: |

codecov[bot](2022-01-09 06:08:15):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/736?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#736](https://codecov.io/gh/aesara-devs/aesara/pull/736?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0bed116) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/85326def3765f0668d3638fa479804fe804b5db4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (85326de) will **increase** coverage by `0.00%`.
> The diff coverage is `88.88%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/736/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/736?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #736   +/-   ##
=======================================
  Coverage   78.15%   78.16%           
=======================================
  Files         152      152           
  Lines       47635    47641    +6     
  Branches    10878    10880    +2     
=======================================
+ Hits        37231    37238    +7     
+ Misses       7846     7845    -1     
  Partials     2558     2558           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/736?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/736/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `99.31% <88.88%> (+0.74%)` | :arrow_up: |

ricardoV94(2022-01-09 08:55:10):Related to https://github.com/aesara-devs/aesara/issues/454
ricardoV94(2022-01-10 20:35:32):As discussed on Gitter and in the linked issue, one issue with this approach is that it creates a more "invisible" graph (the default_updates one), which complicates things like variable replacement e.g., when using `clone_replace`.
brandonwillard(2022-01-10 21:17:21):> As discussed on Gitter and in the linked issue, one issue with this approach is that it creates a more "invisible" graph (the default_updates one), which complicates things like variable replacement e.g., when using `clone_replace`.

Is there a good MWE demonstrating this?  It should be more than possible to perform standard replacements in a graph when updates are used.
ricardoV94(2022-01-11 07:28:15):I'll check a MWE but it seems this was a known issue in Theano: https://github.com/Theano/Theano/issues/1467
rlouf(2022-01-13 16:49:28):Do you get a graph equivalent to when using `RandomStream`s?

```python
import aesara
import aesara.tensor as at

srng = at.random.RandomStream()

def inner_fn():
    return srng.normal()

out, updates = aesara.scan(inner_fn, n_steps=10)
print(aesara.dprint(out))
#for{cpu,scan_fn}.0 [id A] ''
# |TensorConstant{10} [id B]
# |RandomGeneratorSharedVariable(<Generator(PCG64) at 0x7F2535159D60>) [id C]
# |TensorConstant{10} [id B]
#
#Inner graphs:
#
#for{cpu,scan_fn}.0 [id A] ''
# >normal_rv{0, (0, 0), floatX, False}.1 [id D] ''
# > |<RandomGeneratorType> [id E] -> [id C]
# > |TensorConstant{[]} [id F]
# > |TensorConstant{11} [id G]
# > |TensorConstant{0.0} [id H]
# > |TensorConstant{1.0} [id I]
# >normal_rv{0, (0, 0), floatX, False}.0 [id J] ''
# > |<RandomGeneratorType> [id E] -> [id C]
# > |TensorConstant{[]} [id F]
# > |TensorConstant{11} [id G]
# > |TensorConstant{0.0} [id H]
# > |TensorConstant{1.0} [id I]
```

I was wondering then _why_ we would want `RandomVariable` to behave this way if we want to present `RandomStream` as the default way of doing things?
brandonwillard(2022-01-13 19:41:11):> Do you get a graph equivalent to when using `RandomStream`s?

Not always _exactly_ the same results, due to the seeding used by `RandomStream`, but these changes are reproducing the shared RNG construction approach used by `RandomStream` within `RandomVariable`.



> I was wondering then _why_ we would want `RandomVariable` to behave this way if we want to present `RandomStream` as the default way of doing things?

These changes are only intended to make the non-`RandomStream` use of `RandomVariable` behave a little more intuitively (e.g. make `RandomVariable`'s in `Scan` update automatically).

I'm not really a fan of this approach; I mostly set it up to only demonstrate the ideas we were talking about, but also leave it open for adoption if it did serve better than the current defaults.

We should really be focusing on making the non-shared use of RNGs work.
rlouf(2022-01-14 14:11:52):> We should really be focusing on making the non-shared use of RNGs work.

I agree. `RandomStream`s already does the automatic updates.
zoj613(2022-01-09 16:18:44):Any reason why you make use of `set` here? it seems `len` returns 10 without it.
brandonwillard(2022-01-09 21:39:30):It was just a cheap way to make sure there were 10 sampled values: i.e.  not all repeats of the same value, which is the often confusing default that we're trying to avoid with these changes.  

It's definitely not a great way to do that, but with a fixed seed, it basically works.  Also, it doesn't really _need_ to be `... == 10`; it could be `... > 1`.
zoj613(2022-01-09 22:00:51):Ah, I see. `assert np.unique(out.eval()).size > 1` would work too but its a longer expression.
codecov[bot](2022-01-11 02:48:16):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/740?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#740](https://codecov.io/gh/aesara-devs/aesara/pull/740?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3416017) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/85326def3765f0668d3638fa479804fe804b5db4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (85326de) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/740/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #740   +/-   ##
=======================================
  Coverage   78.15%   78.16%           
=======================================
  Files         152      152           
  Lines       47635    47652   +17     
  Branches    10878    10880    +2     
=======================================
+ Hits        37231    37249   +18     
  Misses       7846     7846           
+ Partials     2558     2557    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/740/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `84.45% <100.00%> (+0.08%)` | :arrow_up: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/740/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `88.60% <100.00%> (+0.14%)` | :arrow_up: |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/740/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `86.31% <0.00%> (+0.06%)` | :arrow_up: |

brandonwillard(2022-01-13 20:17:02):> The tests currently fail with

The compiled function appears to be returning `None`, which isn't generally a valid output, and definitely not in this scenario.

It should probably be returning an empty array of the appropriate dtype and number of dimensions.
rlouf(2022-01-17 15:06:24):I actually think we should output  `None` in the current version of the test, since outputs are supposed to be of the same type as `output_info`.
brandonwillard(2022-01-17 15:42:01):> I actually think we should output `None` in the current version of the test, since outputs are supposed to be of the same type as `output_info`.

Unless `Scan` is changed to support non-`TensorType` outputs, `None` cannot be a valid return value.

More importantly, `f_pow` clearly specifies `TensorType` outputs for the inner graph, and, as a result, the outer graph.
rlouf(2022-01-17 15:50:42):Never mind,  I re-read the documentation in the meantime and scan should indeed return an output of size 0. Looking into it.
rlouf(2022-01-20 10:10:31):So I did update `self.n_outs` which indeed did not include `n_nit_sot`. All tests related to empty sequences/zero steps now pass locally with the right value for `self.n_outs`.

However doing so broke two unrelated tests: `test_using_tap_sequences` (Theano/Theano#702) and `test_using_negative_taps_sequence` (Theano/Theano#2947). These tests will only pass if `self.n_outs` is set to `0`, which is not the *expected* behaviour: `self.n_outs` should give the number of outputs, `1` in this case.
brandonwillard(2022-01-20 22:46:45):> So I did update `self.n_outs` which indeed did not include `n_nit_sot`. All tests related to empty sequences/zero steps now pass locally with the right value for `self.n_outs`.
> 
> However doing so broke two unrelated tests: `test_using_tap_sequences` ([Theano/Theano#702](https://github.com/Theano/Theano/pull/702)) and `test_using_negative_taps_sequence` ([Theano/Theano#2947](https://github.com/Theano/Theano/pull/2947)). These tests will only pass if `self.n_outs` is set to `0`, which is not the _expected_ behaviour: `self.n_outs` should give the number of outputs, `1` in this case.

They merged that first PR [with `ipdb.set_trace()` in the test](https://github.com/Theano/Theano/pull/702/files#diff-ac5d584a57e130ebb7556dfdf376347e511961dc7a1b918a7bbdfca225178651R695)!

Anyway, those tests are very high-level (i.e. they aren't explicitly testing `self.n_outs == 0`), so we only need to make changes that are consistent with the high-level functionality asserted by those tests.
brandonwillard(2022-01-20 23:12:59):Inspecting the compiled graph in `test_empty_sequence_empty_output_info` gives the following:

```python
>>> update_fn.maker.fgraph.outputs[0].owner.op.info
ScanInfo(tap_array=(), n_seqs=1, n_mit_mot=0, n_mit_mot_outs=0, mit_mot_out_slices=(), n_mit_sot=0, n_sit_sot=0, n_shared_outs=0, n_nit_sot=1)
```

~The `n_sit_sot == 0` value seems incorrect; same with `n_nit_sot == 1`.  It looks like the logic is confusing a "SIT-SOT" with a "NIT-SOT".~  No, now that I've looked over this more carefully, it's definitely some kind of messed up logic in the handling of these quantities.

The info does seem correct, because there really are no input "taps" (i.e. recursive outputs), since the only input is provided by an external sequence, so `n_nit_sot` should be equal to `1` and nothing else among the "taps" values.

However, all throughout the `Scan` code, many uses of `self.n_outs` have `self.n_nit_sot` added to them.  It's likely that the definition of `n_outs` doesn't match its name.
codecov[bot](2022-01-21 02:32:02):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/741?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#741](https://codecov.io/gh/aesara-devs/aesara/pull/741?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e19d1ce) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/a73ac95c22f79fde7ab1453ff1eb9d30254dfad8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a73ac95) will **increase** coverage by `0.00%`.
> The diff coverage is `77.77%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/741/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/741?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #741   +/-   ##
=======================================
  Coverage   78.39%   78.40%           
=======================================
  Files         152      152           
  Lines       47779    47782    +3     
  Branches    10880    10881    +1     
=======================================
+ Hits        37457    37462    +5     
+ Misses       7774     7773    -1     
+ Partials     2548     2547    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/741?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/741/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vYmFzaWMucHk=) | `87.50% <ø> (+0.45%)` | :arrow_up: |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/741/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `82.38% <75.00%> (+0.06%)` | :arrow_up: |
| [aesara/scan/scan\_perform\_ext.py](https://codecov.io/gh/aesara-devs/aesara/pull/741/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vc2Nhbl9wZXJmb3JtX2V4dC5weQ==) | `80.32% <100.00%> (ø)` | |

brandonwillard(2022-01-11 21:14:47):You might need to return something here, because who knows what the code below is doing when this is `0`.
ricardoV94(2022-01-11 21:32:44):Is the returned  value 1? Why not assert the expected output directly?
rlouf(2022-01-12 06:57:13):In a previous version I returned here, but it does not change anything in practice. Probably safer and more explicit so I will do that.
rlouf(2022-01-13 10:18:21):The returned value is an empty array (same behavior as JAX's for stacked outputs).
brandonwillard(2022-01-13 20:20:50):> The returned values is an empty array (same behavior as JAX's for stacked outputs).

There's no need to reference JAX; these changes only need to fit our established operational assumptions (e.g. the `Type`s associated with each quantity).
brandonwillard(2022-01-13 20:23:53):The output storage (i.e. `output_storage`) should be populated with the appropriate type of empty array.
brandonwillard(2022-01-13 20:26:34):You might even be able to do this _before_ reaching this point (i.e. before calling the Cython function).  

(NB: You could even avoid creating `Scan` nodes altogether in some cases, but we don't need to focus on that here/now.)
rlouf(2022-01-14 09:47:16):> The output storage (i.e. output_storage) should be populated with the appropriate type of empty array.

Isn't what is done from line 235 on? This works locally, tests are only failing in the CI.

> You might even be able to do this before reaching this point

Not creating `Scan` nodes was my original approach, but it proved too complicated given my current understanding of the internals of the library. I'll try to make the change upstream as you suggested.
brandonwillard(2022-01-14 22:56:43):> This works locally, tests are only failing in the CI.

Don't forget that you need to clear the compilation cache (e.g. `aesara-cache clear`) between changes to any C and, in this case, Cython code (because it uses the same cache).  

> Not creating `Scan` nodes was my original approach, but it proved too complicated given my current understanding of the internals of the library. I'll try to make the change upstream as you suggested.

I was referring to somewhere like `Scan.make_thunk`, where you could use `storage_map[node.inputs[0]][0]` to get the numeric value value of `n_steps` before entering the Cython code or `Scan.perform`; however, you would still need to know that the value won't change, because once the thunk is made, that's what will be used by the resulting `Function` from there on.



brandonwillard(2022-01-14 23:11:04):Also, the Cython and Python versions need to be as one-to-one as possible, so we can't have only the Cython version short-circuiting here.
codecov[bot](2022-01-11 22:16:51):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/743?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#743](https://codecov.io/gh/aesara-devs/aesara/pull/743?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a90c14d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/3edbbc4e1efaad6e897a72c92eccc775a806fb63?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3edbbc4) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/743/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/743?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #743   +/-   ##
=======================================
  Coverage   78.16%   78.17%           
=======================================
  Files         152      152           
  Lines       47652    47661    +9     
  Branches    10880    10881    +1     
=======================================
+ Hits        37249    37258    +9     
  Misses       7846     7846           
  Partials     2557     2557           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/743?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/743/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `65.74% <100.00%> (ø)` | |
| [aesara/tensor/type\_other.py](https://codecov.io/gh/aesara-devs/aesara/pull/743/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlX290aGVyLnB5) | `82.75% <100.00%> (+1.98%)` | :arrow_up: |

codecov[bot](2022-01-11 23:24:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/744?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#744](https://codecov.io/gh/aesara-devs/aesara/pull/744?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5abde4d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/8763981ca4263e153c68e6be39c03a272c027b60?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8763981) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 5abde4d differs from pull request most recent head b60030f. Consider uploading reports for the commit b60030f to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/744/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/744?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #744      +/-   ##
==========================================
+ Coverage   79.23%   79.25%   +0.01%     
==========================================
  Files         152      152              
  Lines       47943    48006      +63     
  Branches    10909    10933      +24     
==========================================
+ Hits        37990    38048      +58     
+ Misses       7453     7449       -4     
- Partials     2500     2509       +9     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/744?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/nlinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubGluYWxnLnB5) | `98.76% <100.00%> (+0.18%)` | :arrow_up: |
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `72.11% <0.00%> (-2.66%)` | :arrow_down: |
| [aesara/link/numba/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvdGVuc29yX2Jhc2ljLnB5) | `97.95% <0.00%> (-2.05%)` | :arrow_down: |
| [aesara/link/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `85.00% <0.00%> (-1.50%)` | :arrow_down: |
| [aesara/tensor/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaGFwZS5weQ==) | `90.93% <0.00%> (-1.29%)` | :arrow_down: |
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `86.32% <0.00%> (-0.80%)` | :arrow_down: |
| [aesara/link/c/lazylinker\_c.py](https://codecov.io/gh/aesara-devs/aesara/pull/744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9sYXp5bGlua2VyX2MucHk=) | `65.95% <0.00%> (-0.71%)` | :arrow_down: |
| [aesara/link/c/cutils.py](https://codecov.io/gh/aesara-devs/aesara/pull/744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jdXRpbHMucHk=) | `68.18% <0.00%> (-0.71%)` | :arrow_down: |
| [aesara/sparse/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `82.47% <0.00%> (-0.43%)` | :arrow_down: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `49.52% <0.00%> (-0.24%)` | :arrow_down: |
| ... and [27 more](https://codecov.io/gh/aesara-devs/aesara/pull/744/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

zoj613(2022-01-12 21:43:47):> Is it possible that `np.matmul` functionality can be implemented by a helper function that dispatches to the existing `aesara.tensor.math.Dot` and `aesara.tensor.math.tensordot`? If so, that would save considerable time and effort attempting to (re)implement the `Op.grad` and `Op.infer_shape` logic.

Not sure this is best given that `matmul` behaviour is different from dot's depending on the shape of the inputs. See the PR description. I managed to implement the `infer_shape` method without much hassle.
zoj613(2022-01-12 21:53:40):> `tests.unittest_tools.InferShapeTester` to create automate the `Op.infer_shape` tests.

Could you elaborate on this part? Do I necessarily have to implement a `test_infer_shape` method or is this automated by inheriting from `InferShapeTester`? I see that some tests implement this method and some dont. not sure what is the best practice here.
brandonwillard(2022-01-12 21:55:27):> > `tests.unittest_tools.InferShapeTester` to create automate the `Op.infer_shape` tests.
> 
> Could you elaborate on this part? Do I necessarily have to implement a `test_infer_shape` method or is this automated by inheriting from `InferShapeTester`? I see that some tests implement this method and some dont. not sure what is the best practice here.

Yeah, you need to create a subclass and then call the method(s) it provides.  It can be a useful tool, but, if you want to make custom tests, that's also fine.
zoj613(2022-01-12 21:56:57):> > > `tests.unittest_tools.InferShapeTester` to create automate the `Op.infer_shape` tests.
> > 
> > 
> > Could you elaborate on this part? Do I necessarily have to implement a `test_infer_shape` method or is this automated by inheriting from `InferShapeTester`? I see that some tests implement this method and some dont. not sure what is the best practice here.
> 
> Yeah, you need to create a subclass and then call the method(s) it provides. It can be a useful tool, but, if you want to make custom tests, that's also fine.

as in `_compile_and_check`?
Sayam753(2022-06-21 15:28:40):@zoj613 is there anything left to be completed in this PR? 

The PR https://github.com/aesara-devs/aesara/pull/808 is blocked to use `matmul` operation (implemented in this PR).


brandonwillard(2022-06-21 19:12:16):It looks like this can't be rebased by maintainers, and we need to (squash and) rebase to make sure it passes with all the recent changes&mdash;especially the shape-inference-related ones.  @zoj613, is "Allow edits and access to secrets by maintainers" not enabled/checked?
Sayam753(2022-07-07 07:45:31):@brandonwillard is this PR ready to be merged?
purna135(2022-07-20 15:46:13):Thank you so much for this PR, @zoj613! I'm keeping an eye on it, and it appears that some minor changes are required before this can be merged. Are you able to push this PR to the boundary line? I have a strong dependency on this PR.
brandonwillard(2022-07-23 20:35:26):I've just noticed that `numpy.matmul` is essentially a `ufunc` of `dot`.  With that in mind, the right way to do this is to first close https://github.com/aesara-devs/aesara/issues/695 and use that functionality to implement this.

In the meantime, I've updated the tests and docstrings.
purna135(2022-07-30 03:39:26):Hello, @brandonwillard. Is this PR now ready to be merged?
I have some PR that are waiting for this PR to be merged because my work is dependent on `matrix_inverse` at #808, which is once again blocked by this PR : (
zoj613(2022-07-30 21:53:25):I am looking into adding a grad/L_op/R_op method for this. It appears that it won't be as straight forward as re-using one for the `Dot` Op since `matmul` has slight differences in behavior, especially for dimensions > 2.
brandonwillard(2022-07-30 21:55:08):> I am looking into adding a grad/L_op/R_op method for this. It appears that it won't be as straight forward as re-using one for the `Dot` Op since `matmul` has slight differences in behavior, especially for dimensions > 2.

Yeah, I realized that the logic for doing that is a slightly specialized form of the logic we need in https://github.com/aesara-devs/aesara/pull/757, so it's better that we focus our efforts there.
brandonwillard(2022-01-12 00:22:25):```suggestion
```
brandonwillard(2022-01-12 00:25:52):`broadcast_shape` is a relatively expensive thing to do just to get the number of output dimensions.
brandonwillard(2022-01-12 00:29:15):`broadcastable` indicates which dimensions have shape `1`.  This light form of shape inference can be pretty important for optimizations, so it's always worth attempting to determine the `broadcastable` pattern given the `broadcastable` patterns of the inputs.

Take a look at `aesara.tensor.math.Dot.make_node` for some of the relevant logic.
brandonwillard(2022-01-12 00:36:23):The tests are currently failing under `aesara.config.floatX = "float32"`.  This is due to the NumPy test values having type `float64` by default.  If you convert the values with `.astype(config.floatX)`, the problem should be solved.
zoj613(2022-01-12 21:44:20):You're right, i didn't think that one through. Resolved in latest commit.
rlouf(2022-01-13 11:07:06):`aesara` noob question: don't we have to check that the shapes are broadcastable when creating the node?
rlouf(2022-01-13 11:08:56):I think it would be better to be "dumb" (and explicit) about the `if... elif... else` logic here.
rlouf(2022-01-13 11:49:45):If `broadcast_shape` works the same way as `np.broadcast_shapes` work wouldn't this work?

```python
import numpy as np

a = (4, 5, 8, 2, 3)
b = (3, 2, 3, 4, 5, 8, 3, 3)
res = np.broadcast_shapes(a[:-2], b[:-2]) + a[-2:-1] + b[-1:])
```
brandonwillard(2022-01-13 20:42:03):As a means of confirming that the shapes are compatible with the operation, but in the context of partial static shape information (i.e. the old `TensorType.broadcastable`, and now the new `TensorType.shape`)?

If that's what you're asking, then&mdash;generally speaking&mdash;yeah, we should consider every opportunity to do things like that, especially when it helps prevent more cryptic errors down the line.

If we're talking about a dot product operation, then we should be able to check that the last dimension of `a` has the same broadcast value as the first dimension of `b` (i.e. `a.type.broadcastable[-1] == b.type.broadcastable[0]`); however, this isn't sufficient to guarantee a mismatch in shapes, because a `False` value could actually be broadcastable, we just don't know that at "compile" time.  We could do even better now that `TensorType.shape` is available, though.
brandonwillard(2022-01-13 20:47:42):It might work, but this explicit case handling will definitely produce simpler graphs in most cases.  Hopefully, we'll come up with an efficient solution to canonicalizing the results of `Op.infer_shape`, but, at this point, we don't have one implemented, so local "optimizations" like this aren't unwelcome.

In summary, if the output can be represented that succinctly it really should be, but due to other limitations of this library, it's currently acceptable.

At the very least, we should add a comment with the ideal/succinct implementation, so it can be used when we address the broader issues.
zoj613(2022-01-14 04:59:46):```  File "/home/zoj/.conda/envs/aesara/lib/python3.7/site-packages/numpy/lib/stride_tricks.py", line 470, in broadcast_shapes
    arrays = [np.empty(x, dtype=[]) for x in args]
  File "/home/zoj/.conda/envs/aesara/lib/python3.7/site-packages/numpy/lib/stride_tricks.py", line 470, in <listcomp>
    arrays = [np.empty(x, dtype=[]) for x in args]
TypeError: 'TensorVariable' object cannot be interpreted as an integer
```
numpy is not too happy about receiving TensorVariable in the np.broadcast_shapes implementation.  Here is a reproduction example:
```python
In [21]: np.empty((at.as_tensor(3), at.as_tensor(4)), dtype=[])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-21-a80110ee1c26> in <module>
----> 1 np.empty((at.as_tensor(3), at.as_tensor(4)), dtype=[])

TypeError: 'TensorConstant' object cannot be interpreted as an integer
```
zoj613(2022-01-14 05:04:15):but using the aesara implementation produces its own errors:
```
aesara/tensor/basic_opt.py:1008: KeyError
----------------------------------------------------------------- Captured log call ------------------------------------------------------------------
ERROR    aesara.graph.opt:opt.py:221 SeqOptimizer apply <aesara.tensor.basic_opt.ShapeOptimizer object at 0x7f21fa584310>
ERROR    aesara.graph.opt:opt.py:222 Traceback:
ERROR    aesara.graph.opt:opt.py:223 Traceback (most recent call last):
  File "/home/zoj/dev/aesara/aesara/graph/opt.py", line 279, in apply
    sub_prof = optimizer.optimize(fgraph)
  File "/home/zoj/dev/aesara/aesara/graph/opt.py", line 101, in optimize
    self.add_requirements(fgraph)
  File "/home/zoj/dev/aesara/aesara/tensor/basic_opt.py", line 1411, in add_requirements
    fgraph.attach_feature(ShapeFeature())
  File "/home/zoj/dev/aesara/aesara/graph/fg.py", line 569, in attach_feature
    attach(self)
  File "/home/zoj/dev/aesara/aesara/tensor/basic_opt.py", line 1221, in on_attach
    self.on_import(fgraph, node, reason="on_attach")
  File "/home/zoj/dev/aesara/aesara/tensor/basic_opt.py", line 1288, in on_import
    self.set_shape(r, s)
  File "/home/zoj/dev/aesara/aesara/tensor/basic_opt.py", line 1053, in set_shape
    shape_vars.append(self.unpack(s[i], r))
  File "/home/zoj/dev/aesara/aesara/tensor/basic_opt.py", line 1008, in unpack
    s_i = self.shape_of[x][i]
KeyError: Subtensor{::, ::, int64, int64}.0
```
@brandonwillard do you have an idea of what might causing this?
brandonwillard(2022-01-14 05:31:33):> numpy is not too happy about receiving TensorVariable in the np.broadcast_shapes implementation. Here is a reproduction example:

You definitely don't want to pass NumPy Aesara variables.  Use the equivalent Aesara function instead.
zoj613(2022-01-14 05:34:02):That doesn't work either as shown in the stack trace right above your post. Do you know why its throwing an error like that?
zoj613(2022-01-14 05:49:05):the shape inference works if I use something like `(3, 2, 4, 5), (3, 2, 5, 7)`, but fails for `(3, 2, 4, 5), (2, 5, 7)`
brandonwillard(2022-01-14 06:00:08):> but using the aesara implementation produces its own errors:

The error is saying that `ShapeFeature`, which keeps track of all the shapes in a `FunctionGraph`, is missing an entry for a `Variable` it has encountered.  This can happen when `ShapeFeature` comes across a `Variable` that wasn't properly added to the `FunctionGraph`, because such variables wouldn't have triggered `FunctionGraph`'s callbacks and&mdash;as a result&mdash;wouldn't have been picked up by `ShapeFeature`.

If this is caused by the use of `broadcast_shape` in `MatMul.infer_shape`, then it's probably because `broadcast_shape` is introducing those elements.  If I recall, `broadcast_shape` will use the shapes of its arguments, and any time a shape is requested for a `Variable` (e.g. 
 via the `TensorVariable.shape` method) a `Shape` `Op` is created in the resulting graph.  The function of `ShapeFeature` is to replace those `Shape`s with the results of the relevant `Op`'s `Op.infer_shape` method (like the one you're writing).

What's likely happening is that your `MatMul.infer_shape` is creating a graph that computes the shape of a `Variable`, and that graph itself contains `Shape` `Op`s that need to be converted by `ShapeFeature`, but the inputs to some of those `Shape` `Op`s are new `Variable`s that were just created inside of `MatMul.infer_shape`, so `ShapeFeature` has never seen them and raises that `KeyError`.

The solution is to always avoid using `Shape` `Op`s inside of the graphs produced by an `Op.infer_shape`.  This is part of the reason why `Op.infer_shape` has an argument that specifies the shapes of the `Op`s inputs, because those are all one should need in order to compute the shape of the `Op`'s outputs.

Unfortunately, this restriction and approach are largely due to some very old design issues.  I actually opened an issue earlier today about this very situation: #749.
zoj613(2022-01-14 06:02:06):Never mind. I was completely unaware that `broadcast_shape` has a `arrays_are_shapes` parameter. everything works now. Embarrassing moment there /*face palm*/.
brandonwillard(2022-01-14 06:05:16):It's nothing to be embarrassed about; the source of the confusion is primarily due to an unnecessarily confusing and convoluted shape handling system.  There's no good reason that one shouldn't be able to use shapes in the standard way within an `Op.infer_shape` implementation.  It's simply a restriction born out of poor design.
zoj613(2022-01-14 06:05:41):you're right, i made the conditionals more explicit in latest commit.
zoj613(2022-01-14 06:27:40):```python
In [2]: a = np.random.rand(1, 2, 4, 5) 
In [3]: b = np.random.rand(1, 5, 7)
In [4]: np.matmul(a,b).shape
Out[4]: (1, 2, 4, 7)
In [9]: at.matmul(a, b).type.broadcastable
Out[9]: (False, False, False, False)
```
Just to be sure I understand @rlouf 's concern correctly, we're referring to the problem shown in the snippet above where the first element of the output's `broadcastable` is `False` when it should be `True` because of the `1`?. How would we know the shape inside of `make_node` in order to encode this information while creating the output node? I thought it was impossible?
brandonwillard(2022-01-14 06:42:46):If I understood correctly, he wasn't necessarily talking about having the correct broadcast pattern for the `Type`s output by `MatMul` (although that's also very important), but that the broadcast patterns could be used for input validation in `MatMul.make_node`.

For example, take the following incompatible inputs:
```python
import numpy as np
import aesara.tensor as at


a = np.random.rand(1)
b = np.random.rand(2)

np.matmul(a, b)
# ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 1)
```

Our Aesara version of `np.matmul` should raise an error for the same inputs, as well, and it will; however, it will raise that error _at run-time_ and not when the symbolic graph is created.  Now, in this example, we might've been able to tell that the inputs were not compatible based on the partial shape information provided by the broadcast patterns:

```python
a_at = at.as_tensor(a)
b_at = at.as_tensor(b)

a_at.type.broadcastable
# (True,)
b_at.type.broadcastable
# (False,)
```
Unfortunately, this isn't really enough to work with, unless you take the broadcast patterns too strictly, because these boolean broadcast values really translate to static shape information like `a_at.type.shape == (1,)` and `b_at.type.shape == (None,)` (this was conceptually true even before #711 was merged).  The `None` indicates that we do not know the shape of `b_at` at "compile" time.  It could be _anything_, including `(1,)`, so we can't actually use it for input validation in this (and most) case(s).

Nevertheless, you seem to have found an example for which the broadcast pattern of the _output_ of `MatMul` isn't correct, and that should definitely be fixed.
rlouf(2022-01-14 06:49:48):That's what I meant, sorry for not expressing myself more clearly.
rlouf(2022-01-14 10:15:38):Yeah definitely nothing to be embarrassed about, the API is also very confusing here.
zoj613(2022-01-15 13:14:23):I implemented a mechanism to validate the input shapes at compile time. If overuse of conditionals makes the code a bit off-putting so any refactoring tips are welcome.
brandonwillard(2022-01-15 20:14:47):Looks like you've anticipated one of the major improvements we need to make: https://github.com/aesara-devs/aesara/issues/732!
brandonwillard(2022-01-15 20:24:27):This use of a shared RNG state induces test method order dependence; instead, if you create and seed the RNG objects within each independent test unit, they can be run in any order (and in parallel) and produce consistent results.
zoj613(2022-01-15 20:50:53):Just to be clear: by "test unit" you mean each independent `test_*` method?
brandonwillard(2022-01-15 20:51:32):> Just to be clear: by "test unit" you mean each independent `test_*` method?

Yes
rlouf(2022-01-16 05:45:52):As per your comment, I don't find this necessarily off-putting. If you really want to avoid repeating conditionals you can always use dictionaries:

```python
cases = [
    {
        "case_fn": lambda x1, x2: x1.ndim==1 and x2.ndim ==1,
        "error_fn": lambda x1_shape, x2_shape: x1_shape[0] != x2_shape[0],
        "error_msg": "1d inputs must have the same length."
    }
]

if validate:
    for case in cases:
        x1_shape, x2_shape = shapes
        if case["cond_fn"](x1, x2) and case["error_fn"](x1_shape, x2_shape):
            raise ValueError(case["error_msg"])      
```

But it doesn't make the code any clearer imho. Repetition is not necessarily bad. Having said that you could return before all the conditionals if `validate == False`
zoj613(2022-01-16 06:59:34):Yeah, it looks like trying to be clever here is not going to improve readability. I'll leave it as is.
brandonwillard(2022-07-11 23:47:25):```suggestion
```
brandonwillard(2022-07-11 23:48:44):```suggestion
    """Compute a matrix product of two tensor variables.
```
brandonwillard(2022-07-11 23:50:20):Let's add type hints here instead of the docstring.
brandonwillard(2022-07-11 23:50:44):```suggestion
        `x1`, `x2` are 1-d vectors.
```
brandonwillard(2022-07-11 23:51:06):```suggestion
        If the last dimension of `x1` is not the same size as the second-to-last
        dimension of `x2`. If a scalar value is passed in.
```
brandonwillard(2022-07-11 23:52:12):```suggestion
    `matmul` differs from `dot` in two important ways:
```
brandonwillard(2022-07-11 23:52:38):```suggestion
    - Multiplication by scalars is not allowed, use `mul` instead.
```
brandonwillard(2022-07-11 23:53:00):```suggestion
        respecting the signature ``(n, k), (k, m) -> (n, m)``:
```
brandonwillard(2022-07-11 23:55:55):It looks like all the tests are sharing the same class-level RNG object.  As I mentioned earlier, this will make the results order-dependent.  We need to construct the RNG object within each individual test in order to avoid that.

N.B. A fixture could be used if you don't want to copy-paste the RNG construction code each time.
brandonwillard(2022-07-11 23:58:14):Do these test arrays need to be this large in order to reach the relevant code path?
brandonwillard(2022-07-11 23:59:09):Same here; unless we're testing functionality that requires large arrays, let's keep the sizes as low as possible.
codecov[bot](2022-01-12 20:42:31):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/745?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#745](https://codecov.io/gh/aesara-devs/aesara/pull/745?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8e30d88) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/3edbbc4e1efaad6e897a72c92eccc775a806fb63?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3edbbc4) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/745/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/745?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #745   +/-   ##
=======================================
  Coverage   78.16%   78.17%           
=======================================
  Files         152      152           
  Lines       47652    47663   +11     
  Branches    10880    10881    +1     
=======================================
+ Hits        37249    37260   +11     
  Misses       7846     7846           
  Partials     2557     2557           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/745?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/sparse/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/745/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `82.11% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/745/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `65.74% <0.00%> (ø)` | |
| [aesara/tensor/type\_other.py](https://codecov.io/gh/aesara-devs/aesara/pull/745/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlX290aGVyLnB5) | `82.75% <0.00%> (+1.98%)` | :arrow_up: |

aerubanov(2022-01-12 20:58:11):I just deleted this strange assert.
brandonwillard(2022-01-12 21:03:26):By the way, if you're interested in revolutionizing the sparse matrix support in Aesara, take a look at https://github.com/aesara-devs/aesara/pull/303.  It's actually pretty close to done, but I haven't had the time to get back to it.  You're more than welcome to take that over, though.
aerubanov(2022-01-13 09:58:34):@brandonwillard, Thanks for the information! I'll be sure to take a look at that pool-request.
brandonwillard(2022-01-17 02:37:06):Regarding your question [here](https://github.com/aesara-devs/aesara/issues/753#issuecomment-1013857838), first, install `conda` (e.g. via [Miniconda](https://docs.conda.io/en/latest/miniconda.html)), then create a Conda environment for Aesara using the `environment.yml` file (see the instructions [in the file](https://github.com/aesara-devs/aesara/blob/150add2cde542805b69e74da235e5e7d9ff22d3c/environment.yml#L3)).

Afterward, you should have a working Conda development environment named `aesara-dev`.  See the [NumPy documentation](https://numpy.org/doc/stable/dev/development_environment.html#using-virtual-environments) for a general overview.

We also have a `Makefile` that can be used to create a Conda environment from the `requirements.txt` file and one using `venv`.

For a recap and the remaining steps, see the Aesara development start guide [here](https://aesara.readthedocs.io/en/latest/dev_start_guide.html#installation-and-configuration).
brandonwillard(2022-09-26 19:57:01):Closing in favor of https://github.com/aesara-devs/aesara/pull/1215.
Sayam753(2022-08-29 14:55:22):Hi @brandonwillard 
Can you explain what transform function is and how it is used in computing L_Op?
brandonwillard(2022-08-29 20:49:47):Just like its `Elemwise` counterpart, `transform` is supposed to use a "template" gradient graph for each input to construct broadcasted gradient graphs in which all the relevant `Op`s are `Elemwise`/`Blockwise` `Op`s applied to the original inputs.

Let's take a look at what's happening in `Blockwise.L_op` in first `test_Blockwise_grad` test.

First, the graph for which we want the L-op/gradient:
```python
aesara.dprint(outputs)
# Blockwise{op=<tests.tensor.test_blockwise.DotBW object at 0x7f5e8236fd90>, signature=((('m', 'n'), ('n', 'p')), (('m', 'p'),))} [id A] <TensorType(float64, (None, None, None))>
#  |input 0 [id B] <TensorType(float64, (None, None, None))>
#  |input 1 [id C] <TensorType(float64, (None, None, None))>
```
It's a `Blockwise` dot product node with two 3D inputs named `input 0` and `input 1`.

A "template" graph of the gradient is produced for each input and stored in `core_inp_grads`.  Each element of `core_inp_grads` corresponds to the generic form of a single-block's gradient wrt. each input.
```python
aesara.dprint(core_inp_grads, print_type=True)
# dot [id A]
#  |<TensorType(float64, (None, None))> [id B]
#  |InplaceDimShuffle{1,0} [id C]
#    |<TensorType(float64, (None, None))> [id D]
# dot [id E]
#  |InplaceDimShuffle{1,0} [id F]
#  | |<TensorType(float64, (None, None))> [id G]
#  |<TensorType(float64, (None, None))> [id B]
```
We can see that the gradient of a `dot` in a single block is just another `dot`, and that the original inputs aren't present; instead some stand-in variables are used and they're 2D (i.e. `TensorType`s with `(None, None)` static shapes).  
In other words, we've used the core dimensions specified by the `Blockwise` and its `Op` to remove the broadcasted dimensions (i.e. that determine each block) and produce the generic form of a single "block"'s L-op from an existing `Op.[grad|L_op]` implementation.

Now, we can't simply replace those stand-in inputs with `input 0` and/or `input 1`, because the `dot`s in the gradient graphs don't work block-wise and, as a result, cannot take the original inputs as inputs.  Also, the `InplaceDimShuffle` applied to one of the inputs in each graph wouldn't work with an input containing an extra third dimension.

The idea is that we need to convert the templates' `dot`s into `Blockwise(dot)`s and do something about the `InplaceDimShuffle`s.  My guess is that the first input's gradient graph would end up looking like the following after applying `transform`:
```python
# Blockwise{op=<tests.tensor.test_blockwise.DotBW object at 0x7f5e8236fd90>, signature=((('m', 'n'), ('n', 'p')), (('m', 'p'),))} [id A]
#  |input 0 [id B]
#  |InplaceDimShuffle{1,0,2} [id C]
#    |input 1 [id D]
```
The `DimShuffle`ed dimensions will probably require a little bit of calculation involving `Blockwise.signature` (i.e. to transpose the correct, core dimensions), but most other `Op`s should be `Blockwise` amenable&mdash;at least after we formalize and attach the relevant signature information to our `Op`s.  `DimShuffle` is perhaps a special case in which we don't want to create a `Blockwise` `Op`, mostly because there's no point in literally applying a `DimShuffle` block-wise when a new, equivalent `DimShuffle` can be produced that accomplishes the same thing, but more succinctly.

Any `Op`s that can't be converted to a `Blockwise` form (e.g. because they don't provide signature information in some way or another) should result in a no-gradient error.
codecov[bot](2022-01-17 14:11:33):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/759?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#759](https://codecov.io/gh/aesara-devs/aesara/pull/759?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0d53568) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/4ab08dea1e70e7ecbac65ae1dead415f95e8360d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4ab08de) will **increase** coverage by `0.02%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/759/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/759?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #759      +/-   ##
==========================================
+ Coverage   78.44%   78.47%   +0.02%     
==========================================
  Files         154      154              
  Lines       47749    47763      +14     
  Branches    10848    10850       +2     
==========================================
+ Hits        37458    37480      +22     
+ Misses       7749     7745       -4     
+ Partials     2542     2538       -4     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/759?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/759/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `87.21% <100.00%> (+0.63%)` | :arrow_up: |

ricardoV94(2022-01-18 08:51:10):Yeah, I forgot about the new changes, and added those from muscle memory. 

I checked the specific rewrites affected by this PR, and the only special case that should be needed is when the simplification returns the original input `x`, in which case there may have been a cast from integer to float. I added a commit that removes the preexisting type checks in these two rewrites.
codecov[bot](2022-01-17 18:55:27):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/760?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#760](https://codecov.io/gh/aesara-devs/aesara/pull/760?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ccd8360) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c19ac79965eb4b3b11f432fd46efc620aa28f72f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c19ac79) will **increase** coverage by `0.00%`.
> The diff coverage is `90.24%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/760/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/760?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #760   +/-   ##
=======================================
  Coverage   78.91%   78.92%           
=======================================
  Files         152      152           
  Lines       47657    47698   +41     
  Branches    10852    10861    +9     
=======================================
+ Hits        37609    37646   +37     
- Misses       7548     7550    +2     
- Partials     2500     2502    +2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/760?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/760/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `86.06% <90.24%> (+0.23%)` | :arrow_up: |

ricardoV94(2022-04-28 09:30:26):Fixed a wrong assumption that we could perform this rewrite as long as the steps were equal.

Also got rid of `is` comparisons and simplified the tests. 
brandonwillard(2022-01-17 22:33:55):If you need to check that two term graphs are (syntactically) the same, use the function in `aesara.graph.basic`.  That will cover more cases, as well.
ricardoV94(2022-01-18 09:01:47):Thanks. I assume you mean `equal_computations`
brandonwillard(2022-01-19 00:59:20):We need to start considering more carefully what should and shouldn't be canonicalizations.

I'm fine adding this, but, given the size of the domain(s) we're working within, there's definitely a practical limit to how much we can cover.
brandonwillard(2022-01-19 01:01:31):```suggestion
    r"""Simplify contiguous :class:`Subtensor`\s inside a :class:`Join`.
```

Keep in mind that we need to be more consistent about the format and formatting of our docstrings.
brandonwillard(2022-01-19 01:04:35):If you `continue` on the negation of this condition, you can simplify these and the following statements.
ricardoV94(2022-01-19 05:56:27):Yeah I am okay with not having this in canonicalization. As for the useless, I still didn't figure out when is that pass used or if it's simply an optional thing
brandonwillard(2022-02-22 02:17:39):```suggestion
    r"""Simplify contiguous :class:`Subtensor`\s inside a :class:`Join`.
```
brandonwillard(2022-02-22 02:18:21):```suggestion
        join((x[:3], x[3:5]), axis=0) -> x[:5]
```
brandonwillard(2022-02-22 02:29:01):If the sub-graphs that evaluate to `True` under `equal_computations` can be merged by `MergeOptimizer`, then use of `equal_computations` can be wasteful (remember, it may need to walk the entire graph).  In such cases, it might be better to use identity comparisons and wait until the sub-graphs have been merged.
ricardoV94(2022-02-22 08:05:47):pre-commit disagrees with that extra indentation
ricardoV94(2022-02-22 08:08:46):That seems to work just fine! Should we still leave the rewrite as `specialize` only?
brandonwillard(2022-02-22 19:24:38):The indent in the docstring?  Weird.  What kind of error does it give?
ricardoV94(2022-02-22 19:27:25):pre-commit just overrides it. Let me see which hook is doing it
brandonwillard(2022-02-22 19:28:31):> That seems to work just fine! Should we still leave the rewrite as `specialize` only?

It's not a question of whether `equal_computations` works, but one of whether or not it also works _without_ `equal_computations` and its associated costs.
ricardoV94(2022-02-22 19:28:44):black, might it be a new behavior?
brandonwillard(2022-02-22 19:29:40):Well, perhaps we can just add a `..code:` above it and get some formatting, or wrap it in backticks.
brandonwillard(2022-02-22 19:30:21):Unless you're saying it _does_ work without `equal_computations`...
ricardoV94(2022-02-22 19:30:35):All the tests I had written worked out of the box...
brandonwillard(2022-02-22 19:31:10):Without it?
ricardoV94(2022-02-22 19:31:24):My question is whether not using `equal_computations` makes the rewrite light enough to justify being a canonicalization. I assumed that was the concern before for making it only a specialization
ricardoV94(2022-02-22 19:34:13):Something like this?
```python
r"""Simplify contiguous :class:`Subtensor`\s inside a :class:`Join`.

..code:
  join((x[:3], x[3:5]), axis=0) -> x[:5]
"""
```
ricardoV94(2022-02-22 19:35:23):> Without it?

Yes. I am no longer using any `equal_computations` in the new rewrite, and all tests pass
brandonwillard(2022-02-22 19:36:18):This is a tough one, because it's a justifiable canonicalization (given our current standard, at least), and it's not completely clear which approach (i.e. `equal_computations`/no `equal_computations) is better on average&mdash;at least in terms of cost.

It's always possible that using `equal_computations` could avoid a few intermediate steps (e.g. the merge steps needed to make the identity-based comparisons `True`, and possibly more), but that has to be offset by the cost of using `equal_computations` in all other cases.
brandonwillard(2022-02-22 19:45:50):As a default, I think it's better to work within the rewrite pipeline, and `equal_computations` has the potential to "override" the basic rewrite pass logic.  For example, given a fixed set of deterministically ordered rewrite passes, another rewrite might be expected to act upon a graph that would've been rewritten under the use of `equal_computations`.  In other words, use of `equal_computations` has the potential to preempt the set of rewrite passes that would've otherwise been applied, because it effectively performs a merge out-of-sequence.

The same goes for our "get constant value" functions, which effectively perform different types of constant folding.

Anyway, this is all just a set of considerations of which I would like everyone to be aware, because we're going to need to address these points at different places and times throughout this work. 
brandonwillard(2022-02-22 19:51:15):I think it's `.. code::` (or `.. code:: python`).
brandonwillard(2022-04-28 06:40:21):Why is `__getitem__` being called explicitly here?
brandonwillard(2022-04-28 06:40:43):Why `is`?
ricardoV94(2022-04-28 07:51:23):IIRC, because we wanted to avoid use of `equal_computations` and rely on variable identity / constant merging
brandonwillard(2022-04-28 07:55:11):`==` is the best approach, because it requires fewer redundant comparisons across types that implement `__eq__` properly.
ricardoV94(2022-04-28 07:59:46):Oh, I was under the impression that equality of TensorVariables was always `True`!
ricardoV94(2022-04-28 09:28:02):No good reason
brandonwillard(2022-04-29 01:18:40):Sorry, the reason I thought of the `is`/`==` difference when I saw this was that it seemed unnecessary to&mdash;effecitvely&mdash;write an `__eq__` implementation for `slice`.  In other words, it seems like you should be able to replace `equal_idxs(idxs_nonaxis_subtensor1, idxs_nonaxis_subtensor2)` with `idxs_nonaxis_subtensor1 == idxs_nonaxis_subtensor2` and remove `equal_idxs` altogether.
ricardoV94(2022-04-29 06:58:41)::facepalm: 
codecov[bot](2022-01-17 19:47:23):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/761?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#761](https://codecov.io/gh/aesara-devs/aesara/pull/761?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (cde1d32) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/51792feaf099e4d8378e8dfb986ff91ef938a070?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (51792fe) will **increase** coverage by `0.17%`.
> The diff coverage is `87.14%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/761/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #761      +/-   ##
==========================================
+ Coverage   78.17%   78.34%   +0.17%     
==========================================
  Files         152      152              
  Lines       47663    47656       -7     
  Branches    10881    10876       -5     
==========================================
+ Hits        37260    37337      +77     
+ Misses       7846     7772      -74     
+ Partials     2557     2547      -10     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/d3viz/d3viz.py](https://codecov.io/gh/aesara-devs/aesara/pull/761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2Qzdml6L2Qzdml6LnB5) | `23.68% <0.00%> (ø)` | |
| [aesara/graph/features.py](https://codecov.io/gh/aesara-devs/aesara/pull/761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `65.95% <ø> (ø)` | |
| [aesara/link/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `85.21% <0.00%> (ø)` | |
| [aesara/link/vm.py](https://codecov.io/gh/aesara-devs/aesara/pull/761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `87.19% <ø> (ø)` | |
| [aesara/tensor/nnet/batchnorm.py](https://codecov.io/gh/aesara-devs/aesara/pull/761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2JhdGNobm9ybS5weQ==) | `77.04% <ø> (ø)` | |
| [aesara/tensor/nnet/neighbours.py](https://codecov.io/gh/aesara-devs/aesara/pull/761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L25laWdoYm91cnMucHk=) | `91.26% <0.00%> (ø)` | |
| [aesara/tensor/nnet/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L29wdC5weQ==) | `42.96% <0.00%> (ø)` | |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.87% <ø> (-0.06%)` | :arrow_down: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `86.23% <22.22%> (-0.01%)` | :arrow_down: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `78.62% <33.33%> (ø)` | |
| ... and [58 more](https://codecov.io/gh/aesara-devs/aesara/pull/761/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

codecov[bot](2022-01-18 04:14:14):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/762?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#762](https://codecov.io/gh/aesara-devs/aesara/pull/762?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (73f332e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/652e6e4a535a633635473b556d15f39b5d62a38a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (652e6e4) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/762/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/762?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #762   +/-   ##
=======================================
  Coverage   78.34%   78.34%           
=======================================
  Files         152      152           
  Lines       47656    47656           
  Branches    10876    10876           
=======================================
  Hits        37337    37337           
  Misses       7772     7772           
  Partials     2547     2547           
```



twiecki(2022-01-18 05:25:41):Awesome, and can we cut a new aesara release with this?
brandonwillard(2022-01-18 05:27:15):> Awesome, and can we cut a new aesara release with this?

Just did.
twiecki(2022-01-18 03:49:35):Don't we need to free it another way?
brandonwillard(2022-01-18 05:15:42):I don't believe it should've been there in the first place, since `_reshape_shape` is `NULL` anyway.  While it shouldn't _hurt_, it doesn't do anything useful.

(Also, there's nothing we can `free` if `malloc` failed to return a valid pointer.)
codecov[bot](2022-01-18 01:25:58):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/763?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#763](https://codecov.io/gh/aesara-devs/aesara/pull/763?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8736400) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/652e6e4a535a633635473b556d15f39b5d62a38a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (652e6e4) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/763/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #763   +/-   ##
=======================================
  Coverage   78.34%   78.35%           
=======================================
  Files         152      152           
  Lines       47656    47667   +11     
  Branches    10876    10879    +3     
=======================================
+ Hits        37337    37348   +11     
  Misses       7772     7772           
  Partials     2547     2547           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/sharedvar.py](https://codecov.io/gh/aesara-devs/aesara/pull/763/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaGFyZWR2YXIucHk=) | `83.67% <100.00%> (+1.45%)` | :arrow_up: |
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/763/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `92.25% <100.00%> (+0.13%)` | :arrow_up: |

aerubanov(2022-01-19 12:35:57):I did a rebase of the branch to the master, which resulted in some of the tests being broken. Now I'm fixing the bugs that occurred, but I decided to open this PR to be able to track progress and discuss changes.
codecov[bot](2022-01-24 15:24:30):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/766?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#766](https://codecov.io/gh/aesara-devs/aesara/pull/766?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d7179fc) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/31ab8fdd4a940fae384e9bc04105a51903f2d588?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (31ab8fd) will **increase** coverage by `0.02%`.
> The diff coverage is `84.10%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/766/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/766?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #766      +/-   ##
==========================================
+ Coverage   78.48%   78.50%   +0.02%     
==========================================
  Files         154      154              
  Lines       47773    47857      +84     
  Branches    10853    10879      +26     
==========================================
+ Hits        37494    37572      +78     
  Misses       7743     7743              
- Partials     2536     2542       +6     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/766?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/766/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy90eXBlLnB5) | `75.66% <ø> (ø)` | |
| [aesara/sparse/sandbox/sp2.py](https://codecov.io/gh/aesara-devs/aesara/pull/766/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9zYW5kYm94L3NwMi5weQ==) | `82.79% <ø> (ø)` | |
| [aesara/tensor/blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/766/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ibGFzLnB5) | `79.61% <26.31%> (-1.06%)` | :arrow_down: |
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/766/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `72.11% <81.08%> (+0.85%)` | :arrow_up: |
| [aesara/sparse/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/766/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `82.47% <94.44%> (+0.39%)` | :arrow_up: |
| [aesara/misc/may\_share\_memory.py](https://codecov.io/gh/aesara-devs/aesara/pull/766/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL21pc2MvbWF5X3NoYXJlX21lbW9yeS5weQ==) | `71.42% <100.00%> (ø)` | |
| [aesara/sparse/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/766/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9vcHQucHk=) | `75.60% <100.00%> (+0.14%)` | :arrow_up: |
| [aesara/sparse/sharedvar.py](https://codecov.io/gh/aesara-devs/aesara/pull/766/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9zaGFyZWR2YXIucHk=) | `94.11% <100.00%> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/766/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `87.63% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/766/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `85.03% <100.00%> (ø)` | |
| ... and [8 more](https://codecov.io/gh/aesara-devs/aesara/pull/766/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

aerubanov(2022-01-25 09:23:06):@brandonwillard , Looks like I fixed tests that were broken after rebase. In your initial PR #303 you noticed that we should "Convert sparse to dense when used with some ```Op```s (e.g. Elemwise, CAReduce)". Could you provide more details about this?
brandonwillard(2022-01-26 19:32:59):> @brandonwillard , Looks like I fixed tests that were broken after rebase. In your initial PR #303 you noticed that we should "Convert sparse to dense when used with some `Op`s (e.g. Elemwise, CAReduce)". Could you provide more details about this?

In order to make the old `TensorVariable` interface, `_tensor_py_operators`,  applicable to sparse matrices, we need to start adding support for currently unsupported sparse operations, like `__get__`, which constructs all sorts of `Subtensor` `Op`s.  Right now, sparse matrices implement their own indexing `Op`s, which is a huge interface problem.  We can't reasonably add sparse matrix-specific logic to `Subtensor`, though.

We can get around this by dispatching to the appropriate sparse `Op`s at the `_sparse_py_operators` interface level, but then there are still some related operations that aren't covered, like advanced indexing on sparse matrices.  If we simply convert sparse matrices to dense matrices at that interface, we can&mdash;at the very least&mdash;make things work (i.e. not return graphs that will err when evaluated).

Really, that's all we need to do in order to merge this: i.e. make sure the new interface doesn't generate graphs that necessarily produces errors, and converting to a dense matrix is a quick and dirty work-around in most cases.
aerubanov(2022-02-01 19:56:16):@brandonwillard ,  I added tests to check that no errors occurred when using ```_tensor_py_operators``` with sparse tensors and added conversion sparse to dense to make them pass. Also, when the conversion happens the warning is generated to inform users about that. Please look at the code and let me know what additional improvements are needed.
aerubanov(2022-02-08 11:27:35):Hi @brandonwillard ! I made the changes according to your comments. Now I override in ```_sparse_py_operators``` unimplemented operations for sparse variables, converting them to dense. So this logic stays inside the sparse module. And I cleaned up the commit history.
brandonwillard(2022-02-08 19:40:59):> Hi @brandonwillard ! I made the changes according to your comments. Now I override in `_sparse_py_operators` unimplemented operations for sparse variables, converting them to dense. So this logic stays inside the sparse module. And I cleaned up the commit history.

Great, thanks!  I'm still a bit backlogged, but I'll review soon.
aerubanov(2022-02-13 08:17:18):Hi @brandonwillard! I just wanted to remind you of this PR just in case. Of course, if you have time for that.
brandonwillard(2022-02-27 00:03:13):I'll fix the rebase issues and push in a minute.
kc611(2022-02-28 10:40:23):LGTM. 

> The biggest issue right now is that TensorTypes aren't an abstract class, and direct instances of TensorTypes represent dense tensors, alongside instances of the new DenseTensor type. It might not take much to make such a change and remove all the meta classes, though.

We should make an issue page for this. Since, this can be tackled separately from the additional logic that we add towards supporting `SparseTypes`. 
aerubanov(2022-03-14 12:26:35):Hi @brandonwillard! I rebased on top of the master and resolved the conflicts.
brandonwillard(2022-03-15 21:32:06):The location and name of the new `tests.test_tensor_interface` needs to be reconsidered, because it's explicitly testing interfaces that already have corresponding test sub-packages/modules (e.g. `tests.sparse` and `tests.tensor.test_var`).  If the `is_sparse == False` case isn't needed (see [here](https://github.com/aesara-devs/aesara/pull/766#discussion_r827431140)), then this module could be relocated/renamed to `tests.sparse.test_var`.
brandonwillard(2022-03-15 22:38:15):I've updated the new tests and added a commit that renames `SparseType` to `SparseTensorType` (to match the newly introduced `DenseTensorType`).
aerubanov(2022-03-16 13:41:15):@brandonwillard, Thanks for the review and the corrections!
brandonwillard(2022-03-16 14:48:05):@aerubanov, thanks for the PR!  This was an important one that required a lot of persistence.  It's this kind of help that really moves things forward, and we truly appreciate it.
aerubanov(2022-01-19 12:39:16):I changed TensorType to DenseTensorType here, because otherwise it trying to create dense constant with sparse data inside.
aerubanov(2022-01-19 12:44:07):Previously a method from the Type class was called here that returned true, but now a method from TensorType is called, which now returns false because it additionally checks for a shape match. So I changed the called method.
brandonwillard(2022-02-01 23:57:00):Is it possible to do this conversion only at the sparse `Variable` interface, or is there something that requires conversion at this point?

Also, this conversion implicitly assumes the sparse `Variable` interface when the type isn't dense, and, if we wanted to be more explicit (which we generally do), we would need to explicitly test for a sparse type.  While that's not really necessary, it does imply the need to import the sparse `Variable` type objects in order to perform the test, which&mdash;in turn&mdash;emphasizes an implicit cross-dependency between the sparse and dense modules that we would like to avoid.

If there's going to be a dependency structure of any sort, it's preferable to have the sparse module depend on the dense one and nothing from the other direction.  That would be the case if the sparse interface handled all conversions to dense types.
brandonwillard(2022-02-01 23:58:07):See my other comment about implicit cross-dependencies between modules.
brandonwillard(2022-02-26 23:38:02):```suggestion
                fgraph.replace(r, new_r, reason=reason, verbose=False, **kwargs)
```

`verbose` is set to `False` here because this method handles that functionality itself.
brandonwillard(2022-03-15 21:26:17):We require that tests utilize explicit `assert`s.  This helps clarify the expectations of the function being tested and the tests themselves.
brandonwillard(2022-03-15 21:28:33):Does the non-sparse case need to be tested explicitly?  It seems like we would necessarily have coverage for the non-sparse/dense cases via the existing `aesara.tensor` tests.
codecov[bot](2022-01-19 18:35:36):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/767?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#767](https://codecov.io/gh/aesara-devs/aesara/pull/767?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7e3792c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/240827cf98db436d99b41dde2a642f256c4332d5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (240827c) will **increase** coverage by `0.00%`.
> The diff coverage is `95.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/767/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/767?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #767   +/-   ##
=======================================
  Coverage   78.35%   78.35%           
=======================================
  Files         152      152           
  Lines       47685    47687    +2     
  Branches    10881    10880    -1     
=======================================
+ Hits        37364    37367    +3     
+ Misses       7773     7772    -1     
  Partials     2548     2548           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/767?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/767/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `85.22% <95.00%> (+0.07%)` | :arrow_up: |

ricardoV94(2022-01-19 19:15:08):> Can you add a MWE that reproduces the issue in the description?

Done
brandonwillard(2022-01-19 19:31:14):I'm starting to see that `local_elemwise_alloc` is one of those old rewrites that needs to be completely rewritten.

For instance, some of its `DimShuffle` parts seem like they should be independent rewrites (or even existing ones).
ricardoV94(2022-01-19 20:07:22):I don't quite get how this rewrite is supposed to work now that I think about it. If we start with `Elemwise(Alloc1(x, shape), Alloc2(y, shape))` and then remove `Alloc1` because we have `Alloc2` -> `Elemwise(x, Alloc2(y, shape))`, how do we prevent `Alloc2` from being removed in the next iteration? If we do that, we lost all shape information, no? In other words, these new tests should actually fail:

```python
(lambda x, y: at.mul(at.alloc(x, 15, 1), at.alloc(y, 15, 1))),
(lambda x, y: at.mul(at.alloc(x, 15, 2), at.alloc(y, 15, 2))),
```

Nevermind, that's what the `asssert_op_in` does

brandonwillard(2022-01-19 20:53:37):> I don't quite get how this rewrite is supposed to work now that I think about it. If we start with `Elemwise(Alloc1(x, shape), Alloc2(y, shape))` and then remove `Alloc1` because we have `Alloc2` -> `Elemwise(x, Alloc2(y, shape))`, how do we prevent `Alloc2` from being removed in the next iteration? If we do that, we lost all shape information, no? In other words, these new tests should actually fail:
> 
> ```python
> (lambda x, y: at.mul(at.alloc(x, 15, 1), at.alloc(y, 15, 1))),
> (lambda x, y: at.mul(at.alloc(x, 15, 2), at.alloc(y, 15, 2))),
> ```
> 
> Nevermind, that's what the `asssert_op_in` does

Yeah, the docstring and logic are both unnecessarily confusing and convoluted.  That&mdash;combined with a lack of quality (e.g. direct) unit tests&mdash;almost necessarily gives rise to these kinds of issues.

This is yet another example of why we need to move toward formalizing our rewrites and their descriptions.  In this case, the docstring uses its own notation (e.g. `y.TensorType(BROADCAST CONDITION)`), and that only serves to make things _more_ confusing.
ricardoV94(2022-01-19 20:59:01):I cleaned a bit the test logic in a separate commit. The two test conditions with the `dimshuffle` fail (now that I removed `"specialize"` from the `include`), because those `Alloc` remain in the `Assert` that is added around `y`. 

This is not necessarily a failure, but suggests the original rewrite was not quite able to deliver what it meant to?
brandonwillard(2022-01-19 21:03:28):> This is not necessarily a failure, but suggests the original rewrite was not quite able to deliver what it meant to?

Wouldn't surprise me, but, while we're fixing this, let's at least make our assumptions/goals very clear in the docstring.

Also, we need to do something about that `DimShuffle` complexity.  I think it's nearly doubling the logic in this rewrite and it doesn't even need to be there.

Is there a `DimShuffle` lift/removal that can be applied to `Alloc`s independently.  For example, `DimShuffle{"x", ...}(Alloc(y, s1, ...)) -> Alloc(y, 1, s1, ...)`?
ricardoV94(2022-01-19 21:05:13):> > This is not necessarily a failure, but suggests the original rewrite was not quite able to deliver what it meant to?
> 
> Wouldn't surprise me, but, while we're fixing this, let's at least make our assumptions/goals very clear in the docstring.
> 
> Also, we need to do something about that `DimShuffle` complexity. I think it's nearly doubling the logic in this rewrite and it doesn't even need to be there.
> 
> Is there a `DimShuffle` lift/removal that can be applied to `Alloc`s independently. For example, `DimShuffle{"x", ...}(Alloc(y, s1, ...)) -> Alloc(y, 1, s1, ...)`?

Yes that could be done, but according to the comments in the docstrings that would be less efficient in the general case (where `Alloc` stay in the graph). I have no basis to ~believe~ evaluate that statement though
brandonwillard(2022-01-19 21:18:31):> Yes that could be done, but according to the comments in the docstrings that would be less efficient in the general case (where `Alloc` stay in the graph)

I don't see how that could be a real problem (for at least the case of adding broadcastable dimensions to an `Alloc`), and, if it actually was realistically more efficient, wouldn't we want an independent "specialization" rewrite that changes _all_ such `Alloc`s into `DimShuffle`s?  It wouldn't make any sense to limit that to the context of this rewrite only.

Here's a quick and dirty check:
```python
def alloc(v, shape):
    res = np.empty(shape)
    res[...] = v
    return res


%timeit alloc(2, (1000, 1000))
258 µs ± 8.04 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

%timeit alloc(2, (1, 1, 1, 1, 1000, 1000, 1, 1, 1, 1))
278 µs ± 19.2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

%timeit np.expand_dims(alloc(2, (1000, 1000)), (0, 1, 2, 3, -1, -2, -3, -4))
282 µs ± 10.9 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)


%timeit alloc(2, (5000, 5000))
21.7 ms ± 2.15 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

%timeit alloc(2, (1, 1, 1, 1, 5000, 5000, 1, 1, 1, 1))
21 ms ± 166 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)

%timeit np.expand_dims(alloc(2, (5000, 5000)), (0, 1, 2, 3, -1, -2, -3, -4))
21.4 ms ± 764 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)

```

The old codebase has some confusing "efficiency"-based comments like that&mdash;ones that I'm not sure were ever necessarily true or relevant. 

Regardless of the practical truth of these kinds of statements, if we consider the entire context (e.g. the ability to add complementary rewrites/canonicalizations, the fact that we do multiple passes and have distinct rewrite stages, etc.), they may be completely irrelevant.
brandonwillard(2022-01-19 23:18:31):The docstring of `local_canonicalize_alloc` mentions this `Alloc`-to-`DimShuffle` topic and says https://github.com/Theano/Theano/issues/4072 provides reasons for why it's needed.  I don't see anything about performance&mdash;or any real justifications other than that it might've helped resolve a different problem by generating graphs that some logic could already handle.

In other words, the rewrites and canonical form for `Alloc` are a mess.

Update: Yes, that's definitely the reason, because `local_useless_dimshuffle_in_reshape` won't be applied unless those `Alloc`s are (partially) converted to `DimShuffle`s.
ricardoV94(2022-01-19 16:34:21):Problem is that we hit this `else` bucket which should only apply to the inputs that are not relevant for the rewrite... 
brandonwillard(2022-01-19 16:59:35):```suggestion
```
ricardoV94(2022-01-19 18:28:47):This looks like a very odd thing. Should we just intercept `Alloc` calls that add new dimensions and return `dimshuffles` instead?
brandonwillard(2022-01-19 18:52:18):Are these tests that will reproduce the issue locally?
brandonwillard(2022-01-19 18:57:02):Why exactly does this matter?  That seems like the most important thing to mention here.
brandonwillard(2022-01-19 18:59:11):```suggestion
```
The purpose of the line below is clear from the function name alone.
brandonwillard(2022-01-19 19:00:04):Can you mention why this is important to do (e.g. to avoid non-termination)?
brandonwillard(2022-01-19 19:01:33):Are we not sure that the changes above will necessarily prevent this from occurring?  If not, perhaps we need to put the logic of this statement somewhere above.
ricardoV94(2022-01-19 19:07:27):Yes, these tests reproduce the issue, and similar others that I found. 

When I disabled the rewrite, no test in this module seemed to complain, so if we had any coverage for the rewrite logic it was coming form indirect tests.
ricardoV94(2022-01-19 19:09:21):This matters in some new edge cases I found while fixing the original issues. Basically it led to the same type of bug, we were returning a new "graph" that was exactly like the original one without realizing it, because we were not addressing all possible cases for an `Alloc` inside the `Elemwise`
brandonwillard(2022-01-19 19:10:37):I'm not able to reproduce the issue on `main` with any of these cases.  Can you produce a debug print of one such graph?
ricardoV94(2022-01-19 19:10:52):I kept finding more corner cases... Hopefully there are no others by this point. 
brandonwillard(2022-01-19 19:12:38):That set of comments needs to mention how this avoids producing the same graph; otherwise, it won't help future readers very much.
brandonwillard(2022-01-19 19:13:51):Couldn't the be used as a `return` condition as well?
ricardoV94(2022-01-19 19:16:57):The rewrite is about removing `Alloc`s so this shouldn't sound too surprising. It is only surprising in light of the bug.
brandonwillard(2022-01-19 19:17:43):Nevermind, got it now.
ricardoV94(2022-01-19 19:33:54):It could... but still means we have some flawed logic above, where the "feasibility" of the rewrite is supposed to be evaluated.

What do you think is best? This test already had a couple of other asserts in place, and I have no idea of how unconventional that is.
codecov[bot](2022-01-19 19:02:24):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/769?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#769](https://codecov.io/gh/aesara-devs/aesara/pull/769?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2eb57ab) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/240827cf98db436d99b41dde2a642f256c4332d5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (240827c) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 2eb57ab differs from pull request most recent head cafe277. Consider uploading reports for the commit cafe277 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/769/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/769?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #769   +/-   ##
=======================================
  Coverage   78.35%   78.35%           
=======================================
  Files         152      152           
  Lines       47685    47691    +6     
  Branches    10881    10881           
=======================================
+ Hits        37364    37370    +6     
  Misses       7773     7773           
  Partials     2548     2548           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/769?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/769/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZXh0cmFfb3BzLnB5) | `98.14% <100.00%> (+0.05%)` | :arrow_up: |

codecov[bot](2022-01-22 03:53:28):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/774?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#774](https://codecov.io/gh/aesara-devs/aesara/pull/774?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (bb2ac94) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/dee152ce2a56c274964f936c03d02bb1008ab3fe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (dee152c) will **decrease** coverage by `0.05%`.
> The diff coverage is `82.00%`.

> :exclamation: Current head bb2ac94 differs from pull request most recent head fea7597. Consider uploading reports for the commit fea7597 to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/774/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/774?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #774      +/-   ##
==========================================
- Coverage   78.40%   78.34%   -0.06%     
==========================================
  Files         152      152              
  Lines       47782    47793      +11     
  Branches    10881    10884       +3     
==========================================
- Hits        37462    37444      -18     
- Misses       7773     7797      +24     
- Partials     2547     2552       +5     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/774?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `81.79% <74.28%> (-0.60%)` | :arrow_down: |
| [aesara/compile/function/pfunc.py](https://codecov.io/gh/aesara-devs/aesara/pull/774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `83.59% <100.00%> (+0.26%)` | :arrow_up: |
| [aesara/scan/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vYmFzaWMucHk=) | `86.68% <100.00%> (-0.82%)` | :arrow_down: |
| [aesara/scan/scan\_perform\_ext.py](https://codecov.io/gh/aesara-devs/aesara/pull/774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vc2Nhbl9wZXJmb3JtX2V4dC5weQ==) | `80.32% <100.00%> (ø)` | |
| [aesara/scan/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vdXRpbHMucHk=) | `87.44% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/compile/io.py](https://codecov.io/gh/aesara-devs/aesara/pull/774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvaW8ucHk=) | `83.01% <0.00%> (-5.67%)` | :arrow_down: |
| [aesara/scan/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `79.48% <0.00%> (-0.84%)` | :arrow_down: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `48.58% <0.00%> (-0.37%)` | :arrow_down: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `85.03% <0.00%> (-0.19%)` | :arrow_down: |
| ... and [2 more](https://codecov.io/gh/aesara-devs/aesara/pull/774/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

zoj613(2022-01-27 11:30:08):i'm late but I think there is a bit more juice we can squeeze out of `scan_perform.pyx` as far as minimizing interaction with python objects. The obvious one is using memory views instead off array buffers since they are considered more performant and more flexible (see [here](https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html)). i can investigate a bit and send a PR if this is considered worthy of the effort.
brandonwillard(2022-01-27 15:52:49):> i'm late but I think there is a bit more juice we can squeeze out of `scan_perform.pyx` as far as minimizing interaction with python objects. The obvious one is using memory views instead off array buffers since they are considered more performant and more flexible (see [here](https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html)). i can investigate a bit and send a PR if this is considered worthy of the effort.

That sounds good.
ricardoV94(2022-01-22 11:45:07):It should be possible to obtain gradients with respect to the endpoints but I have no idea what these would be. Jax seems to be able to do it...
kc611(2022-01-22 16:32:09):Seems like the devs at `Jax` replaced direct calls to `np.linspace` by a custom `linspace` function which was differentiable w.r.t `start` and `stop` (not by building a gradient version of `linspace` itself but by splitting `linspace` into operations which were differentiable). I don't know how that could be done in Aesara.

Have a look at: https://github.com/google/jax/pull/1658
ricardoV94(2022-01-22 16:56:25):Can we also create these in terms of already implemented `Op`s?

If not, we should be able to figure out the symbolic grads. For instance for linspace with respect to start, I think it would be something like `gx * (1 - linspace(0, 1, steps))` 

And for the stop parameter `gy * linspace(0, 1, steps)`

Perhaps it follows a similar simple pattern for the other "spaces"?
ricardoV94(2022-01-22 17:29:13):Alternatively, linspace (at least) can easily be built from `arange` no?
codecov[bot](2022-01-22 17:59:47):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/779?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#779](https://codecov.io/gh/aesara-devs/aesara/pull/779?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c95372b) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/980c4c2c72b9c8b51d8627cc75fb655a9fd600ed?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (980c4c2) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/779/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/779?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #779   +/-   ##
=======================================
  Coverage   78.51%   78.51%           
=======================================
  Files         154      154           
  Lines       47898    47914   +16     
  Branches    10897    10897           
=======================================
+ Hits        37606    37622   +16     
  Misses       7748     7748           
  Partials     2544     2544           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/779?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/779/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `89.31% <100.00%> (+0.25%)` | :arrow_up: |

kc611(2022-01-22 18:28:34):> Alternatively, linspace (at least) can easily be built from arange no?

I just realized that. We should probably just make `linspace` an alias to `arange` rather than having a new `Op` entirely for that, no ?  

Though I don't know about the other two. (But doesn't seem like they are used as much anyway)
brandonwillard(2022-01-26 18:56:44):> Seems like the devs at `Jax` replaced direct calls to `np.linspace` by a custom `linspace` function which was differentiable w.r.t `start` and `stop` (not by building a gradient version of `linspace` itself but by splitting `linspace` into operations which were differentiable). I don't know how that could be done in Aesara.

That's actually how Theano did quite a few of its NumPy function implementations, and it's still the prefered way of doing things in Aesara.  For instance, see the opening to [this section in the documentation](https://aesara.readthedocs.io/en/latest/extending/creating_an_op.html).

In other words, **implement operations using existing `Op`s instead of creating new `Op`s**, when possible.

Not only does this approach prevent one from needing to implement an `Op.[grad, L_op, R_op]`, but it also opens up those operations to optimization, whereas the internal operations of a custom `Op` obviously can't be optimized (by us).

kc611(2022-02-23 17:14:08):> Alternatively, linspace (at least) can easily be built from arange no?

It seems that `ARange` is limited in functionality:

https://github.com/aesara-devs/aesara/blob/80bfde1ee23f6239ae86cdaa42af9e383048b759/aesara/tensor/basic.py#L3249-L3251

Would it be better to have this as is, or should we expand the functionality of `ARange` ? 
ricardoV94(2022-02-23 17:19:50):> > Alternatively, linspace (at least) can easily be built from arange no?
> 
> It seems that `ARange` is limited in functionality:
> 
> https://github.com/aesara-devs/aesara/blob/80bfde1ee23f6239ae86cdaa42af9e383048b759/aesara/tensor/basic.py#L3249-L3251
> 
> Would it be better to have this as is, or should we expand the functionality of `ARange` ?

Doesn't sound like a reason not to use Arange. The part that would be defined with arange (number of steps) can't be broadcasted with different values anyway in linspace (or the output wouldn't be rectangular). We can still have a single arange and multiple (broadcasted) initial and endpoints this way.
ricardoV94(2022-02-23 17:26:59):I guess it would be something like:

```python
def linspace(start, end, steps):
  multiplier = (end - start) / (steps - 1)
  return start + arange(steps) * multiplier
```

Complete pseudo-code :D
kc611(2022-02-23 17:29:01):Ah no, I meant for cases like: 

```
start = np.array([5, 6])
stop = np.array([[10, 10], [10, 10]])
step = 25
```
ricardoV94(2022-02-23 17:29:57):> Ah no, I meant for cases like: 
> 
> ```
> start = np.array([5, 6])
> stop = np.array([[10, 10], [10, 10]])
> step = 25
> ```

I think my pseudo code would work fine for those. Only step goes into arange
kc611(2022-02-23 17:31:08):Ah yes, It does, sorry, guess I need a stronger coffee.
ricardoV94(2022-02-23 17:34:58):> Ah yes, It does, sorry, guess I need a stronger coffee.

I edited my message like 15x times, so you're not alone xD
ricardoV94(2022-02-23 17:38:28):~~logspace~~ geomspace might be something like:

```python
def geomspace(start, end, steps, base=10.0):
  return logb(linspace(base**start, base**end, steps), base)
```
ricardoV94(2022-02-23 17:42:03):NVM Numpy says it is:

```python
def logspace(start, end, steps, base):
  return power(base, linspace(start, end, steps))
```
https://numpy.org/doc/stable/reference/generated/numpy.logspace.html

~~Maybe my previous one was geomspace?~~ It was
brandonwillard(2022-03-18 19:43:05):Agh, looks like an empty merge commit got in there somehow.
ricardoV94(2022-03-08 20:55:22):This one is a bit hard to read. Is it equivalent to  the following?


```suggestion
    arr = at.shape_padright(max(start.ndim, end.ndim))
```

ricardoV94(2022-03-09 08:56:43):Maybe it was padleft?
codecov[bot](2022-01-23 20:30:59):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/781?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#781](https://codecov.io/gh/aesara-devs/aesara/pull/781?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (fb90f87) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/77bcd6897bafc5c05855aac74b68fcec1ca6048c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (77bcd68) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/781/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/781?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #781      +/-   ##
==========================================
+ Coverage   78.41%   78.43%   +0.01%     
==========================================
  Files         152      152              
  Lines       47793    47788       -5     
  Branches    10884    10884              
==========================================
+ Hits        37479    37482       +3     
+ Misses       7766     7761       -5     
+ Partials     2548     2545       -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/781?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/781/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `86.57% <100.00%> (+0.34%)` | :arrow_up: |
| [aesara/misc/safe\_asarray.py](https://codecov.io/gh/aesara-devs/aesara/pull/781/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL21pc2Mvc2FmZV9hc2FycmF5LnB5) | `69.23% <0.00%> (+15.38%)` | :arrow_up: |

codecov[bot](2022-01-24 16:40:36):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/787?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#787](https://codecov.io/gh/aesara-devs/aesara/pull/787?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (24d88b5) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/77bcd6897bafc5c05855aac74b68fcec1ca6048c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (77bcd68) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/787/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/787?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #787   +/-   ##
=======================================
  Coverage   78.41%   78.42%           
=======================================
  Files         152      152           
  Lines       47793    47786    -7     
  Branches    10884    10883    -1     
=======================================
- Hits        37479    37478    -1     
+ Misses       7766     7762    -4     
+ Partials     2548     2546    -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/787?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/787/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `89.42% <100.00%> (-0.22%)` | :arrow_down: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/787/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `86.57% <0.00%> (+0.34%)` | :arrow_up: |
| [aesara/misc/safe\_asarray.py](https://codecov.io/gh/aesara-devs/aesara/pull/787/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL21pc2Mvc2FmZV9hc2FycmF5LnB5) | `69.23% <0.00%> (+15.38%)` | :arrow_up: |

kc611(2022-01-24 17:30:49):Tried adding a custom `RandomStateVariable` for these `Op`s, ran into couple of problems during constant folding and other few places. Currently built them with plain `Variable`s
codecov[bot](2022-01-24 18:50:10):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/789?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#789](https://codecov.io/gh/aesara-devs/aesara/pull/789?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b0cddce) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ca995ae22b4421c750e7c1a8318518cbe0d38e7d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ca995ae) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/789/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/789?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #789   +/-   ##
=======================================
  Coverage   78.43%   78.44%           
=======================================
  Files         152      152           
  Lines       47798    47820   +22     
  Branches    10885    10890    +5     
=======================================
+ Hits        37490    37512   +22     
  Misses       7762     7762           
  Partials     2546     2546           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/789?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/789/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `97.53% <100.00%> (+0.38%)` | :arrow_up: |

brandonwillard(2022-01-24 20:14:13):`None` can be used in a graph (see `aesara.tensor.type_other.NoneConst`), and we should use it here.
brandonwillard(2022-01-24 20:16:47):This implies that there should be an abstract method named `bitgen` in the interface defined by `RandomMakerOp`.  It can be added using [`abc.abstractmethod`](https://docs.python.org/3/library/abc.html#abc.abstractmethod).

However, it doesn't look like an abstract implementation of `Op.perform` is necessary.  When `np.inf` is replaced by `None` (see above), there's no code duplicated between subclasses, because only a direct call the underlying RNG constructor is required.
brandonwillard(2022-01-24 20:17:17):```suggestion
class AbstractRNGConstructor(Op):
```
brandonwillard(2022-01-24 20:22:53):```suggestion
class RandomStateConstructor(RandomMakerOp):
```
brandonwillard(2022-01-24 20:24:26):```suggestion
RandomState = RandomStateConstructor()
```

This mirrors the NumPy interface and needs to be exposed via `aesara.tensor.random.__init__`.
brandonwillard(2022-01-24 20:24:58):```suggestion
default_rng = DefaultGeneratorMakerOp()
```

This mirrors the NumPy interface and needs to be exposed via `aesara.tensor.random.__init__`.
kc611(2022-01-25 15:46:06):I made `bitgen` rapper function around those constructors primarily because directly having those constructors as class methods passed `self` into them by default. But I think the current approach works as well. 
kc611(2022-01-25 15:48:56):Had to do this because of what seems to be a bug in Numpy

```python
import numpy as np

x = np.random.default_rng(3) #Works
x = np.random.default_rng(np.array([3])) #Works
x = np.random.default_rng(np.array(3)) #Throws error
```
codecov[bot](2022-01-26 18:18:46):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/792?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#792](https://codecov.io/gh/aesara-devs/aesara/pull/792?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (be4cfcf) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e69f2d0a9cb9478ec56ab024a6ab07a65f981240?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e69f2d0) will **decrease** coverage by `0.02%`.
> The diff coverage is `94.28%`.

> :exclamation: Current head be4cfcf differs from pull request most recent head 6893f16. Consider uploading reports for the commit 6893f16 to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/792/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/792?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #792      +/-   ##
==========================================
- Coverage   78.46%   78.43%   -0.03%     
==========================================
  Files         152      152              
  Lines       47842    47803      -39     
  Branches    10896    10883      -13     
==========================================
- Hits        37538    37496      -42     
- Misses       7758     7761       +3     
  Partials     2546     2546              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/792?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `65.61% <ø> (-0.14%)` | :arrow_down: |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `82.62% <ø> (ø)` | |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `85.03% <73.33%> (ø)` | |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `78.64% <78.94%> (+0.01%)` | :arrow_up: |
| [aesara/link/c/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9iYXNpYy5weQ==) | `87.18% <91.66%> (-0.19%)` | :arrow_down: |
| [aesara/tensor/blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ibGFzLnB5) | `80.66% <97.29%> (+0.09%)` | :arrow_up: |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `88.15% <98.03%> (+0.36%)` | :arrow_up: |
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `60.45% <100.00%> (-0.24%)` | :arrow_down: |
| [aesara/graph/fg.py](https://codecov.io/gh/aesara-devs/aesara/pull/792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `86.64% <100.00%> (-0.13%)` | :arrow_down: |
| [aesara/graph/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `68.51% <100.00%> (+0.06%)` | :arrow_up: |
| ... and [17 more](https://codecov.io/gh/aesara-devs/aesara/pull/792/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

zoj613(2022-01-27 16:32:13):im wondering if `tril_indices_from` and `triu_indices_from` should be included on this PR. They are also one-liner functions that wrap `tri[u|i]_indices` functions. @ricardoV94 
codecov[bot](2022-01-27 17:14:20):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/795?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#795](https://codecov.io/gh/aesara-devs/aesara/pull/795?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f2fc963) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/7826c2720c03dc2910a3f8e60c30b4f3edebf171?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7826c27) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/795/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #795   +/-   ##
=======================================
  Coverage   78.42%   78.43%           
=======================================
  Files         152      152           
  Lines       47786    47798   +12     
  Branches    10883    10885    +2     
=======================================
+ Hits        37478    37490   +12     
  Misses       7762     7762           
  Partials     2546     2546           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/795/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `87.55% <100.00%> (+0.09%)` | :arrow_up: |

ricardoV94(2022-01-27 19:57:05):> im wondering if `tril_indices_from` and `triu_indices_from` should be included on this PR. They are also one-liner functions that wrap `tri[u|i]_indices` functions. @ricardoV94 

Sure!
zoj613(2022-01-27 21:16:10):> > im wondering if `tril_indices_from` and `triu_indices_from` should be included on this PR. They are also one-liner functions that wrap `tri[u|i]_indices` functions. @ricardoV94
> 
> Sure!

done.
ricardoV94(2022-01-28 13:22:45):This was probably copied from the `tril`? Doesn't make sense here
ricardoV94(2022-01-28 13:23:43):TensorVariable?
ricardoV94(2022-01-28 13:24:42):Same here
ricardoV94(2022-01-28 18:02:15):are `row` and `col` valid inputs besides `matrix`? I am not sure about typehints for specific shape `TensorVariable`s. CC @brandonwillard 
zoj613(2022-01-28 18:12:08):Im not sure if it would make sense to get triangular indices for a row or col. It would simply return the `k`'th element's index, right? IMHO I dont think we need to worry about that level of granularity with the type hints. 
ricardoV94(2022-01-29 06:44:31):My question is not limited to the row and column matrices (which should be supported as long as numpy also supports them)

The other point is that we now treat TensorVariables with fixed shapes uniquely. A TensorVariable with known `shape=(2,2)` (a matrix with fixed 2×2 shape) for instance is now a different type than a TensorVariable with unknown `shape=(None, None)`, which is what that `matrix` in your type hints defines. And the function definitely applies to both.

By the way, row and column matrices are just intermediate cases of this with `shape=(1, None)` and `shape=(None, 1)`
zoj613(2022-01-29 10:12:33):added row and col hints.
ricardoV94(2022-01-29 10:22:47):I still think the best you can do is to say it accepts `TensorVariable`.

If I understand correctly, a `TensorVariable` with say `shape=(2, 2)` (or any other `shape=(n|None, m|None))` is not of the same type as a `matrix`, which is just a specific `TensorVariable` with `shape=(None, None)`
zoj613(2022-01-29 10:26:50):removed row and row and replaced with TensorVariable.
codecov[bot](2022-01-30 15:02:42):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/799?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#799](https://codecov.io/gh/aesara-devs/aesara/pull/799?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1229471) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/38d7a813646c1e350170c46bafade0e7d0e2427c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (38d7a81) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/799/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/799?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #799   +/-   ##
=======================================
  Coverage   78.45%   78.45%           
=======================================
  Files         152      152           
  Lines       47834    47834           
  Branches    10896    10896           
=======================================
  Hits        37526    37526           
  Misses       7762     7762           
  Partials     2546     2546           
```



michaelosthege(2022-02-01 21:00:30):In the coming days I'll do a PR that adds a sensible `mypy` config (part of #800).
In that PR I'll also try to fix mypy errors on public API functions where I can, because those are relevant from the outside.

Nevertheless, the PEP doesn't require type hints to be perfect before a package can enable itself for typecheckers.
After a first pass over the public API warnings it would be really valuable for typechecking PyMC if Aesara adopted PEP 651 like ArviZ just did.
Please let me know if you'd be on board with adopting PEP 651 after fixing public API errors (so before the point of running mypy in the pre-commit), because otherwise I will look at other options to get the typechecking working from the outside.
brandonwillard(2022-02-01 22:34:09):> In the coming days I'll do a PR that adds a sensible `mypy` config (part of #800). In that PR I'll also try to fix mypy errors on public API functions where I can, because those are relevant from the outside.

Sounds good, thanks.


> Nevertheless, the PEP doesn't require type hints to be perfect before a package can enable itself for typecheckers. After a first pass over the public API warnings it would be really valuable for typechecking PyMC if Aesara adopted PEP 651 like ArviZ just did. Please let me know if you'd be on board with adopting PEP 651 after fixing public API errors (so before the point of running mypy in the pre-commit), because otherwise I will look at other options to get the typechecking working from the outside.

We just don't want to release type information that will necessarily confuse, mislead, or break any code that uses it.  Aside from that, we definitely want to do this.
codecov[bot](2022-02-02 18:48:15):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/803?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#803](https://codecov.io/gh/aesara-devs/aesara/pull/803?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (bb8a8b4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/a0604e5224fbfd4d4bfa804b1c3ac101cdacd52c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a0604e5) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/803/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/803?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #803   +/-   ##
=======================================
  Coverage   78.44%   78.44%           
=======================================
  Files         152      152           
  Lines       47820    47820           
  Branches    10890    10890           
=======================================
  Hits        37512    37512           
  Misses       7762     7762           
  Partials     2546     2546           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/803?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/803/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `65.74% <100.00%> (ø)` | |

ricardoV94(2022-02-04 14:52:53):See https://github.com/aesara-devs/aesara/issues/684 and related issues from there
ricardoV94(2022-02-04 14:54:30):The two options are:
* replace by a `nan` `switch`
* skip completely (that's what we do in PyMC)

In either case we should probably emit a `UserWarning`
rlouf(2022-02-04 15:17:02):I would remove them completely; this is what I would do if I were writing the code in jax directly.
ricardoV94(2022-02-04 21:53:02):> I would remove them completely; this is what I would do if I were writing the code in jax directly.

If I am a user writing Aesara code with Asserts, I am not sure I would agree. It's an opinionated decision to just ignore them (even more so silently)
brandonwillard(2022-02-04 22:10:41):> I would remove them completely; this is what I would do if I were writing the code in jax directly.

Asserts can be removed from a graph by adding `local_remove_all_assert` to the rewrites.
ricardoV94(2022-02-05 06:40:43):> Asserts can be removed from a graph by adding `local_remove_all_assert` to the rewrites.

Yeah maybe the best we can do is fail explicitly and mention this rewrite to users
rlouf(2022-02-05 07:23:45):> It's an opinionated decision to just ignore them (even more so silently)

You don't have to ignore them silently, adding a warning would already be an improvement over what jax does.

More generally, I might be wrong but you cannot avoid opinionated decisions when you are transpiling to a framework that does not have a 1-to-1 correspondence for every language element of your framework.
ricardoV94(2022-02-05 07:28:52):You can by failing explicitly
rlouf(2022-02-05 07:49:29):You mean in this case fail when there's an `assert`? Then if you start doing that every time there's no 1-to-1 mapping people will have to write jax-specific aesara code, numba-specific aesara code. I'm not sure that's desirable.
ricardoV94(2022-02-05 07:56:11):> You mean in this case fail when there's an `assert`? Then people will have to write jax-specific aesara code, numba-specific aesara code. I'm not sure that's desirable.

Numba support will be 100%, it's JAX (jitted) that we cannot support 100% because it is naturally more restricted than what Aesara can do.

For this example, as Brandon mentioned users can include the`remove_all_asserts` rewrite at their own risk.

Other libraries that use Aesara can also be more opinionated (we are in PyMC). But to do that at the Aesara level requires more deliberation imho.
rlouf(2022-02-05 09:34:02):Ok but we are talking about making a choice for the JAX conversion in this issue.
ricardoV94(2022-02-05 09:56:09):> Ok but we are talking about making a choice for the JAX conversion in this issue.

My vote goes for failing with an explicit actionable message. (i.e., remove assert manually, or with rewrite, or use your custom jaxify dispatched function).
rlouf(2022-02-05 10:08:34):As this is not just a technical issue I will go with whatever you think is best. I don't have enough experience with the library.
codecov[bot](2022-02-07 17:22:47):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/806?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#806](https://codecov.io/gh/aesara-devs/aesara/pull/806?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ee3b752) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/da86d351979c0a29fc80da16db965551e9e8c14f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (da86d35) will **increase** coverage by `0.02%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/806/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/806?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #806      +/-   ##
==========================================
+ Coverage   78.44%   78.46%   +0.02%     
==========================================
  Files         152      152              
  Lines       47820    47846      +26     
  Branches    10890    10896       +6     
==========================================
+ Hits        37512    37542      +30     
+ Misses       7762     7758       -4     
  Partials     2546     2546              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/806?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/806/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `82.53% <100.00%> (+0.12%)` | :arrow_up: |
| [aesara/tensor/random/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/806/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3B0LnB5) | `94.11% <0.00%> (ø)` | |
| [aesara/compile/nanguardmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/806/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `56.48% <0.00%> (ø)` | |
| [aesara/misc/may\_share\_memory.py](https://codecov.io/gh/aesara-devs/aesara/pull/806/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL21pc2MvbWF5X3NoYXJlX21lbW9yeS5weQ==) | `71.42% <0.00%> (ø)` | |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/806/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.90% <0.00%> (+0.02%)` | :arrow_up: |
| [aesara/tensor/random/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/806/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `97.57% <0.00%> (+0.04%)` | :arrow_up: |
| [aesara/tensor/nnet/abstract\_conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/806/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Fic3RyYWN0X2NvbnYucHk=) | `76.98% <0.00%> (+0.10%)` | :arrow_up: |
| [aesara/tensor/nnet/conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/806/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvbnYucHk=) | `79.70% <0.00%> (+0.13%)` | :arrow_up: |
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/806/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `60.68% <0.00%> (+0.19%)` | :arrow_up: |
| [aesara/misc/pkl\_utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/806/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL21pc2MvcGtsX3V0aWxzLnB5) | `70.74% <0.00%> (+1.36%)` | :arrow_up: |

codecov[bot](2022-02-06 13:52:10):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/809?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#809](https://codecov.io/gh/aesara-devs/aesara/pull/809?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b785f5f) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/80bfde1ee23f6239ae86cdaa42af9e383048b759?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (80bfde1) will **increase** coverage by `0.00%`.
> The diff coverage is `90.78%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/809/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #809   +/-   ##
=======================================
  Coverage   78.38%   78.39%           
=======================================
  Files         152      152           
  Lines       47628    47640   +12     
  Branches    10841    10841           
=======================================
+ Hits        37335    37347   +12     
  Misses       7750     7750           
  Partials     2543     2543           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/809/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `86.00% <ø> (ø)` | |
| [aesara/link/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/809/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `60.62% <ø> (ø)` | |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/809/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `83.10% <ø> (ø)` | |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/809/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `89.42% <ø> (ø)` | |
| [aesara/graph/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/809/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `68.85% <71.42%> (+0.41%)` | :arrow_up: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/809/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `48.58% <81.81%> (+<0.01%)` | :arrow_up: |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/809/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `78.97% <88.05%> (+0.01%)` | :arrow_up: |
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/809/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `60.68% <100.00%> (+0.07%)` | :arrow_up: |
| [aesara/configparser.py](https://codecov.io/gh/aesara-devs/aesara/pull/809/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ3BhcnNlci5weQ==) | `86.49% <100.00%> (ø)` | |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/809/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `87.67% <100.00%> (+0.02%)` | :arrow_up: |
| ... and [11 more](https://codecov.io/gh/aesara-devs/aesara/pull/809/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

michaelosthege(2022-02-21 14:37:31):@brandonwillard I split the commit up as requested.

> These Mypy settings and type hint changes are not producing a passing mypy run locally.

Yes, and the Aesara project is at least months away from a passing mypy run unless you want to ignore/silence all these errors.
I personally have **neither the motivation nor the time** to do all this work while rebasing the branch over and over again.

> More importantly, we need a Mypy check in CI (e.g. via pre-commit) to validate/justify these changes.

~Since pre-commit doesn't print the output of passing hooks, it doesn't help to have a mypy step with an always-0 exit code.
However, I could add a mypy job to the CI that prints everything but doesn't fail the CI on errors.~

__EDIT:__ Here's how to have a verbose mypy step in pre-commit that doesn't fail the pre-commit: https://stackoverflow.com/a/59745587/4473230
Would that be a satisfactory strategy?
brandonwillard(2022-02-27 03:23:32):> **EDIT:** Here's how to have a verbose mypy step in pre-commit that doesn't fail the pre-commit: https://stackoverflow.com/a/59745587/4473230
> Would that be a satisfactory strategy?

Yes, we don't need a fully passing codebase in order to add the `pre-commit` checks.  It would be best to find out which modules currently do pass, leave them enabled, disable the rest, and then start working toward enabling each disabled module.  This would at least prevent the addition of faulty type informations within the enabled modules, and it would provide a means of accepting new type hint changes from here on.
michaelosthege(2022-02-27 18:39:52):@brandonwillard I added a script to run mypy and compare the results against a list of modules known to pass.
It raises errors on regressions, but also on unexpected successes.
I added it to the pre-commit too.

Note that fixing type error sometimes leads to _new_ errors and there's no guarantee this won't happen to files already on the list.
michaelosthege(2022-02-06 16:32:12):The order of items is `[YieldType, SendType, ReturnType]`
michaelosthege(2022-02-06 16:35:05):The `walk` return type depends on the third argument, but `mypy` doesn't know this.
Either this `assert` or a `not isinstance(var, Variable): raise` tells `mypy` that henceforth `var: Variable` is correct.
michaelosthege(2022-02-06 16:36:10):They were initialized as `[]` in the `__init__` and this way we don't have to make them `Optional`.
michaelosthege(2022-02-06 16:43:02):Because the signature hints the `TensorConstructorType` without specifying the arg names.
ricardoV94(2022-02-06 17:16:38):Can't we use cast?

https://docs.python.org/3/library/typing.html#typing.cast
michaelosthege(2022-02-06 17:20:00):Sound like a valid alternative: I don't have a preference.
brandonwillard(2022-02-06 22:00:14):What is the reason for this change?
brandonwillard(2022-02-06 22:02:00):Same here; why remove the type hint?
brandonwillard(2022-02-06 22:07:32):This doesn't seem necessary.
michaelosthege(2022-02-06 23:56:49):The dispatch functions are confusing mypy. It looks like it's taking the type hint of this signature and expecting it for the dispatched functions that do return the value.
Kind of like with abstract functions I think.
michaelosthege(2022-02-06 23:56:59):Here I couldn't figure out the correct type, but it's not `NoReturn` on the dispatched functions (similar to above).

The `NoReturn` was added in a PR that used monkeytype to infer types. Looks like it didn't do a great job for dispatch functions.
michaelosthege(2022-02-06 23:57:05):The `type(np.newaxis)` call is not allowed for a type annotation. It gives this error:
```
aesara\tensor\subtensor.py:138: error: Invalid type comment or annotation  [valid-type]
aesara\tensor\subtensor.py:138: note: Suggestion: use type[...] instead of type(...)
```
But with `type[np.newaxis]` there's another error:
```
aesara\tensor\subtensor.py:138: error: Variable "numpy.newaxis" is not valid as a type  [valid-type]
aesara\tensor\subtensor.py:138: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
```
That's probably because `np.newaxis is None`, so `Optional[Union[int, slice]]` remained.
brandonwillard(2022-02-07 00:10:20):What we actually need to do is evaluate `type(np.newaxis)` and use the result in the annotation, so `type[np.newaxis]` shouldn't make sense here.
 
It should be possible to evaluate that expression beforehand (e.g. in a `TYPE_CHECKING` block) and use the result in the annotation, but we can skip that for now and safely assume `np.newaxis` will be `None`.
michaelosthege(2022-02-15 13:09:51):`Optional` means that the argument can be `None`, which is not the case here.
michaelosthege(2022-02-15 13:10:20):The shape of a `Variable` is symbolic...
brandonwillard(2022-02-18 04:26:55):This is not an exclusively type-information-based change; it could actually affect code that depends on `Op` (e.g. similar to how the `hasattr` checks below needed to be updated).

These kinds of changes need their own commits, if only to make the them stand out in some way.
michaelosthege(2022-02-18 07:51:45):I did that already, or do you want them to be split up even further?
![grafik](https://user-images.githubusercontent.com/5894642/154640705-e5c74eba-b3e1-4a11-9313-91938f8e9c13.png)

brandonwillard(2022-02-18 23:59:09):> I did that already, or do you want them to be split up even further?

Yes, each such independent change that affects a different class/area of code is eligible for its own commit, especially when each requires distinct considerations.

"Rectify typing with runtime code changes" is a catch-all that could encompass literally any and all substantial code changes, and such a themed commit requires reviewers to manually organize all the disparate changes before understanding what was really changed and (potentially) why. 

In contrast, other common catch-alls like "Refactor ..." are generally constrained to specific areas of the codebase and/or are assumed to contain no interface or functionality changes.  Those assumptions are much easier to check via a quick pass over the diffs.  

This commit doesn't have the above properties, which makes for a slower review cycle.
codecov[bot](2022-02-06 13:42:13):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/811?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#811](https://codecov.io/gh/aesara-devs/aesara/pull/811?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f226e6f) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2450186216671085d35f2762bb4db849f07e4e0d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2450186) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/811/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/811?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #811   +/-   ##
=======================================
  Coverage   78.45%   78.45%           
=======================================
  Files         152      152           
  Lines       47834    47834           
  Branches    10896    10896           
=======================================
  Hits        37526    37526           
  Misses       7762     7762           
  Partials     2546     2546           
```



michaelosthege(2022-02-06 14:00:30):@brandonwillard @kc611 @ricardoV94 please review when you get a chance 
michaelosthege(2022-02-06 17:59:01):I don't have the capacity to try that right now, but feel free to take over the branch.
codecov[bot](2022-02-07 02:14:53):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/812?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#812](https://codecov.io/gh/aesara-devs/aesara/pull/812?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c1f1d09) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/38d7a813646c1e350170c46bafade0e7d0e2427c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (38d7a81) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/812/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/812?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #812      +/-   ##
==========================================
+ Coverage   78.45%   78.46%   +0.01%     
==========================================
  Files         152      152              
  Lines       47834    47842       +8     
  Branches    10896    10896              
==========================================
+ Hits        37526    37538      +12     
+ Misses       7762     7758       -4     
  Partials     2546     2546              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/812?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/nnet/abstract\_conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Fic3RyYWN0X2NvbnYucHk=) | `76.98% <100.00%> (+0.10%)` | :arrow_up: |
| [aesara/tensor/nnet/conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvbnYucHk=) | `79.70% <100.00%> (+0.13%)` | :arrow_up: |
| [aesara/compile/nanguardmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `56.48% <0.00%> (ø)` | |
| [aesara/misc/may\_share\_memory.py](https://codecov.io/gh/aesara-devs/aesara/pull/812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL21pc2MvbWF5X3NoYXJlX21lbW9yeS5weQ==) | `71.42% <0.00%> (ø)` | |
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `60.68% <0.00%> (+0.19%)` | :arrow_up: |
| [aesara/misc/pkl\_utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL21pc2MvcGtsX3V0aWxzLnB5) | `70.74% <0.00%> (+1.36%)` | :arrow_up: |

codecov[bot](2022-02-09 01:12:15):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/813?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#813](https://codecov.io/gh/aesara-devs/aesara/pull/813?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (026ec6c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/4e2fc615b32df85ff16f17f2595d7f74e659b034?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4e2fc61) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/813/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/813?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #813      +/-   ##
==========================================
- Coverage   78.46%   78.46%   -0.01%     
==========================================
  Files         152      152              
  Lines       47846    47845       -1     
  Branches    10896    10896              
==========================================
- Hits        37542    37541       -1     
  Misses       7758     7758              
  Partials     2546     2546              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/813?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/813/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `97.56% <100.00%> (-0.02%)` | :arrow_down: |

danhphan(2022-02-10 21:49:52):Hi, thanks a lot for your support @brandonwillard @ricardoV94 

Cheer :dancers: 
brandonwillard(2022-02-08 19:45:34):It looks like you might need to use the `Sequence` type from `typing` instead of `collections.abc`.
danhphan(2022-02-08 22:57:22):Hi yes, you are right. 

So we can have two options: 
1. Use `typing.Sequence`, and keep the `Sequence` for `abc` 
2. Use `abc.Sequence`, and `Sequence` acts as `typing.Sequence`.

I will prefer option 2, since we only need to change `Sequence` to `abc.Sequence` once at line [L144](https://github.com/aesara-devs/aesara/blob/4e2fc615b32df85ff16f17f2595d7f74e659b034/aesara/tensor/random/op.py#L144). 

But let me know if you prefer the other option.

Thank you :D
brandonwillard(2022-02-08 22:59:41):We should only need to change the import from `collections.abc` to `typing`.
danhphan(2022-02-08 23:09:41):So when we remove `collection.abc`, this code stills work rights?

`if not isinstance(self.ndims_params, Sequence)` # I thought the `Sequence` in this line need to be from `collection.abc`.

brandonwillard(2022-02-08 23:13:47):Yes, `typing.Sequence` should work in that case.
brandonwillard(2022-02-09 19:24:17):Why was the order of these parameters changed?
brandonwillard(2022-02-09 19:25:12):Oh, I see, the order was originally incorrect.
codecov[bot](2022-02-15 16:25:17):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/817?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#817](https://codecov.io/gh/aesara-devs/aesara/pull/817?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (32030c5) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/630b55741946a9aa7c33343a866ca920f0891211?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (630b557) will **decrease** coverage by `0.00%`.
> The diff coverage is `66.66%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/817/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/817?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #817      +/-   ##
==========================================
- Coverage   78.46%   78.46%   -0.01%     
==========================================
  Files         152      152              
  Lines       47845    47851       +6     
  Branches    10896    10896              
==========================================
+ Hits        37541    37545       +4     
- Misses       7758     7760       +2     
  Partials     2546     2546              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/817?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/817/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `87.47% <66.66%> (-0.08%)` | :arrow_down: |

ricardoV94(2022-02-16 17:53:24):Interesting, so `FunctionGraph.on_change_input` (with `check=True`) does not allow shape information to be lost:

https://github.com/aesara-devs/aesara/blob/b920bd2910e42e72b79dbb3a353505a09b84241e/aesara/graph/fg.py#L468-L472

```python
TypeError: The type of the replacement (TensorType(float64, (None,))) must be compatible with the type of the original Variable (TensorType(float64, (2,))).
```
brandonwillard(2022-02-16 22:04:48):> Interesting, so `FunctionGraph.on_change_input` (with `check=True`) does not allow shape information to be lost:
> 
> https://github.com/aesara-devs/aesara/blob/b920bd2910e42e72b79dbb3a353505a09b84241e/aesara/graph/fg.py#L468-L472
> 
> ```python
> TypeError: The type of the replacement (TensorType(float64, (None,))) must be compatible with the type of the original Variable (TensorType(float64, (2,))).
> ```

Yes; in general, we only want to gain more shape information as replacements are made.
ricardoV94(2022-02-17 09:05:10):> Yes; in general, we only want to gain more shape information as replacements are made.

That is sending me on a kind of rabbit hole, as many rewrites would call other `Op`s that lose information.

It also renders our infamous `local_elemwise_alloc` nearly useless because that rewrite would replace `Alloc`s (which uses constant folding to infer the shape of the output) by its input + a shape assert (whose type shape can often be less specific). At least that's how we tested the rewrite in here:
https://github.com/aesara-devs/aesara/blob/fbaaae76547d2476389b868a87639ad2665599c9/tests/tensor/test_basic_opt.py#L3541

I guess the rewrite would still work for the cases where we don't know the `Alloc` shapes until runtime, but that may be a minority of the cases

Is there a way we could manually override the output type shape after make_node is called?

brandonwillard(2022-02-17 09:20:25):> That is sending me on a kind of rabbit hole, as many rewrites would call other `Op`s that lose information.

`FunctionGraph.replace` should use `Type.filter_variable` and that should merge the static shape information from the old and new `Variable`s' `Type`s.  The only time issues should arise is when those `Type` are incompatible (e.g. conflicting static shape informations).

We need to make `Type.[filter|convert]_variable` work that way wherever it currently doesn't; otherwise, if you're seeing issues due to `FunctionGraph.on_change_input`, then we need to first understand why that's being called from somewhere other than `FunctionGraph.replace`.
ricardoV94(2022-02-17 09:40:47):Okay, so it seems to be something related to the `Rebroadcast` that can be introduced in `filter_variable`:

```python
var = at.TensorType("float64", (12,))("var")
new_var = at.TensorType("float64", (None,))("new_var")
filtered_var = var.type.filter_variable(new_var, allow_convert=True)
filtered_var, filtered_var.type
# (Rebroadcast{(0, False)}.0, TensorType(float64, (None,)))
```

> Edit: Should we be using a `SpecifyShape` `Op` instead of `Rebroadcast`? ... Would need to update it so that it works with partial shape information
brandonwillard(2022-02-17 16:00:49):> Edit: Should we be using a `SpecifyShape` `Op` instead of `Rebroadcast`? ... Would need to update it so that it works with partial shape information

Yeah, we need to remove some/all uses of `Rebroadcast`.
brandonwillard(2022-07-11 21:40:29):Now that #915 is merged, where does this stand?
ricardoV94(2022-07-12 16:17:59):> Now that #915 is merged, where does this stand?

This PR will be more simple now that filter/convert_variable uses specify_shape. I'll try to get it back in shape when I get some time.
ricardoV94(2022-08-07 15:54:47):The failing test `test_conv3d` ~seems to be caused by `local_fill_to_alloc` rewrite, the error disappears when I exclude it.~

It was actually caused by a bug in the output type of `DiagonalSubtensor.make_node` when the input has static type shape. We should probably review all `Ops` that default to `input.type()` for their outputs, and make sure this actually makes sense.
ricardoV94(2022-08-07 20:53:08):More cryptic scan error:

```
TypeError: ("The type's shape ((80, 5)) is not compatible with the data's ((0, 0))", 'Container name "None"')
E           Apply node that caused the error: forall_inplace,cpu,grad_of_fpass1
```
brandonwillard(2022-08-24 04:26:36):> More cryptic scan error:

@rlouf and I noticed some issues involving static shape differences (e.g. `(1, None)` vs `(None, None)`, but not any outright mismatches) arising in more than one `Scan` rewrite.  It might involve the same code as the issue(s) you were seeing, so I'll be looking in to this in the next few days.
ricardoV94(2022-09-06 16:36:13):I'll try to revert the alloc static shape and see if it works. I suspect the scan failure comes from there
codecov[bot](2022-09-07 08:29:29):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/821?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> :exclamation: No coverage uploaded for pull request base (`main@e40c827`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#section-missing-base-commit).
> The diff coverage is `94.44%`.

> :exclamation: Current head 2150bd3 differs from pull request most recent head 2235547. Consider uploading reports for the commit 2235547 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/821/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/821?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #821   +/-   ##
=======================================
  Coverage        ?   79.35%           
=======================================
  Files           ?      161           
  Lines           ?    48282           
  Branches        ?    10962           
=======================================
  Hits            ?    38316           
  Misses          ?     7454           
  Partials        ?     2512           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/821?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/821/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.66% <92.85%> (ø)` | |
| [aesara/compile/function/pfunc.py](https://codecov.io/gh/aesara-devs/aesara/pull/821/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `81.40% <100.00%> (ø)` | |
| [aesara/tensor/nnet/conv3d2d.py](https://codecov.io/gh/aesara-devs/aesara/pull/821/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvbnYzZDJkLnB5) | `81.15% <100.00%> (ø)` | |

</details>
ricardoV94(2022-09-07 08:33:05):Tests are passing without the `Alloc` static shape. Should I just drop the original+revert commit or leave them and mention it in a new issue?
brandonwillard(2022-09-07 19:14:16):> Tests are passing without the `Alloc` static shape. Should I just drop the original+revert commit or leave them and mention it in a new issue?

Yeah, if you want to address the `Alloc` changes in a separate PR, then let's drop the two commits.
ricardoV94(2022-09-08 08:02:48):> > Tests are passing without the `Alloc` static shape. Should I just drop the original+revert commit or leave them and mention it in a new issue?
> 
> Yeah, if you want to address the `Alloc` changes in a separate PR, then let's drop the two commits.

Done
codecov[bot](2022-02-16 22:38:31):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/822?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#822](https://codecov.io/gh/aesara-devs/aesara/pull/822?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2ec6758) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/719625188ec6daf29b97a666c2a7c3dab934fe50?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7196251) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/822/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/822?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #822   +/-   ##
=======================================
  Coverage   78.46%   78.46%           
=======================================
  Files         152      152           
  Lines       47851    47852    +1     
  Branches    10896    10896           
=======================================
+ Hits        37545    37546    +1     
  Misses       7760     7760           
  Partials     2546     2546           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/822?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/822/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3B0LnB5) | `94.16% <100.00%> (+0.04%)` | :arrow_up: |

ricardoV94(2022-02-19 11:47:18):It seems `infer_shape` and `type.shape` need to be more closely integrated... but I don't yet have a good mental picture of what `Op.infer_shape` and `TensorVariable.shape` are doing to be able to say more.
codecov[bot](2022-02-19 12:46:17):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/825?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#825](https://codecov.io/gh/aesara-devs/aesara/pull/825?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f3e02f4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/434a70b9f08743261bf241ede55a49f283925002?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (434a70b) will **increase** coverage by `0.00%`.
> The diff coverage is `98.75%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/825/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/825?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #825   +/-   ##
=======================================
  Coverage   78.92%   78.93%           
=======================================
  Files         152      152           
  Lines       47696    47694    -2     
  Branches    10852    10856    +4     
=======================================
+ Hits        37646    37647    +1     
  Misses       7547     7547           
+ Partials     2503     2500    -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/825?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.09% <0.00%> (-0.69%)` | :arrow_down: |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.30% <100.00%> (+0.03%)` | :arrow_up: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `85.08% <100.00%> (+0.04%)` | :arrow_up: |
| [aesara/tensor/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaGFwZS5weQ==) | `90.65% <100.00%> (+1.74%)` | :arrow_up: |
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `85.83% <100.00%> (-0.06%)` | :arrow_down: |

ricardoV94(2022-03-01 14:34:27):> These changes definitely should use `None` instead of `-1`, if only because we don't want two different encodings for the exact same concept

This wouldn't work because `NoneConst` is not allowed in vectors AFAICT

```python
import aesara.tensor as at
shape = at.as_tensor_variable([at.NoneConst, 1])
# TypeError: Unsupported dtype for TensorType: object
```
brandonwillard(2022-03-01 17:34:11):> > These changes definitely should use `None` instead of `-1`, if only because we don't want two different encodings for the exact same concept
> 
> This wouldn't work because `NoneConst` is not allowed in vectors AFAICT
> 
> ```python
> import aesara.tensor as at
> shape = at.as_tensor_variable([at.NoneConst, 1])
> # TypeError: Unsupported dtype for TensorType: object
> ```

You've just identified a real long-standing issue with the design of `SpecifyShape`: it purports to work with variable length vectors, but actually doesn't/shouldn't.  In other words, `SpecifyShape`'s shape inputs are necessarily fixed-length, the only problem is that its design doesn't match that fact, and, as a result, some things are made unnecessarily difficult to implement/change.

Anyway, if `SpecifyShape` was designed according to its fixed-length constraint, each dimension could be enumerated as an input and no longer be bound by the limitations of a tensor/vector data type (e.g. a signature like `SpecifyShape.make_node(array, *shape)` is the correct signature for this `Op`).

This is a slightly bigger rabbit hole than you might've originally thought, but it's a very important one, because going through it and truly fixing `SpecifyShape` could easily close #748 and immediately usher in widespread static-shape-based improvements.  
ricardoV94(2022-03-09 15:20:21):> Anyway, if SpecifyShape was designed according to its fixed-length constraint, each dimension could be enumerated as an input and no longer be bound by the limitations of a tensor/vector data type (e.g. a signature like SpecifyShape.make_node(array, *shape) is the correct signature for this Op).

That sounds reasonable. This whole fixed size vector feels very awkward and AFAICT has no benefit. Variables in Aesara are forced to have static known ndims anyway.
ricardoV94(2022-04-06 08:49:53):Numba implementation is working, only issues left are the two failing rewrite tests
brandonwillard(2022-02-27 02:32:10):This will introduce unnecessary `Subtensor` operations when `shape` is a constant, and an increased need for constant folding.
brandonwillard(2022-02-27 02:41:45):The comment above mentions one way in which the need for constant folding can be reduced, but, more importantly, we really shouldn't need constant folding in order to find the static/non-static shape values.

Instead, if we use the established `None` encoding, then we can use a direct `NoneConst.equals` comparison with other symbolic terms (like the elements of `shape`) and it will work without constant folding.
ricardoV94(2022-03-01 14:31:06):I was trying to get rid of the custom logic to check if the `shape` or parts of it are constants. 

Since `Rebroadcast` is doing it, and this would replace it's role in rewrites that return less specified shape information I assumed it was worth the cost
ricardoV94(2022-03-14 14:19:16):Couldn't quite pinpoint the problem yet. Couldn't even figure out which rewrites were important before, as the `imported_by` mentions a MergeOptimizer with +30 rewrites. I suspect it has something to do with the use of `ShapeFeature.same_shape` that needs some tweaking. Help appreciated
ricardoV94(2022-03-14 14:51:02):Couldn't figure out how to get Numba to work with Nones
ricardoV94(2022-03-15 19:03:51):Removed TODO because Op is already being tested with sparse Ops... and we won't be implementing new C code anytime soon
ricardoV94(2022-03-15 19:06:08):Maybe this does not quite make sense... depends on whether Aesara complains if an intermediate variable of fixed type shape is given a value with the wrong shape. Not sure how to test that.

Otherwise, assuming our automatic type shape inference leading to this Op is correct and the user did not specify a wrong shape, there is no reason for this Op when it only provides shape information that is already encoded in the variable type
ricardoV94(2022-03-15 19:21:49):We can narrow down the scope of such useless rewrite, to the cases where the not-none specified shape are constants, because then we can eagerly check if they match with the input type shape. This is also the most common use of SpecifyShape. I see no reason not to remove the SpecifyShape Op in those cases.

Thus, we would remove a `SpecifyShape(TensorType(..., shape=(2, 3)), 2, 3)` (known to be fixed and correct) but not a `SpecifyShape(TensorType(..., shape=(2, 3)), 2, 4)` (known to be fixed and wrong) or `SpecifyShape(TensorType(..., shape=(2, 3)), 2, iscalar())` (still potentially wrong)
brandonwillard(2022-03-15 19:28:01):FYI: I don't think this TODO is really relevant here; those concerns are fairly independent of this `Op`'s implementation, and some of them are already being addressed by existing rewrites/`ShapeFeature`.

Just to clarify, I'm talking primarily about the _location_ of the TODO, but the implication is also that those tasks can be considered independently, so don't worry about addressing them here.
brandonwillard(2022-03-15 19:33:18):Do we need to add `NoneTypeT` support, or simply make some changes to `compare_numba_and_py`?  If it's the former, I can try to get that done.
brandonwillard(2022-03-15 19:36:30):`ShapeFeature.same_shape` sounds likely.  I recall having issues with these rewrites when making the static shape changes, and the reasons involved a combination of unwritten/poorly specified constant folding and canonical form expectations (e.g. the kind that are highly rewrite-order-specific and the like).

I'll try to debug this locally in the next couple days.
ricardoV94(2022-03-16 08:47:50):It's a runtime issue not just an issue with `compare_numba_and_py`.

```python
import aesara
import aesara.tensor as at
import numpy as np
x = at.matrix("x")
y = at.specify_shape(x, (1, None))
f = aesara.function([x], y, mode="NUMBA")
f(np.zeros((1, 2)))
```

<details>
 <summary>Traceback</summary>

```
Traceback (most recent call last):
  File "/home/ricardo/Documents/Projects/aesara/aesara/link/utils.py", line 202, in streamline_default_f
    thunk()
  File "/home/ricardo/Documents/Projects/aesara/aesara/link/basic.py", line 664, in thunk
    outputs = fgraph_jit(*[x[0] for x in thunk_inputs])
  File "/home/ricardo/Documents/Projects/aesara/venv/lib/python3.8/site-packages/numba/core/dispatcher.py", line 482, in _compile_for_args
    error_rewrite(e, 'typing')
  File "/home/ricardo/Documents/Projects/aesara/venv/lib/python3.8/site-packages/numba/core/dispatcher.py", line 423, in error_rewrite
    raise e.with_traceback(None)
numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
Failed in nopython mode pipeline (step: nopython frontend)
No implementation of function Function(<class 'zip'>) found for signature:
 
 >>> zip(UniTuple(int64 x 2), StarArgTuple(readonly array(int8, 0d, C), none))
 
There are 2 candidate implementations:
  - Of which 2 did not match due to:
  Overload of function 'zip': File: numba/core/typing/builtins.py: Line 1019.
    With argument(s): '(UniTuple(int64 x 2), StarArgTuple(readonly array(int8, 0d, C), none))':
   No match.
During: resolving callee type: Function(<class 'zip'>)
During: typing of call at /home/ricardo/Documents/Projects/aesara/aesara/link/numba/dispatch/basic.py (589)
File "aesara/link/numba/dispatch/basic.py", line 589:
    def specifyshape(x, *shape):
        for xs, s in zip(x.shape, shape):
        ^
During: resolving callee type: type(CPUDispatcher(<function numba_funcify_SpecifyShape.<locals>.specifyshape at 0x7f11594b48b0>))
During: typing of call at /tmp/tmphikq3lce (3)
During: resolving callee type: type(CPUDispatcher(<function numba_funcify_SpecifyShape.<locals>.specifyshape at 0x7f11594b48b0>))
During: typing of call at /tmp/tmphikq3lce (3)
File "../../../../../tmp/tmphikq3lce", line 3:
def numba_funcified_fgraph(x):
    auto_59 = specifyshape(x, auto_55, NoneConst)
    ^
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "/home/ricardo/Documents/Projects/aesara/venv/lib/python3.8/site-packages/IPython/core/interactiveshell.py", line 3441, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-4-462a1a0bd99b>", line 7, in <module>
    f(np.zeros((1, 2)))
  File "/home/ricardo/Documents/Projects/aesara/aesara/compile/function/types.py", line 964, in __call__
    self.fn()
  File "/home/ricardo/Documents/Projects/aesara/aesara/link/utils.py", line 206, in streamline_default_f
    raise_with_op(fgraph, node, thunk)
  File "/home/ricardo/Documents/Projects/aesara/aesara/link/utils.py", line 538, in raise_with_op
    raise exc_value.with_traceback(exc_trace)
  File "/home/ricardo/Documents/Projects/aesara/aesara/link/utils.py", line 202, in streamline_default_f
    thunk()
  File "/home/ricardo/Documents/Projects/aesara/aesara/link/basic.py", line 664, in thunk
    outputs = fgraph_jit(*[x[0] for x in thunk_inputs])
  File "/home/ricardo/Documents/Projects/aesara/venv/lib/python3.8/site-packages/numba/core/dispatcher.py", line 482, in _compile_for_args
    error_rewrite(e, 'typing')
  File "/home/ricardo/Documents/Projects/aesara/venv/lib/python3.8/site-packages/numba/core/dispatcher.py", line 423, in error_rewrite
    raise e.with_traceback(None)
numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
Failed in nopython mode pipeline (step: nopython frontend)
No implementation of function Function(<class 'zip'>) found for signature:
 
 >>> zip(UniTuple(int64 x 2), StarArgTuple(readonly array(int8, 0d, C), none))
 
There are 2 candidate implementations:
  - Of which 2 did not match due to:
  Overload of function 'zip': File: numba/core/typing/builtins.py: Line 1019.
    With argument(s): '(UniTuple(int64 x 2), StarArgTuple(readonly array(int8, 0d, C), none))':
   No match.
During: resolving callee type: Function(<class 'zip'>)
During: typing of call at /home/ricardo/Documents/Projects/aesara/aesara/link/numba/dispatch/basic.py (589)
File "aesara/link/numba/dispatch/basic.py", line 589:
    def specifyshape(x, *shape):
        for xs, s in zip(x.shape, shape):
        ^
During: resolving callee type: type(CPUDispatcher(<function numba_funcify_SpecifyShape.<locals>.specifyshape at 0x7f11594b48b0>))
During: typing of call at /tmp/tmphikq3lce (3)
During: resolving callee type: type(CPUDispatcher(<function numba_funcify_SpecifyShape.<locals>.specifyshape at 0x7f11594b48b0>))
During: typing of call at /tmp/tmphikq3lce (3)
File "../../../../../tmp/tmphikq3lce", line 3:
def numba_funcified_fgraph(x):
    auto_59 = specifyshape(x, auto_55, NoneConst)
    ^
Apply node that caused the error: DeepCopyOp(SpecifyShape.0)
Toposort index: 1
Inputs types: [TensorType(float64, (1, None))]
Inputs shapes: [(1, 2)]
Inputs strides: [(16, 8)]
Inputs values: [array([[0., 0.]])]
Outputs clients: [['output']]
HINT: Re-running with most Aesara optimizations disabled could provide a back-trace showing when this node was created. This can be done by setting the Aesara flag 'optimizer=fast_compile'. If that does not work, Aesara optimizations can be disabled with 'optimizer=None'.
HINT: Use the Aesara flag `exception_verbosity=high` for a debug print-out and storage map footprint of this Apply node.
```
</details>
ricardoV94(2022-03-16 17:20:49):Now that Sparse is also a TensorType, do we still need this else branch? What other variable types are we supporting?
brandonwillard(2022-03-16 18:48:14):There are `Type`s for `None`s and `slice`s, for example.
brandonwillard(2022-03-16 18:52:56):Ah, I see; this looks like it only requires a rewrite to remove the `zip` in our Numba `SpecifyShape` implementation, since Numba doesn't support `zip` for those argument types.  Changing it to an `enumerate` and indexing one of the iterables should be sufficient.
ricardoV94(2022-03-16 19:21:20):I tried a bunch of things, include creating an index of non-None inputs outside and inside the function, but nothing worked for me. Just different errors. I also tried some things with enumeration and for-loops without success
ricardoV94(2022-03-16 19:23:10):Right, but SpecifyShape does not work for those
brandonwillard(2022-03-16 19:39:07):Yeah, and the `as_tensor_variable` above should only ever return `TensorType` results.  It looks like the acceptable types should be clarified upfront (e.g. an explicit exception for non-`TensorType`s).
ricardoV94(2022-03-16 20:01:30):Is it enough to try to convert every `x` to `as_tensor_variable`? I assume that will raise for non `TensorType`s 
brandonwillard(2022-03-16 20:03:46):Yes, that's fine.
ricardoV94(2022-03-31 04:31:46):Check: Do I need a unique DisconnectedType per input or is the multiplication fine 
ricardoV94(2022-03-31 04:32:29):Do we need this helper function? Can't the code go into make_node?
brandonwillard(2022-04-01 04:04:52):I'm not entirely sure how the `Variable` instances of these are used in every scenario, but I do see that&mdash;in most/every other case&mdash;distinct ones are created for each distinct term to which they correspond, so it would be safer to create unique ones.
brandonwillard(2022-04-01 04:08:14):Not if it would make the `Op.make_node` and `Apply.inputs` inconsistent.  It looks like this `specify_shape` helper/constructor function has an `(x, shape)` signature and not `(x, *shape)`, so that might be one reason not to get rid of it.  Of course `SpecifyShape.make_node` could be changed to handle both types of inputs, but it wouldn't really help to do so.
brandonwillard(2022-04-01 04:13:09):Is this still an issue?
ricardoV94(2022-04-05 07:53:00):My main concern was to make sure that `SpecifyShape` `Op` would work with it's own inputs so that you can call `node.owner.op(*node.owner.inputs)`. I guess once we have that, it doesn't matter we have this helper logic separated.
ricardoV94(2022-04-05 07:59:34):Yes. Kaustubh wrote this implementation, which is a bit like the `C` implementation I did. I guess we could even ignore the `None` inputs in the function body:

```python
@numba_funcify.register(SpecifyShape)
def numba_funcify_SpecifyShape(op, node, **kwargs):
    
    num_shape_args = len(node.inputs) - 1
    input_names = ["shape_" + str(i) for i in range(num_shape_args)]
    shape_indices = [f"x.shape[{i}]" for i in range(num_shape_args)]

    func_body = ""
    for _input_name, _shape_index in zip(input_names, shape_indices):
        func_body = func_body + f"""
    if {_input_name} is not None:
        assert {_shape_index} == {_input_name}
"""

    func_template = f"""
def specifyshape(x, {create_arg_string(input_names)}):
    {func_body}
    return x
"""
    specifyshape = compile_function_src(
        func_template, "specifyshape", globals()
    )
    return numba_njit(specifyshape)
```
ricardoV94(2022-04-05 08:01:59):I also thought about doing a numba-specific rewrite where we replace `None` by `-1` just before compilation, which would get rid of the issues with mixed `*args` types that Numba seems to reject. I don't have a strong preference for either option. What do you think?
brandonwillard(2022-04-05 16:35:32):> My main concern was to make sure that `SpecifyShape` `Op` would work with it's own inputs so that you can call `node.owner.op(*node.owner.inputs)`.

Yes, that is by far the most important thing.

More generally, it would be great if we could confirm this automatically somehow (e.g. via type checking, but that doesn't seem likely).
brandonwillard(2022-04-05 16:38:47):> I guess we could even ignore the `None` inputs in the function body:

That sounds good.
ricardoV94(2022-04-13 08:01:32):The failing rewrites were due to me being perhaps over-careful here and defaulting to using the shape of the input variable `xshape` whenever `at.get_scalar_constant_value` failed to return a constant. I was doing this because I feared a hidden `None` specified shape could be lurking somewhere in the graph of the shape. 

However, since most Op's cannot build on top of `NoneConst` inputs I have now switched to assuming that a raised error also confirms that the specified shape is not `None` and can be used for shape inference in this `Op`. The rewrites now work, but let's see if anything else fails
ricardoV94(2022-04-13 11:24:51):Seems to have worked
brandonwillard(2022-04-14 01:29:28):```suggestion
    # tuple with one entry per shape dimension
```
brandonwillard(2022-04-14 01:33:01):```suggestion
    If a dimension's shape value is ``None``, the size of that dimension is not considered fixed/static at runtime.
```
brandonwillard(2022-04-14 01:38:29):This sounds like one of the reasons we made these changes: e.g. so that we could use `specify_shape(new_obj_arg, s1, s2, ...)` and avoid constructing symbolic vectors altogether.  These shape vectors are really a bad thing, because they don't fit the vector mold very well at all.
ricardoV94(2022-04-14 08:19:35):Actually this rewrite is wrong, `x[i].shape != x.shape[i]`

Furthermore, this rewrite is only applied when there is a single non-slice index, which means that regardless of the index, it should always return `specify_shape(new_obj_arg, *shape_arg[1:])`
ricardoV94(2022-04-14 08:26:18):This test does not show this: https://github.com/aesara-devs/aesara/blob/0f1f5bebfb2a058540d1a54b7026b962c13f873a/tests/tensor/test_subtensor_opt.py#L2102-L2121

Adding this parametrization, makes it obvious:
```python
        (
            matrix(),
            (iscalar(), iscalar()),
            (0,),
            np.array([[1, 2, 3], [3, 4, 3]], dtype=config.floatX),
            np.array([2, 3], dtype=np.int64),
        ),
```

ricardoV94(2022-04-14 08:52:44):Fixed now
ricardoV94(2022-04-14 13:45:52):We could also handle mixed `[:]` slices easily, where we just have to keep the respective dimensions shape, but that's a bit beyond the  scope of this PR. 

Something like:
```python
# before:
specify_shape(x, (s1, s2))[:, 0]

# after:
specify_shape(x[:, 0], (s1,))
```

brandonwillard(2022-04-14 16:58:39):I wasn't sure about this change, but now I'm convinced that this is a canonicalization that should _always_ apply.

What we can do instead of allowing the rewrite to fail/abort is return all the non-`None` entries and replace the `None`s with calls to `aesara.tensor.shape.shape_i`.  Such a result would be entirely valid and in-line with the old results.
brandonwillard(2022-04-14 17:05:47):Just as I mentioned above, whenever we encounter a `None` we can use `aesara.tensor.shape.shape_i`.
brandonwillard(2022-04-14 17:06:58):Why this change?
ricardoV94(2022-04-15 07:19:13):This rewrite no longer relies on specifyshape input types, it doesn't matter if it's a `None` or not.
ricardoV94(2022-04-15 07:20:58):Looks like a mistaken leftover
ricardoV94(2022-04-15 12:34:58):It seems this rewrite would basically just return the (stacked) output of `SpecifyShape.infer_shape`? Isn't this already done automatically when a shape graph is created?

Would this make sense?

```python
@register_useless
@register_canonicalize
@local_optimizer([Shape])
def local_Shape_of_SpecifyShape(fgraph, node):
    """Replace ``specify_shape(x, s).shape`` with ``s``."""
    if not isinstance(node.op, Shape):
        return False

    specified_shape = node.inputs[0]

    if not isinstance(getattr(specified_shape.owner, "op", None), SpecifyShape):
        return False

    shape = SpecifyShape.infer_shape(
        fgraph, 
        specified_shape.owner, 
        (inp.shape for inp in specified_shape.owner.inputs),
    )

    return [stack(shape).astype(np.int64)]
```

brandonwillard(2022-04-15 14:48:32):No, that would effectively bypass`ShapeFeature`.
ricardoV94(2022-04-18 11:20:58):Making use of `shape_i` now, let me know if it looks correct
codecov[bot](2022-02-18 15:18:56):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/826?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#826](https://codecov.io/gh/aesara-devs/aesara/pull/826?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f0ebc3d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e30d7b9033fefef7d51a36957014d0001ffff71b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e30d7b9) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/826/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/826?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #826   +/-   ##
=======================================
  Coverage   78.46%   78.46%           
=======================================
  Files         152      152           
  Lines       47852    47852           
  Branches    10896    10896           
=======================================
  Hits        37548    37548           
  Misses       7760     7760           
  Partials     2544     2544           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/826?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/826/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.90% <100.00%> (ø)` | |
| [aesara/tensor/random/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/826/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `97.56% <100.00%> (ø)` | |

canyon289(2022-02-19 15:26:01):Add docstring please, even if its simple
canyon289(2022-02-19 15:26:24):Docstring on why this should raise a value error
canyon289(2022-02-19 15:27:54):Reading through all the case docstrings that  explain whats going on would be nice, even if its "obvious" to you folks itlll make it easier to understand the functionality for people ramping in
ricardoV94(2022-02-20 16:51:30):This seems like quite a burden for a PR that only intended to change the name of the function.
ricardoV94(2022-02-20 17:34:05):I went and merged the PR. If you think the tests warrant docstrings/ comments please open an issue for that
canyon289(2022-02-20 19:27:02):Thanks Ricardo
codecov[bot](2022-10-18 00:54:26):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/827?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#827](https://codecov.io/gh/aesara-devs/aesara/pull/827?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9614f42) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/aa5223c19b5a2c818e42cf3b16dd874fe884c71a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (aa5223c) will **not change** coverage.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/827/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/827?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #827   +/-   ##
=======================================
  Coverage   74.09%   74.09%           
=======================================
  Files         174      174           
  Lines       48605    48605           
  Branches    10340    10340           
=======================================
  Hits        36014    36014           
  Misses      10305    10305           
  Partials     2286     2286           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/827?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/827/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `97.40% <100.00%> (ø)` | |

</details>
brandonwillard(2022-10-18 01:09:24):@sujitpal, thanks for the contribution!
codecov[bot](2022-02-19 01:44:09):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/828?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#828](https://codecov.io/gh/aesara-devs/aesara/pull/828?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9ef57ac) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/9b4531d4c013cab5db1d58e7f405cfdab2ce0b06?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9b4531d) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/828/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/828?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #828   +/-   ##
=======================================
  Coverage   78.46%   78.46%           
=======================================
  Files         152      152           
  Lines       47852    47852           
  Branches    10896    10896           
=======================================
  Hits        37546    37546           
  Misses       7760     7760           
  Partials     2546     2546           
```



twiecki(2022-02-19 08:18:57):Is that a `jaxlib` bug?
brandonwillard(2022-02-19 08:53:00):> Is that a `jaxlib` bug?

Looks like it.
twiecki(2022-02-21 15:15:14):Perhaps it's this one? https://github.com/conda-forge/jaxlib-feedstock/issues/89
xhochy(2022-03-07 19:04:30):We have fixed the `jaxlib` issue and you should be able to revert this PR.
twiecki(2022-03-07 21:31:19):Thanks for letting us know @xhochy!
codecov[bot](2022-02-20 02:34:08):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/829?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#829](https://codecov.io/gh/aesara-devs/aesara/pull/829?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (dedee58) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/8ce342d3257f61b346e188b37497ed90cc030b72?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8ce342d) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/829/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/829?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #829   +/-   ##
=======================================
  Coverage   78.46%   78.46%           
=======================================
  Files         152      152           
  Lines       47852    47852           
  Branches    10896    10896           
=======================================
+ Hits        37546    37548    +2     
  Misses       7760     7760           
+ Partials     2546     2544    -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/829?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `74.64% <ø> (ø)` | |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `49.85% <ø> (ø)` | |
| [aesara/sandbox/rng\_mrg.py](https://codecov.io/gh/aesara-devs/aesara/pull/829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvcm5nX21yZy5weQ==) | `84.14% <ø> (ø)` | |
| [aesara/sparse/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9vcHQucHk=) | `75.46% <ø> (ø)` | |
| [aesara/tensor/blas\_c.py](https://codecov.io/gh/aesara-devs/aesara/pull/829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ibGFzX2MucHk=) | `83.14% <ø> (ø)` | |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `86.57% <ø> (ø)` | |
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `80.23% <ø> (ø)` | |
| [aesara/tensor/nnet/batchnorm.py](https://codecov.io/gh/aesara-devs/aesara/pull/829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2JhdGNobm9ybS5weQ==) | `77.04% <ø> (ø)` | |
| [aesara/tensor/nnet/conv3d2d.py](https://codecov.io/gh/aesara-devs/aesara/pull/829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvbnYzZDJkLnB5) | `80.88% <ø> (ø)` | |
| [aesara/tensor/nnet/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L29wdC5weQ==) | `42.96% <ø> (ø)` | |
| ... and [11 more](https://codecov.io/gh/aesara-devs/aesara/pull/829/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

codecov[bot](2022-02-22 01:53:30):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#832](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (d54ee84) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/78253b867f6f601cf917e5b73ee3fa314d7bc4d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (78253b8) will **increase** coverage by `0.13%`.
> The diff coverage is `86.19%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/832/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main     #832      +/-   ##
==========================================
+ Coverage   74.87%   75.00%   +0.13%     
==========================================
  Files         194      194              
  Lines       50123    50072      -51     
  Branches    12098    12095       -3     
==========================================
+ Hits        37530    37559      +29     
+ Misses      10266    10189      -77     
+ Partials     2327     2324       -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `89.99% <ø> (ø)` | |
| [aesara/tensor/rewriting/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvYmFzaWMucHk=) | `92.12% <ø> (ø)` | |
| [aesara/tensor/rewriting/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvc2hhcGUucHk=) | `81.58% <79.34%> (+1.66%)` | :arrow_up: |
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `60.25% <79.36%> (-1.02%)` | :arrow_down: |
| [aesara/graph/fg.py](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `89.01% <81.81%> (-0.45%)` | :arrow_down: |
| [aesara/graph/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `91.46% <84.21%> (-2.48%)` | :arrow_down: |
| [aesara/graph/destroyhandler.py](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL2Rlc3Ryb3loYW5kbGVyLnB5) | `84.83% <88.31%> (+14.90%)` | :arrow_up: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.81% <90.90%> (+0.18%)` | :arrow_up: |
| [aesara/graph/features.py](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `70.21% <96.92%> (+4.90%)` | :arrow_up: |
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `79.16% <100.00%> (ø)` | |
| ... and [5 more](https://codecov.io/gh/aesara-devs/aesara/pull/832?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
ricardoV94(2022-02-22 21:24:00):Is `shape_of` now always present in a FunctionGraph, or only when the `ShapeFeature` is around?  Or was it already?
brandonwillard(2022-02-22 21:29:56):Under these changes, `shape_of` is now added to a `FunctionGraph` whenever `ShapeFeature` is attached.  Currently, this `shape_of` `dict` resides in the `ShapeFeature` instances attached to `FunctionGraph`s.
ricardoV94(2022-02-22 21:34:50):Could this pose any issues with pickling the FunctionGraph?

I see you added a bunch of pickling tests but didn't notice one for this.
brandonwillard(2022-02-22 21:35:37):Basically, the changes in this PR put the additional features added by `Feature`s onto the `FunctionGraph`s themselves.  `Feature`s then become more like dynamic mixin classes.  Really, this whole `Feature` idea could be recast as `FunctionGraph` subclassing, since all of the functionality they can add is more directly implementable by extending `FunctionGraph` via a subclass.
brandonwillard(2022-02-22 21:41:40):> Could this pose any issues with pickling the FunctionGraph?
> 
> I see you added a bunch of pickling tests but didn't notice one for this.

I'm not sure how `pickle`ing could affect this situation, since both the `FunctionGraph` and its `ShapeFeature` only exist at runtime within this `infer_shape` function.
codecov[bot](2022-02-22 14:38:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/833?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#833](https://codecov.io/gh/aesara-devs/aesara/pull/833?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ada8b31) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/265c0d9457f0d28875c73115bef7a8860b114dc1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (265c0d9) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/833/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/833?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #833      +/-   ##
==========================================
- Coverage   78.39%   78.38%   -0.01%     
==========================================
  Files         152      152              
  Lines       47638    47628      -10     
  Branches    10842    10841       -1     
==========================================
- Hits        37345    37335      -10     
  Misses       7750     7750              
  Partials     2543     2543              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/833?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/833/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vb3AucHk=) | `97.40% <100.00%> (-0.16%)` | :arrow_down: |

kc611(2022-02-24 12:23:04):For the squeeze issue we can do that by merging: https://github.com/aesara-devs/aesara/pull/657
Have a quick look at and we can merge it, it's looks complete to me. 

As for the CAReduce issue I had a PR for that too, but it was more general in nature: https://github.com/aesara-devs/aesara/pull/342, That would need to rebased though. It's also complete. (Mostly)
ricardoV94(2022-02-25 10:19:45):> For the squeeze issue we can do that by merging: #657 Have a quick look at and we can merge it, it's looks complete to me.
> 
> As for the CAReduce issue I had a PR for that too, but it was more general in nature: #342, That would need to rebased though. It's also complete. (Mostly)

I think it might still be worth pushing this PR, since it's pretty self-contained and adds regression tests for behavior that was defective until now.
kc611(2022-02-25 10:46:39):Sure 👍, seems like the PR I tagged needs some discussion before it can be merged. 
codecov[bot](2022-02-25 11:43:18):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/834?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#834](https://codecov.io/gh/aesara-devs/aesara/pull/834?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f874d16) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/39a455d375c63cf8bb6f9c32ab724bfed859c1bd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (39a455d) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/834/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/834?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #834      +/-   ##
==========================================
- Coverage   78.55%   78.55%   -0.01%     
==========================================
  Files         154      154              
  Lines       47968    47962       -6     
  Branches    10900    10899       -1     
==========================================
- Hits        37683    37677       -6     
  Misses       7740     7740              
  Partials     2545     2545              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/834?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/834/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.39% <100.00%> (-0.10%)` | :arrow_down: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/834/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `89.31% <100.00%> (ø)` | |

kc611(2022-03-01 14:15:34):A little tidbit here, we should make these cases with `pytest.parametrize`

ricardoV94(2022-03-01 14:23:28):`parametrize` makes this test a bit less readable but has the advantage of being a bit quicker to spot the failing condition, and reusing code. The latter is not really a thing here though... Anyway, I would not object to refactoring it :)
brandonwillard(2022-03-15 19:56:52):```suggestion
        Selects a subset of broadcastable dimensions to be removed.
```
brandonwillard(2022-03-15 19:57:23):```suggestion
        If `axis` is ``None``, all broadcastable dimensions will be removed.
```
brandonwillard(2022-03-15 19:57:52):```suggestion
        2. Similarly, if `axis` is ``None``, only dimensions known to be broadcastable will be
```
codecov[bot](2022-03-02 18:23:22):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/837?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#837](https://codecov.io/gh/aesara-devs/aesara/pull/837?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ef00cc9) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c27183cfdafc00313ebaab308efe46e51d6035dc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c27183c) will **increase** coverage by `0.04%`.
> The diff coverage is `76.43%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/837/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/837?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #837      +/-   ##
==========================================
+ Coverage   78.39%   78.43%   +0.04%     
==========================================
  Files         152      154       +2     
  Lines       47640    47708      +68     
  Branches    10841    10842       +1     
==========================================
+ Hits        37347    37421      +74     
+ Misses       7750     7747       -3     
+ Partials     2543     2540       -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/837?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/compiledir.py](https://codecov.io/gh/aesara-devs/aesara/pull/837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvY29tcGlsZWRpci5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/sandbox/fourier.py](https://codecov.io/gh/aesara-devs/aesara/pull/837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvZm91cmllci5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/compile/nanguardmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `56.81% <50.00%> (+0.32%)` | :arrow_up: |
| [aesara/link/c/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9vcC5weQ==) | `61.41% <61.41%> (ø)` | |
| [aesara/link/c/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy90eXBlLnB5) | `75.66% <75.66%> (ø)` | |
| [aesara/graph/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `93.44% <90.90%> (+14.21%)` | :arrow_up: |
| [aesara/graph/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `85.63% <91.30%> (+16.78%)` | :arrow_up: |
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `74.64% <100.00%> (ø)` | |
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `60.72% <100.00%> (+0.03%)` | :arrow_up: |
| [aesara/compile/ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvb3BzLnB5) | `83.68% <100.00%> (+0.11%)` | :arrow_up: |
| ... and [39 more](https://codecov.io/gh/aesara-devs/aesara/pull/837/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

codecov[bot](2022-03-03 01:26:16):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/839?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#839](https://codecov.io/gh/aesara-devs/aesara/pull/839?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7adb035) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/15c55a3dbb6c1bdafa02f486e2070056be6326c9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (15c55a3) will **increase** coverage by `0.00%`.
> The diff coverage is `96.55%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/839/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/839?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #839   +/-   ##
=======================================
  Coverage   78.43%   78.43%           
=======================================
  Files         154      154           
  Lines       47708    47719   +11     
  Branches    10842    10845    +3     
=======================================
+ Hits        37421    37430    +9     
- Misses       7747     7748    +1     
- Partials     2540     2541    +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/839?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/839/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `59.23% <90.47%> (-1.39%)` | :arrow_down: |
| [aesara/graph/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/839/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `85.86% <100.00%> (+0.22%)` | :arrow_up: |
| [aesara/link/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/839/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `85.83% <100.00%> (-0.12%)` | :arrow_down: |
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/839/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `50.98% <100.00%> (+0.53%)` | :arrow_up: |
| [aesara/link/c/cvm.py](https://codecov.io/gh/aesara-devs/aesara/pull/839/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jdm0ucHk=) | `81.25% <100.00%> (ø)` | |
| [aesara/link/c/lazylinker\_c.py](https://codecov.io/gh/aesara-devs/aesara/pull/839/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9sYXp5bGlua2VyX2MucHk=) | `65.95% <100.00%> (+1.12%)` | :arrow_up: |

codecov[bot](2022-03-03 23:06:13):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/841?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#841](https://codecov.io/gh/aesara-devs/aesara/pull/841?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (490c56a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/db9b4bbe18c7fd8df5db658bc32a1cb8e92159eb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (db9b4bb) will **increase** coverage by `0.00%`.
> The diff coverage is `92.59%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/841/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #841   +/-   ##
=======================================
  Coverage   78.43%   78.44%           
=======================================
  Files         154      154           
  Lines       47719    47742   +23     
  Branches    10845    10848    +3     
=======================================
+ Hits        37430    37451   +21     
- Misses       7748     7749    +1     
- Partials     2541     2542    +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/841/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvcmFuZG9tLnB5) | `98.63% <91.30%> (-1.37%)` | :arrow_down: |
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/841/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.08% <100.00%> (ø)` | |

codecov[bot](2022-03-04 00:18:30):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/843?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#843](https://codecov.io/gh/aesara-devs/aesara/pull/843?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5349add) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0c7720cf6cc3bb01f44523d92945a3359feaed87?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0c7720c) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/843/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/843?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #843      +/-   ##
==========================================
- Coverage   78.44%   78.44%   -0.01%     
==========================================
  Files         154      154              
  Lines       47742    47749       +7     
  Branches    10848    10848              
==========================================
+ Hits        37451    37456       +5     
- Misses       7749     7750       +1     
- Partials     2542     2543       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/843?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/843/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvcmFuZG9tLnB5) | `98.68% <100.00%> (+0.05%)` | :arrow_up: |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/843/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.90% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/843/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `86.13% <0.00%> (-0.40%)` | :arrow_down: |

codecov[bot](2022-03-07 20:22:32):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/847?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#847](https://codecov.io/gh/aesara-devs/aesara/pull/847?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2c4b072) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0b8d47fe4ba84b402a1750affe96a4e58a9787d4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0b8d47f) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/847/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/847?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #847   +/-   ##
=======================================
  Coverage   78.44%   78.44%           
=======================================
  Files         154      154           
  Lines       47749    47749           
  Branches    10848    10848           
=======================================
  Hits        37456    37456           
  Misses       7750     7750           
  Partials     2543     2543           
```



codecov[bot](2022-04-06 00:59:00):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/848?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#848](https://codecov.io/gh/aesara-devs/aesara/pull/848?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (36e29a4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/344ff6be5ccdd5f6bba3c51ceb4ca597aeba2fa4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (344ff6b) will **increase** coverage by `0.02%`.
> The diff coverage is `86.71%`.

> :exclamation: Current head 36e29a4 differs from pull request most recent head fba4184. Consider uploading reports for the commit fba4184 to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/848/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/848?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #848      +/-   ##
==========================================
+ Coverage   78.99%   79.02%   +0.02%     
==========================================
  Files         152      152              
  Lines       47809    47947     +138     
  Branches    10893    10900       +7     
==========================================
+ Hits        37768    37889     +121     
- Misses       7541     7547       +6     
- Partials     2500     2511      +11     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/848?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/io.py](https://codecov.io/gh/aesara-devs/aesara/pull/848/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvaW8ucHk=) | `83.01% <0.00%> (ø)` | |
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/848/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `66.48% <ø> (+0.09%)` | :arrow_up: |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/848/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `80.34% <ø> (-0.52%)` | :arrow_down: |
| [aesara/misc/check\_blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/848/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL21pc2MvY2hlY2tfYmxhcy5weQ==) | `0.00% <ø> (ø)` | |
| [aesara/scan/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/848/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vYmFzaWMucHk=) | `85.24% <ø> (+0.15%)` | :arrow_up: |
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/848/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `60.45% <50.00%> (-0.16%)` | :arrow_down: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/848/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `48.58% <50.00%> (-3.08%)` | :arrow_down: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/848/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `85.10% <54.54%> (+0.01%)` | :arrow_up: |
| [aesara/gradient.py](https://codecov.io/gh/aesara-devs/aesara/pull/848/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `77.23% <71.42%> (ø)` | |
| [aesara/link/c/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/848/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9iYXNpYy5weQ==) | `87.36% <75.00%> (ø)` | |
| ... and [52 more](https://codecov.io/gh/aesara-devs/aesara/pull/848/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

ricardoV94(2022-04-09 20:47:24):I like the new ability to add outputs to the FunctionGraph!
brandonwillard(2022-04-09 21:17:37):> I like the new ability to add outputs to the FunctionGraph!

It's no longer necessary, but it seemed like a good enough feature to keep.
brandonwillard(2022-05-01 23:31:36):@aesara-devs/aesara, this has been updated and is passing again, so, if anyone has questions/objections/whatever, state them soon, because we need to merge this before more rebasing is necessary.
ricardoV94(2022-05-02 06:05:18):Quick question, what's the difference between Constant and AtomicVariable?
brandonwillard(2022-05-02 19:59:26):> Quick question, what's the difference between Constant and AtomicVariable?

A `Constant` is an `AtomicVariable` that holds data (and is supposed to be uniquely defined by said data).  Throughout Aesara, a `Constant` is understood to never be an "input" to a graph (well, `FunctionGraph`/`Function`, really).

A `Constant` is very similar to a `NominalVariable` (i.e. the only other `AtomicVariable`), except that `NominalVariable`s _can_ be inputs.  Currently, `NominalVariable`s serve the purpose of representing "universal" argument-ordered inputs to functions, so that&mdash;for example&mdash;two alpha-equivalent functions like `FunctionGraph([x, y], [x + y])` and `FunctionGraph([z, w], [z + w])` can be more immediately recognized as equivalent (via identity/`is`) when both are constructed using the same, ordered `NominalVariable` arguments (e.g. `n_0 = NominalVariable(0, type_0)`, etc.).  See [nominal terms](https://en.wikipedia.org/wiki/Nominal_terms_(computer_science)).

If we construct all inner-graphs using ordered `NominalVariable` arguments (as this PR does), we are able to determine the equivalence of inner-graphs using identity-only comparisons&mdash;after applying merge rewrites, of course.

The purpose of establishing identity-based equivalence between inner-graphs: we can tell when two `Scan`s are equivalent, without walking both inner-graphs every time.  Also, if we know that two inner-graphs are equivalent, but the nodes that contain/use them aren't (e.g. the same `Scan` `Op`s used with different inputs), we can also prevent ourselves from compiling the same inner-function twice.

The merge rewrites aren't currently applied **between** inner-graph, though; this PR only establishes the foundations for applying our identity-based comparisons of graphs to inner-graphs.  https://github.com/aesara-devs/aesara/pull/824 contains the changes that add the between-inner-graphs capabilities.

twiecki(2022-04-10 12:27:26):How does this get freed?
brandonwillard(2022-04-10 21:33:06):It should be freed when the Python VM calls `CLazyLinker_dealloc`.
codecov[bot](2022-03-11 04:05:29):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/854?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#854](https://codecov.io/gh/aesara-devs/aesara/pull/854?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5cfb7ea) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/3d8553f7b56caed8686e3db9bfbe5ffea110b70a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3d8553f) will **increase** coverage by `0.00%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/854/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/854?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #854   +/-   ##
=======================================
  Coverage   78.44%   78.44%           
=======================================
  Files         154      154           
  Lines       47749    47749           
  Branches    10848    10848           
=======================================
+ Hits        37456    37458    +2     
+ Misses       7750     7749    -1     
+ Partials     2543     2542    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/854?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/854/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `87.43% <0.00%> (+0.26%)` | :arrow_up: |

ricardoV94(2022-03-11 12:17:21):I wonder if we should just remove the `Diff` `Op` altogether.

Since it doesn't have a `C` implementation, slicing + subtraction seems to be faster, even for large `n`. See gist here: 

https://gist.github.com/ricardoV94/6e4c59fd312b9e7f9352b2fe07cab0c9 

This also overcomes the gradient bug and limited implementation to vector inputs.

Not sure about the speed implications for the Numba and JAX backends.

Only downside, is that a DiffOp might be a useful representation when it comes to graph manipulation


codecov[bot](2022-03-11 13:14:23):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/855?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#855](https://codecov.io/gh/aesara-devs/aesara/pull/855?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8045713) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/51792feaf099e4d8378e8dfb986ff91ef938a070?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (51792fe) will **increase** coverage by `0.30%`.
> The diff coverage is `86.13%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/855/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/855?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #855      +/-   ##
==========================================
+ Coverage   78.17%   78.48%   +0.30%     
==========================================
  Files         152      154       +2     
  Lines       47663    47773     +110     
  Branches    10881    10853      -28     
==========================================
+ Hits        37260    37494     +234     
+ Misses       7846     7743     -103     
+ Partials     2557     2536      -21     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/855?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/compiledir.py](https://codecov.io/gh/aesara-devs/aesara/pull/855/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvY29tcGlsZWRpci5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/d3viz/d3viz.py](https://codecov.io/gh/aesara-devs/aesara/pull/855/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2Qzdml6L2Qzdml6LnB5) | `23.68% <0.00%> (ø)` | |
| [aesara/link/c/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/855/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9iYXNpYy5weQ==) | `87.36% <ø> (ø)` | |
| [aesara/link/vm.py](https://codecov.io/gh/aesara-devs/aesara/pull/855/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `87.94% <ø> (+0.75%)` | :arrow_up: |
| [aesara/sandbox/fourier.py](https://codecov.io/gh/aesara-devs/aesara/pull/855/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvZm91cmllci5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/tensor/nnet/batchnorm.py](https://codecov.io/gh/aesara-devs/aesara/pull/855/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2JhdGNobm9ybS5weQ==) | `77.04% <ø> (ø)` | |
| [aesara/tensor/nnet/conv3d2d.py](https://codecov.io/gh/aesara-devs/aesara/pull/855/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvbnYzZDJkLnB5) | `80.88% <ø> (ø)` | |
| [aesara/tensor/nnet/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/855/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L29wdC5weQ==) | `42.96% <0.00%> (ø)` | |
| [aesara/typed\_list/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/855/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3R5cGVkX2xpc3QvYmFzaWMucHk=) | `88.77% <ø> (+0.03%)` | :arrow_up: |
| [aesara/typed\_list/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/855/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3R5cGVkX2xpc3Qvb3B0LnB5) | `100.00% <ø> (ø)` | |
| ... and [126 more](https://codecov.io/gh/aesara-devs/aesara/pull/855/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

brandonwillard(2022-03-13 23:59:27):> I wonder if we should just remove the `Diff` `Op` altogether.

Yes, it looks like it should be removed.
ricardoV94(2022-03-14 06:19:57):> > I wonder if we should just remove the `Diff` `Op` altogether.
> 
> Yes, it looks like it should be removed.

Only for reason I see is that the graph gets large if n is big, but I don't think that's commonly used
ricardoV94(2022-03-11 12:10:24):Fixing this would require changing the gradient logic or adding a bunch of `ifelse` in the gradient expression. Not sure if worth it
brandonwillard(2022-03-11 19:19:01):Let's make these `xfail`s instead, since they're a little more transparent about the meaning/intention of a test failure and easier to track.
codecov[bot](2022-03-17 05:59:37):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/863?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#863](https://codecov.io/gh/aesara-devs/aesara/pull/863?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (82d0537) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/605b609f2493779809b05586fab5160f02d17b4f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (605b609) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/863/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/863?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #863   +/-   ##
=======================================
  Coverage   78.49%   78.49%           
=======================================
  Files         154      154           
  Lines       47863    47865    +2     
  Branches    10881    10883    +2     
=======================================
+ Hits        37570    37572    +2     
  Misses       7749     7749           
  Partials     2544     2544           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/863?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/863/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `89.05% <ø> (-0.04%)` | :arrow_down: |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/863/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.03% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/863/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.07% <100.00%> (-0.01%)` | :arrow_down: |
| [aesara/link/numba/dispatch/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/863/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZXh0cmFfb3BzLnB5) | `98.18% <100.00%> (+0.03%)` | :arrow_up: |

codecov[bot](2022-03-17 04:26:08):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/864?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#864](https://codecov.io/gh/aesara-devs/aesara/pull/864?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f5e78a0) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/94f5ddfd1ecf6fc2159b9219dbe03a63b3af402e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (94f5ddf) will **decrease** coverage by `0.01%`.
> The diff coverage is `75.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/864/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/864?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #864      +/-   ##
==========================================
- Coverage   78.50%   78.49%   -0.02%     
==========================================
  Files         154      154              
  Lines       47857    47863       +6     
  Branches    10879    10881       +2     
==========================================
- Hits        37572    37570       -2     
- Misses       7743     7749       +6     
- Partials     2542     2544       +2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/864?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/864/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.32% <75.00%> (-1.22%)` | :arrow_down: |

codecov[bot](2022-03-18 06:53:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/867?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#867](https://codecov.io/gh/aesara-devs/aesara/pull/867?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9836962) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/9a1ab3e8132c470e187b149d309bb6938571f8b4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9a1ab3e) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/867/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/867?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #867   +/-   ##
=======================================
  Coverage   78.50%   78.51%           
=======================================
  Files         154      154           
  Lines       47886    47898   +12     
  Branches    10894    10897    +3     
=======================================
+ Hits        37594    37606   +12     
  Misses       7748     7748           
  Partials     2544     2544           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/867?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/867/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.27% <100.00%> (+0.23%)` | :arrow_up: |

codecov[bot](2022-03-19 01:36:26):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/868?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#868](https://codecov.io/gh/aesara-devs/aesara/pull/868?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e0384ae) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/1d3a162347be4a6223d2b8ed0455d6eeb6a5e688?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1d3a162) will **increase** coverage by `0.01%`.
> The diff coverage is `93.75%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/868/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/868?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #868      +/-   ##
==========================================
+ Coverage   78.51%   78.53%   +0.01%     
==========================================
  Files         154      154              
  Lines       47914    47941      +27     
  Branches    10897    10897              
==========================================
+ Hits        37622    37650      +28     
+ Misses       7748     7747       -1     
  Partials     2544     2544              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/868?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9iYXNpYy5weQ==) | `87.36% <ø> (ø)` | |
| [aesara/link/c/params\_type.py](https://codecov.io/gh/aesara-devs/aesara/pull/868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9wYXJhbXNfdHlwZS5weQ==) | `81.95% <ø> (ø)` | |
| [aesara/scan/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vdXRpbHMucHk=) | `84.40% <ø> (ø)` | |
| [aesara/tensor/nnet/abstract\_conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Fic3RyYWN0X2NvbnYucHk=) | `76.98% <ø> (ø)` | |
| [aesara/scalar/sharedvar.py](https://codecov.io/gh/aesara-devs/aesara/pull/868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9zaGFyZWR2YXIucHk=) | `35.29% <50.00%> (-3.60%)` | :arrow_down: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `87.43% <50.00%> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.05% <91.83%> (+0.07%)` | :arrow_up: |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.27% <100.00%> (ø)` | |
| [aesara/sandbox/multinomial.py](https://codecov.io/gh/aesara-devs/aesara/pull/868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvbXVsdGlub21pYWwucHk=) | `75.91% <100.00%> (ø)` | |
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `85.40% <100.00%> (+0.42%)` | :arrow_up: |
| ... and [6 more](https://codecov.io/gh/aesara-devs/aesara/pull/868/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

codecov[bot](2022-03-19 04:32:14):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/869?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#869](https://codecov.io/gh/aesara-devs/aesara/pull/869?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (02f4836) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/27423150d10d1697eaaf3d57454e8f6aace7207a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2742315) will **decrease** coverage by `0.02%`.
> The diff coverage is `58.06%`.

> :exclamation: Current head 02f4836 differs from pull request most recent head efca2a5. Consider uploading reports for the commit efca2a5 to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/869/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/869?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #869      +/-   ##
==========================================
- Coverage   78.53%   78.50%   -0.03%     
==========================================
  Files         154      154              
  Lines       47941    47942       +1     
  Branches    10897    10901       +4     
==========================================
- Hits        37650    37637      -13     
- Misses       7747     7761      +14     
  Partials     2544     2544              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/869?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvcmFuZG9tLnB5) | `91.52% <51.85%> (-7.16%)` | :arrow_down: |
| [aesara/link/numba/dispatch/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZXh0cmFfb3BzLnB5) | `98.20% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `84.97% <0.00%> (-0.43%)` | :arrow_down: |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `78.97% <0.00%> (-0.08%)` | :arrow_down: |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `87.63% <0.00%> (-0.03%)` | :arrow_down: |
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `80.25% <0.00%> (-0.03%)` | :arrow_down: |
| [aesara/scalar/sharedvar.py](https://codecov.io/gh/aesara-devs/aesara/pull/869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9zaGFyZWR2YXIucHk=) | `38.88% <0.00%> (+3.59%)` | :arrow_up: |

ricardoV94(2022-03-19 10:43:59):Doesn't the `broadcast_to` below handle these cases?
brandonwillard(2022-03-19 19:17:54):As I recall, this was added to match NumPy's behavior (exactly).
codecov[bot](2022-03-20 23:49:57):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/872?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#872](https://codecov.io/gh/aesara-devs/aesara/pull/872?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c37f414) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/9023e2b3d3e804c5672c0ae6c160f1d74798a373?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9023e2b) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/872/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/872?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #872      +/-   ##
==========================================
+ Coverage   78.54%   78.55%   +0.01%     
==========================================
  Files         154      154              
  Lines       47969    47968       -1     
  Branches    10901    10900       -1     
==========================================
+ Hits        37676    37683       +7     
+ Misses       7748     7740       -8     
  Partials     2545     2545              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/872?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/872/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `87.21% <ø> (ø)` | |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/872/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.48% <100.00%> (+1.05%)` | :arrow_up: |

codecov[bot](2022-03-22 17:30:59):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/873?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#873](https://codecov.io/gh/aesara-devs/aesara/pull/873?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3aed88b) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c89226303a951b817a39f5b5ee6fc14635d4233e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c892263) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/873/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/873?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #873   +/-   ##
=======================================
  Coverage   78.55%   78.55%           
=======================================
  Files         154      154           
  Lines       47968    47968           
  Branches    10900    10900           
=======================================
  Hits        37683    37683           
  Misses       7740     7740           
  Partials     2545     2545           
```



ricardoV94(2022-03-31 03:58:37):> The unit test isn't the most thorough but it should be sufficient for now.

What is missing in your opinion?
zaxtax(2022-03-31 04:55:46):Oh I just don't test all the keyword arguments. It's just the default call.

On Thu, 31 Mar 2022, 05:58 Ricardo Vieira, ***@***.***> wrote:

> The unit test isn't the most thorough but it should be sufficient for now.
>
> What is missing in your opinion?
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/aesara-devs/aesara/pull/880#issuecomment-1084047574>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAACCUIKNLXVHCOBJ7ECYP3VCUPHRANCNFSM5SDP2QTA>
> .
> You are receiving this because you authored the thread.Message ID:
> ***@***.***>
>

ricardoV94(2022-03-31 05:00:46):You can have the new test separately and sprinkle some variations with pytest.parametrize
codecov[bot](2022-03-31 05:03:42):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/880?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#880](https://codecov.io/gh/aesara-devs/aesara/pull/880?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (605c8b1) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ef256e526e313f9e7916f8c9b2c4802c44d0b44a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ef256e5) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/880/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/880?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #880   +/-   ##
=======================================
  Coverage   78.55%   78.55%           
=======================================
  Files         154      154           
  Lines       47962    47971    +9     
  Branches    10899    10899           
=======================================
+ Hits        37677    37686    +9     
  Misses       7740     7740           
  Partials     2545     2545           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/880?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/880/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.61% <100.00%> (+0.28%)` | :arrow_up: |

zaxtax(2022-03-31 07:39:37):Should I add more thorough tests before this is merged? Not too much stuff is doing that when testing Ops right now.
ricardoV94(2022-03-31 09:04:57):> Should I add more thorough tests before this is merged? Not too much stuff is doing that when testing Ops right now.

Doesn't hurt to make it just a bit more thorough, so I would say yes
ricardoV94(2022-03-31 09:27:29):@zaxtax can you merge the two commits? We are a bit more strict here in Aesara than in PyMC about PRs having a clean commit history.
codecov[bot](2022-04-05 18:42:08):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/882?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#882](https://codecov.io/gh/aesara-devs/aesara/pull/882?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (38a8d04) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e60cfb57d45663f36ee6010ad18829322d373a30?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e60cfb5) will **not change** coverage.
> The diff coverage is `94.11%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/882/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/882?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #882   +/-   ##
=======================================
  Coverage   78.55%   78.55%           
=======================================
  Files         154      154           
  Lines       47971    47971           
  Branches    10899    10899           
=======================================
  Hits        37686    37686           
  Misses       7740     7740           
  Partials     2545     2545           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/882?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/profiling.py](https://codecov.io/gh/aesara-devs/aesara/pull/882/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `73.39% <ø> (ø)` | |
| [aesara/configparser.py](https://codecov.io/gh/aesara-devs/aesara/pull/882/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ3BhcnNlci5weQ==) | `86.44% <ø> (ø)` | |
| [aesara/gradient.py](https://codecov.io/gh/aesara-devs/aesara/pull/882/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `77.46% <ø> (ø)` | |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/882/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `49.85% <ø> (ø)` | |
| [aesara/link/c/cvm.py](https://codecov.io/gh/aesara-devs/aesara/pull/882/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jdm0ucHk=) | `81.25% <ø> (ø)` | |
| [aesara/link/c/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/882/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9vcC5weQ==) | `61.41% <ø> (ø)` | |
| [aesara/misc/may\_share\_memory.py](https://codecov.io/gh/aesara-devs/aesara/pull/882/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL21pc2MvbWF5X3NoYXJlX21lbW9yeS5weQ==) | `71.42% <ø> (ø)` | |
| [aesara/tensor/nnet/abstract\_conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/882/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Fic3RyYWN0X2NvbnYucHk=) | `76.98% <ø> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/882/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.05% <66.66%> (ø)` | |
| [aesara/tensor/nnet/batchnorm.py](https://codecov.io/gh/aesara-devs/aesara/pull/882/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2JhdGNobm9ybS5weQ==) | `77.04% <75.00%> (ø)` | |
| ... and [7 more](https://codecov.io/gh/aesara-devs/aesara/pull/882/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

danhphan(2022-04-05 09:17:47):Hi, maybe we also need to pin `click` to `8.0.4` in `black`
```
  - repo: https://github.com/psf/black
    rev: 22.3.0
    hooks:
      - id: black
        additional_dependencies: ["click==8.0.4"]
        language_version: python3
```
brandonwillard(2022-04-05 16:31:36):It looks like we need to account for some formatting changes that come with the version update.
danhphan(2022-04-05 08:54:20):The `black` package seems incompatible with `click` package in **pre-commit**: https://github.com/psf/black/issues/2964
I tried both `black` versions (22.3.0 and 22.1.0) along with `click` 8.0.4 but it is ~~still not work~~.
danhphan(2022-04-05 09:14:17):UPDATED:
Hard fixed `click` == 8.0.4 in the `.pre-commit-config.yaml` for `black` will work.
```
  - repo: https://github.com/psf/black
    rev: 22.3.0
    hooks:
      - id: black
        additional_dependencies: ["click==8.0.4"]
```
brandonwillard(2022-04-05 22:29:21):If you rebase onto `main`, the current issue should be resolved.
danhphan(2022-04-06 03:43:22):I made some mistakes in `rebase` and `merging` into `origin` branch, which lead to a quite messy commit log.

Let's me close this one and open a new PR. Thanks
codecov[bot](2022-04-06 04:03:30):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/883?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#883](https://codecov.io/gh/aesara-devs/aesara/pull/883?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4361451) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c803c67e4e334125eb8918a67a89c006f567a069?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c803c67) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 4361451 differs from pull request most recent head 3fc6c01. Consider uploading reports for the commit 3fc6c01 to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/883/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/883?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #883   +/-   ##
=======================================
  Coverage   78.55%   78.56%           
=======================================
  Files         154      154           
  Lines       47971    47976    +5     
  Branches    10899    10899           
=======================================
+ Hits        37686    37691    +5     
  Misses       7740     7740           
  Partials     2545     2545           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/883?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/883/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.77% <100.00%> (+0.15%)` | :arrow_up: |

brandonwillard(2022-04-06 19:58:46):> I made some mistakes in `rebase` and `merging` into `origin` branch, which lead to a quite messy commit log.
> 
> Let's me close this one and open a new PR. Thanks

That shouldn't be necessary.  The substantial changes are easy enough to distinguish, so it just needs another corrective rebase.
danhphan(2022-04-07 11:45:27):Thank you, I will then close the other PR  :)
codecov[bot](2022-04-08 10:42:29):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/884?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#884](https://codecov.io/gh/aesara-devs/aesara/pull/884?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (55acfa2) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/14c394d0c62d7435395acea1e7fed55105c16984?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (14c394d) will **increase** coverage by `0.05%`.
> The diff coverage is `95.41%`.

> :exclamation: Current head 55acfa2 differs from pull request most recent head cc33443. Consider uploading reports for the commit cc33443 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/884/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/884?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main     #884      +/-   ##
==========================================
+ Coverage   74.10%   74.15%   +0.05%     
==========================================
  Files         174      174              
  Lines       48673    48707      +34     
  Branches    10373    10372       -1     
==========================================
+ Hits        36067    36120      +53     
+ Misses      10315    10301      -14     
+ Partials     2291     2286       -5     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/884?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NjYWxhci5weQ==) | `97.40% <ø> (ø)` | |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.16% <75.00%> (+0.16%)` | :arrow_up: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.07% <90.54%> (-0.52%)` | :arrow_down: |
| [aesara/tensor/rewriting/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvZWxlbXdpc2UucHk=) | `86.40% <94.44%> (+0.65%)` | :arrow_up: |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.02% <95.16%> (+0.10%)` | :arrow_up: |
| [aesara/compile/function/pfunc.py](https://codecov.io/gh/aesara-devs/aesara/pull/884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `84.18% <100.00%> (+1.77%)` | :arrow_up: |
| [aesara/compile/mode.py](https://codecov.io/gh/aesara-devs/aesara/pull/884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvbW9kZS5weQ==) | `84.47% <100.00%> (+1.22%)` | :arrow_up: |
| [aesara/compile/sharedvalue.py](https://codecov.io/gh/aesara-devs/aesara/pull/884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvc2hhcmVkdmFsdWUucHk=) | `93.75% <100.00%> (+13.26%)` | :arrow_up: |
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `85.29% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/scan/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYW4vYmFzaWMucHk=) | `84.59% <100.00%> (ø)` | |
| ... and [7 more](https://codecov.io/gh/aesara-devs/aesara/pull/884/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
codecov[bot](2022-04-06 05:08:37):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/888?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#888](https://codecov.io/gh/aesara-devs/aesara/pull/888?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e23a3ef) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c803c67e4e334125eb8918a67a89c006f567a069?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c803c67) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/888/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/888?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #888   +/-   ##
=======================================
  Coverage   78.55%   78.56%           
=======================================
  Files         154      154           
  Lines       47971    47976    +5     
  Branches    10899    10899           
=======================================
+ Hits        37686    37691    +5     
  Misses       7740     7740           
  Partials     2545     2545           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/888?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/888/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.77% <100.00%> (+0.15%)` | :arrow_up: |

codecov[bot](2022-04-06 07:02:16):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/889?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#889](https://codecov.io/gh/aesara-devs/aesara/pull/889?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b82dd9b) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5a0fb0e731358d54648823170acd911cc1534d6a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5a0fb0e) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/889/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/889?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #889   +/-   ##
=======================================
  Coverage   78.88%   78.88%           
=======================================
  Files         152      152           
  Lines       47660    47662    +2     
  Branches    10844    10845    +1     
=======================================
+ Hits        37598    37600    +2     
  Misses       7558     7558           
  Partials     2504     2504           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/889?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/889/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `87.72% <100.00%> (+0.01%)` | :arrow_up: |

danhphan(2022-04-06 07:08:11):Hi @ricardoV94 , just check `at.empty`. Should we open a new issue for this?

This two cases will fail:
```
at.empty(5).eval()
at.empty(at.constant(5)).eval()
```
This two cases will work:
```
at.empty([5]).eval()
at.empty(at.constant([5])).eval()
```

ricardoV94(2022-04-06 07:31:34):> Hi @ricardoV94 , just check `at.empty`. Should we open a new issue for this?
> 
> This two cases will fail:
> 
> ```
> at.empty(5).eval()
> at.empty(at.constant(5)).eval()
> ```
> 
> This two cases will work:
> 
> ```
> at.empty([5]).eval()
> at.empty(at.constant([5])).eval()
> ```

We can just fix it in this PR
danhphan(2022-04-06 08:51:27):I have just fixed the `at.empty` cases, and simplify a little bit with `shape.ndim`
ricardoV94(2022-04-10 08:46:58):It seems like the rebase reintroduced some things that were changed in main, referring to GPU comments/ logic

Could you undo those changes, and also squash all your PR commits into a single one?
danhphan(2022-04-10 10:58:34):Can you give more details how to do this? Thanks
ricardoV94(2022-04-10 11:37:38):In this case where the changes are very small, the easiest is probably to do something like:

1. checkout on a new branch to not lose the changes (e.g., `checkout -b branch_backup`)
1. go back to this branch
1. drop all new commits
1. rebase from main again
1. create a new single commit with the final changes
1. force push

For the changes rewrite you can just copy paste from your backup branch / github or rewrite them again.

This is not the best workflow in general, but would suffice here. 

For a better understanding/workflow I suggest reading chapters 2, 3, and 7 of this e-book: https://git-scm.com/book/en/v2

And this tutorial: https://simplabs.com/blog/2021/05/26/keeping-a-clean-git-history/
danhphan(2022-04-11 07:35:51):Hi @ricardoV94, thanks for sharing :D 

Especially the tutorial on https://simplabs.com/blog/2021/05/26/keeping-a-clean-git-history/ and how to use `Fork` for `rebase` are great. 

Although I am using Vs Code, I found a similar tool called `GitLens` extention, and this works in similar way with `interactive rebase`.

That simplify my workflow to deal git commits now :)

Cheers!
ricardoV94(2022-04-11 07:41:03):I'm glad those resources helped!
ricardoV94(2022-04-06 06:04:35):Using `eval()` is a very costly and unsafe operation (e.g., may require inputs to be given)

Something like this might work instead:

```suggestion
        isinstance(shape, TensorVariable) and shape.ndim == 0
```

ricardoV94(2022-04-06 07:30:03):I realize now this can be further simplified:

```suggestion
    if (not isinstance(shape, (np.ndarray, Sequence))) or (
        isinstance(shape, TensorVariable) and shape.ndim == 0
    ):
```
ricardoV94(2022-04-06 07:30:21):This is still using the `shape.eval()`
danhphan(2022-04-06 08:23:25):No, remove `TensorVariable`  will lead to fail a test (I checked it before already):

`FAILED tests/tensor/test_basic.py::TestAlloc::test_zeros - ValueError: Tensor of type TensorType(float64, (None,)) could not be cast to have 0 dimensions`
danhphan(2022-04-06 08:24:24):Yeah, will update this one and push again :D
ricardoV94(2022-04-06 08:48:19):Ah so we want to test on the negative... 

```python
if not (
  isinstance(shape, (np.ndarray, Sequence)) 
  or (isinstance(shape, TensorVariable) and shape.ndim > 0)
):
```
danhphan(2022-04-06 09:22:15):No, this will also fail. 
danhphan(2022-04-06 09:24:07):This one will work, so "in `tests` we trust" then :)
```
    if (not isinstance(shape, (np.ndarray, Sequence, TensorVariable))) or (
        isinstance(shape, TensorVariable) and shape.ndim == 0
    ):
```
ricardoV94(2022-04-06 10:20:01):It's not super important, but there is a combination with one less isinstance check that must work, because there are no other possibilities besides `(not TensorVariable, TensorVariable.ndim == 0, TensorVariable.ndim > 0)`
danhphan(2022-04-06 11:40:20):If `not TensorVariable` do: `shape = [shape]`
**OR**
If `is TensorVarialbe and ndim == 0` do: `shape == [shape]`

Can be converted to: 

If **not** `( is TensorVariable and ndim > 0)` do: `shape == [shape]`

The latter is shorter, but more difficult to understand :D





danhphan(2022-04-07 11:50:17):Hi @ricardoV94, if you still prefer this option, I will change it to:

```
    if (not isinstance(shape, (np.ndarray, Sequence))) or (
        not (isinstance(shape, TensorVariable) and shape.ndim > 0)
    ):
```
ricardoV94(2022-04-07 12:19:08):Hi @danhphan 

I tried this one I mentioned before locally and the tests seem to pass. What tests were failing?

> ```python
> if not (
>   isinstance(shape, (np.ndarray, Sequence)) 
>   or (isinstance(shape, TensorVariable) and shape.ndim > 0)
> ):
> ```
danhphan(2022-04-08 00:23:12):Uhm, this will also pass locally at my end. 

I think the previous one, I put the `not` in wrong place like this:
```
if (
  not isinstance(shape, (np.ndarray, Sequence)) 
  or (isinstance(shape, TensorVariable) and shape.ndim > 0)
):
```
Which leads to:
`FAILED tests/tensor/test_basic.py::TestAlloc::test_zeros - ValueError: Tensor of type TensorType(float64, (None,)) could not be cast to have 0 dimensions`

So, I will then change it to:
```
 if not (
  isinstance(shape, (np.ndarray, Sequence)) 
  or (isinstance(shape, TensorVariable) and shape.ndim > 0)
):
```
codecov[bot](2022-04-07 14:12:10):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/891?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#891](https://codecov.io/gh/aesara-devs/aesara/pull/891?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (67a2ed3) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/16fce52860202a194907433aba64e7fc8f83af97?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (16fce52) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/891/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/891?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #891   +/-   ##
=======================================
  Coverage   78.86%   78.86%           
=======================================
  Files         152      152           
  Lines       47644    47647    +3     
  Branches    10841    10843    +2     
=======================================
+ Hits        37574    37577    +3     
  Misses       7565     7565           
  Partials     2505     2505           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/891?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/891/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `74.86% <100.00%> (+0.21%)` | :arrow_up: |

codecov[bot](2022-04-07 20:32:09):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/892?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#892](https://codecov.io/gh/aesara-devs/aesara/pull/892?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e76475e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/f7a506ff3a599a8101502b7ff4d7b0c642366a22?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f7a506f) will **increase** coverage by `0.00%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/892/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/892?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #892   +/-   ##
=======================================
  Coverage   78.86%   78.86%           
=======================================
  Files         152      152           
  Lines       47639    47644    +5     
  Branches    10841    10841           
=======================================
+ Hits        37569    37574    +5     
  Misses       7565     7565           
  Partials     2505     2505           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/892?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/892/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `83.90% <ø> (ø)` | |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/892/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.77% <0.00%> (+0.15%)` | :arrow_up: |

codecov[bot](2022-04-09 14:47:06):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/894?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#894](https://codecov.io/gh/aesara-devs/aesara/pull/894?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b01a6e0) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0132581506cae546a86e63a8fb5fad3608da2d16?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0132581) will **increase** coverage by `0.00%`.
> The diff coverage is `95.54%`.

> :exclamation: Current head b01a6e0 differs from pull request most recent head 2e2a497. Consider uploading reports for the commit 2e2a497 to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/894/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/894?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #894   +/-   ##
=======================================
  Coverage   78.86%   78.87%           
=======================================
  Files         152      152           
  Lines       47647    47672   +25     
  Branches    10843    10847    +4     
=======================================
+ Hits        37577    37599   +22     
- Misses       7565     7567    +2     
- Partials     2505     2506    +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/894?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/894/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vdXRpbHMucHk=) | `85.02% <88.37%> (-0.41%)` | :arrow_down: |
| [aesara/scan/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/894/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `78.23% <88.46%> (+0.24%)` | :arrow_up: |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/894/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `83.96% <97.63%> (+0.05%)` | :arrow_up: |
| [aesara/compile/compilelock.py](https://codecov.io/gh/aesara-devs/aesara/pull/894/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvY29tcGlsZWxvY2sucHk=) | `97.14% <100.00%> (ø)` | |
| [aesara/graph/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/894/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `93.75% <100.00%> (+0.30%)` | :arrow_up: |
| [aesara/scan/scan\_perform\_ext.py](https://codecov.io/gh/aesara-devs/aesara/pull/894/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vc2Nhbl9wZXJmb3JtX2V4dC5weQ==) | `81.25% <100.00%> (+0.92%)` | :arrow_up: |
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/894/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `92.42% <100.00%> (ø)` | |

codecov[bot](2022-04-10 02:44:24):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/896?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#896](https://codecov.io/gh/aesara-devs/aesara/pull/896?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d64b5f4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/9a65fcd74c1f6a27f87d38dd5d2f7cedf28d86c9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9a65fcd) will **decrease** coverage by `0.00%`.
> The diff coverage is `89.53%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/896/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/896?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #896      +/-   ##
==========================================
- Coverage   78.92%   78.92%   -0.01%     
==========================================
  Files         152      152              
  Lines       47690    47716      +26     
  Branches    10849    10859      +10     
==========================================
+ Hits        37640    37659      +19     
- Misses       7547     7551       +4     
- Partials     2503     2506       +3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/896?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/fg.py](https://codecov.io/gh/aesara-devs/aesara/pull/896/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `86.45% <0.00%> (ø)` | |
| [aesara/compile/function/pfunc.py](https://codecov.io/gh/aesara-devs/aesara/pull/896/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `81.42% <60.00%> (-2.82%)` | :arrow_down: |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/896/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `88.54% <91.66%> (+0.18%)` | :arrow_up: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/896/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `80.05% <100.00%> (ø)` | |
| [aesara/sandbox/rng\_mrg.py](https://codecov.io/gh/aesara-devs/aesara/pull/896/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvcm5nX21yZy5weQ==) | `84.14% <100.00%> (ø)` | |
| [aesara/tensor/random/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/896/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdXRpbHMucHk=) | `100.00% <100.00%> (ø)` | |

brandonwillard(2022-04-17 02:06:54):This PR has been superseded by #910.
ricardoV94(2022-04-10 07:39:27):Seems like `update` preceded `default_update`, and was also used as an easy means of passing the updates of RandomVariables when compiling a function, before `default_update` became a thing

https://groups.google.com/g/theano-dev/c/1PvvQY8tUHk/m/rDxjUZ9rfHcJ


ricardoV94(2022-04-10 16:25:40):Internally I think it is only used by Scan yes. But I could have missed some use elsewhere
brandonwillard(2022-04-10 21:37:51):The `.update` that `scan` uses appears to be `SymbolicInput.update`, so all traces of the old `Variable.update` might already be gone.
brandonwillard(2022-04-10 21:38:59):That reminds me: I'm starting to think that, if we're going to use an attribute like `default_update`, we should create a subclass of `Variable` that defines it.
ricardoV94(2022-04-10 21:43:34):That sounds reasonable. Would the attribute of such variables be mandatory then?
brandonwillard(2022-04-10 23:09:39):Ideally, but we'll need to go over the ways in which `Variable`s are copied/cloned to see if that's sound.

It's also worth considering some other in-graph approaches to update-tracking.
codecov[bot](2022-04-13 09:27:49):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/899?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#899](https://codecov.io/gh/aesara-devs/aesara/pull/899?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (401ce28) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/6ef1452a83681e2ccd582ba12aaa7be778e1ff15?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (6ef1452) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/899/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/899?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #899      +/-   ##
==========================================
+ Coverage   78.88%   78.90%   +0.01%     
==========================================
  Files         152      152              
  Lines       47662    47665       +3     
  Branches    10845    10846       +1     
==========================================
+ Hits        37600    37611      +11     
+ Misses       7558     7549       -9     
- Partials     2504     2505       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/899?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/raise\_op.py](https://codecov.io/gh/aesara-devs/aesara/pull/899/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3JhaXNlX29wLnB5) | `98.70% <100.00%> (+0.05%)` | :arrow_up: |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/899/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `64.97% <0.00%> (+0.54%)` | :arrow_up: |

ricardoV94(2022-04-14 09:11:25):Added a test with SparseVariables
ricardoV94(2022-04-13 06:49:19): > - Currently, I did not remove the class `DiffOp` because the [Jax](https://github.com/aesara-devs/aesara/blob/main/aesara/link/jax/dispatch.py#L942) and [Numba](https://github.com/aesara-devs/aesara/blob/main/aesara/link/numba/dispatch/extra_ops.py#L71) seem to use it. Should I delete `DiffOp` altogether or just modify `at.diff` as in the current (first) commit?

Remove altogether. We don't need a dispatch for at.diff. We have dispatch for the slicing and subtraction so the new graph will also work fine with those backends. That's yet another reason why we prefer to keep the number of Ops small, less dispatch code to maintain.

> - Should the loop be replaced by a implementation that builds on `aesara.scan`?

I don't think so. Aesara scan will introduce some overhead and I don't think there's a big need for large or symbolic `n` (e.g., nobody asked for it before)
ricardoV94(2022-04-18 14:09:54):The failing test was introduced in https://github.com/aesara-devs/aesara/pull/855, because there used to be an actual error in the output type of the `Diff` `Op`, and not just a less precise output type as happens now with the reliance on subtensor `Op`.

I think it is fine to remove that test (or xfail it), and open a separate issue to make the output type of `Subtensor` more precise when possible, as @brandonwillard suggested.
ricardoV94(2022-04-18 14:11:28):To understand the conversation about the output type, it's useful to read the documentation here: https://aesara.readthedocs.io/en/latest/extending/type.html
larryshamalama(2022-04-21 20:04:39):Hi all, revisiting this PR after some hiatus. I just opened an issue to address what @brandonwillard explained above (see issue #922). Thank you for the clear instructions.

As for this PR, I currently removed the class `DiffOp` altogether and corresponding dispatch classes and tests that build on it. I temporarily marked `test_output_type` as `xfail` as @ricardoV94 suggested, but perhaps the `Subtensor` static shape inference problem can be addressed first. A minor thing is that I renamed `TestDiffOp` to `TestDiff` since the `Op` was removed.
codecov[bot](2022-04-21 20:27:53):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/901?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#901](https://codecov.io/gh/aesara-devs/aesara/pull/901?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (55f2d09) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e5ebf260f159793362387b8371d44ecb491ce9cc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e5ebf26) will **decrease** coverage by `0.03%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/901/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/901?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #901      +/-   ##
==========================================
- Coverage   78.94%   78.91%   -0.04%     
==========================================
  Files         152      152              
  Lines       47712    47654      -58     
  Branches    10858    10851       -7     
==========================================
- Hits        37667    37606      -61     
- Misses       7546     7548       +2     
- Partials     2499     2500       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/901?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/901/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `80.86% <ø> (-0.23%)` | :arrow_down: |
| [aesara/link/numba/dispatch/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/901/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZXh0cmFfb3BzLnB5) | `98.00% <ø> (-0.20%)` | :arrow_down: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/901/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `88.88% <100.00%> (-0.47%)` | :arrow_down: |
| [aesara/gradient.py](https://codecov.io/gh/aesara-devs/aesara/pull/901/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `77.20% <0.00%> (-0.27%)` | :arrow_down: |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/901/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.06% <0.00%> (-0.25%)` | :arrow_down: |

brandonwillard(2022-04-22 21:36:17):I forgot to remove those "fix pre-commit" before merging; regardless, such commits shouldn't exist.  If `pre-commit` is correctly set up in a project, it shouldn't be possible to commit when there are `pre-commit` errors.

@larryshamalama, make sure `pre-commit` is correctly installed in your development environment, and, if you need to fix `pre-commit` errors in existing commits, amend/rebase onto _the commit that introduce the error_ and include the fixes there.

In general, we would like it to be possible for all tests (`pre-commit` and otherwise) to pass on _every_ commit.  When that's not the case, it's difficult to revert changes and/or determine which commit introduces a specific error. 
larryshamalama(2022-04-23 00:03:30):Thanks for the suggestion. I do have the habit to stack my commits without much thought... Whenever I fix pre-commit errors, it's because I forgot to check before pushing.

I'm looking at the repository commit history and I see many of my "fix pre-commit" commits. Generally, is it good practice to separate progress into multiple commits? I just learned about rebasing commits into one so I'll be sure to remember to do this for next time.

Also, for this PR, I initially left it as a draft because I was not sure if I needed to look into issue #922 first.
brandonwillard(2022-04-23 00:17:09):> I'm looking at the repository commit history and I see many of my "fix pre-commit" commits. Generally, is it good practice to separate progress into multiple commits? I just learned about rebasing commits into one so I'll be sure to remember to do this for next time.

Take a look at [this page](https://wiki.openstack.org/wiki/GitCommitMessages#Structural_split_of_changes) for some descriptions and examples of good commit structuring.

> Also, for this PR, I initially left it as a draft because I was not sure if I needed to look into issue #922 first.

That's a more important issue, but we don't need it to hold up this PR.
brandonwillard(2022-04-22 18:30:55):FYI: It should be possible to set `xfail` on only the parameterized test cases that fail (e.g. use something like `pytest.param(..., mark=pytest.mark.xfail(reason=...))`).
larryshamalama(2022-04-22 23:37:24):Thanks for this suggestion, I didn't know that we can selectively mark tests as `xfail`
codecov[bot](2022-04-13 22:58:15):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/902?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#902](https://codecov.io/gh/aesara-devs/aesara/pull/902?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f07a719) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/6ef1452a83681e2ccd582ba12aaa7be778e1ff15?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (6ef1452) will **increase** coverage by `0.00%`.
> The diff coverage is `91.66%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/902/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/902?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #902   +/-   ##
=======================================
  Coverage   78.88%   78.89%           
=======================================
  Files         152      152           
  Lines       47662    47683   +21     
  Branches    10845    10849    +4     
=======================================
+ Hits        37600    37621   +21     
  Misses       7558     7558           
  Partials     2504     2504           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/902?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/902/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `76.25% <91.66%> (+1.39%)` | :arrow_up: |

brandonwillard(2022-04-14 13:24:43):> More generally, is there a strong reason why shared variables can't be passed as explicit inputs to OpFromGraph and function?

Shared variables are like (mutable) constants.
codecov[bot](2022-04-14 00:51:31):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/903?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#903](https://codecov.io/gh/aesara-devs/aesara/pull/903?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (51f8a73) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/6ef1452a83681e2ccd582ba12aaa7be778e1ff15?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (6ef1452) will **increase** coverage by `0.00%`.
> The diff coverage is `90.90%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/903/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/903?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #903   +/-   ##
=======================================
  Coverage   78.88%   78.89%           
=======================================
  Files         152      152           
  Lines       47662    47660    -2     
  Branches    10845    10842    -3     
=======================================
+ Hits        37600    37602    +2     
+ Misses       7558     7556    -2     
+ Partials     2504     2502    -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/903?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/903/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `78.56% <90.90%> (+0.32%)` | :arrow_up: |

codecov[bot](2022-04-14 19:57:06):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/905?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#905](https://codecov.io/gh/aesara-devs/aesara/pull/905?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5975b9f) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/bc10e2b9c5cb24e833448252ee22248e785a6783?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (bc10e2b) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/905/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/905?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #905      +/-   ##
==========================================
- Coverage   78.92%   78.92%   -0.01%     
==========================================
  Files         152      152              
  Lines       47684    47681       -3     
  Branches    10847    10846       -1     
==========================================
- Hits        37634    37631       -3     
  Misses       7547     7547              
  Partials     2503     2503              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/905?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/905/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `76.06% <100.00%> (-0.19%)` | :arrow_down: |

codecov[bot](2022-04-15 01:15:08):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/906?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#906](https://codecov.io/gh/aesara-devs/aesara/pull/906?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (bd70e26) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e464e50a2f3a664ef1303c91070e7598de008313?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e464e50) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/906/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/906?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #906   +/-   ##
=======================================
  Coverage   78.92%   78.92%           
=======================================
  Files         152      152           
  Lines       47681    47685    +4     
  Branches    10846    10848    +2     
=======================================
+ Hits        37631    37635    +4     
  Misses       7547     7547           
  Partials     2503     2503           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/906?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/906/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `76.31% <100.00%> (+0.25%)` | :arrow_up: |

codecov[bot](2022-04-15 06:28:33):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/907?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#907](https://codecov.io/gh/aesara-devs/aesara/pull/907?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (874af18) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e7d77b00d2e080fadf93b4bd612971f3d0e54cdf?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e7d77b0) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/907/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/907?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #907   +/-   ##
=======================================
  Coverage   78.92%   78.92%           
=======================================
  Files         152      152           
  Lines       47685    47690    +5     
  Branches    10848    10849    +1     
=======================================
+ Hits        37635    37640    +5     
  Misses       7547     7547           
  Partials     2503     2503           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/907?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/907/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `76.62% <100.00%> (+0.30%)` | :arrow_up: |

codecov[bot](2022-04-16 01:14:44):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/908?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#908](https://codecov.io/gh/aesara-devs/aesara/pull/908?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (231eb90) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/9a65fcd74c1f6a27f87d38dd5d2f7cedf28d86c9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9a65fcd) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/908/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/908?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #908   +/-   ##
=======================================
  Coverage   78.92%   78.92%           
=======================================
  Files         152      152           
  Lines       47690    47696    +6     
  Branches    10849    10852    +3     
=======================================
+ Hits        37640    37646    +6     
  Misses       7547     7547           
  Partials     2503     2503           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/908?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/908/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.91% <100.00%> (+0.01%)` | :arrow_up: |

codecov[bot](2022-04-17 03:15:20):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/910?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#910](https://codecov.io/gh/aesara-devs/aesara/pull/910?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1277c2a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/181d556625c11abbb8de66bfbea6daf6db2ff8b1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (181d556) will **increase** coverage by `0.00%`.
> The diff coverage is `78.67%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/910/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/910?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #910   +/-   ##
=======================================
  Coverage   78.93%   78.94%           
=======================================
  Files         152      152           
  Lines       47694    47706   +12     
  Branches    10856    10858    +2     
=======================================
+ Hits        37647    37661   +14     
+ Misses       7547     7546    -1     
+ Partials     2500     2499    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/910?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/910/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vYmFzaWMucHk=) | `85.09% <75.83%> (-3.14%)` | :arrow_down: |
| [aesara/compile/sharedvalue.py](https://codecov.io/gh/aesara-devs/aesara/pull/910/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvc2hhcmVkdmFsdWUucHk=) | `80.24% <100.00%> (+2.78%)` | :arrow_up: |
| [aesara/scan/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/910/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vdXRpbHMucHk=) | `87.45% <100.00%> (+2.43%)` | :arrow_up: |
| [aesara/tensor/random/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/910/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdmFyLnB5) | `100.00% <100.00%> (ø)` | |

ricardoV94(2022-04-17 06:13:47):Could this affect the updates of rng in nested scans?
brandonwillard(2022-04-17 17:24:19):> Could this affect the updates of rng in nested scans?

That's something I was looking into before merging (c.f. [this comment](https://github.com/aesara-devs/aesara/pull/910/files#diff-250bdc0f984467575d262eb5b21fb539239e23c3886283911a31691b14b2e4abR1011-R1013)).
brandonwillard(2022-04-18 07:35:16):OK, these more recent changes should address the issue in #579 and at least one other usability issue that has probably been mentioned in another issue (we should check and update any corresponding issue(s)).
brandonwillard(2022-04-18 22:26:59):> LGTM, despite not having a good grasp of Scans internals.
> 
> Somewhat related, I am a bit surprised that there seems to be only one indirect test of a nested scan (it's just an "example"), and none involving updates in `scan/test_basic.py`. I might have missed others

Yeah, exactly; we need a lot better and more direct coverage of `Scan`/`scan`.  #848 should help get that started.
ricardoV94(2022-04-18 11:32:33):Wow, this is really clever!!! Do we only need to know if it was called here, or do we need to keep some nested level counter as well?

Asking because the Theano guys were thinking along those lines: https://github.com/Theano/Theano/issues/1565, but perhaps they were overcomplicating
ricardoV94(2022-04-18 11:37:38):Can you add a comment explaining why the test is setting up these circular updates?
ricardoV94(2022-04-18 11:41:32):Perhaps return the `y` as well? It should behave like `z` I assume
brandonwillard(2022-04-18 17:55:09):> Wow, this is really clever!!! Do we only need to know if it was called here, or do we need to keep some nested level counter as well?

It was the most expedient solution.  In general, I really dislike using these global variable approaches.  

We shouldn't need any sort of nested counter; each time the context manager is used a new `list` is created to gather the constructed `SharedVariable`s exclusive to that "scope", and, since no "outer-scopes" should be "accessing" variables in their "inner-scopes" (i.e. performing their updates), it works out.

> Asking because the Theano guys were thinking along those lines: [Theano/Theano#1565](https://github.com/Theano/Theano/issues/1565), but perhaps they were overcomplicating

Yeah, that looks **wildly** over-complicated for this task, but the underlying notion is correct (and fairly obvious): `SharedVariable`s are inherently "global" in scope, which doesn't work with nested scopes.
brandonwillard(2022-04-18 17:57:25):I simply didn't want to create another shared RNG object just to test nested `.default_update` behavior; otherwise, the only place where that effectively matters is during the computation/evaluation, which doesn't affect the things being confirmed by this test.
brandonwillard(2022-04-18 17:58:56):There's no need to do that; it won't change the way `y` interacts with the functionality being tested.  The only reason that `z` is returned is to confirm that its values across iterations are all the same.
ricardoV94(2022-04-18 19:29:30):Right, but the same repeated values should (and seem to be) observed with `y`, no? 

Otherwise, is there any reason for including it in the test at all?
brandonwillard(2022-04-18 19:56:48):> Right, but the same repeated values should (and seem to be) observed with `y`, no?
> 
> Otherwise, is there any reason for including it in the test at all?

Unlike `z`, `y`'s update is directly attached to itself and not to the shared variable of an input, so it serves as the simplest inner-graph shared-variable-with-an-outer-scoped-update case.

Aside from that, it doesn't differ from `z_rng` in terms of how it's treated (wrt. the relevant updates-based functionality) during compilation and evaluation, so we don't need to check the computed output as well; we only need to check that the `default_update` is still present, as we do.

For that matter, we could simply end the test after the `hasattr` checks, but the full `function` compilation at least confirms that the original error is gone.
codecov[bot](2022-04-17 19:24:44):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/911?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#911](https://codecov.io/gh/aesara-devs/aesara/pull/911?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (eafee83) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c67741c0ac3debeead7068a6457a4633bbe975af?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c67741c) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/911/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/911?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #911   +/-   ##
=======================================
  Coverage   78.92%   78.92%           
=======================================
  Files         152      152           
  Lines       47696    47696           
  Branches    10852    10852           
=======================================
  Hits        37646    37646           
  Misses       7547     7547           
  Partials     2503     2503           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/911?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/scan\_perform\_ext.py](https://codecov.io/gh/aesara-devs/aesara/pull/911/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vc2Nhbl9wZXJmb3JtX2V4dC5weQ==) | `81.25% <100.00%> (ø)` | |

codecov[bot](2022-04-19 10:41:50):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/914?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#914](https://codecov.io/gh/aesara-devs/aesara/pull/914?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a5fe874) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/00e0d806c173bcd3b67c6e01081f16bbaf319337?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (00e0d80) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/914/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/914?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #914   +/-   ##
=======================================
  Coverage   78.94%   78.94%           
=======================================
  Files         152      152           
  Lines       47706    47712    +6     
  Branches    10858    10858           
=======================================
+ Hits        37661    37667    +6     
  Misses       7546     7546           
  Partials     2499     2499           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/914?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/914/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.44% <100.00%> (+0.04%)` | :arrow_up: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/914/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `89.35% <100.00%> (+0.04%)` | :arrow_up: |

ricardoV94(2022-04-19 18:45:24):Made the comment a bit more clear
brandonwillard(2022-04-19 17:02:57):Why not add a condition for `inp_dims == 0`?  This approach of using `ndims=1` when the number of dimensions is actually zero is a bit cryptic and holds the potential for real confusion if `normalize_axis_tuple` changes down the line.
ricardoV94(2022-04-19 17:48:45):I did not want to duplicate the `normalize_axis_tuple` logic manually just for that case. Basically, these `Op`s treat scalar inputs as if they are 1D, so the `max(1, dims)` does not seem particularly bad. The ugly part is the `try/except` just to raise the correct `AxisError`. We can also add a test for `normalize_axis_tuple` to make sure the behavior hasn't changed, but I doubt they will make it do anything else for `ndim=0`.

What do you think?
ricardoV94(2022-04-19 17:50:16):```suggestion
        # scalar inputs are treated as 1D regarding axis in this `Op`
```
ricardoV94(2022-04-19 17:52:10):```suggestion
    # scalar inputs are treated as 1D regarding axis in this `Op`
```
brandonwillard(2022-04-19 17:53:10):> Basically, these `Op`s treat scalar inputs as if they are 1D, so the `max(1, dims)` does not seem particularly bad.

Good point.

brandonwillard(2022-04-19 16:51:56):> Ideally we wouldn't need this `Op` at all but I fear there are some deeply-ingrained dependencies on this...

Sounds like this is the core of our work: finding these dependencies and addressing them directly. 
ricardoV94(2022-05-09 12:51:54):The last places that seem to make explicit use of "unbroadcasting" are these:

https://github.com/aesara-devs/aesara/blob/6cca25e3a3b6d63888058029ba6bcfb1f32e1621/aesara/tensor/basic_opt.py#L156-L165

https://github.com/aesara-devs/aesara/blob/6cca25e3a3b6d63888058029ba6bcfb1f32e1621/aesara/scan/basic.py#L750-L758

https://github.com/aesara-devs/aesara/blob/6cca25e3a3b6d63888058029ba6bcfb1f32e1621/aesara/scan/basic.py#L878-L885

https://github.com/aesara-devs/aesara/blob/6cca25e3a3b6d63888058029ba6bcfb1f32e1621/aesara/scan/basic.py#L1012-L1017
codecov[bot](2022-05-10 17:12:11):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/915?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#915](https://codecov.io/gh/aesara-devs/aesara/pull/915?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4cfaaa5) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ccfe2d3dbb9f8fcb8fc3631beb0cfdedf30be62c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ccfe2d3) will **decrease** coverage by `0.02%`.
> The diff coverage is `91.44%`.

> :exclamation: Current head 4cfaaa5 differs from pull request most recent head 8a6a871. Consider uploading reports for the commit 8a6a871 to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/915/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/915?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #915      +/-   ##
==========================================
- Coverage   79.27%   79.24%   -0.03%     
==========================================
  Files         152      152              
  Lines       47965    47848     -117     
  Branches    10923    10902      -21     
==========================================
- Hits        38023    37919     -104     
+ Misses       7438     7423      -15     
- Partials     2504     2506       +2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/915?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/function/pfunc.py](https://codecov.io/gh/aesara-devs/aesara/pull/915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `83.41% <ø> (ø)` | |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `85.39% <ø> (-0.09%)` | :arrow_down: |
| [aesara/tensor/blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ibGFzLnB5) | `79.63% <33.33%> (-0.08%)` | :arrow_down: |
| [aesara/tensor/nnet/conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvbnYucHk=) | `79.40% <33.33%> (-0.57%)` | :arrow_down: |
| [aesara/tensor/nnet/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L29wdC5weQ==) | `43.02% <66.66%> (+0.05%)` | :arrow_up: |
| [aesara/tensor/nnet/batchnorm.py](https://codecov.io/gh/aesara-devs/aesara/pull/915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2JhdGNobm9ybS5weQ==) | `76.92% <81.81%> (-0.12%)` | :arrow_down: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `85.66% <83.33%> (-0.50%)` | :arrow_down: |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `49.71% <100.00%> (-0.15%)` | :arrow_down: |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `80.20% <100.00%> (-1.69%)` | :arrow_down: |
| [aesara/link/numba/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvdGVuc29yX2Jhc2ljLnB5) | `100.00% <100.00%> (+2.06%)` | :arrow_up: |
| ... and [36 more](https://codecov.io/gh/aesara-devs/aesara/pull/915/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

ricardoV94(2022-05-10 17:59:42):Tests are passing!
ricardoV94(2022-05-13 05:42:17):> What kind of errors do we get when `MaskBroadcastable` is removed?  Are they all just assorted test failures?

Will try to run scan tests, I didn't see what happens
ricardoV94(2022-05-13 07:47:11):Removing the `mask_broadcastable` calls in Scan leads to the following failing scan tests:

* tests/scan/test_basic.py:1064 (TestScan.test_monitor_mode)
  * ValueError: could not broadcast input array from shape (5,) into shape (1,)
* tests/scan/test_checkpoints.py:33 (TestScanCheckpoint.test_forward_pass)
  * ValueError: could not broadcast input array from shape (10,) into shape (1,)
* tests/scan/test_checkpoints.py:39 (TestScanCheckpoint.test_backward_pass)
  * ValueError: could not broadcast input array from shape (10,) into shape (1,)

<details>
<summary> <b>Traceback for the test_forward_pass </b> </summary>

```python
tests/scan/test_checkpoints.py:33 (TestScanCheckpoint.test_forward_pass)
self = <aesara.compile.function.types.Function object at 0x7f92c6168cd0>
args = (range(0, 10), 101), kwargs = {}
restore_defaults = <function Function.__call__.<locals>.restore_defaults at 0x7f92c57c2d30>
profile = None, t0 = 1652427834.1335342, output_subset = None, i = 2, arg = 101
s = <array(101, dtype=int32)>, c = <array(101, dtype=int32)>

    def __call__(self, *args, **kwargs):
        """
        Evaluates value of a function on given arguments.
    
        Parameters
        ----------
        args : list
            List of inputs to the function. All inputs are required, even when
            some of them are not necessary to calculate requested subset of
            outputs.
    
        kwargs : dict
            The function inputs can be passed as keyword argument. For this, use
            the name of the input or the input instance as the key.
    
            Keyword argument ``output_subset`` is a list of either indices of the
            function's outputs or the keys belonging to the `output_keys` dict
            and represent outputs that are requested to be calculated. Regardless
            of the presence of ``output_subset``, the updates are always calculated
            and processed. To disable the updates, you should use the ``copy``
            method with ``delete_updates=True``.
    
        Returns
        -------
        list
            List of outputs on indices/keys from ``output_subset`` or all of them,
            if ``output_subset`` is not passed.
        """
    
        def restore_defaults():
            for i, (required, refeed, value) in enumerate(self.defaults):
                if refeed:
                    if isinstance(value, Container):
                        value = value.storage[0]
                    self[i] = value
    
        profile = self.profile
        t0 = time.time()
    
        output_subset = kwargs.pop("output_subset", None)
        if output_subset is not None and self.output_keys is not None:
            output_subset = [self.output_keys.index(key) for key in output_subset]
    
        # Reinitialize each container's 'provided' counter
        if self.trust_input:
            i = 0
            for arg in args:
                s = self.input_storage[i]
                s.storage[0] = arg
                i += 1
        else:
            for c in self.input_storage:
                c.provided = 0
    
            if len(args) + len(kwargs) > len(self.input_storage):
                raise TypeError("Too many parameter passed to aesara function")
    
            # Set positional arguments
            i = 0
            for arg in args:
                # TODO: provide a option for skipping the filter if we really
                # want speed.
                s = self.input_storage[i]
                # see this emails for a discuation about None as input
                # https://groups.google.com/group/theano-dev/browse_thread/thread/920a5e904e8a8525/4f1b311a28fc27e5
                if arg is None:
                    s.storage[0] = arg
                else:
                    try:
                        s.storage[0] = s.type.filter(
                            arg, strict=s.strict, allow_downcast=s.allow_downcast
                        )
    
                    except Exception as e:
                        function_name = "aesara function"
                        argument_name = "argument"
                        if self.name:
                            function_name += ' with name "' + self.name + '"'
                        if hasattr(arg, "name") and arg.name:
                            argument_name += ' with name "' + arg.name + '"'
                        where = get_variable_trace_string(self.maker.inputs[i].variable)
                        if len(e.args) == 1:
                            e.args = (
                                "Bad input "
                                + argument_name
                                + " to "
                                + function_name
                                + f" at index {int(i)} (0-based). {where}"
                                + e.args[0],
                            )
                        else:
                            e.args = (
                                "Bad input "
                                + argument_name
                                + " to "
                                + function_name
                                + f" at index {int(i)} (0-based). {where}"
                            ) + e.args
                        restore_defaults()
                        raise
                s.provided += 1
                i += 1
    
        # Set keyword arguments
        if kwargs:  # for speed, skip the items for empty kwargs
            for k, arg in kwargs.items():
                self[k] = arg
    
        if (
            not self.trust_input
            and
            # The getattr is only needed for old pickle
            getattr(self, "_check_for_aliased_inputs", True)
        ):
            # Collect aliased inputs among the storage space
            args_share_memory = []
            for i in range(len(self.input_storage)):
                i_var = self.maker.inputs[i].variable
                i_val = self.input_storage[i].storage[0]
                if hasattr(i_var.type, "may_share_memory"):
                    is_aliased = False
                    for j in range(len(args_share_memory)):
    
                        group_j = zip(
                            [
                                self.maker.inputs[k].variable
                                for k in args_share_memory[j]
                            ],
                            [
                                self.input_storage[k].storage[0]
                                for k in args_share_memory[j]
                            ],
                        )
                        if any(
                            (
                                var.type is i_var.type
                                and var.type.may_share_memory(val, i_val)
                            )
                            for (var, val) in group_j
                        ):
    
                            is_aliased = True
                            args_share_memory[j].append(i)
                            break
    
                    if not is_aliased:
                        args_share_memory.append([i])
    
            # Check for groups of more than one argument that share memory
            for group in args_share_memory:
                if len(group) > 1:
                    # copy all but the first
                    for j in group[1:]:
                        self.input_storage[j].storage[0] = copy.copy(
                            self.input_storage[j].storage[0]
                        )
    
        # Check if inputs are missing, or if inputs were set more than once, or
        # if we tried to provide inputs that are supposed to be implicit.
        if not self.trust_input:
            for c in self.input_storage:
                if c.required and not c.provided:
                    restore_defaults()
                    raise TypeError(
                        f"Missing required input: {getattr(self.inv_finder[c], 'variable', self.inv_finder[c])}"
                    )
                if c.provided > 1:
                    restore_defaults()
                    raise TypeError(
                        f"Multiple values for input: {getattr(self.inv_finder[c], 'variable', self.inv_finder[c])}"
                    )
                if c.implicit and c.provided > 0:
                    restore_defaults()
                    raise TypeError(
                        f"Tried to provide value for implicit input: {getattr(self.inv_finder[c], 'variable', self.inv_finder[c])}"
                    )
    
        # Do the actual work
        t0_fn = time.time()
        try:
            outputs = (
>               self.vm()
                if output_subset is None
                else self.vm(output_subset=output_subset)
            )

../../aesara/compile/function/types.py:973: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

p = <function Scan.make_thunk.<locals>.p at 0x7f92c0894a60>
i = [[array(101)], [array([[ 1.        ],
       [-0.29075443]])], [array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])]]
o = [[array([[ 1.        ],
       [-0.29075443]])]]
n = forall_inplace,cpu,scan_fn}(Elemwise{Composite{maximum(minimum(((i0 + i1) - i2), i3), i4)}}.0, IncSubtensor{InplaceSet;:int64:}.0, A)
allow_gc = True

    def rval(
        p=p, i=node_input_storage, o=node_output_storage, n=node, allow_gc=allow_gc
    ):
>       r = p(n, [x[0] for x in i], o)

../../aesara/scan/op.py:1666: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

node = forall_inplace,cpu,scan_fn}(Elemwise{Composite{maximum(minimum(((i0 + i1) - i2), i3), i4)}}.0, IncSubtensor{InplaceSet;:int64:}.0, A)
inputs = [array(101), array([[ 1.        ],
       [-0.29075443]]), array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])]
outputs = [[array([[ 1.        ],
       [-0.29075443]])]]

    def p(node, inputs, outputs):
    
        t0_call = time.perf_counter()
    
        try:
>           t_fn, n_steps = scan_perform_ext.perform(
                self.info.n_shared_outs,
                self.info.n_mit_mot_outs,
                self.info.n_seqs,
                self.info.n_mit_mot,
                self.info.n_mit_sot,
                self.info.n_sit_sot,
                self.info.n_nit_sot,
                self.info.as_while,
                cython_mintaps,
                self.info.mit_mot_in_slices
                + self.info.mit_sot_in_slices
                + self.info.sit_sot_in_slices,
                tap_array_len,
                cython_vector_seqs,
                cython_vector_outs,
                self.info.mit_mot_out_slices,
                cython_mitmots_preallocated,
                cython_outs_is_tensor,
                inner_input_storage,
                inner_output_storage,
                cython_destroy_map,
                inputs,
                outputs,
                outer_output_dtypes,
                outer_output_ndims,
                self.fn.vm,
            )

../../aesara/scan/op.py:1597: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   ValueError: could not broadcast input array from shape (10,) into shape (1,)

scan_perform.pyx:466: ValueError

During handling of the above exception, another exception occurred:

self = <tests.scan.test_checkpoints.TestScanCheckpoint object at 0x7f92c092a5b0>

    def test_forward_pass(self):
        # Test forward computation of A**k.
        f = function(inputs=[self.A, self.k], outputs=[self.result, self.result_check])
>       out, out_check = f(range(10), 101)

test_checkpoints.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../aesara/compile/function/types.py:986: in __call__
    raise_with_op(
../../aesara/link/utils.py:534: in raise_with_op
    raise exc_value.with_traceback(exc_trace)
../../aesara/compile/function/types.py:973: in __call__
    self.vm()
../../aesara/scan/op.py:1666: in rval
    r = p(n, [x[0] for x in i], o)
../../aesara/scan/op.py:1597: in p
    t_fn, n_steps = scan_perform_ext.perform(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   ValueError: could not broadcast input array from shape (10,) into shape (1,)
E   Apply node that caused the error: forall_inplace,cpu,scan_fn}(Elemwise{Composite{maximum(minimum(((i0 + i1) - i2), i3), i4)}}.0, IncSubtensor{InplaceSet;:int64:}.0, A)
E   Toposort index: 43
E   Inputs types: [TensorType(int64, ()), TensorType(float64, (None, 1)), TensorType(float64, (None,))]
E   Inputs shapes: [(), (2, 1), (10,)]
E   Inputs strides: [(), (8, 8), (8,)]
E   Inputs values: [array(101), array([[ 1.        ],
E          [-0.29075443]]), 'not shown']
E   Outputs clients: [[Subtensor{int64}(forall_inplace,cpu,scan_fn}.0, ScalarFromTensor.0)]]
E   
E   HINT: Re-running with most Aesara optimizations disabled could provide a back-trace showing when this node was created. This can be done by setting the Aesara flag 'optimizer=fast_compile'. If that does not work, Aesara optimizations can be disabled with 'optimizer=None'.
E   HINT: Use the Aesara flag `exception_verbosity=high` for a debug print-out and storage map footprint of this Apply node.

scan_perform.pyx:466: ValueError
```

</details>
brandonwillard(2022-05-16 16:54:18):> Removing the `mask_broadcastable` calls in Scan leads to the following failing scan tests:
> 
> * tests/scan/test_basic.py:1064 (TestScan.test_monitor_mode)
>   
>   * ValueError: could not broadcast input array from shape (5,) into shape (1,)
> * tests/scan/test_checkpoints.py:33 (TestScanCheckpoint.test_forward_pass)
>   
>   * ValueError: could not broadcast input array from shape (10,) into shape (1,)
> * tests/scan/test_checkpoints.py:39 (TestScanCheckpoint.test_backward_pass)
>   
>   * ValueError: could not broadcast input array from shape (10,) into shape (1,)

If that's it, then I'm inclined to say that those are either real bugs in some part(s) of the `scan` code, or poorly designed tests.
ricardoV94(2022-05-16 16:57:35):I think it is just the pre-allocation logic in this `expand_empty` helper being a bit dumb.

ricardoV94(2022-05-28 10:25:40):I pushed a commit that removes the use of "unbroadcasting" in `broadcast_like`. This seems to have been introduced a long time ago in 9a453338f1b5141951d86dc6ddbc12830e11d0d6, perhaps due to old rewrite limitations concerning change of static broadcastable type shape? It might no longer be relevant after #711, but unfortunately there were no specific tests targeting the functionality to be able to reason more directly. 

In that same commit, several `alloc` calls were replaced by `broadcast_like`, which could mean that most of the remaining uses of `broadcast_like` might not be needed anymore? This would facilitate #288 

If "unbroadcasting" is not necessary in `broadcast_like`, the only remaining use is in the creation of `Scan`. This is still clearly needed at the moment (even though it should not!) as indicated by the tests mentioned above.
brandonwillard(2022-05-28 20:58:10):> If "unbroadcasting" is not necessary in `broadcast_like`, the only remaining use is in the creation of `Scan`. This is still clearly needed at the moment (even though it should not!) as indicated by the tests mentioned above.

Let's remove it from `Scan`.  I'll take a look today.
ricardoV94(2022-06-07 10:07:06):> > If "unbroadcasting" is not necessary in `broadcast_like`, the only remaining use is in the creation of `Scan`. This is still clearly needed at the moment (even though it should not!) as indicated by the tests mentioned above.
> 
> Let's remove it from `Scan`. I'll take a look today.

All the tests passed without the use of unbroadcast in `broadcast_like`, so Scan is the only place where it is used now
ricardoV94(2022-07-07 12:49:08):Renamed MaskBroadcastable to Unbroadcast
brandonwillard(2022-07-07 22:09:43):This was/is a big improvement!
ricardoV94(2022-05-10 16:28:08):If anyone can help designing a test that covers this change, that would be great. This fixes an immediate failure when creating a grad graph in `test_batch_normalization_train`, but that test is incredibly convoluted.

In particular these lines fail otherwise: https://github.com/aesara-devs/aesara/blob/85326def3765f0668d3638fa479804fe804b5db4/tests/tensor/nnet/test_batchnorm.py#L262-L279
ricardoV94(2022-05-10 16:51:56):The issue here seems to be creating an EmptyAlloc that does not have a fixed shape of 1 on the leftmost dimension. I didn't dig to find out why/whether this is actually needed
ricardoV94(2022-05-10 16:54:23):This is the only other use of "unbroadcasting" outside of Scan. One more reason to address https://github.com/aesara-devs/aesara/issues/159
ricardoV94(2022-05-11 07:46:58):Trying to revive #288 
brandonwillard(2022-05-12 21:52:57):The trouble with replacing `broadcast_like` with `BroadcastTo`s is that at least a few uses of `broadcast_like` require that the resulting broadcasted array be writable.  We currently don't have a means of converting the non-writable `BroadcastTo`s to writable ones (e.g. a rewrite that adds a `DeepCopy` or something), so introducing too many `BroadcastTo`s can limit the amount of in-placing that's possible.

Even so, it seems like the output `Type` should be the "narrower" of the two in this&mdash;and perhaps every&mdash;scenario, or we should just pick one and let the replacement process do the narrowing.
brandonwillard(2022-05-12 21:57:25):```suggestion
    __props__ = ("axes",)
```
brandonwillard(2022-05-12 21:59:56):A more appropriate name for this would be something like `RemoveShapeInfo`, because that's the only purpose it serves.
brandonwillard(2022-05-12 22:01:42):Again, `remove_shape_info` or something similar would be much more accurate.
ricardoV94(2022-05-13 05:41:07):I called it that because it's only ever used to remove info of `shape==1`
ricardoV94(2022-05-17 16:00:59):I updated `make_node` to explicitly only mask static dimensions of size 1. This was the original intended behavior, and it doesn't seem that there is any need in the library to hide other static dimension sizes. Hopefully this `Op` is not here to stay so that's why I tried to make it as limited as possible. The name reflects it.
codecov[bot](2022-04-19 16:43:17):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/916?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#916](https://codecov.io/gh/aesara-devs/aesara/pull/916?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1ee1cf9) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e5ebf260f159793362387b8371d44ecb491ce9cc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e5ebf26) will **increase** coverage by `0.00%`.
> The diff coverage is `67.85%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/916/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/916?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #916   +/-   ##
=======================================
  Coverage   78.94%   78.94%           
=======================================
  Files         152      152           
  Lines       47712    47681   -31     
  Branches    10858    10865    +7     
=======================================
- Hits        37667    37643   -24     
+ Misses       7546     7541    -5     
+ Partials     2499     2497    -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/916?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/nnet/batchnorm.py](https://codecov.io/gh/aesara-devs/aesara/pull/916/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2JhdGNobm9ybS5weQ==) | `76.86% <0.00%> (-0.18%)` | :arrow_down: |
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/916/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `86.62% <ø> (+0.79%)` | :arrow_up: |
| [aesara/tensor/blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/916/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ibGFzLnB5) | `79.63% <33.33%> (+0.01%)` | :arrow_up: |
| [aesara/tensor/nnet/conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/916/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvbnYucHk=) | `79.40% <33.33%> (-0.57%)` | :arrow_down: |
| [aesara/tensor/nnet/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/916/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L29wdC5weQ==) | `43.02% <66.66%> (+0.05%)` | :arrow_up: |
| [aesara/sparse/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/916/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `82.48% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/sparse/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/916/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9vcHQucHk=) | `75.56% <100.00%> (-0.05%)` | :arrow_down: |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/916/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `87.60% <100.00%> (-0.12%)` | :arrow_down: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/916/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `85.18% <100.00%> (+0.10%)` | :arrow_up: |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/916/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `89.74% <100.00%> (+0.01%)` | :arrow_up: |
| ... and [2 more](https://codecov.io/gh/aesara-devs/aesara/pull/916/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

brandonwillard(2022-04-19 16:46:28):This is an exciting start to some truly transformative changes in Aesara!
ricardoV94(2022-04-19 16:56:51):This one seems to be working. I'll follow up with a PR that removes `addbroadcast`. That will leave us only with the weird "unbroadcast" which slowed me down in #915
ricardoV94(2022-05-09 12:32:14):Closing in favor of #915 
ricardoV94(2022-04-20 07:24:49):Is there a preference for `var.broadcastable` vs `var.type.broadcastable`?
brandonwillard(2022-04-22 17:53:39):`var.type` is more explicit, and less likely to confuse Mypy.
brandonwillard(2022-04-22 17:58:52):The meaning of this isn't very clear.

Does this work: "Specify that the dimensions of `x` given by `axes` are non-broadcastable (i.e. not equal to one)."?
ricardoV94(2022-04-22 18:10:47):It is only weird for me because we are not really doing a negative assertion. Nothing will fail if the shape is actually 1 when it gets evaluated. It's just that Aesara will treat it as not being broadcastable when used in downstream `Op`s.
brandonwillard(2022-04-22 18:34:39):We can add a comment to the docstring that says this `Op` only applies to the type-checking process.

In other words, we're saying "Specify (to the type-checking process) that the dimensions of `x` given by `axes` are non-broadcastable (i.e. not equal to one).".


brandonwillard(2022-04-22 18:42:13):Otherwise, the phrasing "State/specify that the input is not known to be broadcastable..." is also a little clearer.
ricardoV94(2022-04-22 20:09:59):Yeah those sound better, thanks
codecov[bot](2022-04-20 02:11:09):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/920?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#920](https://codecov.io/gh/aesara-devs/aesara/pull/920?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9531a61) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/75b7233e540f31d3e8030825f57a16804a04ebe4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (75b7233) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/920/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/920?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #920   +/-   ##
=======================================
  Coverage   78.94%   78.94%           
=======================================
  Files         152      152           
  Lines       47712    47712           
  Branches    10858    10858           
=======================================
  Hits        37667    37667           
  Misses       7546     7546           
  Partials     2499     2499           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/920?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/920/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `76.62% <ø> (ø)` | |

codecov[bot](2022-04-23 01:47:23):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/925?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#925](https://codecov.io/gh/aesara-devs/aesara/pull/925?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f0d2276) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/99e9600c8c036abd19406316c3ec46c9b75a7f53?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (99e9600) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/925/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/925?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #925   +/-   ##
=======================================
  Coverage   78.91%   78.91%           
=======================================
  Files         152      152           
  Lines       47654    47657    +3     
  Branches    10851    10852    +1     
=======================================
+ Hits        37606    37609    +3     
  Misses       7548     7548           
  Partials     2500     2500           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/925?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/925/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `93.75% <ø> (ø)` | |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/925/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `88.42% <100.00%> (+0.05%)` | :arrow_up: |

codecov[bot](2022-04-24 17:57:51):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/926?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#926](https://codecov.io/gh/aesara-devs/aesara/pull/926?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a004ac0) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/1a85652e98ac0e633d51dec8d36bc60ec3f45982?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1a85652) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/926/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/926?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #926   +/-   ##
=======================================
  Coverage   78.91%   78.91%           
=======================================
  Files         152      152           
  Lines       47657    47657           
  Branches    10852    10852           
=======================================
  Hits        37609    37609           
  Misses       7548     7548           
  Partials     2500     2500           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/926?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/926/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.91% <100.00%> (ø)` | |

codecov[bot](2022-04-28 02:28:58):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/927?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#927](https://codecov.io/gh/aesara-devs/aesara/pull/927?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2f31c00) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/08c97f341cf872ead02522e6cfbf80d6dd77cd8c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (08c97f3) will **increase** coverage by `0.01%`.
> The diff coverage is `75.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/927/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/927?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #927      +/-   ##
==========================================
+ Coverage   79.26%   79.28%   +0.01%     
==========================================
  Files         152      152              
  Lines       47932    47938       +6     
  Branches    10914    10916       +2     
==========================================
+ Hits        37995    38008      +13     
+ Misses       7429     7420       -9     
- Partials     2508     2510       +2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/927?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/927/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.74% <75.00%> (+1.39%)` | :arrow_up: |

qipengchen(2022-04-28 05:16:23):Hi, do I need to write a test?  **link/test_jax.py** seems to have a test already. 
I'm new to this and don't know how to write a test for it. Sorry about that.
ricardoV94(2022-04-28 11:36:37):A test for the changes would require having two versions of JAX installed no?
brandonwillard(2022-04-28 18:15:12):> A test for the changes would require having two versions of JAX installed no?

Quite possibly, but, if this is adding the newest way of indexing, then we should be able to cover it by only testing the newest version of JAX, no?
brandonwillard(2022-05-02 05:16:22):> Hi, do I need to write a test? **link/test_jax.py** seems to have a test already. I'm new to this and don't know how to write a test for it. Sorry about that.

Yes, there's a test, but it looks like we'll need to augment the test setup so that we have the correct JAX version (or multiple versions) and get coverage for the new lines of code.

Regardless, there's no need to close this PR; you've gotten things started and that's helpful.  If you can't add tests right now, this can stay open until you can.  

Likewise, we can always add the tests to this branch when we get a chance&mdash;in which case, you'll need to `git rebase` locally to pull in those changes, if you want to make further changes on top of them.

In the meantime, feel free to ask questions and we'll try to clarify the process and/or requirements.
qipengchen(2022-05-02 06:49:18):> > Hi, do I need to write a test? **link/test_jax.py** seems to have a test already. I'm new to this and don't know how to write a test for it. Sorry about that.
> 
> Yes, there's a test, but it looks like we'll need to augment the test setup so that we have the correct JAX version (or multiple versions) and get coverage for the new lines of code.
> 
> Regardless, there's no need to close this PR; you've gotten things started and that's helpful. If you can't add tests right now, this can stay open until you can.
> 
> Likewise, we can always add the tests to this branch when we get a chance—in which case, you'll need to `git rebase` locally to pull in those changes, if you want to make further changes on top of them.
> 
> In the meantime, feel free to ask questions and we'll try to clarify the process and/or requirements.

Thanks a lot!  
I lacked the basics knowledge of testing, so I wanted to try running test-related programs locally. How can I run tests locally? Are there any packages or extensions I need to know about?
brandonwillard(2022-05-03 00:06:36):> Thanks a lot!
> I lacked the basics knowledge of testing, so I wanted to try running test-related programs locally. How can I run tests locally? Are there any packages or extensions I need to know about?

Try performing the development setup from [here](https://aesara.readthedocs.io/en/latest/dev_start_guide.html#setting-up-the-your-local-development-environment).  After that, you should be able to run the existing tests with `pytest`.

Running _all_ the tests can take a long time, so the standard development workflow usually involves only running the tests that are clearly relevant to the things that were changed in the PR.  In this case, you should only need to run the tests in the `tests.link.test_jax` module.

Once those tests pass, you can push your local changes to the remote branch that corresponds to this PR and let the CI scripts run the rest of the tests.  If there's a failure in CI, then you can find out exactly where (e.g. a seemingly unrelated test) by reading the logs and attempt to reproduce the issue locally.

See the [`pytest`](https://docs.pytest.org/en/7.1.x/) documentation for further information about test running.
qipengchen(2022-05-03 09:23:50):> 

Thank you for your kind and detailed reply, which was very helpful to me.

twiecki(2022-05-09 21:54:44):@qipengchen Any progress on this?
qipengchen(2022-05-10 03:54:41):> @qipengchen Any progress on this?

I still don't understand that **jax_funcify_IncSubtensor** is covered by the test and **jax_funcify_AdvancedIncSubtensor** is not covered by the test.
And **test_jax_IncSubtensor** is marked as a failure,  I don't know how to debug IncSubtensor tests.
ricardoV94(2022-05-13 11:09:20):> > @qipengchen Any progress on this?
> 
> I still don't understand that **jax_funcify_IncSubtensor** is covered by the test and **jax_funcify_AdvancedIncSubtensor** is not covered by the test. And **test_jax_IncSubtensor** is marked as a failure, I don't know how to debug IncSubtensor tests.

IncSubtensor seems to be partially tested in `test_basic` 
https://github.com/aesara-devs/aesara/blob/e2e2366850664544030c1fd769d6b6d25b9d9bba/tests/link/test_jax.py#L249-L251

`test_jax_IncSubtensor` is marked as an xfail, probably because it tried to do things that are not possible in newver JAX versions. One good start would be to try and run each `compare_jax_and_py(out_fg, [])` separately and if they work put them in a separate test. Perhaps that will be enough to have coverage for `AdvancedIncSubtensor` (and possible also increase coverage for `IncSubtensor`)
twiecki(2022-05-13 16:33:37):@qipengchen Does that help?
qipengchen(2022-05-15 10:52:07):> 

Sorry for the late reply.

In fact, I tried to run each one separately, however, in `test_jax_IncSubtensor` , an error occurred whenever the line `compare_jax_and_py(out_fg, [])` was run. 

Error contents:  https://github.com/qipengchen/aesara/blob/main/tests/link/try_test_jax.ipynb

This error appears to come from `aesara_jax_fn(*test_inputs)`
https://github.com/aesara-devs/aesara/blob/e2e2366850664544030c1fd769d6b6d25b9d9bba/tests/link/test_jax.py#L102-L104

 In addition, the pytest I run locally, only the first `compare_jax_and_py(out_fg, [])`  of  `test_jax_IncSubtensor`  is coverage by test.

brandonwillard(2022-05-15 18:13:43):> In fact, I tried to run each one separately, however, in `test_jax_IncSubtensor` , an error occurred whenever the line `compare_jax_and_py(out_fg, [])` was run.

The error you're seeing looks like a common issue we've observed with JAX's generalizability/scope (e.g. see [this `arange` issue](https://github.com/aesara-devs/aesara/issues/68) and [this earlier issue](https://github.com/aesara-devs/aesara/issues/43)).
brandonwillard(2022-05-15 18:16:54):> In addition, the pytest I run locally, only the first `compare_jax_and_py(out_fg, [])` of `test_jax_IncSubtensor` is coverage by test.

Which version of `jax` and `jaxlib` were you using?
qipengchen(2022-05-16 01:38:44):> > In addition, the pytest I run locally, only the first `compare_jax_and_py(out_fg, [])` of `test_jax_IncSubtensor` is coverage by test.
> 
> Which version of `jax` and `jaxlib` were you using?

My version is `jax=0.3.7`  and `jaxlib=0.3.7`.
brandonwillard(2022-05-16 17:21:39):> My version is `jax=0.3.7` and `jaxlib=0.3.7`.

It looks like [the version of `jaxlib` used in CI](https://github.com/aesara-devs/aesara/runs/6203686980?check_suite_focus=true#step:5:280) is older (i.e. 0.3.2).  I don't know if `jaxlib` makes the difference in this case, but that's an important distinction.

Also, we can't merge this PR with the notebook included.  For things like that, it's best to create [a Gist](https://gist.github.com/) and link to it in a comment.
qipengchen(2022-05-17 03:48:03):
> 
> It looks like [the version of `jaxlib` used in CI](https://github.com/aesara-devs/aesara/runs/6203686980?check_suite_focus=true#step:5:280) is older (i.e. 0.3.2). I don't know if `jaxlib` makes the difference in this case, but that's an important distinction.
> 
> Also, we can't merge this PR with the notebook included. For things like that, it's best to create [a Gist](https://gist.github.com/) and link to it in a comment.

Thanks for your help, I tried installing jaxLib 0.3.2 and running the test code.
The odd thing is to be able to run jax-based algorithms in PyMC, but not work properly in the tests.
https://gist.github.com/qipengchen/c0e85e94f4aacf1c9ecc89fe7d17483b
ricardoV94(2022-05-26 12:56:56):@qipengchen I forced pushed some changes to your branch. I separated the AdvancedIncSubtensor tests that seem to be failing due to JAX limitations from those that were working
ricardoV94(2022-05-26 21:24:33):This should have an `xfail` mark to be obvious that it's a failure and not desired behavior.
codecov[bot](2022-04-25 15:21:45):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/928?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#928](https://codecov.io/gh/aesara-devs/aesara/pull/928?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (aaa9c3b) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/b60cf7240a6d17ed80db2bd9b43c6faf377d64fe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b60cf72) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/928/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/928?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #928      +/-   ##
==========================================
- Coverage   78.92%   78.92%   -0.01%     
==========================================
  Files         152      152              
  Lines       47701    47713      +12     
  Branches    10862    10862              
==========================================
+ Hits        37649    37658       +9     
- Misses       7550     7551       +1     
- Partials     2502     2504       +2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/928?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.05% <ø> (ø)` | |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.17% <100.00%> (-0.27%)` | :arrow_down: |
| [aesara/tensor/elemwise\_cgen.py](https://codecov.io/gh/aesara-devs/aesara/pull/928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZV9jZ2VuLnB5) | `95.74% <100.00%> (+0.29%)` | :arrow_up: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.91% <0.00%> (-0.14%)` | :arrow_down: |

brandonwillard(2022-05-02 20:20:03):After looking at this and working on the `c_code` implementations for https://github.com/aesara-devs/aesara/pull/657, I was brought back to [this thread](https://github.com/aesara-devs/aesara/discussions/376), because I can't help thinking about how simple this would all be if we could just use Cython-generated C code for these `c_code` implementations.

If you're feeling adventurous, give that thread a read and see if you can construct a `_CThunk` that uses a Cython-generated extension module.  Last I recall, it seemed very doable, so, if it's something that could be hacked together in a few hours, it might be extremely helpful for the (hopefully short) time we'll be spending maintaining this annoying string-based C code.
ricardoV94(2022-05-03 16:10:20):> After looking at this and working on the `c_code` implementations for https://github.com/aesara-devs/aesara/pull/657, I was brought back to [this thread](https://github.com/aesara-devs/aesara/discussions/376), because I can't help thinking about how simple this would all be if we could just use Cython-generated C code for these `c_code` implementations.
> 
> If you're feeling adventurous, give that thread a read and see if you can construct a `_CThunk` that uses a Cython-generated extension module.  Last I recall, it seemed very doable, so, if it's something that could be hacked together in a few hours, it might be extremely helpful for the (hopefully short) time we'll be spending maintaining this annoying string-based C code.

How would Cython make our lives easier? Mainly to avoid having to write code as Python strings?
brandonwillard(2022-05-05 21:23:40):> How would Cython make our lives easier? Mainly to avoid having to write code as Python strings?

It helps with correctness as well, since Cython will take care of all the reference counting.  

Also, some (or potentially a lot) of the C code we have implemented as Python strings is already implemented via Cython.  For instance, `x + y` and/or `np.add(x, y)` in Cython will transpile to the NumPy C API calls that we're currently trying to emulate.
ricardoV94(2022-04-25 14:06:02):Maybe with inplace?
brandonwillard(2022-04-29 18:38:52):```suggestion
        # TODO: This is a bit inefficient because we are comparing one dimension against itself
```
brandonwillard(2022-04-29 18:40:07):```suggestion
        check += """
            }
        """
```
brandonwillard(2022-04-29 18:41:00):```suggestion
    # TODO: We can decide to either specialize C code even further given the input types
    # or make it general, regardless of whether static broadcastable information is given
```
brandonwillard(2022-04-29 18:42:32):```suggestion
        # TODO: Are candidates always either "x" or "i"? If that's the case, we can
        # simplify some logic here (e.g. we don't need to track the `idx`).
```
brandonwillard(2022-04-29 18:45:08):This might be a good opportunity to turn this into a real test (i.e. `assert` something about the result).
ricardoV94(2022-05-02 07:08:50):I felt that was less readable, but have no strong opinion
ricardoV94(2022-05-02 07:12:30):The space in the second line is something that PyCharm does automatically for multi-line `TODO`s. Couldn't find if this was standard or specific to them
brandonwillard(2022-05-02 20:22:38):```suggestion
        # use it! The scalar_op needs to check the type-level shapes itself.
```
brandonwillard(2022-05-02 20:32:05):```suggestion
                    # Elemwise does not specify non-broadcastable static/type-level shape information for its outputs yet
```
brandonwillard(2022-05-02 20:40:29):```suggestion
        nonx_candidates = tuple(
```
brandonwillard(2022-05-02 20:42:50):This block looks very similar to the block of code added above, which implies that it should probably be abstracted to a function.
ricardoV94(2022-05-03 07:46:12):I would keep it dumb for now. I have strong prior that we will have to touch this code again very soon 
brandonwillard(2022-05-05 21:20:04):> I would keep it dumb for now. I have strong prior that we will have to touch this code again very soon

Reducing duplication helps even more when code needs to undergo change (e.g. one only needs change something once, instead of twice).
ricardoV94(2022-05-06 10:06:49):Done
dgerlanc(2022-04-26 16:55:53):Updated with @brandonwillard suggested changes.
brandonwillard(2022-04-25 23:44:39):```suggestion
on every aspect of the mission&mdash;including mentorship, teaching, and connecting
people.
```
brandonwillard(2022-04-25 23:49:11):```suggestion
Diversity is one of our strengths, but it can also entail communication
issues and misunderstandings. To that end, we have a few ground rules to which we ask
everyone to adhere.
```
brandonwillard(2022-04-25 23:50:09):```suggestion
the spirit in which it’s intended&mdash;a guide to make it easier to enrich all of
```
brandonwillard(2022-04-25 23:51:19):```suggestion
forums created by the project team that the community uses for communication.
```
brandonwillard(2022-04-25 23:56:12):```suggestion
  depend on the work of others. The decisions you make can affect users and
  colleagues, so you should take the consequences into consideration. 
  Remember that we're a world-wide community, so you might not be
```
brandonwillard(2022-04-25 23:59:23):```suggestion
      information (e.g. "doxing").
```
brandonwillard(2022-04-26 00:02:08):```suggestion
    - Personal insults of any sort.
```
brandonwillard(2022-04-26 00:02:57):```suggestion
    - Discriminatory jokes and language (e.g. the use of racist and sexist terms).
```
brandonwillard(2022-04-26 00:12:41):```suggestion
  that we’re different. Aesara benefits from its varied community and
  people from a wide range of backgrounds. Different people have different
```
brandonwillard(2022-04-29 05:14:38):> Looks good. Is there a reason why we keep supporting RandomState instead of RandomGenerator alone?

Mostly just for backward compatibility, but, now, it's useful for the Numba backend as well&mdash;at least until something like https://github.com/numba/numba/pull/7900 goes through.
codecov[bot](2022-04-29 06:29:11):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/939?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#939](https://codecov.io/gh/aesara-devs/aesara/pull/939?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b6dc523) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c19ac79965eb4b3b11f432fd46efc620aa28f72f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c19ac79) will **increase** coverage by `0.00%`.
> The diff coverage is `95.45%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/939/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/939?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #939   +/-   ##
=======================================
  Coverage   78.91%   78.91%           
=======================================
  Files         152      152           
  Lines       47657    47660    +3     
  Branches    10852    10853    +1     
=======================================
+ Hits        37609    37612    +3     
  Misses       7548     7548           
  Partials     2500     2500           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/939?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/sandbox/rng\_mrg.py](https://codecov.io/gh/aesara-devs/aesara/pull/939/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvcm5nX21yZy5weQ==) | `84.11% <ø> (-0.04%)` | :arrow_down: |
| [aesara/compile/nanguardmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/939/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `62.37% <50.00%> (+0.37%)` | :arrow_up: |
| [aesara/tensor/random/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/939/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdXRpbHMucHk=) | `100.00% <100.00%> (ø)` | |

codecov[bot](2022-04-29 22:02:57):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/941?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#941](https://codecov.io/gh/aesara-devs/aesara/pull/941?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b1f088a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c19ac79965eb4b3b11f432fd46efc620aa28f72f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c19ac79) will **increase** coverage by `0.01%`.
> The diff coverage is `96.42%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/941/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/941?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #941      +/-   ##
==========================================
+ Coverage   78.91%   78.92%   +0.01%     
==========================================
  Files         152      152              
  Lines       47657    47701      +44     
  Branches    10852    10862      +10     
==========================================
+ Hits        37609    37649      +40     
- Misses       7548     7550       +2     
- Partials     2500     2502       +2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/941?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/sandbox/rng\_mrg.py](https://codecov.io/gh/aesara-devs/aesara/pull/941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvcm5nX21yZy5weQ==) | `84.11% <ø> (-0.04%)` | :arrow_down: |
| [aesara/compile/nanguardmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvbmFuZ3VhcmRtb2RlLnB5) | `62.37% <50.00%> (+0.37%)` | :arrow_up: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.44% <100.00%> (ø)` | |
| [aesara/tensor/random/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdXRpbHMucHk=) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `86.06% <0.00%> (+0.23%)` | :arrow_up: |

codecov[bot](2022-05-05 02:01:30):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/946?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#946](https://codecov.io/gh/aesara-devs/aesara/pull/946?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (13c370c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c7b416e15e5ff7df137cfa528082df91392112db?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c7b416e) will **increase** coverage by `0.04%`.
> The diff coverage is `96.59%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/946/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/946?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #946      +/-   ##
==========================================
+ Coverage   78.92%   78.97%   +0.04%     
==========================================
  Files         152      152              
  Lines       47713    47761      +48     
  Branches    10862    10878      +16     
==========================================
+ Hits        37658    37719      +61     
+ Misses       7551     7542       -9     
+ Partials     2504     2500       -4     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/946?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/946/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `51.66% <95.38%> (+3.07%)` | :arrow_up: |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/946/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `84.84% <100.00%> (+0.24%)` | :arrow_up: |

brandonwillard(2022-05-05 21:16:59):> Looks good, glad to get rid of those empty strings at the end

Yes, that was too annoying to leave in place.

Anyway, I just renamed some of the new variables/functions and added an option to enable/disable the extra information; otherwise, I think this is ready to go.

My main goal with this change is to make it easier for people to understand how `Scan`s are organized, because I believe that will help remove a lot of the mystery/confusion surrounding this complicated `Op`.  

Plus, I find myself creating `ScanArgs` objects simply to decode which inputs/outputs are assigned with which inner-IO patterns (e.g. mit-mots, sit-sots, nit-nots, etc.), and these changes simplify that process dramatically.
lucianopaz(2022-05-05 14:59:58):Does anyone know how to fix the unreachable code error from mypy? That code only runs on windows, and mypy doesn’t complain when I run it on windows.
lucianopaz(2022-05-05 19:09:07):It looks like mypy is failing because of [this bug](https://github.com/python/mypy/issues/12545)
brandonwillard(2022-05-05 20:12:56):> It looks like mypy is failing because of [this bug](https://github.com/python/mypy/issues/12545)

~It looks more like this one: https://github.com/python/mypy/issues/5678.  (Not the generators/`yield` parts, but the way Mypy is handing `sys.platform`.)~  Actually, they appear to both be fundamentally the same problem.

In general, it looks like Mypy is taking the value of `sys.platform` too literally.

Anyway, you can add a `# type: ignore` there.
lucianopaz(2022-05-06 13:37:24):The failing test (`tests/sparse/sandbox/test_sp.py::TestSP::test_maxpool`) passes locally. Maybe the test is flaky?
brandonwillard(2022-05-06 21:05:43):> The failing test (`tests/sparse/sandbox/test_sp.py::TestSP::test_maxpool`) passes locally. Maybe the test is flaky?

Yeah, that looks like a bad, unseeded test.
codecov[bot](2022-05-06 22:19:03):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/947?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#947](https://codecov.io/gh/aesara-devs/aesara/pull/947?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0dc06ef) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/b60cf7240a6d17ed80db2bd9b43c6faf377d64fe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b60cf72) will **increase** coverage by `0.06%`.
> The diff coverage is `97.22%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/947/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/947?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #947      +/-   ##
==========================================
+ Coverage   78.92%   78.98%   +0.06%     
==========================================
  Files         152      152              
  Lines       47701    47795      +94     
  Branches    10862    10888      +26     
==========================================
+ Hits        37649    37753     +104     
+ Misses       7550     7542       -8     
+ Partials     2502     2500       -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/947?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/947/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `52.40% <97.22%> (+1.33%)` | :arrow_up: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/947/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.17% <0.00%> (-0.27%)` | :arrow_down: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/947/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.91% <0.00%> (-0.14%)` | :arrow_down: |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/947/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.05% <0.00%> (ø)` | |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/947/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `84.84% <0.00%> (+0.24%)` | :arrow_up: |
| [aesara/tensor/elemwise\_cgen.py](https://codecov.io/gh/aesara-devs/aesara/pull/947/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZV9jZ2VuLnB5) | `95.74% <0.00%> (+0.29%)` | :arrow_up: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/947/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `51.66% <0.00%> (+3.07%)` | :arrow_up: |

hectormz(2022-05-07 02:06:53):Looking forward to this PR! Was just scratching my head about this on Windows. Thanks @lucianopaz 
lucianopaz(2022-05-07 14:28:55):Codecov seems to be linking the old commit instead of the [new one](https://codecov.io/github/aesara-devs/aesara/commit/0dc06efe59cf0455a5b9a5f7d14e587e3cde714e)
brandonwillard(2022-05-06 22:27:32):Looks like we need coverage for this scenario.  Also, isn't this equivalent to `lib_dir = lib_dir.strip('"')`?  If it is, then you can execute that statement unconditionally.
codecov[bot](2022-05-07 02:43:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/948?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#948](https://codecov.io/gh/aesara-devs/aesara/pull/948?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7ff73e6) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2fee841ed9cf35aaf1734264f5c83b1f9a220393?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2fee841) will **increase** coverage by `0.10%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/948/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/948?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #948      +/-   ##
==========================================
+ Coverage   79.10%   79.20%   +0.10%     
==========================================
  Files         152      152              
  Lines       48061    47937     -124     
  Branches    10934    10916      -18     
==========================================
- Hits        38017    37967      -50     
+ Misses       7534     7464      -70     
+ Partials     2510     2506       -4     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/948?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/948/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `90.65% <ø> (+2.85%)` | :arrow_up: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/948/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `85.93% <ø> (+0.83%)` | :arrow_up: |

hectormz(2022-05-11 13:09:24):@ricardoV94 Thanks for the review! I merged in changes that @brandonwillard made after my PR
ricardoV94(2022-05-11 13:13:21):I think you will have to rebase from main instead of merging. Can you confirm @brandonwillard?
hectormz(2022-05-11 13:32:28):I can do that as well and re-push
hectormz(2022-05-12 05:26:24):Are you able to restart the checks? Seemed to cancel with force push, but not restart
ricardoV94(2022-05-12 14:08:56):> Are you able to restart the checks? Seemed to cancel with force push, but not restart

I rebased on main again, tests should rerun now
ricardoV94(2022-05-11 08:06:57):We should check if we have an equivalent rewrite for reshape
ricardoV94(2022-05-11 08:11:07):NVM, I see we already do
codecov[bot](2022-05-08 01:14:32):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/949?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#949](https://codecov.io/gh/aesara-devs/aesara/pull/949?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9757016) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/258d5f1267dcd9053308e868c27cf6200cc0f3a3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (258d5f1) will **increase** coverage by `0.00%`.
> The diff coverage is `66.66%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/949/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/949?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #949   +/-   ##
=======================================
  Coverage   78.98%   78.99%           
=======================================
  Files         152      152           
  Lines       47795    47795           
  Branches    10888    10888           
=======================================
+ Hits        37753    37754    +1     
+ Misses       7542     7541    -1     
  Partials     2500     2500           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/949?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/949/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `76.62% <ø> (ø)` | |
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/949/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `66.39% <ø> (-0.10%)` | :arrow_down: |
| [aesara/sandbox/rng\_mrg.py](https://codecov.io/gh/aesara-devs/aesara/pull/949/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvcm5nX21yZy5weQ==) | `84.11% <ø> (ø)` | |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/949/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.17% <ø> (ø)` | |
| [aesara/tensor/nnet/conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/949/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvbnYucHk=) | `79.96% <ø> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/949/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.05% <50.00%> (ø)` | |
| [aesara/gradient.py](https://codecov.io/gh/aesara-devs/aesara/pull/949/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `77.23% <100.00%> (+0.03%)` | :arrow_up: |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/949/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `89.72% <100.00%> (ø)` | |
| [aesara/graph/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/949/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `86.38% <0.00%> (+0.52%)` | :arrow_up: |

codecov[bot](2022-05-08 20:47:45):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/951?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#951](https://codecov.io/gh/aesara-devs/aesara/pull/951?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (29b1d25) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/08c97f341cf872ead02522e6cfbf80d6dd77cd8c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (08c97f3) will **increase** coverage by `0.00%`.
> The diff coverage is `86.11%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/951/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/951?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #951   +/-   ##
=======================================
  Coverage   79.26%   79.27%           
=======================================
  Files         152      152           
  Lines       47932    47940    +8     
  Branches    10914    10914           
=======================================
+ Hits        37995    38003    +8     
- Misses       7429     7430    +1     
+ Partials     2508     2507    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/951?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `86.59% <0.00%> (ø)` | |
| [aesara/link/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `85.83% <ø> (ø)` | |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `89.00% <75.00%> (+0.04%)` | :arrow_up: |
| [aesara/graph/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `93.75% <100.00%> (ø)` | |
| [aesara/link/c/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy90eXBlLnB5) | `75.98% <100.00%> (+0.31%)` | :arrow_up: |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.05% <100.00%> (ø)` | |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `85.48% <100.00%> (ø)` | |
| [aesara/scan/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `78.99% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/tensor/io.py](https://codecov.io/gh/aesara-devs/aesara/pull/951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9pby5weQ==) | `78.15% <100.00%> (ø)` | |
| [aesara/tensor/random/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdHlwZS5weQ==) | `90.62% <100.00%> (ø)` | |
| ... and [4 more](https://codecov.io/gh/aesara-devs/aesara/pull/951/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

codecov[bot](2022-05-09 06:30:51):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/952?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#952](https://codecov.io/gh/aesara-devs/aesara/pull/952?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (cfbe867) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/6cca25e3a3b6d63888058029ba6bcfb1f32e1621?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (6cca25e) will **increase** coverage by `0.00%`.
> The diff coverage is `89.47%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/952/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/952?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #952   +/-   ##
=======================================
  Coverage   78.99%   78.99%           
=======================================
  Files         152      152           
  Lines       47795    47809   +14     
  Branches    10888    10893    +5     
=======================================
+ Hits        37754    37768   +14     
  Misses       7541     7541           
  Partials     2500     2500           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/952?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/compiledir.py](https://codecov.io/gh/aesara-devs/aesara/pull/952/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvY29tcGlsZWRpci5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/952/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.91% <ø> (ø)` | |
| [aesara/compile/profiling.py](https://codecov.io/gh/aesara-devs/aesara/pull/952/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `75.13% <ø> (ø)` | |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/952/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `64.97% <0.00%> (ø)` | |
| [aesara/link/c/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/952/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9iYXNpYy5weQ==) | `87.36% <ø> (ø)` | |
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/952/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `52.40% <ø> (ø)` | |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/952/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `80.86% <ø> (ø)` | |
| [aesara/scan/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/952/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vYmFzaWMucHk=) | `85.09% <ø> (ø)` | |
| [aesara/sparse/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/952/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9vcHQucHk=) | `75.56% <ø> (-0.05%)` | :arrow_down: |
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/952/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `80.28% <0.00%> (ø)` | |
| ... and [12 more](https://codecov.io/gh/aesara-devs/aesara/pull/952/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

codecov[bot](2022-05-10 00:55:23):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/953?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#953](https://codecov.io/gh/aesara-devs/aesara/pull/953?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0e37863) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/d11f30399fcbf8fd5af3bef2c2f54f21bff12c99?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d11f303) will **increase** coverage by `0.01%`.
> The diff coverage is `84.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/953/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/953?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #953      +/-   ##
==========================================
+ Coverage   79.09%   79.10%   +0.01%     
==========================================
  Files         152      152              
  Lines       48052    48061       +9     
  Branches    10929    10934       +5     
==========================================
+ Hits        38005    38017      +12     
+ Misses       7538     7534       -4     
- Partials     2509     2510       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/953?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/953/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `52.36% <84.00%> (+0.87%)` | :arrow_up: |

ricardoV94(2022-05-12 10:17:04):This may actually overkill, the biggest problem is that `type.convert_variable` does not complain in here (it also seems like it should be inside a `try/except`):

https://github.com/aesara-devs/aesara/blob/35bf0d353f9681341fe320d2847df87520afc4d8/aesara/graph/opt.py#L772-L779

```python
import aesara.tensor as at

type1 = at.TensorType("float64", shape=(1, 20))
type2 = at.TensorType("float64", shape=(1, None))
res = type1.filter_variable(type2())
res.type  # TensorType(float64, (1, None))
```

This will no longer be an issue after #915 gets merged, but it will be stlightly less efficient than the behavior in this PR, because it will be introducing `SpecifyShape`s that would be avoided here
codecov[bot](2022-05-12 10:58:59):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/956?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#956](https://codecov.io/gh/aesara-devs/aesara/pull/956?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c11fe9a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2fee841ed9cf35aaf1734264f5c83b1f9a220393?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2fee841) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/956/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/956?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #956   +/-   ##
=======================================
  Coverage   79.10%   79.10%           
=======================================
  Files         152      152           
  Lines       48061    48073   +12     
  Branches    10934    10938    +4     
=======================================
+ Hits        38017    38029   +12     
  Misses       7534     7534           
  Partials     2510     2510           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/956?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/956/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `64.97% <100.00%> (+0.28%)` | :arrow_up: |

ricardoV94(2022-07-08 08:26:40):Closing this, as https://github.com/aesara-devs/aesara/pull/915 solves the original bug. This PR would provide a more efficient graph (with less SpecifyShape's), but add extra complexity in the MergeOptimizer rewrite that may not be warranted.
brandonwillard(2022-05-12 19:39:51):Given how often merging is done, we should be careful about performance in these areas, so let's see if we can reformulate this condition and the following one to involve only a single pass through the candidates.
ricardoV94(2022-05-12 20:58:57):I didn't spot a/the place where we can control the order over which we process nodes. In any  case I am not too happy with this and would rather just let #915 take care of it.
brandonwillard(2022-05-12 21:05:14):Couldn't both directions be computed in one pass over `zip(node.outputs, candidate.outputs)`?

For example:
```python
                type_orders_1, type_orders_2 = zip(
                    *(
                        (
                            node_out.type.is_super(candidate_out.type),
                            candidate_out.type.is_super(node_out.type),
                        )
                        for node_out, candidate_out in zip(
                            node.outputs, candidate.outputs
                        )
                    )
                )
                # Check if outputs of node are all super types of the candidate outputs
                if not all(type_orders_1):
                    # If not, check if reverse is true
                    if not all(type_orders_2):
                        continue
```
ricardoV94(2022-05-12 21:13:15):Ahh I thought you meant the recalling `process_node` logic. 

I actually don't know how often we have this situation of mergeable nodes with different output types. I assumed it was rather low since it only showed in one very specific PyMC test so far, so that's why I kept the checks separately

Also this way it short circuits with `all`
brandonwillard(2022-05-12 21:28:25):First off, I don't know if those two distinct `all` conditions are even necessary.  It's possible that one of the `is_super` calls can be short-circuited (e.g. using `or` between the two) in a single pass through the pairs that also subsumes the two `if` conditions.


ricardoV94(2022-05-13 06:02:42):I need to know which of the two is True, one is to proceed as usual, the other is to reverse things. In any case I am much more worried about the performance penalty of recalling `process_node` than the second loop of type comparisons.

Calling `process_node` again will end up repeating the outer loop comparison for example, but with node and candidates reversed. The reason I kept it dumb is that I didn't want to duplicate the logic inside this branch (and have to keep maintaining both in the future)
ricardoV94(2022-05-13 07:26:00):A quick benchmark suggests the zip option to be about 2x slower:

```python
import aesara.tensor as at

def separate_loop(vars1, vars2):
    type_orders1 = (
        var1.type.is_super(var2.type)
        for var1, var2 in zip(vars1, vars2)
    )
    type_orders2 = (
        var2.type.is_super(var1.type)
        for var2, var1 in zip(vars2, vars1)
    )
    return all(type_orders1) or all(type_orders2)

def symultaneous_loop(vars1, vars2):
    type_orders_1, type_orders_2 = zip(
        *(
            (
                var1.type.is_super(var2.type),
                var2.type.is_super(var1.type),
            )
            for var1, var2 in zip(vars1, vars2)
        )
    )

    return all(type_orders_1) or all(type_orders_2)


type1 = at.TensorType("float64", shape=(1, 2, None, 3))
type2 = at.TensorType("float64", shape=(1, 2, None, None))
vars1 = (type1(), type1(), type1())
vars2 = (type2(), type2(), type2())

%timeit separate_loop(vars1, vars2)
%timeit separate_loop(vars2, vars1)
%timeit symultaneous_loop(vars1, vars2)
%timeit symultaneous_loop(vars2, vars1)
# 4.59 µs ± 31.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)
# 3.51 µs ± 6.79 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)
# 6.42 µs ± 130 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)
# 6.36 µs ± 32.7 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)
```
brandonwillard(2022-05-13 14:52:55):That says that the worst case scenario for that one rewrite is nearly negligable.  Now, try it with different orders and varying numbers of types to compare, etc.
brandonwillard(2022-05-13 14:58:22):Also, that was an example to illustrate what I was talking about, and not an explicit implementation recommendation.

The real point is that we shouldn't need to loop through and compare those twice.
ricardoV94(2022-05-13 15:37:47):I don't see how the zip case can ever be faster from those results. Also I don't quite get what is the performance concern with the second separate loop.
ricardoV94(2022-05-13 15:38:27):I did try different numbers and orders, this was actually one of the more comparable cases
brandonwillard(2022-05-13 16:25:23):> I don't see how the zip case can ever be faster from those results. Also I don't quite get what is the performance concern with the second separate loop.

The `zip` _isn't_ faster, and it wasn't supposed to be; it was meant to illustrate that both conditions can be handled with a single pass.

The approach I'm talking about simplifies the two conditions using a single pass over the pairs.  The example I gave doesn't actually do that, though.  It only illustrates how both conditions are related via a single pass.  The next step involves some consideration of what `is_super` and those two conditions are attempting to do.
brandonwillard(2022-05-13 19:37:57):Recall that `TensorType.is_super` is supposed to be a partial ordering.  More specifically, it serves the purpose of `>=` between types, which is something like a product order.  (I believe the docstring for `Type.is_super` says `>`, so those are out of sync.)

With that in mind, it looks like your first condition checks that not all `a_n >= b_n` (i.e. that at least one instance of `a_n < b_n` is true) across all `n`, and the second condition checks that not all `b_n >= a_n` are true (i.e. that at least one instance of `b_n < a_n` is true).

In this setting, the general assumption is that the `Type`s are equivalent and only have differences in their static shape specificity, and that we can reduce the problem to a few simple cases:
1. all of the `candidate` outputs' static shapes are equal or more specific than `node`'s,
2. all of the `candidate` outputs' static shapes are less specific than `node`'s,
3. or some mix of the two.

The implicit `else` branch of the first `if` condition appears to handle 1. (i.e. queue the replacement), the implicit `else` branch of the second `if` handles 2. (i.e. attempt to queue the reverse replacement), and the first branch of the second `if` handles 3. (i.e. ignore the replacement).

The formulation of these three cases makes it seem like a second `is_super` pass is necessary, as well as the more costly recursive calls to `process_node`; however, the basic idea is that we want to replace less specific `Type`s with more specific&mdash;yet equivalent&mdash;ones (i.e. when `a <= b` use `Type` `a` instead of `b`).  

Without these case constraints we could apply the `<=`/`is_super` ordering across each pair of corresponding outputs (only _once_) and pick the "smallest"/most specific `Type` in each case.  If we could do this, then we would also avoid discarding candidates at this stage (which we never did previously) and the aforementioned performance concerns.

The apparent challenge here is that the most informative set of output `Type`s for the corresponding `Op` and inputs might not already exist as an `Apply` node in the graph (i.e. it is neither `node` nor `candidate`); however, nothing is preventing us from creating and using such an `Apply` node.

In other words, if we track signatures comprised of `Op`, inputs, and outputs (with the "smallest" `Type`s) tuples&mdash;instead of effectively just the first two&mdash;we could consistently narrow the `Type`s in a graph and only perform a single `min`-based pass over node outputs and avoid `MergeFeature.process_node` recursion.


twiecki(2022-05-31 22:18:50):I think in general, fixing the blas implementation is a bit heavy-handed. Ideally there are instructions on which to use, even though it's a bit confusing for users.

What are these env files actually used for? We have better ones in the conda-forge repo where mkl was already removed.
dgerlanc(2022-05-31 22:29:14):> I think in general, fixing the blas implementation is a bit heavy-handed. Ideally there are instructions on which to use, even though it's a bit confusing for users. What are these env files actually used for? We have better ones in the conda-forge repo where mkl was already removed.

The `environment.yml` and `environment-arm.yml` can be used to create a dev environment on x86 or Arm. In theory, users should not be getting involved with these and just including `aesara` and their desired `BLAS` implementation in their project `environment.yml`.

We should indicate in the documentation that these are to be used if you want to contribute to `aesara`, not simply use it as a library.

brandonwillard(2022-06-04 21:23:21):```suggestion
```

I believe these are all covered by `pre-commit` now.
codecov[bot](2022-05-17 22:21:55):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/962?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#962](https://codecov.io/gh/aesara-devs/aesara/pull/962?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a14497c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e2e2366850664544030c1fd769d6b6d25b9d9bba?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e2e2366) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/962/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/962?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #962   +/-   ##
=======================================
  Coverage   79.20%   79.20%           
=======================================
  Files         152      152           
  Lines       47937    47937           
  Branches    10916    10916           
=======================================
  Hits        37967    37967           
  Misses       7464     7464           
  Partials     2506     2506           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/962?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/scan\_perform\_ext.py](https://codecov.io/gh/aesara-devs/aesara/pull/962/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vc2Nhbl9wZXJmb3JtX2V4dC5weQ==) | `81.25% <100.00%> (ø)` | |

codecov[bot](2022-05-18 01:19:59):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/963?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#963](https://codecov.io/gh/aesara-devs/aesara/pull/963?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (708a57e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c028e387e8fc47be55c18f4df4a10b29ab85a527?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c028e38) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/963/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/963?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #963      +/-   ##
==========================================
- Coverage   79.25%   79.25%   -0.01%     
==========================================
  Files         152      152              
  Lines       47939    47948       +9     
  Branches    10916    10918       +2     
==========================================
+ Hits        37996    38003       +7     
- Misses       7429     7430       +1     
- Partials     2514     2515       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/963?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/963/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `85.48% <100.00%> (+0.08%)` | :arrow_up: |
| [aesara/scan/scan\_perform\_ext.py](https://codecov.io/gh/aesara-devs/aesara/pull/963/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vc2Nhbl9wZXJmb3JtX2V4dC5weQ==) | `81.25% <100.00%> (ø)` | |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/963/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `89.24% <0.00%> (-0.20%)` | :arrow_down: |

codecov[bot](2022-05-20 04:18:08):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/968?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#968](https://codecov.io/gh/aesara-devs/aesara/pull/968?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (573d403) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/104dc0379c3585a0bc8ebb87f61f2ae38d101b83?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (104dc03) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/968/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/968?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #968   +/-   ##
=======================================
  Coverage   79.20%   79.20%           
=======================================
  Files         152      152           
  Lines       47937    47939    +2     
  Branches    10916    10916           
=======================================
+ Hits        37967    37969    +2     
  Misses       7464     7464           
  Partials     2506     2506           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/968?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/968/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.27% <100.00%> (+0.05%)` | :arrow_up: |

codecov[bot](2022-05-21 02:05:00):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/969?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#969](https://codecov.io/gh/aesara-devs/aesara/pull/969?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f739a92) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/9ac18dc156a4e4a0ef0b12f441b8e26c429675be?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9ac18dc) will **increase** coverage by `0.05%`.
> The diff coverage is `41.05%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/969/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/969?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #969      +/-   ##
==========================================
+ Coverage   79.20%   79.25%   +0.05%     
==========================================
  Files         152      152              
  Lines       47939    47939              
  Branches    10916    10916              
==========================================
+ Hits        37969    37996      +27     
+ Misses       7464     7429      -35     
- Partials     2506     2514       +8     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/969?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/969/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `54.57% <41.05%> (+2.16%)` | :arrow_up: |

ricardoV94(2022-05-22 05:14:23):I am not sure we want this in the README. Right now the README is pretty succint and I think that's a good thing.

Perhaps under Aesara at a glance? https://aesara.readthedocs.io/en/latest/introduction.html

https://github.com/aesara-devs/aesara/blob/main/doc/introduction.rst

We already had a section on the difference between Aesara and Numpy 

It might also require some small tuning to not sound out of place or repetitive in the context of the rest of the docs.
codecov[bot](2022-05-31 21:54:57):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/972?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#972](https://codecov.io/gh/aesara-devs/aesara/pull/972?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (40d12ff) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ead2c02b098f5fb520853be5cca278bbbdc8ec02?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (ead2c02) will **decrease** coverage by `0.02%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 40d12ff differs from pull request most recent head 2bef458. Consider uploading reports for the commit 2bef458 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/972/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/972?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main     #972      +/-   ##
==========================================
- Coverage   74.75%   74.73%   -0.02%     
==========================================
  Files         194      194              
  Lines       49896    49880      -16     
  Branches    10553    10550       -3     
==========================================
- Hits        37298    37278      -20     
- Misses      10270    10273       +3     
- Partials     2328     2329       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/972?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/972?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `52.32% <100.00%> (+0.27%)` | :arrow_up: |
| [aesara/tensor/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/972?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9fX2luaXRfXy5weQ==) | `95.55% <0.00%> (-0.75%)` | :arrow_down: |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/972?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.42% <0.00%> (-0.27%)` | :arrow_down: |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/972?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.04% <0.00%> (-0.13%)` | :arrow_down: |
| [aesara/scalar/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/972?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9fX2luaXRfXy5weQ==) | `100.00% <0.00%> (ø)` | |

</details>
twiecki(2022-05-31 22:21:30):We do this by default in pymc: https://github.com/pymc-devs/pymc/blob/main/pymc/__init__.py#L36 it should be pretty safe to just always do that.
dgerlanc(2022-05-31 22:39:23):I was going to make this a bit fancier by checking the existing flags `gcc_cxxflags` on a platform-dependent basis, and only adding the compatibility flags as necessary. I don't think it's an issue to have duplicate flags (if the user has already included them), but does add a bit of noise.

Still need to add tests to `aesara` whether we use the `pymc` code @twiecki linked to or my implementation. @brandonwillard Any preference? 
brandonwillard(2022-06-03 17:00:16):In general, we should try to apply OS/arch-specific settings only to said OS/arch's, whenever possible.
dgerlanc(2022-12-07 21:35:36):I should probably check that we're on macOS _and_ using the C backend. This probably doesn't apply with the `numba` backend.

Also, I need to add a test case for this.

@brandonwillard Is there an existing location for config-related test cases?
brandonwillard(2022-12-08 01:50:44):> @brandonwillard Is there an existing location for config-related test cases?

`tests.test_config` is for the general configuration classes, but there really isn't a place for testing specific config settings.  Since this config setting is specific to C compilation, `tests.link.c.test_basic` is probably a suitable place.
brandonwillard(2022-06-10 09:35:06):We can do this check without splitting, no?
brandonwillard(2022-12-01 19:18:49):```suggestion
    if sys.platform == "darwin":
        # Resolves C++11 narrowing error on Mac OS
        # https://github.com/aesara-devs/aesara/issues/127
        no_cpp_narrowing_flag = "-Wno-c++11-narrowing"
        if no_cpp_narrowing_flag not in config.gcc__cxxflags:
            config.gcc__cxxflags += " " + no_cpp_narrowing_flag
```
brandonwillard(2022-06-03 05:15:28):Thanks for the PR!  This looks good; the only thing we need to consider before merging is if there's a small(er) subset of the tests that we can run.  (We can always go forward with this and find a subset later, though.)
brandonwillard(2022-06-03 05:34:26):I just added some missing `os` entries to the `include`s, so you'll need to rebase locally if you want to make changes.
tal66(2022-06-04 18:11:40):I think it has to do with the change in `multiprocessing` on 3.8: "On macOS, the spawn start method is now the default. The fork start method should be considered unsafe as it can lead to crashes of the subprocess."

With something like this the tests will pass on mac:

```
@pytest.mark.skipif(
    sys.platform == "darwin" and sys.version_info > (3, 7),
    reason="multiprocessing change in 3.8",
)
def test_cache_race_condition():
...
```

or since i'm not an expert on this, maybe you want to do something else?
brandonwillard(2022-06-04 18:40:07):> With something like this the tests will pass on mac:
> 
> ```
> @pytest.mark.skipif(
>     sys.platform == "darwin" and sys.version_info > (3, 7),
>     reason="multiprocessing change in 3.8",
> )
> def test_cache_race_condition():
> ...
> ```
> 
> or since i'm not an expert on this, maybe you want to do something else?

That's perfectly fine; those tests really only need to run on one system.
codecov[bot](2022-06-04 23:28:29):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/974?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#974](https://codecov.io/gh/aesara-devs/aesara/pull/974?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (64b4672) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c028e387e8fc47be55c18f4df4a10b29ab85a527?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c028e38) will **increase** coverage by `0.07%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/974/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/974?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #974      +/-   ##
==========================================
+ Coverage   79.25%   79.33%   +0.07%     
==========================================
  Files         152      152              
  Lines       47939    47941       +2     
  Branches    10916    10916              
==========================================
+ Hits        37996    38033      +37     
+ Misses       7429     7400      -29     
+ Partials     2514     2508       -6     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/974?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/974/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.00% <0.00%> (-0.27%)` | :arrow_down: |
| [aesara/link/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/974/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `61.12% <0.00%> (+0.24%)` | :arrow_up: |
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/974/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `55.85% <0.00%> (+1.28%)` | :arrow_up: |
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/974/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `68.04% <0.00%> (+1.65%)` | :arrow_up: |
| [aesara/tensor/blas\_headers.py](https://codecov.io/gh/aesara-devs/aesara/pull/974/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ibGFzX2hlYWRlcnMucHk=) | `66.66% <0.00%> (+16.12%)` | :arrow_up: |

codecov[bot](2022-06-03 08:11:50):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/975?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#975](https://codecov.io/gh/aesara-devs/aesara/pull/975?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d2ed945) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c028e387e8fc47be55c18f4df4a10b29ab85a527?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c028e38) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/975/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/975?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #975   +/-   ##
=======================================
  Coverage   79.25%   79.25%           
=======================================
  Files         152      152           
  Lines       47939    47941    +2     
  Branches    10916    10916           
=======================================
+ Hits        37996    37998    +2     
  Misses       7429     7429           
  Partials     2514     2514           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/975?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/975/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `61.12% <100.00%> (+0.24%)` | :arrow_up: |

codecov[bot](2022-06-04 10:39:45):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/976?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#976](https://codecov.io/gh/aesara-devs/aesara/pull/976?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4382bed) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/45642af39c2521661b2bef477dd861f2e502e73a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (45642af) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/976/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/976?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #976      +/-   ##
==========================================
- Coverage   79.25%   79.25%   -0.01%     
==========================================
  Files         152      152              
  Lines       47941    47941              
  Branches    10916    10916              
==========================================
- Hits        37998    37996       -2     
- Misses       7429     7432       +3     
+ Partials     2514     2513       -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/976?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/976/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `77.21% <100.00%> (ø)` | |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/976/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.00% <0.00%> (-0.27%)` | :arrow_down: |

codecov[bot](2022-06-04 07:03:23):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/977?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#977](https://codecov.io/gh/aesara-devs/aesara/pull/977?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8de6e93) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/45642af39c2521661b2bef477dd861f2e502e73a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (45642af) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/977/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/977?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #977   +/-   ##
=======================================
  Coverage   79.25%   79.25%           
=======================================
  Files         152      152           
  Lines       47941    47941           
  Branches    10916    10916           
=======================================
  Hits        37998    37998           
  Misses       7429     7429           
  Partials     2514     2514           
```



brandonwillard(2022-06-04 09:10:33):~Is the fix specifically in versioneer-0.23.dev0?~  Nevermind, your original comment indicates that it is.
mgorny(2022-06-04 10:26:08):Yes, it hasn't made it into a proper release yet.
codecov[bot](2022-06-06 22:36:15):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/980?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#980](https://codecov.io/gh/aesara-devs/aesara/pull/980?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7a5b404) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/be222f0caac7f3346b2f5882c35cd03f778adecc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (be222f0) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 7a5b404 differs from pull request most recent head 6f3fadf. Consider uploading reports for the commit 6f3fadf to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/980/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/980?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #980      +/-   ##
==========================================
- Coverage   79.25%   79.25%   -0.01%     
==========================================
  Files         152      152              
  Lines       47882    47965      +83     
  Branches    10909    10923      +14     
==========================================
+ Hits        37949    38014      +65     
- Misses       7436     7445       +9     
- Partials     2497     2506       +9     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/980?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/980/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `55.56% <100.00%> (+1.22%)` | :arrow_up: |
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/980/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `72.11% <0.00%> (-2.66%)` | :arrow_down: |
| [aesara/link/numba/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/980/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvdGVuc29yX2Jhc2ljLnB5) | `97.93% <0.00%> (-2.07%)` | :arrow_down: |
| [aesara/tensor/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/980/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaGFwZS5weQ==) | `90.93% <0.00%> (-1.29%)` | :arrow_down: |
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/980/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `86.32% <0.00%> (-0.80%)` | :arrow_down: |
| [aesara/link/c/lazylinker\_c.py](https://codecov.io/gh/aesara-devs/aesara/pull/980/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9sYXp5bGlua2VyX2MucHk=) | `65.95% <0.00%> (-0.71%)` | :arrow_down: |
| [aesara/link/c/cutils.py](https://codecov.io/gh/aesara-devs/aesara/pull/980/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jdXRpbHMucHk=) | `68.18% <0.00%> (-0.71%)` | :arrow_down: |
| [aesara/sparse/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/980/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `82.47% <0.00%> (-0.43%)` | :arrow_down: |
| [aesara/graph/features.py](https://codecov.io/gh/aesara-devs/aesara/pull/980/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `64.59% <0.00%> (-0.10%)` | :arrow_down: |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/980/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `89.72% <0.00%> (-0.08%)` | :arrow_down: |
| ... and [20 more](https://codecov.io/gh/aesara-devs/aesara/pull/980/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

maresb(2022-06-07 07:50:42):The CI looks good so far (except for that expected coverage error).

I don't get the impression that any of the CI tests are using Windows runners, and I don't have Windows myself, so I would be grateful if someone with Windows could check to see if my changes successfully suppress the warnings.
brandonwillard(2022-06-07 09:54:57):> Additionally, I have no means of testing this locally since I don't have Windows.

[As mentioned in #974](https://github.com/aesara-devs/aesara/pull/974#pullrequestreview-996023394), we should probably use this as an opportunity to set up a Windows image run that performs these tests and limited subset of others.
maresb(2022-06-10 22:14:37):I just tested this patch using Conda-Forge infrastructure, and unfortunately [it doesn't work](https://dev.azure.com/conda-forge/feedstock-builds/_build/results?buildId=520194&view=logs&jobId=9a864fd9-6c8f-52ca-79ce-2aa6dca1a1de). :disappointed: 

Maybe it will work with stdout instead of stderr...
maresb(2022-06-10 22:40:31):Oh, interesting... on Linux it goes to stderr, but on Windows it goes to stdout.

It should work if I filter both...
maresb(2022-06-11 22:15:24):I managed to test this on the Conda-Forge infrastructure which includes Windows, and it appears to be working.

Passing tests: https://github.com/conda-forge/aesara-feedstock/pull/72
Xfailing tests: https://github.com/conda-forge/aesara-feedstock/pull/73

I'm ready for the next round of review. My thoughts:

* I put the test inside `test_printing.py`. I'm not sure if this is the correct place.
* Due to both Windows weirdness and some internals of Numpy, this ended up being more complicated than I originally expected. I'm curious if anyone has ideas to simplify things.

Thanks so much @lucianopaz for writing the tricky part of the test for me!
maresb(2022-06-15 12:19:11):> We can add a Windows VM run to our test config and use that to test this, as well. See my comment [here](https://github.com/aesara-devs/aesara/pull/974#pullrequestreview-996023394).

Sounds good, but I'm a bit confused about the conclusion...

It seems that the Windows VM isn't ready yet. Did you want me to look into something particular? Or are you implying that we should wait on that before merging?

Thanks for the review!!! I'll try to get to this in a few days.
brandonwillard(2022-06-15 12:32:48):> It seems that the Windows VM isn't ready yet. Did you want me to look into something particular? Or are you implying that we should wait on that before merging?

We can add a `matrix.include` entry that runs a Windows image/VM in this PR.
maresb(2022-06-15 14:02:16):@brandonwillard, is 8f362616ec176003afde27d740d99bc5b6c412f7 what you had in mind? If so, could you please approve the CI so we can see what happens? :eyes:
brandonwillard(2022-06-15 14:12:12):> @brandonwillard, is [8f36261](https://github.com/aesara-devs/aesara/commit/8f362616ec176003afde27d740d99bc5b6c412f7) what you had in mind? If so, could you please approve the CI so we can see what happens? 👀

Yes.
maresb(2022-06-15 14:20:34):> First-time contributors need a maintainer to approve running workflows. 
maresb(2022-06-18 15:03:22):Seems the tests are running in Linux instead of Windows. I still need to look into this...
maresb(2022-06-19 10:47:23):The CI was running my tests on Ubuntu instead of Windows because I forgot to set the `runs-on:` variable to `${{ matrix.os }}`. Fixed in https://github.com/aesara-devs/aesara/pull/980/commits/d38b753d5829450f9ab2de1151b9e0362a3ac47f.
maresb(2022-06-19 10:48:24):I believe I have addressed all the issues from the previous review round. Any further thoughts?

Also, could you please approve the CI run?
maresb(2022-06-20 18:53:30):@brandonwillard let's see if e3d2feb fixes it
maresb(2022-06-20 22:38:07):The scope of this PR is only https://github.com/conda-forge/aesara-feedstock/issues/54, not #1005. (This PR got erroneously linked as closing the follow-up issue #1005.)

Setting a default for `matrix.os` didn't work, so I added a `matrix.os` entry for each include.

@brandonwillard could you please restart CI?
brandonwillard(2022-06-21 01:23:14):> The scope of this PR is only [conda-forge/aesara-feedstock#54](https://github.com/conda-forge/aesara-feedstock/issues/54), not #1005. (This PR got erroneously linked as closing the follow-up issue #1005.)

This PR should necessarily address #1005.
brandonwillard(2022-06-21 01:35:34):It looks like the shell scripting for the Windows cases needs to be adjusted.
maresb(2022-06-24 21:09:20):I thought this PR would be a quick UX win for the poor souls stuck on Windows. My current proposal accomplishes my goal while making minimal changes to the existing behavior.

> It looks like the shell scripting for the Windows cases needs to be adjusted.

It's very hard for me to add Windows to your CI testing framework given that I barely know Powershell (or whatever the CI runs with `windows-latest`), I don't have Windows myself, and I'm disallowed from triggering the CI myself as a "first-time contributor."

> This PR should necessarily address https://github.com/aesara-devs/aesara/issues/1005.

Fixing this seems to me like a major change to existing behavior which would reenable currently disabled Numpy warnings not only for Aesara itself, but also for all downstream projects which import Aesara.

Given how both of these points drastically expand the scope of this PR, I'm going to stop here on this one. I hope someone else can take it over, but if not, feel free to close it.

Moving on, I'm actually quite interested in delving into the mathematical side. @brandonwillard, I see that you have some interesting [blog posts](https://brandonwillard.github.io/dynamic-linear-models-in-theano.html) regarding DLMs and such, and you had the hope that with PyMC4+Aesara that this stuff would become easier. I was wondering if you have any examples which are working on the current stack? Or is this still work-in-progress?
maresb(2022-07-02 10:46:24):In order to leave this PR in a clean state, I split out my CI attempt into #1029. Now all checks should be green.

## Status update:

In order to make this easier for someone else to pick up, I want to summarize the current state.

The goal of this PR is to solve https://github.com/conda-forge/aesara-feedstock/issues/54. This PR solves that goal, and adds the tests to prove it.

At the moment none of the CI tests for this repo run under Windows (#1028). However Conda-Forge does have a working Windows CI, and I have used that to confirm that these tests pass under Windows with my changes to `cmodule.py` (https://github.com/conda-forge/aesara-feedstock/pull/72), and fail without those changes (https://github.com/conda-forge/aesara-feedstock/pull/73).

@brandonwillard has made it clear that this PR won't be merged until #1005 and #1028 are solved. I'm stopping because in my view, those issues are independent of this PR, and I don't feel like I can effectively solve either of them.

Please let me know if there's anything further I can do to help here, short of solving #1005 or #1028.
brandonwillard(2022-07-12 21:08:04):Now that https://github.com/aesara-devs/aesara/pull/1050 is merged, let's see if the issue is still present.
maresb(2022-07-13 14:23:52):Based on the tests at https://github.com/conda-forge/aesara-feedstock/pull/92, it looks like that resolved this issue. Thanks @brandonwillard for the superior solution! Closing this one.
lucianopaz(2022-06-07 09:24:20):Should the previous value be cached and then reset after exiting the context?
lucianopaz(2022-06-07 09:28:03):Are we sure that numpy is printing to stderr and not to stdout?
maresb(2022-06-07 09:58:26):I was wondering this myself. I think that resetting after exiting the context would be cleaner, but for the first step I wanted to preserve the current behavior of the code. (The code currently leaves this set to `0`, so resetting it could lead to other previously suppressed warnings resurfacing.)
maresb(2022-06-07 09:58:48):I'm pretty sure, but not 100%. That's why I need someone with Windows to test this! :joy: 
brandonwillard(2022-06-15 10:51:45):A `contextmanager` isn't necessary if it's only going to be used once/here (i.e. the `yield` can be replaced with the `numpy.distutils.system_info.get_info` call).
brandonwillard(2022-06-15 10:55:35):I'm not entirely clear on what's happening here, but it reminds me that we should only suppress specific output messages and not all of them.
brandonwillard(2022-06-15 10:59:25):This isn't the correct test module for this test.  There should be a `test_cmodule` that corresponds to the `cmodule` into which this new functionality was added; that's where we need the test(s) to be.
brandonwillard(2022-06-15 11:03:54):There's [a `pytest` fixture for catching stdin and stdout](https://docs.pytest.org/en/7.1.x/how-to/capture-stdout-stderr.html).
maresb(2022-06-15 12:11:01):Hmm, taking a look at this with fresh eyes I see that it's indeed confusing.

To make the comment more accurate, I think I should say

> In case there are messages ~printed to~ **captured from** both stdout and stderr, they may be **print** incorrectly interspersed. But in the normal case there should be no output to either, so this should not pose a problem.

I should probably also rename `sio` → `captured_buffer` and `file` → `print_dest`...
maresb(2022-06-15 12:11:41):I agree the `contextmanager` is unnecessary. From a style perspective I find that it helps me to distinguish between the relevant action and scaffolding: I'm saying "here's the `filter_numpy_missing_executable_warnings` context for the following command" and then I run that command with the context manager.

But if you prefer without the `contextmanager` that's easy to fix.
maresb(2022-06-19 10:32:46):This is a really good point, but

* fixing this would require changing the existing behavior, which risks breaking lots of other stuff, and
* I don't need to touch this line in order to filter these "Could not locate executable" warnings.

Thus I propose we keep the code as-is for now, and address this in a subsequent PR. So that we don't forget, I opened https://github.com/aesara-devs/aesara/issues/1005.
maresb(2022-06-19 10:33:59):Indeed, see https://github.com/aesara-devs/aesara/pull/980#issuecomment-1152783194.

Now fixed by filtering both stdout and stderr.
maresb(2022-06-19 10:40:08):I eliminated the `contextmanager` in d48f056f17d41a1e77426e05857f509cf32e6363. (It can be easily reverted in case you change your mind.)
maresb(2022-06-19 10:42:27):> I'm not entirely clear on what's happening here

Does 0b89bc462d29308b23c823a8edb1b685e420347d help? I improved the variable names and comments.

> it reminds me that we should only suppress specific output messages and not all of them.

Agreed, I opened https://github.com/aesara-devs/aesara/issues/1005 for this
maresb(2022-06-19 10:43:40):Thanks for the tip! Implemented in 6c6f615a27c5b15473be67aa356ef5a8f0a07b07. That's a nice improvement.
codecov[bot](2022-06-07 23:34:12):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/981?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#981](https://codecov.io/gh/aesara-devs/aesara/pull/981?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3c7591b) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/8559ae44a21e687f342931b254ac7fab61ccfc5c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8559ae4) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/981/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/981?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #981      +/-   ##
==========================================
+ Coverage   79.25%   79.26%   +0.01%     
==========================================
  Files         152      152              
  Lines       47941    47927      -14     
  Branches    10916    10912       -4     
==========================================
- Hits        37996    37990       -6     
+ Misses       7432     7429       -3     
+ Partials     2513     2508       -5     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/981?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.50% <100.00%> (+0.33%)` | :arrow_up: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `88.93% <100.00%> (-0.02%)` | :arrow_down: |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `90.78% <0.00%> (+0.12%)` | :arrow_up: |
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `86.32% <0.00%> (+0.26%)` | :arrow_up: |

ricardoV94(2022-06-08 07:41:12):Why didn't the elemwise version work?
brandonwillard(2022-06-08 11:24:52):There were some tests that checked to make sure no `Elemwise` `Op`s were present in their graphs, and they mostly made sense.

More importantly, there's an unnecessary sort of circular dependency when `Elemwise.infer_shape` produces `Elemwise`s.  The things we're iterating over are necessarily `tuple`s, so introducing `Elemwise` is a bit of overkill.

The only thing I don't particularly like about this scalar `Op` approach is that the graphs it produces are less likely to be covered by rewrites, because most of our rewrites are implemented for `Elemwise` `Op`s and not their corresponding scalar `Op`s.  Regardless, this is a more _general_ issue that should be addressed separately, if/when need be&mdash;and there doesn't appear to be a need right now (per the tests, at least).
codecov[bot](2022-06-07 10:24:03):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/983?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#983](https://codecov.io/gh/aesara-devs/aesara/pull/983?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (653700a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c09d92b13e8534ebd89147a9db1fa6a84c4408ce?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c09d92b) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/983/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/983?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #983   +/-   ##
=======================================
  Coverage   79.25%   79.25%           
=======================================
  Files         152      152           
  Lines       47941    47941           
  Branches    10916    10916           
=======================================
  Hits        37996    37996           
  Misses       7432     7432           
  Partials     2513     2513           
```



ricardoV94(2022-06-08 12:42:06):Converting to draft because of the performance concerns that this fix entails
brandonwillard(2022-06-08 14:34:23):> Perhaps it makes sense to allow this type of constraint at the type level, more in line with the old `broadcastable` flag? Type shapes would then not only be limited to `(None, int)`, but also allow for a special flag `-1` or `"not1"` to indicate this dimension can be anything other than `1`.

The old `TensorType.broadcastable` is still present in exactly the same form as it was.  The only differences might be in how we want to use and interpret it.

I made a remark about this (i.e. the "old") interpretation of `TensorType.broadcastable` recently [here](https://github.com/aesara-devs/aesara/pull/981/files#diff-c8a387500e93e9fbc298ed8a0d0aded0feab10fe294ce3d1aadd4ee301f46bb7R2919-R2923)&mdash;among other places/times throughout our work.  The problem with the "old"/strict interpretation is that it puts extra pressure on `Op.make_node` implementations to both infer and be accurate about the broadcast patterns/static shape information in the `TensorType`s it creates.  We've been dealing with the issues and limitations that arise from this interpretation all throughout this work.

The type constraints you mention are viable, but also really do require a much more clearly defined and implemented type system, and, ultimately, some basic constraint logic.  My push for the broad use of miniKanren is&mdash;in part&mdash;motivated by the availability (and compartmentalization) of such features.

Regardless, why can't we broadcast all the inputs to the GEMM `Op` in the rewrite (or even in the `Op.make_node` or `Op.perform`/`Op.c_code` methods)?
ricardoV94(2022-06-08 19:48:11): > Regardless, why can't we broadcast all the inputs to the GEMM `Op` in the rewrite (or even in the `Op.make_node` or `Op.perform`/`Op.c_code` methods)?

I'll explore that. I didn't plan to mess with blas related Ops, but here we are ^^

In any case I feel that supporting (and enforcing) non size1 type shape might come in handy in a couple of places.
ricardoV94(2022-06-09 14:52:09):Broadcasting the matrix inputs was not so hard in the end. Doing that now
codecov[bot](2022-06-10 10:29:30):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/986?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#986](https://codecov.io/gh/aesara-devs/aesara/pull/986?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (47cc1f0) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/064e72f4c37d069dbb5e829e38cf196d32c89fa8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (064e72f) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/986/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/986?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #986   +/-   ##
=======================================
  Coverage   79.26%   79.26%           
=======================================
  Files         152      152           
  Lines       47927    47932    +5     
  Branches    10912    10913    +1     
=======================================
+ Hits        37990    37995    +5     
  Misses       7429     7429           
  Partials     2508     2508           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/986?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/986/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ibGFzLnB5) | `79.71% <100.00%> (+0.09%)` | :arrow_up: |

ricardoV94(2022-06-10 10:56:52):Tests are passing
ricardoV94(2022-06-13 17:17:11):I did some sanity checks and I am more confident that I didn't screw up anything :)
ricardoV94(2022-06-11 08:32:21):I don't think I want to do this. Instead I want to get rid of the new broadcasted array when I am done.
ricardoV94(2022-06-11 08:32:36):Same here
ricardoV94(2022-06-11 08:56:15):Only alter this for Gemm Op, no idea if other Gemm-related Ops are doing the right thing!
codecov[bot](2022-06-13 19:03:52):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/993?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#993](https://codecov.io/gh/aesara-devs/aesara/pull/993?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e8c8a75) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/a3dc0a72632088da8e758cd8f5009e571698a2f4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a3dc0a7) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/993/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/993?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #993   +/-   ##
=======================================
  Coverage   79.26%   79.27%           
=======================================
  Files         152      152           
  Lines       47932    47928    -4     
  Branches    10913    10913           
=======================================
- Hits        37995    37993    -2     
+ Misses       7429     7428    -1     
+ Partials     2508     2507    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/993?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/993/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `78.97% <100.00%> (+0.10%)` | :arrow_up: |

kylejcaron(2022-06-14 02:42:12):quick callout: `pre-commit` had the following failure unrelated to any code introduced in my PR so I uninstalled `pre-commit` and proceeded to commit my work

```
mypy.....................................................................Failed
- hook id: mypy
- exit code: 1

aesara/scan/op.py:3431: error: Unused "type: ignore" comment
Found 1 error in 1 file (checked 2 source files)
```
ricardoV94(2022-06-14 06:14:34):> quick callout: `pre-commit` had the following failure unrelated to any code introduced in my PR so I uninstalled `pre-commit` and proceeded to commit my work
> 
> ```
> mypy.....................................................................Failed
> - hook id: mypy
> - exit code: 1
> 
> aesara/scan/op.py:3431: error: Unused "type: ignore" comment
> Found 1 error in 1 file (checked 2 source files)
> ```

I have seen that can sometimes happen when the pre-commit runs only on the modified files but goes away when it runs on all files. It's annoying though
codecov[bot](2022-06-14 10:17:02):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/994?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#994](https://codecov.io/gh/aesara-devs/aesara/pull/994?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f3c430a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2ccd9cca2ab2d5143872d3c975fd08b7da027419?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2ccd9cc) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/994/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/994?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main     #994   +/-   ##
=======================================
  Coverage   79.23%   79.23%           
=======================================
  Files         152      152           
  Lines       47946    47951    +5     
  Branches    10916    10916           
=======================================
+ Hits        37990    37995    +5     
  Misses       7448     7448           
  Partials     2508     2508           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/994?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/994/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.89% <100.00%> (+0.15%)` | :arrow_up: |

ricardoV94(2022-06-14 14:34:01):Looks good, can you squash the three commits into a single one?
kylejcaron(2022-06-14 14:54:30):> Looks good, can you squash the three commits into a single one?

just squashed into 1 commit!
ricardoV94(2022-06-15 16:22:46):Thanks @kylejcaron!
kylejcaron(2022-06-15 16:41:26):> Thanks @kylejcaron!

Thanks for the help on this! 
ricardoV94(2022-06-14 06:12:27):Can you use a vector and test values on the two branches of the `where` statement?
kylejcaron(2022-06-14 14:27:50):updated! Now test 2 values on each branch of the `where` statement
codecov[bot](2022-06-14 20:23:24):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/995?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#995](https://codecov.io/gh/aesara-devs/aesara/pull/995?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a2e37ab) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/174117f9b0a2c1ddb13e6244bbb31d6c75c12245?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (174117f) will **decrease** coverage by `0.00%`.
> The diff coverage is `93.75%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/995/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/995?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #995      +/-   ##
==========================================
- Coverage   79.27%   79.26%   -0.01%     
==========================================
  Files         152      152              
  Lines       47937    47932       -5     
  Branches    10915    10914       -1     
==========================================
- Hits        38000    37995       -5     
  Misses       7429     7429              
  Partials     2508     2508              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/995?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/995/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdHlwZS5weQ==) | `90.62% <93.33%> (-0.47%)` | :arrow_down: |
| [aesara/graph/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/995/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3R5cGUucHk=) | `93.75% <100.00%> (ø)` | |

codecov[bot](2022-06-15 12:59:59):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/997?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#997](https://codecov.io/gh/aesara-devs/aesara/pull/997?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9a7d014) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/4a539e4781a55c659d6b62696a2ba45b67d43f2a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4a539e4) will **decrease** coverage by `0.05%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/997/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/997?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main     #997      +/-   ##
==========================================
- Coverage   79.27%   79.21%   -0.06%     
==========================================
  Files         152      152              
  Lines       47940    47940              
  Branches    10914    10914              
==========================================
- Hits        38003    37977      -26     
- Misses       7430     7457      +27     
+ Partials     2507     2506       -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/997?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/997/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `49.52% <0.00%> (-2.84%)` | :arrow_down: |
| [aesara/link/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/997/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `85.00% <0.00%> (-0.84%)` | :arrow_down: |

brandonwillard(2022-06-22 19:44:21):> I went deeper into the code and removed overcomplicated caching for compiled modules. This enabled threadsafety feature that was assumed by the old implementation (but had bugs).

This PR needs to first address exactly what's overcomplicated about the caching and what's not thread safe&mdash;and why&mdash;then we can understand what the changes are trying to accomplish and what sort of tests are needed.  Doing this exclusively via code diffs involves too much guessing&mdash;unless the changes and/or context are very straightforward, or  the changes are accompanied by incisive testing.

Likewise, when requirements/constraints are overlooked one can easily draw the erroneous conclusion that something is overcomplicated, so it's best that we try to catch as much of this as possible at a high-level _before_ substantial changes and review work are involved.


> This enabled threadsafety feature that was assumed by the old implementation (but had bugs).

What thread safety feature(s)?  I don't recall any parts of the codebase being explicitly thread-safe.  There is some sense of "**process** safety", and that's what the current locking logic addresses.  Aside from that, core elements in the codebase are fundamentally **not** thread-safe, due to their inherent mutability, use of global variables, etc.  That said, it's absolutely necessary that we clearly specify exactly what we want to be thread-safe, so that we can determine whether or not it's reasonable/possible and what sort of changes are entailed.

It would also help to link to the [relevant discussion](https://github.com/aesara-devs/aesara/discussions/1007), so that anyone interested will know to look there (and vice-versa).
ferrine(2022-06-22 20:50:37):I've added a description about the motivation, @brandonwillard, I'll look into new problems in the CI later
ferrine(2022-06-23 11:20:57):@brandonwillard I'm very confused about this test:
https://github.com/aesara-devs/aesara/blob/d6858fe23af29cb28379723175895c9d02fdca51/tests/link/c/test_cmodule.py#L51
It is counterintuitive. It claims for 2 different functions with different c code there should be only one module which does not make sense to me. I would expect the opposite: Such functions are always recompiled.
ferrine(2022-06-23 11:23:21):Git blame reveals that is was a known issue due to cache issues
https://github.com/aesara-devs/aesara/commit/a74a472c992c6e5b6ad2aff0bc245945b505db80
> Add a test for the c_code cache that show a current problematic behavior
ferrine(2022-06-23 11:37:24):From this I conclude that I should fix that test to test the opposite
ferrine(2022-06-23 17:45:19):I could not reproduce this error
https://github.com/aesara-devs/aesara/runs/7028054038?check_suite_focus=true#step:6:1769
ferrine(2022-06-23 18:07:52):@brandonwillard maybe you have any idea how tracebacks may be connected to c compilation?
brandonwillard(2022-06-23 20:35:25):> @brandonwillard I'm very confused about this test:
> 
> https://github.com/aesara-devs/aesara/blob/d6858fe23af29cb28379723175895c9d02fdca51/tests/link/c/test_cmodule.py#L51
> 
> 
> It is counterintuitive. It claims for 2 different functions with different c code there should be only one module which does not make sense to me. I would expect the opposite: Such functions are always recompiled.

Yes, this looks to be a fairly poorly described and implemented test.  

First, its comments seems to be inquiring about graph equivalence and its relationship to C code generation, which is a much more general question that should've been very clearly answered before implementing any of the material purportedly being tested.

Second, the name of the test, `test_inter_process_cache`, implies that its testing some sort of caching between processes; however, it does nothing of the sort.

Third, for what its comments describe, the actual test doesn't vary anything between the two equivalent graphs it tests (e.g. no changes in input variable names, or anything else that should be ignored by the relevant definition(s) of graph equivalence).

Fourth, whatever it's attempting to test (i.e. the exact functions/methods) are not clear, and neither are the conclusions that can be drawn from the `MyOp.nb_called` `assert`ions.  My guess is that this is supposed to test some aspect of `ModuleCache` at a high-level, but that would never prevent one from explicitly checking the state of the `ModuleCache` instance and directly confirming whatever it is that's being tested.

These are the kinds of things we need to refactor, and they often implicitly tell us what sorts of tests are missing and sorely needed. 
brandonwillard(2022-06-23 20:38:40):> @brandonwillard maybe you have any idea how tracebacks may be connected to c compilation?

Tracebacks are manually tracked via the `Variable.tag` attributes.  That information is added to `Variable.tag` by `Variable` constructors and during rewrites using the `add_tag_trace` function.  They're also carried around by cloning operations when `Variable.tag` values are copied.
dgerlanc(2022-07-07 01:25:56):We may want to look into an existing library for the cache that supports various backends already, e.g. in `dogpile.cache` (by Michael Bayer, creator of SQLAlchemy), which provides an existing [example]((https://dogpilecache.sqlalchemy.org/en/latest/core_usage.html#:~:text=Lock%20with%20Dogpile-,%C2%B6,-The%20examples%20thus)) of what we want to do.

Also, `numba` uses a custom caching system as described [here](https://numba.readthedocs.io/en/stable/developer/caching.html#the-implementation). This is probably closest to what we're doing.

These are not Python-specific but more general implementations for `gcc`/`clang`:

- https://ccache.dev/
- https://github.com/mozilla/sccache#storage-options

brandonwillard(2022-06-22 19:52:37):There should be no need to remove existing tests.
ferrine(2022-06-22 20:49:30):This test is about the functionality that is no longer required
brandonwillard(2022-06-23 20:50:16):This is actually a critical step in writing good stand-alone tests of any cache-related functionality.  Without a clear, independent cache to work with during testing, many of our tests will be coupled and depend on the order in which they're run.

While some tests might not be affected by the initial state of the cache, it can be very difficult to actually tell when that's true, so, as a general rule, we should default to the use of test-specific caches.

We need to fix this in our old tests and avoid introducing the problem into our new tests.
brandonwillard(2022-06-23 20:56:13):This fixture is a great start to the necessary improvements mentioned earlier, but it doesn't account for all the objects affected by the initial, immutable compilation directory setting.  For instance, notice that we had to patch `aesara.link.c.cmodule._module_cache` as well.  That should probably be included here, too.

There may be a few other things that still need to be patched, but this fixture should at least start with everything of which we're currently aware.
ferrine(2022-06-24 06:03:23):This property is removed in this PR I do not rely on python cache since everything is on disk deterministically 
ferrine(2022-06-24 06:33:59):This is not required anymore 
brandonwillard(2022-07-07 00:17:50):We still want to be know that things work as expected in the situation constructed by the test.
ferrine(2022-07-07 09:32:24):This test tested code that was deleted in this PR. The code was legacy workaround to maintain recursive lock used for thread safety. This is no longer needed and was refactored away. There is no code for this test anymore.
codecov[bot](2022-06-24 10:46:35):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1010?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1010](https://codecov.io/gh/aesara-devs/aesara/pull/1010?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7e24441) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/d6858fe23af29cb28379723175895c9d02fdca51?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d6858fe) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1010/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1010?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1010   +/-   ##
=======================================
  Coverage   79.23%   79.23%           
=======================================
  Files         152      152           
  Lines       47952    47952           
  Branches    10917    10917           
=======================================
  Hits        37994    37994           
  Misses       7449     7449           
  Partials     2509     2509           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1010?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1010/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `86.59% <100.00%> (ø)` | |

ricardoV94(2022-06-24 11:19:14):Sounds reasonable, as otherwise there would be little use to `itypes` going forward. Do you mind adding a test?
aseyboldt(2022-06-24 12:51:06):I included a test as well
ricardoV94(2022-06-24 13:09:01):Concurrency issues! I pushed a change because I thought I would be faster than you xD. Feel free to override
aseyboldt(2022-06-24 13:10:51)::D
I like yours better
ricardoV94(2022-06-24 13:16:45):Hmm... actually I see that this is about broadcastable specifically... if you had passed a `x = at.TensorType(dtype="float64", shape=(2,))("x")` that would have been fine.

I still think this is a better default (a user can exclude subtypes in `made_node` if they want), but we should be aware that this changes from how things used to work.
ricardoV94(2022-06-24 13:23:00):Finished messing with the test. I change the comment to clarify what exactly this is testing (which was not working before)
aseyboldt(2022-06-24 13:25:06):Well, it only allows some things to work that I think always should have worked.
If I write an op that accepts `TensorType(f64, (None,))`, that means that it should work for all 1d f64 inputs, *including the case where that has length 1*. It doesn't make any sense to say I accept `TensorType(f64, (None,))`, but not `TensorType(f64, (1,))`, because the second is a subtype of the first.
ricardoV94(2022-06-24 13:29:09):Yeah, we are on the same page. 

It's just that we transitioned quite recently away from the broadcastable thing. Theano used to distinguish between `shape==1` vs `shape!=1` (quite weirdly, as Elemwise was actually the unofficial broadcastable type checker in most cases), and now we allow for any shape subtype, but no longer have a way to specify `shape!=1`. Just wanted to highlight that.

Some work regarding this is still being done in #915 
aseyboldt(2022-06-24 13:32:06):But was there at any point a way to say shape != 1? I think there was only `shape == 1` or `any length`, was there?
Why would you even want to specify "any shape but 1"?
I always read `broadcastable is False` as "this is not guaranteed to be broadcastable"
ricardoV94(2022-06-24 13:38:39):> But was there at any point a way to say shape != 1? I think there was only `shape == 1` or `any length`, was there? Why would you even want to specify "any shape but 1"? I always read `broadcastable is False` as "this is not guaranteed to be broadcastable"

`broadcastable=False` was supposed to mean `shape!=1`, so that this used to fail before:
```python
import theano.tensor as tt

x = tt.vector("x")
y = tt.vector("y")
z = x + y
z.eval({x: [5], y: [5, 5, 5, 5]})
```
ricardoV94(2022-06-24 13:41:00):Again, it was implicitly done by other `Op`s like `Elemwise` but was a de facto assumption throughout the library.
aseyboldt(2022-06-24 13:44:13):I guess it doesn't matter now, but I don't think this means `shape != 1`.
I think the logic was "only allow broadcasting if we *know from the types* that the shape is 1". So if broadcasting is False, we say "this could be any shape, could be 1 or could be larger, so we don't allow broadcasting".
ricardoV94(2022-06-24 12:59:15):Perhaps we should assert something about the output, otherwise looks good
aseyboldt(2022-06-24 13:05:54):done
codecov[bot](2022-07-01 19:19:52):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1016?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1016](https://codecov.io/gh/aesara-devs/aesara/pull/1016?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4a4dc3d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/7f8af9bc28755d93dca3afff2534a8a5f5ecbd80?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7f8af9b) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1016/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1016?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1016   +/-   ##
=======================================
  Coverage   79.26%   79.26%           
=======================================
  Files         152      152           
  Lines       47873    47873           
  Branches    10908    10908           
=======================================
  Hits        37947    37947           
  Misses       7429     7429           
  Partials     2497     2497           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1016?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1016/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `86.59% <ø> (ø)` | |

brandonwillard(2022-07-03 20:44:53):The type should be `StorageCellType` or something similar to `List[Any]`.  In general, that value is definitively a `list` type and its contents could theoretically be anything, although&mdash;as of now&mdash;it should be limited to `ndarray`s, `slice`s, `None`s, and perhaps a couple more types.  It ultimately depends on the `Type`s that are in use, which is why `Any` is the most appropropriate value type.
michaelosthege(2022-07-04 06:54:15):@brandonwillard, the documentation strongly recommends to use `Sequence` instead of `List` for the function arguments. See https://mypy.readthedocs.io/en/stable/common_issues.html#invariance-vs-covariance

```suggestion
        inputs: Sequence[Any],
```
michaelosthege(2022-07-04 06:54:28):```suggestion
```
brandonwillard(2022-07-04 16:45:58):That recommendation only applies if mutability&mdash;or any other interface elements particular to the mutable type in question&mdash;isn't relevant.  In this case, I don't believe that mutability is relevant to the `inputs` argument like **it is for the outputs storage argument that comes next**.  Due to cases like the latter, don't take that recommendation too far.

Otherwise, this is what I said:

> The type should be `StorageCellType` or **something similar to `List[Any]`**.

`Sequence[Any]` is something similar to `List[Any]`, in this case.
michaelosthege(2022-07-04 18:02:29):...so do you want to apply my suggestions here?
Otherwise please feel free to edit, or apply whatever you think is the right call. Just be aware that `List` might provoke a mypy warning.
brandonwillard(2022-07-04 18:38:54):Sorry, yeah, that seems like the best choice, at least until we figure out if there's a way to narrow down the actual contents of the `Sequence` (e.g. via parameterization).  In other words, it would be _ideal_ to have that argument typed as `Sequence[np.ndarray]` when it has those values.
michaelosthege(2022-07-07 06:28:44):@brandonwillard could you please accept and merge the suggestion that you think is the right call? This is a two line change at most and it's taking a toll to come back to such a PR over and over again.
thanks
guyrt(2022-06-27 22:31:21):I narrowed test scope and resolved comment above. 


> Also you seem to be reverting previous unrelated changes by accident. That has to be fixed.

I don't see this in my diff or commit list. Can you clarify what you are seeing? Note that I'll squash prior to merge to clean up the "merged master" commit I just introduced. 
ricardoV94(2022-06-28 06:33:29): > I don't see this in my diff or commit list. Can you clarify what you are seeing? Note that I'll squash prior to merge to clean up the "merged master" commit I just introduced. 

I don't see any changes being reverted anymore, so that's fine.

Do you mind squashing the commits and pushing so there is only one commit in your PR? We usually merge by rebase and not squash so the PR must already be "clean"
guyrt(2022-06-28 16:08:23):rebased
codecov[bot](2022-06-28 18:10:20):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1018?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1018](https://codecov.io/gh/aesara-devs/aesara/pull/1018?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (83ec7ea) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/7393b7441601eaad98bc0cb494aa8fba2ea4bf6a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7393b74) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1018/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1018?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1018   +/-   ##
=======================================
  Coverage   79.23%   79.23%           
=======================================
  Files         152      152           
  Lines       47952    47954    +2     
  Branches    10917    10918    +1     
=======================================
+ Hits        37994    37996    +2     
  Misses       7449     7449           
  Partials     2509     2509           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1018?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1018/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `90.67% <100.00%> (+0.01%)` | :arrow_up: |

guyrt(2022-06-29 15:06:59):Fixed docs and rebased
ricardoV94(2022-06-30 05:22:16):Thanks @guyrt 
ricardoV94(2022-06-27 19:02:37):We don't need to compile a aesara function and test the output here as that should be covered by pre-existing tests. It should be enough to check the dtype(s) of the output of `identity_like`
guyrt(2022-06-27 22:42:36):I see - was missing the other tests for this. 
ricardoV94(2022-06-28 06:30:37):Shall we give it a more specific name?

```suggestion
def test_identity_like_dtype():
```

ricardoV94(2022-06-28 17:03:37):```suggestion
    
    Parameters
```

ricardoV94(2022-06-28 17:03:49):```suggestion
    
    Returns
```

guyrt(2022-06-28 19:32:44):fixed
ricardoV94(2022-06-28 19:38:57):This seems to be repeating the text above and not properly formatted.
jessegrabowski(2022-07-01 04:57:24):While the direct solver can be written elegantly using only aesara Ops, I still think there is value-add to handing the forward part to scipy. As noted in the scipy documentation, the direct solver scales very poorly with the size of the matrices. Even at N=50, the bilinear solver is two orders of magnitude faster than the direct solver (180 ms vs <1ms). The memory footprint is also much lower, because a Kronecker product is not required. Here is a graph comparing performance of the Op from this PR, using the bilinear solver, to the pure aesara direct solver. 

![image](https://user-images.githubusercontent.com/48652735/176824342-f591a684-6ac0-43da-b430-cef2ea161852.png)

Sizes larger than N=250 could not be allocated in memory for the direct solution. In the application I am thinking about (kalman filtering), this routine would need to be called once per logp evaluation, so speed is important.

I realize this is an unfair comparison, and that the real question is whether the bilinear solver could be directly implemented in Aesara. It would first require an implementation of the Schur decomposition (imaginary part is discarded, so this is not an issue), then an implementation of a Sylvester equation solver, which would in turn require an efficient solution routine like trsyl, otherwise we run into the direct solver problem again. Or, decide that having access to trsyl is good, so wrap the scipy sylvester equation solver, then call that from a semi-pure aesara implementation of solve_lyapunov, but this strikes me as arbitrary, especially if the schur decomposition ended up as a scipy wrapper as well. 
brandonwillard(2022-07-01 05:55:01):> I realize this is an unfair comparison, and that the real question is whether the bilinear solver could be directly implemented in Aesara.

There's no need to justify the inclusion of a relevant SciPy feature, and, yes, the question is whether or not the other estimation approach that is supported by SciPy can be implemented with existing Aesara `Op`s, like the direct approach.

If need be, a custom `Op` can always be used for only the other approach, but it's more important that we adequately assess an Aesara-based implementation and determine what's missing, if anything.
brandonwillard(2022-07-01 06:11:03):For reference, the other discrete approach (i.e. "bilinear") appears to be [here](https://github.com/scipy/scipy/blob/8a64c938ddf1ae4c02a08d2c5e38daeb8d061d38/scipy/linalg/_solvers.py#L219), and, from a quick glance, it looks to be well covered by existing `Op`s.
jessegrabowski(2022-07-01 06:14:05):The relevant lines I see as being not covered are here, inside the `solve_continuous_lyapunov` function:

```python
    # Compute the Schur decomposition form of a
    r, u = schur(a, output='real')

    # Construct f = u'*q*u
    f = u.conj().T.dot(q.dot(u))

    # Call the Sylvester equation solver
    trsyl = get_lapack_funcs('trsyl', (r, f))
````
brandonwillard(2022-07-01 06:18:02):> It would first require an implementation of the Schur decomposition (imaginary part is discarded, so this is not an issue), then an implementation of a Sylvester equation solver, which would in turn require an efficient solution routine like trsyl, otherwise we run into the direct solver problem again. Or, decide that having access to trsyl is good, so wrap the scipy sylvester equation solver, then call that from a semi-pure aesara implementation of solve_lyapunov, but this strikes me as arbitrary, especially if the schur decomposition ended up as a scipy wrapper as well.

Yes, a Shur decomposition and `trsyl`  `Op` are needed, and why would adding them be "arbitrary"?
jessegrabowski(2022-07-01 06:32:48):"Arbitrary" here refers to the criterion for writing an Op wrapper around a given scipy function, but the word was chosen more out of my ignorance of the criterion than any capriciousness (or lack thereof) in the criterion itself.  What I am gleaning is that the ideal criteria for a custom scipy Op is, "as close to LAPACK as possible"? One could get more atomic than that, but I doubt it would be productive.

I am also struggling with the merits and demerits of having analytic gradient expressions. My naive perspective is that, even if we had implementations of schur and trsyl, it would still be better to manually implement the lyapunov ops, because we have an analytic expression of the reverse-mode gradients. We relieve the system of the need to compute these, and side-step any potential issues arising from approximation.
brandonwillard(2022-07-03 00:24:11):> "Arbitrary" here refers to the criterion for writing an Op wrapper around a given scipy function, but the word was chosen more out of my ignorance of the criterion than any capriciousness (or lack thereof) in the criterion itself. What I am gleaning is that the ideal criteria for a custom scipy Op is, "as close to LAPACK as possible"? One could get more atomic than that, but I doubt it would be productive.

Ah, yeah, the "depth" at which something should be implemented is always measured relative to its complexity and ancillary benefits. As you've noticed, this library's current "depth" is somewhere around the BLAS/LAPACK level. As a result, the complexity of implementing something at that level is relatively low, and there are multiple examples illustrating how to implement and test such `Op`s (e.g. see `aesara.tensor.blas`). These examples make good use of the old C backend, so they also serve as good templates for making performant `Op`s.

Those new `Op`s can also be implemented in exactly the same way as the current ones in this PR (e.g. without C, Numba, and/or JAX implementations). We can always return to them later and add other backend implementations, if need be. Likewise, their gradients shouldn't be any more complicated than the current ones.

Work at this "depth" provides two important ancillary benefits that are exclusive to this approach:

-   two new low-level `Op` implementations that can be used to implement other "compound" functions, and
-   access to optimizations on the intermediate `Op`s used by the compound implementations.

Our ability to reason about expressions and manipulate them in an automated fashion is what allows many of the performance and stability optimizations that set this project apart from plain NumPy and SciPy&#x2013;as well as other tensor libraries. Redundant, high-level `Op`s that combine the functionality of existing `Op`s effectively hide information from Aesara that could be used to perform optimizations.

Consider an `Op` that is equivalent to $f(x) = \exp(x^2)$. If a graph is compiled that represents the expression <span>$\log \exp(x^2)$</span>, then Aesara is able to "analytically" reduce that expression to $x^2$ using one simple rewrite. If a computationally equivalent graph representing <span>$\log f(x)$</span> is compiled, then an unnecessary exponential function evaluation is required.

One could construct new rewrites explicitly for the redundant `Op`, but those rewrites would be redundant themselves and only add to the development and testing effort. The same goes for transpilation support (e.g. C, Numba, JAX).

In this situation, redundancy begets redundancy, so, unless the benefits of introducing redundancy in a particular instance are very clear, we must avoid it altogether.

> I am also struggling with the merits and demerits of having analytic gradient expressions. My naive perspective is that, even if we had implementations of schur and trsyl, it would still be better to manually implement the lyapunov ops, because we have an analytic expression of the reverse-mode gradients. We relieve the system of the need to compute these, and side-step any potential issues arising from approximation.

First, we always have "analytic" expression for the gradients. Numerical approximations are not produced or used by Aesara.

Second, the `Op.grad` implementations you've already produced necessarily contain the same gradient "information" that would go into Schur and `trsyl` `Op.grad` implementations. More specifically, since `trsyl` is a solver for the Sylvester equations, you already have its `Op.grad` implementation in the paper referenced to produce the implementations for the Lyapunov `Op`s.

The `Op.grad` implementation for the Schur decomposition is perhaps the only open question.

jessegrabowski(2022-07-03 07:45:20):Thanks for laying it out clearly. I'm clearly not getting it through my head that aesara straddles the line between sympy and numpy. I appreciate your patience as I learn all this.

I'm happy to work on `trsyl`. As you note, the reverse-mode equations are already worked out in the same paper I'm already working from. I can submit it as a separate PR.  I also have an `Op` for `solve_discrete_are` worked out, but this uses `scipy.linalg.ordqz`, `scipy.linalg.qr`, and `scipy.linalg.lu`,  which would all need to be implemented to avoid just directly wrapping `scipy.linalg.solve_discrete_are`. QR decomposition is in `tensor.nlinalg` but it doesn't appear to have gradients implemented.

I spent this morning doing some research regarding the schur decomposition, and it seems it would be non-trivial to implement. I couldn't find an implementation in TF, Torch, or mxnet. I dug around on google scholar and found implementations for gradients of SVD, QR, and LU decompositions ([here](https://arxiv.org/pdf/2009.10071.pdf) and [here](https://arxiv.org/pdf/1710.08717.pdf)), but not Schur or QZ.

If anyone has a reference, I'm happy to work on figuring an implementation out. But, as I'm sure you can tell from repeated interactions with me, I'm already extremely out of my depth here. Trying to work out the gradients myself from first principals is not likely to happen.
brandonwillard(2022-07-03 18:15:19):> I can submit it as a separate PR.

If we can't get a gradient for the Schur decomposition in place, then a separate PR for `trsyl` would be the next best thing.  

> I also have an `Op` for `solve_discrete_are` worked out, but this uses `scipy.linalg.ordqz`, `scipy.linalg.qr`, and `scipy.linalg.lu`, which would all need to be implemented to avoid just directly wrapping `scipy.linalg.solve_discrete_are`. QR decomposition is in `tensor.nlinalg` but it doesn't appear to have gradients implemented.

Same with those other decompositions (e.g. QR, LU) with known gradients; having `Op`s and/or `Op.grad` implementations for those would be a big help.

In the end, we really only need to do this sort of due diligence to determine exactly why something can/can't reasonably be done at a lower `Op` level.  Knowing specifically that the roadblock is a derivative for the Schur decomposition is incredibly useful, because we can&mdash;among other things&mdash;create an issue for it and explicitly track its relevance to other `Op` implementations and, ideally, gather information and make progress on that issue over time.




> I spent this morning doing some research regarding the schur decomposition, and it seems it would be non-trivial to implement. I couldn't find an implementation in TF, Torch, or mxnet. I dug around on google scholar and found implementations for gradients of SVD, QR, and LU decompositions ([here](https://arxiv.org/pdf/2009.10071.pdf) and [here](https://arxiv.org/pdf/1710.08717.pdf)), but not Schur or QZ.
> 
> If anyone has a reference, I'm happy to work on figuring an implementation out. But, as I'm sure you can tell from repeated interactions with me, I'm already extremely out of my depth here. Trying to work out the gradients myself from first principals is not likely to happen.

It wouldn't surprise me if someone hasn't published a solution to this one, but my first thought is that the approach would be very similar to the one for QR, since the two decompositions are related.  If I recall, a common QR algorithm essentially computes the Schur decomposition, but there might be some subtleties involving real/imaginary results.
twiecki(2022-07-03 18:50:53):@brandonwillard But if we can't easily get Schur, we can't get lyapunov that way, no? If that's the case it sounds like this PR would be our next best bet.
brandonwillard(2022-07-03 19:01:54):> @brandonwillard But if we can't easily get Schur, we can't get lyapunov that way, no? If that's the case it sounds like this PR would be our next best bet.

Yes, that's part of what I was saying.  There are other options we could consider, though.  For instance, it might be straightforward to identify `Schur` + `trsyl` combinations and provide gradients for those&mdash;or something similar.
codecov[bot](2022-07-03 21:57:20):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1020?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1020](https://codecov.io/gh/aesara-devs/aesara/pull/1020?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (4fc0168) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/14c394d0c62d7435395acea1e7fed55105c16984?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (14c394d) will **increase** coverage by `4.99%`.
> The diff coverage is `81.15%`.

> :exclamation: Current head 4fc0168 differs from pull request most recent head 48965b2. Consider uploading reports for the commit 48965b2 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1020/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1020?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1020      +/-   ##
==========================================
+ Coverage   74.10%   79.09%   +4.99%     
==========================================
  Files         174      173       -1     
  Lines       48673    48554     -119     
  Branches    10373    10972     +599     
==========================================
+ Hits        36067    38405    +2338     
+ Misses      10315     7652    -2663     
- Partials     2291     2497     +206     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1020?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/slinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9zbGluYWxnLnB5) | `83.79% <81.15%> (-0.61%)` | :arrow_down: |
| [aesara/link/jax/dispatch/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/1020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL2V4dHJhX29wcy5weQ==) | `86.56% <0.00%> (-8.96%)` | :arrow_down: |
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `81.57% <0.00%> (-2.83%)` | :arrow_down: |
| [aesara/link/vm.py](https://codecov.io/gh/aesara-devs/aesara/pull/1020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `90.26% <0.00%> (-2.30%)` | :arrow_down: |
| [aesara/link/numba/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2NhbGFyLnB5) | `86.00% <0.00%> (-1.42%)` | :arrow_down: |
| [aesara/graph/fg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `87.39% <0.00%> (-1.15%)` | :arrow_down: |
| [aesara/compile/function/pfunc.py](https://codecov.io/gh/aesara-devs/aesara/pull/1020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `81.40% <0.00%> (-1.01%)` | :arrow_down: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/1020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `49.76% <0.00%> (-0.65%)` | :arrow_down: |
| [aesara/tensor/rewriting/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/1020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvc2hhcGUucHk=) | `79.33% <0.00%> (-0.59%)` | :arrow_down: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/1020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `89.09% <0.00%> (-0.39%)` | :arrow_down: |
| ... and [59 more](https://codecov.io/gh/aesara-devs/aesara/pull/1020/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
aseyboldt(2022-07-04 13:55:24):I hope I don't seem like a broken record when saying this: But implementing the backward mode gradient operations through eg the schur decomposition isn't ideal.

Let's say we want to compute `Lyapunov(A=2 * eye, Q=-eye)`, so we have $AXA^H - X + Q = 0$ or $X = \frac{1}{3}I$.

For a given $\bar{X} $ the values for $\bar{Q} $ and $\bar{A} $ are also nicely defined, and the formulas from the paper work just fine.

But if we compute the gradients through the schur decomposition we run into trouble:

First we can notice that because $A $ is symmetric, the schur decomposition coincides with the eigenvalue decomposition. But because the eigenvalues of $A $ are not unique, the function that maps $A $ to its eigenvalue decomposition isn't a well defined function in the mathematical sense, because any orthogonal matrix $Q $ can be used as eigenvector matrix. In the forward code this isn't an issue, because we don't care which $Q $ we get as long as it is orthogonal. However, the backward operation of the eigenvalue decomposition isn't well defined because of this, which shows up in the formulas for $\bar{A} $ as a division by zero:

![image](https://user-images.githubusercontent.com/1882397/177166148-4261cedd-fda6-4f74-8292-987eec33eee2.png)

This makes me think that the Op as it is implemented in this PR is actually better than a rewrite that uses the schur decomposition and its gradient directly. It is reasonably stable, tested and produces values and gradients if they are well defined (ie $\lambda_i(A) \lambda_j(A) \neq 1$), and this is probably also true for most other implicitly defined functions of this kind (eg sylvester, riccatti etc). I for one would really like to have this functionality in aesara.

But if we want to have an even better solution, maybe we could get the best of both worlds: If we have forward ops for schur, trsyl, qz etc, we could write the lyaponov et al Ops as `aesara.compile.builders.OpFromGraph` or something similar. This way we could tell `aesara` more details about what's happening in the solver code and also optimize those expressions (for instance the current PR would compute the schur decomposition of $A$ twice, once in the forward code and once in the gradient, and aesara should be smart enough to notice this and remove the redundant work from the graph during common sub-expression elimination). We could still provide custom code for the gradients though. I'd be a disappointed though if this was a strict requirement and because nobody wants to do the work (and I think it is quite a bit of work) and because of that we don't get this functionality at all.
brandonwillard(2022-07-05 19:09:14):> I hope I don't seem like a broken record when saying this: But implementing the backward mode gradient operations through eg the schur decomposition isn't ideal.

I've still yet to see how "expanding" the Lyapunov-solving function/operator into its constituent parts <span class="underline">wouldn't</span> be ideal. In other words, if it could be done, why wouldn't it be better than the un-expanded version?

So far, in this discussion, the only concrete issue I've noticed is whether or not one component of the expanded version could be implemented without more effort than it's theoretically worth, but that's distinct from the question(s) "Is it possible or ideal?".

Aside from that, I've already given a directly relevant example demonstrating how such expansions can be at least as performant as their un-expanded counterparts (i.e. the discrete "direct" case).  **Just so we're clear, the take-away from that example is that we should dispatch based on the method, so that the expanded version is used when possible, and, if need be, we can have an un-expanded `Op` for just the continuous case.**

> Let's say we want to compute `Lyapunov(A=2 * eye, Q=-eye)`, so we have AXAH−X+Q=0 or X=13I. 
> For a givenX¯ the values forQ¯ andA¯ are also nicely defined, and the formulas from the paper work just fine. 
> But if we compute the gradients through the schur decomposition we run into trouble:

It sounds like you're restating one of the potential challenges behind implementing a complete gradient for the constituent Schur step, and not necessarily making a statement about the performance or quality of an expanded approach&#x2013;both of which are important aspects of an ideal/not ideal approach.

Before going further, it should be clear that we're talking about one very specific "degenerate" set of inputs for which we have not even performed any sort of analysis for the un-expanded case (i.e. current implementation)&#x2013;let alone a relevant comparative analysis with an expanded implementation of any form.

That said, this is really a constrained issue, and one that might be surmountable in any number of ways&#x2013;some of which could have everything/nothing to do with the specifics of an `Op.grad` implementation or rewriting.

This is especially relevant given that the provided example equates eigen-decompositions with Schur decompositions, which may be true in some cases at a high-level, but not true in terms of the solution-generating processes and their choices regarding mathematically ambiguous mappings, subgradients, removable singularities, etc.

If we want consistent gradient implementations, then we need to be consistent
with these solution-generating processes and the definitions they use&mdash;not just
the high-level mathematical definitions.

> First we can notice that becauseA is symmetric, the schur decomposition coincides with the eigenvalue decomposition. But because the eigenvalues ofA are not unique, the function that mapsA to its eigenvalue decomposition isn't a well defined function in the mathematical sense, because any orthogonal matrixQ can be used as eigenvector matrix.

The actual function mapping $A$ to its eigen-decomposition (i.e. `numpy.linalg.eigh`) appears to be well defined. You demonstrated this by showing that it chooses the Euclidean basis vectors by returning an identity matrix. Sure, the very broadly defined mathematical definition of an eigen-decomposition doesn't specify as much, but that's because it doesn't particularly serve the mathematical definition to do so. Nevertheless, the actual mappings we use are well-defined enough to specify valid eigenvectors, so that point is moot.

More importantly, consider a simpler function with a similar issue: the absolute value.

```python
import numpy as np
import aesara
import aesara.tensor as at


x = at.scalar("x")
y = at.abs(x)

y_fn = aesara.function([x], [y, aesara.grad(y, x)])

y_fn(0.0)
# [array(0.), array(0.)]
```

As with the absolute value, it's possible to choose a specific subgradient value. I don't see why the same isn't possible/reasonable here.

> In the forward code this isn't an issue, because we don't care whichQ we get as long as it is orthogonal. However, the backward operation of the eigenvalue decomposition isn't well defined because of this, which shows up in the formulas for A¯ as a division by zero:

I keep noticing mention of "forward" and "backward", but I don't yet see why these distinctions are relevant, so I can't address those aspects at the moment.

Regardless, let's see if we can quickly do something along the lines of the subgradient approach mentioned above, but for this exact example.

Currently, our `Eigh.grad` is an awkward implementation that is driven by an `EighGrad` `Op`, making it an un-expanded implementation (i.e. its gradient doesn't generate an Aesara graph comprised of other, "lower-level" `Op`s).

For comparison, we'll simply add the implementation from Giles, Mike. 2008. “An Extended Collection of Matrix Derivative Results for Forward and Reverse Mode Automatic Differentiation.” to a custom `Eig` class. (Since `Eig`, and most other `Op`s in `aesara.tensor.linalg`, don't have `Op.grad` implementations, this can also serve as a test/example of some sorely needed additions.)

```python
import numpy as np
import aesara
import aesara.tensor as at
from aesara.tensor.nlinalg import Eig, _zero_disconnected


A = at.matrix("A")

d, U = at.linalg.eigh(A)
eigh_fn = aesara.function([A], [d, U, at.grad(U.sum(), A)])


class MyEig(Eig):
    def L_op(
        self,
        inputs,
        outputs,
        g_outputs,
    ):
        (A,) = inputs
        d, U = outputs
        dd, dU = _zero_disconnected([d, U], g_outputs)
        dD = at.diag(dd)

        # Compute all differences of the elements in `d`, i.e. `d[j] - d[i]`
        E = at.outer(at.ones(d.shape[0]), d) - d[..., None]

        # This is what the current version of `Eigh.grad` effectively does:
        # from aesara.tensor.subtensor import set_subtensor
        # non_diag_mask = tm.invert(at.eye(E.shape[0], dtype="bool"))
        # F = at.zeros_like(E)
        # F = set_subtensor(F[non_diag_mask], tm.reciprocal(E[non_diag_mask]))

        # This replaces all `d[j] == d[i]` with 0, instead of just the diagonal
        # of E
        F = at.switch(at.neq(E, 0.0), at.reciprocal(E), 0.0)

        # TODO: This inverse probably isn't good.
        dA = at.linalg.inv(U).T @ (dD + F * U.T @ dU) @ U.T
        return [dA]


myeig = MyEig()

d_2, U_2 = myeig(A)
myeig_fn = aesara.function([A], [d_2, U_2, at.grad(U_2.sum(), A)])


rng = np.random.default_rng(2039)
A_val = rng.normal(size=(3, 3))
A_val = A_val.T @ A_val
A_val = A_val + A_val.T

d_val, U_val, dU_sum_val = eigh_fn(A_val)
d_val, U_val, dU_sum_val
# [array([ 1.60014544,  6.97086699, 10.3810344 ]),
#  array([[ 0.60544104, -0.06363686,  0.79334198],
#         [-0.65820594, -0.6004278 ,  0.4541491 ],
#         [-0.44744396,  0.7971429 ,  0.40540979]]),
#  array([[-0.0907336 ,  0.        ,  0.        ],
#         [ 0.32372021,  0.14822482,  0.        ],
#         [-0.30375936,  0.0925893 , -0.05749122]])]

# Rough check of the eigen-decomposition
np.allclose(U_val * d_val @ np.linalg.inv(U_val), A_val)
# True

%timeit eigh_fn(A_val)
# 148 µs ± 4.18 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)

d_2_val, U_2_val, dU_sum_2_val = myeig_fn(A_val)
d_2_val, U_2_val, dU_sum_2_val
# [array([ 1.60014544, 10.3810344 ,  6.97086699]),
#  array([[-0.60544104,  0.79334198, -0.06363686],
#         [ 0.65820594,  0.4541491 , -0.6004278 ],
#         [ 0.44744396,  0.40540979,  0.7971429 ]]),
#  array([[-0.03123565, -0.12868062, -0.41475149],
#         [ 0.01339011,  0.05516287,  0.17779589],
#         [-0.01800771, -0.07418586, -0.23910902]])]

np.allclose(U_2_val * d_2_val @ np.linalg.inv(U_2_val), A_val)
# True

%timeit myeig_fn(A_val)
# 97.6 µs ± 1.3 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)

# Perform some rough checks to make sure that the new gradient implementation
# for our new `Op` is working:
aesara.gradient.verify_grad(lambda A: myeig(A)[0].sum(), [A_val], rng=rng)

# How about at a (previously) "undefined" input?
aesara.gradient.verify_grad(lambda A: myeig(A)[0].sum(), [np.eye(3)], rng=rng)

# What about `Eigh`?
aesara.gradient.verify_grad(lambda A: at.linalg.eigh(A)[0].sum(), [A_val], rng=rng)

aesara.gradient.verify_grad(lambda A: at.linalg.eigh(A)[0].sum(), [np.eye(3)], rng=rng)
# ValueError: ('abs_err not finite', 'array([[nan,  0.,  0.],\n       [nan, nan,  0.],\n       [nan, nan, nan]])')

# Now, try the degenerate case:
eigh_fn(np.eye(3))
# [array([1., 1., 1.]),
#  array([[1., 0., 0.],
#         [0., 1., 0.],
#         [0., 0., 1.]]),
#  array([[nan,  0.,  0.],
#         [nan, nan,  0.],
#         [nan, nan, nan]])]

myeig_fn(np.eye(3))
# [array([1., 1., 1.]),
#  array([[1., 0., 0.],
#         [0., 1., 0.],
#         [0., 0., 1.]]),
#  array([[0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.]])]
```

Like the expanded discrete Lyapunov example, this expanded gradient implementation is at least as performant as a comparable non-expanded implementation.

While the comparison isn't exact, because `Eigh` makes assumptions that `Eig` doesn't and produces different eigenvectors, it still sufficiently illustrates the points.

> This makes me think that the Op as it is implemented in this PR is actually better than a rewrite that uses the schur decomposition and its gradient directly. It is reasonably stable, tested and produces values and gradients if they are well defined (ie λi(A)λj(A)≠1), and this is probably also true for most other implicitly defined functions of this kind (eg sylvester, riccatti etc). I for one would really like to have this functionality in aesara.

To reiterate, you've only stated one of the implementation challenges/choices, not a point regarding the relative quality of different implementations; otherwise, what you're saying appears to amount to "We have an implementation in this branch and I want to use it, so it's better than the unimplemented approaches we're discussing". It's fine to say you want this/a implementation, but it doesn't make sense to use that as a means of comparing their relevant qualities (aside from being present or not).

Also, functions are only as well-defined as they're implemented/specified: i.e. even if a common mathematical definition of a function isn't well-defined at certain points doesn't mean that a viable, refined definition of it isn't possible; however, you seem to be implying the latter.

brandonwillard(2022-07-06 18:44:43):@aseyboldt neatly summarized the possible approaches and their pros/cons in a private conversation, and one of the points he made was that what we're calling the "subgradient approach" (i.e. making "usable" `Op.grad` choices for degenerate values) is not likely to work as generally or easily as we'd want.

I absolutely agree that the `OpFromGraph` approach is probably our best bet for retaining the potential performance and implementation benefits of this PR's unexpanded approach and an `Op`-expanded approach.
aseyboldt(2022-07-06 19:16:27):My summary from that chat (slightly edited, I hope I didn't break anything @brandonwillard ):

We know that if we split the solve op and then chain the backward ops of the computation graph of solve_lyapunov (ie schur decomposition and trsyl) we get additional singularities that we don't want: The lyapunov equation always has a solution and gradient, unless $\lambda_i(A) \lambda_j(A) = 1$ for some $i, j$.
But using the derivatives of the schur ops etc would lead to singularities if $\lambda_i(A) = \lambda_j(A)$ for some $i, j$, and since `A` could have several zero eigenvalues in some applications this wouldn't be great.

We know of those 5 options:

- Just ignore the problem and hope nobody cares for those A matrices
- Use a single custom Op with custom gradient impl to directly use the manually computed backward op (this PR)
- Split the lyapunov op using OpFromGraph and overwrite the gradient there. (With or without the gradient implementations for schur and trsyl, we wouldn't need those for this solution, even if of course they'd still be great to have).
- Write a graph rewrite that transforms ops that look like they have those singularities
- Try to figure out definitions for the singularities that make things work anyway


And my current personal feelings about those would be something like this:
- About 1: I don't like ignoring the problem
- About 2: This clearly isn't perfect but I'd be fine with it, at least as long as nobody actually does the work for one of the others. We unfortunately end up doing the schur decomposition of `A` twice as well, so this should be significantly slower in some cases.
- About 3: I think this is my favorite, because it is pretty close to the math, more or less straight forward to implement and relatively easy to verify. But of course it is specific to this function and doesn't generalize.
- About 4: I'd like this as well, but graph rewrites generally scare me a bit, especially if they are compilcated like this one might be, but I'd like to be pleasantly surprised by a nice rewrite that does this. I think I prefer to just generate a good graph in the first place where possible.
- About 5: I wouldn't really know where to start, and it sounds scary to me, but if it works I think this would also be nice.

This turned out more tricky than I thought, I hope we didn't scare you away @jessegrabowski :-)
jessegrabowski(2022-07-07 01:12:24):Not scared away, just staying quiet to avoid making myself look like a fool (a common occurrence).

Some questions:

1. It seems the consensus is using an `OpFromGraph` then "overwriting the gradients"? I'm familiar with OpFromGraph but not with the ability to overwrite gradients. Is there another function somewhere that does this I could consult as a reference?

2. Where I was planning to go was to follow @brandonwillard 's direct solver implementation, and dispatch either to that or to the continuous solver based on the size of the A matrix. This would be an intermediate step, until a solution for the schur step is found. Is this consistent with (1)?

3. It also seems it might also be necessary to implement some LAPACK functions directly (infering from #1030). trsyl keeps coming up, but so does gees implicitly (the schur solver). Are there some examples of `COps` I can look at for reference here? I will post some more questions directly in that issue, since I imagine these will end up overlapping.

Plus a comment:

4. On the connection between Schur and QR, I reached out to some experts in an effort to get a better understanding of the link here. Evidently QR can be applied blockwise as a solution algorithm for schur, but there is no "simple" one-to-one computational correspondence between the two. For example, gees doesn't directly call one of the qr solvers (geqrf, geqp3, etc), which I was really hoping it would. I am going to keep reaching out to researchers and I'll let you if I come up with anything.
ricardoV94(2022-07-07 12:28:31):> 1. It seems the consensus is using an `OpFromGraph` then "overwriting the gradients"? I'm familiar with OpFromGraph but not with the ability to overwrite gradients. Is there another function somewhere that does this I could consult as a reference?

You can define a function for the gradient of an `OpFromGraph` instead of relying on the autodiff of the internal graph. See example 3 here: https://aesara.readthedocs.io/en/latest/library/compile/opfromgraph.html?highlight=OpFromGraph#opfromgraph
brandonwillard(2022-07-09 18:39:55):> 2\. This would be an intermediate step, until a solution for the schur step is found. Is this consistent with (1)?

Yes, I believe so.

> 3\. Are there some examples of `COps` I can look at for reference here?

`aesara.tensor.blas` contains a lot of the `COp`s that use BLAS at the C level; however, most/all of them are subclasses of the same `GemmRelated` class, so they're not particularly good design examples.

`aesara.scalar.math` has a wide array of simple `COp.c_code` implementations that are probably worth looking at.  As long as there's a BLAS/LAPACK-containing library that can be found by the linker, something not far from those simple implementations can be used&mdash;along with some `COp.[c_libraries, c_compile_args, c_lib_dirs, c_header_dirs]` overrides that make the compiler aware of the required external libraries.

Also, if NumPy/SciPy expose their own C-level means of accessing BLAS/LAPACK functions, then one can always use those.
jessegrabowski(2022-09-27 17:32:22):I updated this PR with the following changes:

1. The direct solver for the discrete lyapunov case is now written in aesara, based on the implementation by @brandonwillard presented above.
2. A check for complex objects has been added to avoid using the `.conj()` method when it is not needed. This should provide gradients in the case that all matrices are real, which is the most common use case I think.
3. `None` is no longer an accepted value for the `method` parameter in `solve_discrete_lyapunov`. The default is `direct`, which calls the pure aesara implementation. 
4. The docstring on `solve_discrete_lyapunov` has been updated to explain that `direct` should be preferred in all cases, except when N is large, or when inputs are complex and gradients are required.
5. Two additional test cases were added, covering real and complex inputs to the new `_solve_discrete_lyapunov_direct` function.
6. The discrete lyapunov `Op` with gradients implemented "by hand" has been renamed to `SolveDiscreteLyapunovBilinear`, and no longer takes a `method` parameter on initialization. 

My idea with this setup is to direct users to the Aesara implementation, while leaving the "by hand" version until we can cover all the corner cases: complex gradients, native aesara implementation of the continuous case. If the consensus is to remove it all together, though, I can do that.
jessegrabowski(2022-09-29 18:17:09):I think I messed this all up trying to update the branch to match the current aesara `main` and resolve the conflicts, I maybe should delete it and try again?
brandonwillard(2022-09-29 18:20:33):> I think I messed this all up trying to update the branch to match the current aesara `main` and resolve the conflicts, I maybe should delete it and try again?

One minute; I'll take a (local) look.
jessegrabowski(2022-09-30 12:11:48):Thanks for taking the time to clean up my mess. I'll take some time to get my git situation squared away before I move forward with any other contributions.
andrejmuhic(2022-10-06 21:54:53):If it helps anyone, I am also posting here. As a reference I have background in applied linear algebra.
I just wanted to add that the Schur form is numerically computed using QR step algorithm (I prefer this name over QR algorithm ) which is somewhat related to the power iteration, the subspace flavour version. This is efficiently done with shifts and implicit bulge chasing, usually out of scope for the implementation from scratch, at least it does not make sense to do so as lapack version is available and it is hard to do better than that. The additional complication is if one wants the real Schur form, the upper quasi-triangular matrix with 1-by-1 and 2-by-2 blocks, where 2-by-2 blocks correspond to conjugate complex eigenvalue pairs.
The C++ code implementation that does this directly from the decompositions and their properties in projective gradient like way is available for example in:
https://github.com/pytorch/pytorch/blob/master/torch/csrc/autograd/FunctionsManual.cpp
The other option would be to backprop through the steps of algorithm directly but that requires numerically stable reimplementation with autodiff support and also ensuring that the gradient is numerically stable, this sounds hard?
I think the Schur decomposition is not there but following the documented code and resources in comments it should be possible to produce formula for the eigenvalues gradient if one really desired the more stable formula.
rlouf(2022-11-24 10:25:56):Sorry for the delay in reviewing this. It looks like Brandon approved this PR, so unless the tests fail after rebasing on `main` I will be merging this. Thank you for your contribution, and your patience!
ricardoV94(2022-06-29 17:05:59):You don't seem to be using this one. If you want to use it why not extract the check function to avoid the code repetition?
ricardoV94(2022-06-29 17:07:48):I think the return signatures are wrong, no? I would expect it to return TensorVariables
ricardoV94(2022-06-29 17:09:58):```suggestion
    __props__ = ("method",)
```

jessegrabowski(2022-06-30 05:35:04):I was shy about having this shape check at all, so I ended up with bad code. I wanted to talk to you about it first. It doesn't seem like any of the other linalg functions do any kind of shape checking, is that a conscious choice? For example, the `numba.np.linalg` library has a generic shape check at the top of *every* function. If, on the other hand, it was decided for Aesara at some point to let shape problems get caught somewhere else, I can remove the ones in these functions all together.
jessegrabowski(2022-06-30 05:36:21):I'll double check this and fix it.

I originally had type hints in for A and Q as well, but this isn't something that's done for other functions. Something like `Union[ArrayLike | at.matrix]`? Or not necessary?
ricardoV94(2022-06-30 05:37:54):Do the scipy functions check for the shapes? If it does, that should be sufficient.
jessegrabowski(2022-06-30 06:39:36):It does. I'll remove the checks and just rely on that.
aseyboldt(2022-06-30 09:12:42):Couldn't the infer_shape methods do those shape checks? If we get invalid shapes in there, we could raise an error I think.
ricardoV94(2022-06-30 09:14:41):Infer shape gets symbolic shapes and is supposed to return a symbolic shape. It's not called in the normal course of computing an Op, only if the output shape is involved.
aseyboldt(2022-06-30 09:16:03):Ah, true...
Clearly I didn't think this through :-)
codecov[bot](2022-07-01 01:01:38):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1024?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1024](https://codecov.io/gh/aesara-devs/aesara/pull/1024?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (6bcbb9a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ecd6b49ca988c6f6280a4372461cd11f4ad77c03?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ecd6b49) will **increase** coverage by `0.00%`.
> The diff coverage is `86.66%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1024/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1024?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1024   +/-   ##
=======================================
  Coverage   79.23%   79.24%           
=======================================
  Files         152      152           
  Lines       47953    47951    -2     
  Branches    10919    10918    -1     
=======================================
+ Hits        37995    37998    +3     
+ Misses       7449     7445    -4     
+ Partials     2509     2508    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1024?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1024/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `86.16% <86.66%> (+0.23%)` | :arrow_up: |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1024/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `64.75% <0.00%> (+0.06%)` | :arrow_up: |

codecov[bot](2022-07-04 00:52:18):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1025?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1025](https://codecov.io/gh/aesara-devs/aesara/pull/1025?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (199b4eb) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ecd6b49ca988c6f6280a4372461cd11f4ad77c03?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ecd6b49) will **increase** coverage by `0.02%`.
> The diff coverage is `96.87%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1025/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1025?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1025      +/-   ##
==========================================
+ Coverage   79.23%   79.26%   +0.02%     
==========================================
  Files         152      152              
  Lines       47953    47978      +25     
  Branches    10919    10922       +3     
==========================================
+ Hits        37995    38028      +33     
+ Misses       7449     7442       -7     
+ Partials     2509     2508       -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1025?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1025/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `74.76% <80.00%> (+2.65%)` | :arrow_up: |
| [aesara/sparse/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1025/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `82.89% <100.00%> (+0.42%)` | :arrow_up: |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1025/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `89.78% <100.00%> (+0.05%)` | :arrow_up: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1025/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `87.27% <100.00%> (+0.05%)` | :arrow_up: |

codecov[bot](2022-07-05 06:58:42):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1026?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1026](https://codecov.io/gh/aesara-devs/aesara/pull/1026?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (42e80e7) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ccfe2d3dbb9f8fcb8fc3631beb0cfdedf30be62c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ccfe2d3) will **not change** coverage.
> The diff coverage is `100.00%`.

> :exclamation: Current head 42e80e7 differs from pull request most recent head 241868b. Consider uploading reports for the commit 241868b to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1026/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1026?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1026   +/-   ##
=======================================
  Coverage   79.27%   79.27%           
=======================================
  Files         152      152           
  Lines       47965    47965           
  Branches    10923    10923           
=======================================
  Hits        38023    38023           
  Misses       7438     7438           
  Partials     2504     2504           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1026?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1026/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `90.67% <100.00%> (ø)` | |

ricardoV94(2022-07-07 05:40:15):Apologies, I tried to update the branch from the app but it did a merge instead of rebase... I'll fix it soon
ricardoV94(2022-07-01 18:33:02):This is a bit costly as every check will compile a new function for a single evaluation. You can reuse the same function to test different values of `k`
ricardoV94(2022-07-01 18:34:32):I would not add defaults, they make the tests less readable if arguments are not specified explicitly. 

In this case they are not even used, so you could actually have bugs/invalid values in the defaults and not know about it.
purna135(2022-07-02 03:16:06):Can we use a `for` loop to check different value of `k` ? like:
```python
def check_u_batch(m):
    m_symb = tensor3(dtype=m.dtype)
    k_symb = iscalar()
    f = function([m_symb, k_symb], triu(m_symb, k_symb))
    for k in [-1,0,1]:
        result = f(m, k)
        assert np.allclose(result, np.triu(m, k))
        assert result.dtype == np.dtype(dtype)
```
purna135(2022-07-02 03:23:11):In order to pass `tensor3` and `tensor4` to the same function, I introduced this default value.
Is it okay if we only check for `tensor3` and not `tensor4`? If so, I'll remove the default and make this function only check for `tensor3`.
ricardoV94(2022-07-05 05:52:03):sure 
ricardoV94(2022-07-05 05:52:30):yes that should be fine
codecov[bot](2022-07-01 17:31:25):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1027?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1027](https://codecov.io/gh/aesara-devs/aesara/pull/1027?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b708213) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/d09e222b06c0bc45d25c77d2ededbf25fe980c71?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d09e222) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1027/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1027?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1027      +/-   ##
==========================================
- Coverage   79.23%   79.23%   -0.01%     
==========================================
  Files         152      152              
  Lines       47954    47953       -1     
  Branches    10918    10919       +1     
==========================================
- Hits        37996    37995       -1     
  Misses       7449     7449              
  Partials     2509     2509              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1027?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1027/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvdGVuc29yX2Jhc2ljLnB5) | `97.93% <100.00%> (-0.03%)` | :arrow_down: |

stuartarchibald(2022-07-01 16:13:31):If this is homogenizing the axis type as `((int, int), ^ N )` is it necessary to version the loop body with the unroller? Is there a chance axis can be `None` perhaps, in which case this seems valid?
twiecki(2022-07-01 16:14:45):> version the loop body with the unroller

I don't understand what you mean here.
stuartarchibald(2022-07-01 16:29:09):> > version the loop body with the unroller
> 
> I don't understand what you mean here.

Apologies, I'll expand on this.

The need for doing something "special" to handle mixed type containers comes from the difficulties associated with working out the types of variables in the loop body in such a case, for example:

```python
for x in (1, 'a', 2j, 3): # types = (int, char, cmplx, int)
    print(x) # what type is `x`?! It changes on each iteration.
```
As a result, `literal_unroll` was created to help:
```python
for x in literal_unroll((1, 'a', 2j, 3)): # types = (int, char, cmplx, int)
    print(x)

```
which translates to something like (it does all this in LLVM IR and isn't quite like this, but for the purposes of explanation, it's close enough!):
```python
tup = (1, 'a', 2j, 3)
for idx in range(len(tup)):
    if idx in (0, 3):
        print(x) # This is the 'int' print
    elif idx in (1,):
        print(x) # This is the 'char' print
    elif idx in (2,):
        print(x) # This is the 'cmplx' print
```
i.e. the loop body is "versioned" and this lets Numba "iterate" over a mixed type containers.

If you have a tuple that is already homogeneous in type, then you don't need to do this translation as the loop is type stable.

For example:
```python
for x in (1, 2, 4, 5): # types = (int, int, int, int)
  print(x) # x is always int
```

Applying this to the present case. Is `op_axis` now always going to contain some number of tuples which are of type `(int, int)`, if so, standard iteration should "just work".



twiecki(2022-07-01 16:32:15):I see, thanks for explaining!
stuartarchibald(2022-07-01 16:36:48):> I see, thanks for explaining!

No problem. I wasn't sure in the case above whether you'll sometimes have e.g. a `None` for `axis`, or perhaps you need to preserve the literal nature of values captured scope of `op_axis`, but if you don't, I think you might be able to get away with standard iteration, which will get you a faster loop (as there's no switch table in the body).
twiecki(2022-07-01 16:37:24):I removed the `literal_unroll` for now.
stuartarchibald(2022-07-01 16:58:25):Sounds good. For performance, if you can invent a way to make a loop type stable, that's usually a good approach as it means there's no need for a switch table and duplicated loop bodies. LLVM can often "see" through the "switch table" pattern but it's better,  if possible, to avoid creating the risk of it not being able to optimising it away by simply avoiding it in the program source.

Thanks for working through this issue. The Numba folks will take a look at the segfault(s) next week!
twiecki(2022-07-01 17:02:13):@stuartarchibald Thank you for the super fast help!
stuartarchibald(2022-07-01 17:09:02):> @stuartarchibald Thank you for the super fast help!

No problem! Thanks for using Numba!
codecov[bot](2022-07-04 03:14:28):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1035?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1035](https://codecov.io/gh/aesara-devs/aesara/pull/1035?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (42b3b21) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ecd6b49ca988c6f6280a4372461cd11f4ad77c03?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ecd6b49) will **increase** coverage by `0.03%`.
> The diff coverage is `93.75%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1035/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1035?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1035      +/-   ##
==========================================
+ Coverage   79.23%   79.27%   +0.03%     
==========================================
  Files         152      152              
  Lines       47953    47976      +23     
  Branches    10919    10921       +2     
==========================================
+ Hits        37995    38031      +36     
+ Misses       7449     7438      -11     
+ Partials     2509     2507       -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1035?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1035/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `74.76% <80.00%> (+2.65%)` | :arrow_up: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1035/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `86.16% <86.66%> (+0.23%)` | :arrow_up: |
| [aesara/scan/scan\_perform\_ext.py](https://codecov.io/gh/aesara-devs/aesara/pull/1035/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vc2Nhbl9wZXJmb3JtX2V4dC5weQ==) | `81.25% <100.00%> (ø)` | |
| [aesara/sparse/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1035/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `82.89% <100.00%> (+0.42%)` | :arrow_up: |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1035/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `89.78% <100.00%> (+0.05%)` | :arrow_up: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1035/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `87.27% <100.00%> (+0.05%)` | :arrow_up: |
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1035/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `64.75% <0.00%> (+0.06%)` | :arrow_up: |

brandonwillard(2022-07-05 15:12:34):This could use a simple and explicit test, since there clearly isn't one already; otherwise, we would have caught this issue earlier.
brandonwillard(2022-07-06 03:03:03):I just added a test with sufficient coverage and an explanation/example of the issue that was resolved.  If it passes, this can be merged.
codecov[bot](2022-07-06 05:46:26):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1038?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1038](https://codecov.io/gh/aesara-devs/aesara/pull/1038?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (62f50bb) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c8eea20720c53b6513d3a646dced019cf93b9807?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c8eea20) will **increase** coverage by `0.00%`.
> The diff coverage is `91.46%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1038/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1038?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1038   +/-   ##
=======================================
  Coverage   79.27%   79.27%           
=======================================
  Files         152      152           
  Lines       47976    47965   -11     
  Branches    10921    10923    +2     
=======================================
- Hits        38031    38023    -8     
  Misses       7438     7438           
+ Partials     2507     2504    -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1038?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1038/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `86.59% <ø> (ø)` | |
| [aesara/gradient.py](https://codecov.io/gh/aesara-devs/aesara/pull/1038/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `77.32% <91.46%> (+0.06%)` | :arrow_up: |

zoj613(2022-07-30 15:55:39):All instances of `R-operator` should be `L-operator` here.
brandonwillard(2022-07-30 21:20:20):Fixed in https://github.com/aesara-devs/aesara/pull/1087.
codecov[bot](2022-07-09 09:14:34):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1042?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1042](https://codecov.io/gh/aesara-devs/aesara/pull/1042?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (375f528) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/510a9618454293fc00b3cfa78b337c1f2d6d2af3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (510a961) will **increase** coverage by `0.00%`.
> The diff coverage is `50.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1042/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1042?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1042   +/-   ##
=======================================
  Coverage   79.26%   79.26%           
=======================================
  Files         152      152           
  Lines       47873    47874    +1     
  Branches    10908    10908           
=======================================
+ Hits        37947    37948    +1     
  Misses       7429     7429           
  Partials     2497     2497           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1042?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/features.py](https://codecov.io/gh/aesara-devs/aesara/pull/1042/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `64.69% <50.00%> (+0.09%)` | :arrow_up: |

codecov[bot](2022-07-11 19:04:44):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1048?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1048](https://codecov.io/gh/aesara-devs/aesara/pull/1048?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9a0b19d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c1fef51df61a4ede56519f50d97fa1c07720b609?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c1fef51) will **not change** coverage.
> The diff coverage is `n/a`.

> :exclamation: Current head 9a0b19d differs from pull request most recent head ca9c5b3. Consider uploading reports for the commit ca9c5b3 to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1048/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1048?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1048   +/-   ##
=======================================
  Coverage   79.26%   79.26%           
=======================================
  Files         152      152           
  Lines       47874    47874           
  Branches    10908    10908           
=======================================
  Hits        37948    37948           
  Misses       7429     7429           
  Partials     2497     2497           
```



brandonwillard(2022-07-11 19:54:08):```suggestion
          pip install wheel
          python setup.py sdist bdist_wheel
```
I think that will fix the error in CI.
codecov[bot](2022-07-12 02:00:35):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1049?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1049](https://codecov.io/gh/aesara-devs/aesara/pull/1049?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f8f092e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/b4912d9741d1949351ea5dff4eb1afb574f02a51?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b4912d9) will **decrease** coverage by `0.00%`.
> The diff coverage is `19.11%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1049/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1049?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1049      +/-   ##
==========================================
- Coverage   79.26%   79.25%   -0.01%     
==========================================
  Files         152      152              
  Lines       47874    47887      +13     
  Branches    10908    10909       +1     
==========================================
+ Hits        37948    37955       +7     
- Misses       7429     7435       +6     
  Partials     2497     2497              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1049?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/compiledir.py](https://codecov.io/gh/aesara-devs/aesara/pull/1049/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvY29tcGlsZWRpci5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/1049/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `66.20% <0.00%> (-0.19%)` | :arrow_down: |
| [aesara/misc/pkl\_utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1049/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL21pc2MvcGtsX3V0aWxzLnB5) | `79.48% <ø> (ø)` | |
| [aesara/compile/profiling.py](https://codecov.io/gh/aesara-devs/aesara/pull/1049/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `74.55% <6.25%> (-0.68%)` | :arrow_down: |
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/1049/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `54.56% <50.00%> (-0.01%)` | :arrow_down: |
| [aesara/link/c/cutils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1049/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jdXRpbHMucHk=) | `68.88% <100.00%> (+0.70%)` | :arrow_up: |
| [aesara/link/c/lazylinker\_c.py](https://codecov.io/gh/aesara-devs/aesara/pull/1049/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9sYXp5bGlua2VyX2MucHk=) | `66.66% <100.00%> (+0.70%)` | :arrow_up: |

mattearllongshot(2022-08-17 11:37:12):@brandonwillard I think you need to use the yielded value here.  Eg. `with extended_open(...) as f`.  As it is the file object is dropped and the string is passed through.
mattearllongshot(2022-08-17 13:31:25):@brandonwillard `attr` is a string, should this line be `for key, val in getattr(ps, attr).items():`
brandonwillard(2022-08-17 15:01:24):Looks like it.  As you can tell, this is old code with apparently no coverage (or type checking), so we'll need to add some tests and type hints when making this correction.
brandonwillard(2022-07-12 17:25:39):I wonder if these changes help with https://github.com/aesara-devs/aesara/issues/1005, https://github.com/aesara-devs/aesara/pull/980, and https://github.com/conda-forge/aesara-feedstock/issues/54. 
codecov[bot](2022-07-12 18:20:35):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1050?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1050](https://codecov.io/gh/aesara-devs/aesara/pull/1050?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1f31a97) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/d69eaabddc697f6ab7e7ebfedb4974181c61d575?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d69eaab) will **decrease** coverage by `0.00%`.
> The diff coverage is `83.33%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1050/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1050?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1050      +/-   ##
==========================================
- Coverage   79.25%   79.25%   -0.01%     
==========================================
  Files         152      152              
  Lines       47887    47882       -5     
  Branches    10909    10909              
==========================================
- Hits        37955    37949       -6     
- Misses       7435     7436       +1     
  Partials     2497     2497              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1050?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/1050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `54.34% <78.57%> (-0.23%)` | :arrow_down: |
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/1050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `66.20% <100.00%> (ø)` | |
| [aesara/link/c/exceptions.py](https://codecov.io/gh/aesara-devs/aesara/pull/1050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9leGNlcHRpb25zLnB5) | `80.00% <100.00%> (ø)` | |
| [aesara/tensor/blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/1050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ibGFzLnB5) | `79.71% <100.00%> (-0.02%)` | :arrow_down: |

brandonwillard(2022-07-12 19:38:30):@aesara-devs/core, I'm ready to merge this, but I'm a little unsure about the `setuptools` dependency added to `setup.py`.  Since we use `setuptools` at run-time now, it seems appropriate, but it's also understood to be present as a requirement for the Aesara installation itself, and I'm not sure how the version dependency aspects of that should work.
maresb(2022-07-13 09:04:36):I don't use setuptools very much, but you might consider adding a `pyproject.toml` and seeing to what extent you can replace `setup.py` (imperative) and `setup.cfg` (declarative) with that.

For the Aesara installation itself, the `pyproject.toml` would define your build system to be `setuptools` and define any additional build-time requirements (plugins) there. Correspondingly on the Conda side, those are put into the `host` requirements. So based on the above, we will need to add `setuptools` as both a `host` and `run` requirement in the recipe.

I see that you very rarely change the dependencies, so it generally makes sense to have `bot-automerge` is enabled on the feedstock. However with the current change, this will cause the autotick-bot PR to merge on passing CI, but a passing CI does not indicate that the recipe is correct. (For instance, there may be a missing direct dependency which is coincidentally added indirectly.)

I recommend disabling automerge, at least for now, so that we can make sure the dependencies are correctly declared. You can always add the `automerge` label to an individual PR.
codecov[bot](2022-07-14 17:17:52):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1053?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1053](https://codecov.io/gh/aesara-devs/aesara/pull/1053?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c945458) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/be222f0caac7f3346b2f5882c35cd03f778adecc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (be222f0) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1053/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1053?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1053   +/-   ##
=======================================
  Coverage   79.25%   79.25%           
=======================================
  Files         152      152           
  Lines       47882    47882           
  Branches    10909    10909           
=======================================
  Hits        37949    37949           
  Misses       7436     7436           
  Partials     2497     2497           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1053?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1053/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `64.75% <100.00%> (ø)` | |

codecov[bot](2022-07-15 00:18:49):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1054?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1054](https://codecov.io/gh/aesara-devs/aesara/pull/1054?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (539addb) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e0d918074f62e19c66112f11076c39f529af7f14?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e0d9180) will **decrease** coverage by `0.03%`.
> The diff coverage is `80.82%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1054/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1054?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1054      +/-   ##
==========================================
- Coverage   79.28%   79.25%   -0.04%     
==========================================
  Files         151      159       +8     
  Lines       47992    48097     +105     
  Branches    10913    10934      +21     
==========================================
+ Hits        38052    38117      +65     
- Misses       7437     7469      +32     
- Partials     2503     2511       +8     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1054?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/1054/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `66.20% <ø> (ø)` | |
| [aesara/graph/features.py](https://codecov.io/gh/aesara-devs/aesara/pull/1054/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `64.69% <ø> (ø)` | |
| [aesara/graph/fg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1054/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `87.96% <ø> (ø)` | |
| [aesara/graph/rewriting/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1054/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3Jld3JpdGluZy9iYXNpYy5weQ==) | `64.96% <ø> (ø)` | |
| [aesara/sandbox/multinomial.py](https://codecov.io/gh/aesara-devs/aesara/pull/1054/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvbXVsdGlub21pYWwucHk=) | `76.51% <ø> (+0.60%)` | :arrow_up: |
| [aesara/scan/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1054/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3B0LnB5) | `0.00% <0.00%> (-79.00%)` | :arrow_down: |
| [aesara/sparse/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1054/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9vcHQucHk=) | `0.00% <0.00%> (-75.52%)` | :arrow_down: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1054/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `100.00% <ø> (+14.30%)` | :arrow_up: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1054/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `100.00% <ø> (+12.85%)` | :arrow_up: |
| [aesara/tensor/nnet/abstract\_conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/1054/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Fic3RyYWN0X2NvbnYucHk=) | `76.66% <ø> (ø)` | |
| ... and [44 more](https://codecov.io/gh/aesara-devs/aesara/pull/1054/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

brandonwillard(2022-07-15 14:31:41):> Some of the new names sound much more intuitive now.

Yeah, I was going for something systematic and explanatory, because even I have trouble remembering (by name) what these things do.
brandonwillard(2022-07-31 21:10:23):The naming and interfaces of `NodeProcessingGraphRewriter`, `WalkingGraphRewriter`, and perhaps a few others are still a mess, but we can/should go forward with these changes first.
brandonwillard(2022-08-16 22:16:46):@aesara-devs/aesara, all right, I'm going to merge this, which means that we'll need to update the other `aesara-devs` projects and PyMC in order to remove the new deprecation warnings.
michaelosthege(2022-08-17 15:43:48):> @aesara-devs/aesara, all right, I'm going to merge this, which means that we'll need to update the other `aesara-devs` projects and PyMC in order to remove the new deprecation warnings.

👍

This is going to be Aesara 2.8.0 then?
brandonwillard(2022-08-17 15:44:40):> This is going to be Aesara 2.8.0 then?

Yes, definitely.
oscarbenjamin(2022-08-22 10:39:28):It seems this makes some deprecated names unavailable from the packages where they were previously available e.g.:
```
In [1]: import aesara

In [2]: aesara.tensor
Out[2]: <module 'aesara.tensor' from '/home/oscar/current/sympy/sympy.git/38venv/lib/python3.8/site-packages/aesara/tensor/__init__.py'>

In [3]: aesara.tensor.abs_
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-3-f120198d92d4> in <module>
----> 1 aesara.tensor.abs_

AttributeError: module 'aesara.tensor' has no attribute 'abs_'

In [4]: aesara.tensor.math.abs_
<ipython-input-4-8f09823c3c05>:1: DeprecationWarning: `abs_` is deprecated; use `abs` instead.
  aesara.tensor.math.abs_
Out[4]: <aesara.tensor.elemwise.Elemwise at 0x7fa9c1990eb0>
```
That leads to a test failure in SymPy CI due to this line:
https://github.com/sympy/sympy/blob/88664e6e0b781d0a8b5347896af74b555e92891e/sympy/printing/aesaracode.py#L22

Is it always safe to use `abs` insteaed of `abs_` including with older versions of Aesara and also Theano?
brandonwillard(2022-08-22 17:41:46):> Is it always safe to use `abs` insteaed of `abs_` including with older versions of Aesara and also Theano?

It's not safe for Theano and only up to https://github.com/aesara-devs/aesara/commit/430d068d029a11a92e29f23a2e6065c662022301 in Aesara.
brandonwillard(2022-08-22 18:15:19):@oscarbenjamin, we can probably add deprecation support for `aesara.tensor.abs_`, if that helps.  Regardless, thanks for keeping up on this!
codecov[bot](2022-07-17 16:08:38):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1056?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1056](https://codecov.io/gh/aesara-devs/aesara/pull/1056?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c3a34ea) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/be222f0caac7f3346b2f5882c35cd03f778adecc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (be222f0) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1056/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1056?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1056      +/-   ##
==========================================
- Coverage   79.25%   79.25%   -0.01%     
==========================================
  Files         152      152              
  Lines       47882    47875       -7     
  Branches    10909    10906       -3     
==========================================
- Hits        37949    37942       -7     
  Misses       7436     7436              
  Partials     2497     2497              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1056?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1056/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wdC5weQ==) | `64.75% <100.00%> (ø)` | |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1056/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.90% <100.00%> (-0.02%)` | :arrow_down: |

ricardoV94(2022-07-18 05:14:43):Oh, I forgot to fix the Categorical distribution as well
codecov[bot](2022-07-18 16:10:24):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1059?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1059](https://codecov.io/gh/aesara-devs/aesara/pull/1059?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7fa673c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/8794f48d567c4a488721481c281b53c18eb0dcd4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8794f48) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 7fa673c differs from pull request most recent head d9ede7d. Consider uploading reports for the commit d9ede7d to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1059/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1059?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1059   +/-   ##
=======================================
  Coverage   79.25%   79.25%           
=======================================
  Files         152      152           
  Lines       47875    47887   +12     
  Branches    10906    10907    +1     
=======================================
+ Hits        37942    37954   +12     
  Misses       7436     7436           
  Partials     2497     2497           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1059?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1059/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.92% <100.00%> (+0.02%)` | :arrow_up: |

kylejcaron(2022-07-18 16:36:24):> Looks good, although the commits need to be squashed/rebased before merging (because there's a merge commit in this branch).

just rebased and squashed! Any advice on how to coordinate this PR with the corresponding PyMC PR? 
brandonwillard(2022-07-19 02:02:05):> Any advice on how to coordinate this PR with the corresponding PyMC PR?

You can increment the required Aesara version in your PyMC PR; that will at least guarantee that your changes will only apply to a version of Aesara with these changes.
codecov[bot](2022-07-19 17:36:06):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1061?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1061](https://codecov.io/gh/aesara-devs/aesara/pull/1061?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ecd9390) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/8794f48d567c4a488721481c281b53c18eb0dcd4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8794f48) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1061/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1061?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1061   +/-   ##
=======================================
  Coverage   79.25%   79.26%           
=======================================
  Files         152      152           
  Lines       47875    47895   +20     
  Branches    10906    10907    +1     
=======================================
+ Hits        37942    37962   +20     
  Misses       7436     7436           
  Partials     2497     2497           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1061?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1061/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvdGVuc29yX2Jhc2ljLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1061/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.92% <0.00%> (+0.02%)` | :arrow_up: |

codecov[bot](2022-07-19 18:42:22):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1062?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1062](https://codecov.io/gh/aesara-devs/aesara/pull/1062?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1c88f4f) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c8908e5a27ae34d16bc3c025424a77ac0268ac51?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c8908e5) will **decrease** coverage by `0.03%`.
> The diff coverage is `80.32%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1062/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1062?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1062      +/-   ##
==========================================
- Coverage   79.25%   79.21%   -0.04%     
==========================================
  Files         152      152              
  Lines       47905    47960      +55     
  Branches    10909    10915       +6     
==========================================
+ Hits        37968    37993      +25     
- Misses       7440     7465      +25     
- Partials     2497     2502       +5     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1062?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1062/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2NhbGFyLnB5) | `80.36% <76.00%> (-17.91%)` | :arrow_down: |
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/1062/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `66.30% <100.00%> (+0.09%)` | :arrow_up: |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1062/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.10% <100.00%> (+0.03%)` | :arrow_up: |
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1062/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.16% <100.00%> (+0.04%)` | :arrow_up: |

aseyboldt(2022-07-20 00:10:11):@brandonwillard I removed the comment you mentioned, and also added an implementation for gammaln.
The tests in test_numba are still valid, but now we don't require numba_scipy for anything in this file. It seems it gets installed when running the tests, but is not a requirement in conda-forge.
Do we actually want to add this as a dependency?
brandonwillard(2022-07-20 00:11:49):> Do we actually want to add this as a dependency?

I think I hesitated to do that initially because `numba-scipy` put restrictions on the SciPy version.
aseyboldt(2022-07-20 00:15:11):I see.
I'm not really sure if we need this PR then.
A lot of models would work without numba_scipy with those two functions (and maybe a couple more?). Using custom implementations *might* also be faster, because the compiler actually sees the function implementation and can inline.
But on the other hand there might be more `scipy.special` functions that come up from time to time and are tricky to get anywhere else...
brandonwillard(2022-07-20 00:25:58):> I'm not really sure if we need this PR then.

I was only explaining why I think we didn't&mdash;and possibly shouldn't&mdash;include `numba-scipy` as a dependency in the conda-forge recipe for Aesara.

Regarding the test environment/dependencies: we should still have a test for cooperability with `numba-scipy`, but we can also test the `ScalarOp` dispatch implementations in this PR.  In other words, we should make these changes/additions and still test the `numba-scipy` functionality.

I think these `ScalarOp` implementations will be used before the `numba-scipy` approach when/if there are entries present for them in the dispatch function, so there shouldn't be any problems with testing your changes; otherwise, we might need to add a test case that uses a `scipy.special` function with no `ScalarOp` dispatch, in order to get coverage for the `numba-scipy` case.

> But on the other hand there might be more `scipy.special` functions that come up from time to time and are tricky to get anywhere else...

Yeah, we're only using `numba-scipy` now because it provides quick coverage of multiple unimplemented `ScalarOp` dispatches.  As you said, if we can produce our own Numba implementations, then we're likely much better off.


aseyboldt(2022-07-20 20:46:06):I now use object mode if numba_scipy can't be imported. Maybe an approach like this is a bit safer?
To test it properly I guess we need to add a config value as well, so that we can just install numba_scipy in the test env, but it in one test matrix item?

I also changed which apply node is passed to `numba_funcify` in elemwise. I don't think it makes sense to pass the elemwise node to the funcify function of the scalar_op, does it?
https://github.com/aesara-devs/aesara/pull/1062/files#diff-1974aff2f50ca4ebb89282f584d28919e83c38ab38dba1cb6791e07b26ce0403R428
brandonwillard(2022-07-23 01:35:06):> I also changed which apply node is passed to `numba_funcify` in elemwise. I don't think it makes sense to pass the elemwise node to the funcify function of the scalar_op, does it?
> https://github.com/aesara-devs/aesara/pull/1062/files#diff-1974aff2f50ca4ebb89282f584d28919e83c38ab38dba1cb6791e07b26ce0403R428

I think that was done as a convenience for `Type`-related information needed by `numba_funcify_ScalarOp`
aseyboldt(2022-07-24 18:08:45):Split into #1077 and #1078
brandonwillard(2022-07-19 20:54:22):```suggestion
```
This doesn't really need an explanation, especially since the `numba-scipy` logic is only a fallback for missing `ScalarOp` implementations.
aseyboldt(2022-07-22 23:58:59):I'm not really sure what to do here.
Previously, we just passed the node of the surrounding op, but I think this clearly isn't right, and leads to errors if we want to generate a object mode fallback for parts of the elemwise code.

So I thought we can just create a new node using `op.scalar_op.make_node(*scalar_inputs)`, but this doesn't always work (maybe actually due to a bug). Elemwise will sometimes throw errors because it thinks something in the graph isn't a scalar op.

So my conclusion was that we can just pass in the fgraph, which also has input and output arguments just as a node, and I think pretty much functions as the node conceptually. But this isn't exactly clean.

Maybe we need to figure out what's going wrong with the make_node call?
aseyboldt(2022-07-22 23:59:39):^ @brandonwillard if you have an idea about what to do here, that would be great.
brandonwillard(2022-07-23 01:40:51):> I'm not really sure what to do here.
> Previously, we just passed the node of the surrounding op, but I think this clearly isn't right, and leads to errors if we want to generate a object mode fallback for parts of the elemwise code.

Are you trying to make the scalar `Op` call in `numba_funcify_Elemwise` return an object-mode fallback implementation?
codecov[bot](2022-07-20 00:33:42):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1064?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1064](https://codecov.io/gh/aesara-devs/aesara/pull/1064?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (53a8ba5) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/9d3603890295a393de8434223d292d4253de3806?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9d36038) will **decrease** coverage by `0.00%`.
> The diff coverage is `85.71%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1064/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1064?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1064      +/-   ##
==========================================
- Coverage   79.26%   79.25%   -0.01%     
==========================================
  Files         152      152              
  Lines       47895    47906      +11     
  Branches    10907    10909       +2     
==========================================
+ Hits        37962    37967       +5     
- Misses       7436     7441       +5     
- Partials     2497     2498       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1064?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/1064/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `49.41% <82.45%> (-0.12%)` | :arrow_down: |
| [aesara/compile/profiling.py](https://codecov.io/gh/aesara-devs/aesara/pull/1064/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `74.55% <100.00%> (ø)` | |
| [aesara/link/vm.py](https://codecov.io/gh/aesara-devs/aesara/pull/1064/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `90.26% <100.00%> (+0.01%)` | :arrow_up: |

codecov[bot](2022-07-20 22:03:39):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1066?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1066](https://codecov.io/gh/aesara-devs/aesara/pull/1066?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (edbff91) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/bb40791b3637ae5e656ec400683e13ec22365e60?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (bb40791) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1066/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1066?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1066      +/-   ##
==========================================
- Coverage   79.25%   79.25%   -0.01%     
==========================================
  Files         152      152              
  Lines       47906    47903       -3     
  Branches    10909    10909              
==========================================
- Hits        37967    37964       -3     
  Misses       7441     7441              
  Partials     2498     2498              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1066?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1066/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `89.00% <100.00%> (ø)` | |
| [aesara/link/c/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1066/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9vcC5weQ==) | `61.03% <100.00%> (-0.38%)` | :arrow_down: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/1066/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `49.41% <100.00%> (ø)` | |
| [aesara/tensor/random/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1066/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdHlwZS5weQ==) | `90.62% <100.00%> (ø)` | |

codecov[bot](2022-07-21 16:07:43):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1070?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1070](https://codecov.io/gh/aesara-devs/aesara/pull/1070?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4cad636) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/9e0434bfccb0df11cd3a3f855a15a2e50f3f3f29?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9e0434b) will **decrease** coverage by `0.00%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1070/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1070?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1070      +/-   ##
==========================================
- Coverage   79.25%   79.25%   -0.01%     
==========================================
  Files         152      152              
  Lines       47887    47903      +16     
  Branches    10907    10909       +2     
==========================================
+ Hits        37954    37964      +10     
- Misses       7436     7441       +5     
- Partials     2497     2498       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1070?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1070/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvdGVuc29yX2Jhc2ljLnB5) | `100.00% <ø> (ø)` | |
| [aesara/link/c/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1070/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9vcC5weQ==) | `61.03% <0.00%> (-0.38%)` | :arrow_down: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/1070/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `49.41% <0.00%> (-0.12%)` | :arrow_down: |
| [aesara/compile/profiling.py](https://codecov.io/gh/aesara-devs/aesara/pull/1070/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `74.55% <0.00%> (ø)` | |
| [aesara/link/vm.py](https://codecov.io/gh/aesara-devs/aesara/pull/1070/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `90.26% <0.00%> (+0.01%)` | :arrow_up: |

codecov[bot](2022-07-22 01:21:31):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1071?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1071](https://codecov.io/gh/aesara-devs/aesara/pull/1071?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b805f83) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/9665120e4b50b4a594a57ee08fdefb17eb4ff720?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9665120) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1071/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1071?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1071   +/-   ##
=======================================
  Coverage   79.25%   79.25%           
=======================================
  Files         152      152           
  Lines       47903    47905    +2     
  Branches    10909    10909           
=======================================
+ Hits        37964    37968    +4     
+ Misses       7441     7440    -1     
+ Partials     2498     2497    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1071?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/1071/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `49.76% <100.00%> (+0.35%)` | :arrow_up: |

codecov[bot](2022-07-23 01:20:27):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1073?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1073](https://codecov.io/gh/aesara-devs/aesara/pull/1073?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (971644f) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c8908e5a27ae34d16bc3c025424a77ac0268ac51?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c8908e5) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1073/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1073?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1073      +/-   ##
==========================================
+ Coverage   79.25%   79.26%   +0.01%     
==========================================
  Files         152      152              
  Lines       47905    47909       +4     
  Branches    10909    10908       -1     
==========================================
+ Hits        37968    37976       +8     
+ Misses       7440     7437       -3     
+ Partials     2497     2496       -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1073?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1073/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `86.49% <100.00%> (+1.49%)` | :arrow_up: |
| [aesara/link/numba/linker.py](https://codecov.io/gh/aesara-devs/aesara/pull/1073/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvbGlua2VyLnB5) | `100.00% <100.00%> (ø)` | |

codecov[bot](2022-07-23 15:29:06):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1077?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1077](https://codecov.io/gh/aesara-devs/aesara/pull/1077?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3009fc6) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c8908e5a27ae34d16bc3c025424a77ac0268ac51?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c8908e5) will **decrease** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1077/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1077?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1077      +/-   ##
==========================================
- Coverage   79.25%   79.23%   -0.02%     
==========================================
  Files         152      152              
  Lines       47905    47943      +38     
  Branches    10909    10909              
==========================================
+ Hits        37968    37990      +22     
- Misses       7440     7453      +13     
- Partials     2497     2500       +3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1077?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1077/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2NhbGFyLnB5) | `86.00% <100.00%> (-12.28%)` | :arrow_down: |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/1077/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.60% <0.00%> (-0.18%)` | :arrow_down: |
| [aesara/link/numba/linker.py](https://codecov.io/gh/aesara-devs/aesara/pull/1077/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvbGlua2VyLnB5) | `100.00% <0.00%> (ø)` | |
| [aesara/link/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1077/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `86.49% <0.00%> (+1.49%)` | :arrow_up: |

ferrine(2022-07-28 18:38:00):I should note that for some reason mypy pre-commit hook stopped me pointing to refactor
https://github.com/aesara-devs/aesara/pull/1080/files#diff-b302cb73b36cd3838ab20fa005f90f89c9e0a61a3f698a204f0ac31cc14f9f37

I double checked that checking out main and my branch back, there was no such issue with main branch
ferrine(2022-07-28 18:42:12):Now I get errors with CI mypy, I think versions are inconsistent. However, I reinstalled pre-commit hook with `pre-commit install`

ricardoV94(2022-07-28 19:30:16):Can you squash the commits? We can't do squash-merge in this Repo IIRC
codecov[bot](2022-07-28 19:51:33):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1080?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1080](https://codecov.io/gh/aesara-devs/aesara/pull/1080?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4f7048e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/8763981ca4263e153c68e6be39c03a272c027b60?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8763981) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 4f7048e differs from pull request most recent head 0e2f53d. Consider uploading reports for the commit 0e2f53d to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1080/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1080?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1080   +/-   ##
=======================================
  Coverage   79.23%   79.24%           
=======================================
  Files         152      152           
  Lines       47943    47946    +3     
  Branches    10909    10909           
=======================================
+ Hits        37990    37993    +3     
  Misses       7453     7453           
  Partials     2500     2500           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1080?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/1080/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.69% <100.00%> (+0.09%)` | :arrow_up: |

brandonwillard(2022-07-28 23:22:26):> Can you squash the commits? We can't do squash-merge in this Repo IIRC

We can do squash merges.
ricardoV94(2022-07-28 19:27:20):This happens sometimes, because the pre-commit only runs on modified files. But you need it for the CI pre-commit to pass, as it also checks the scan module properly in that case
ricardoV94(2022-07-28 19:28:15):Although... it seems to be passing now?
brandonwillard(2022-07-28 23:23:28):```suggestion
    def filldiagonal(value, diagonal):
```

These function names can be useful when debugging.
brandonwillard(2022-07-28 23:23:42):```suggestion
    return filldiagonal
```
brandonwillard(2022-07-28 23:25:57):That shouldn't be failing anymore.  If it is, we should open an issue for it.
ferrine(2022-07-29 11:14:12):pre-commit run --all is ok on main branch
once I modify files it fails with scan
codecov[bot](2022-07-28 20:26:54):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1081?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1081](https://codecov.io/gh/aesara-devs/aesara/pull/1081?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1e6be72) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/f2a7fb990ac7609c074b022278c976c683defdd0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f2a7fb9) will **decrease** coverage by `0.04%`.
> The diff coverage is `85.48%`.

> :exclamation: Current head 1e6be72 differs from pull request most recent head f3f65ad. Consider uploading reports for the commit f3f65ad to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1081/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1081?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1081      +/-   ##
==========================================
- Coverage   79.28%   79.24%   -0.05%     
==========================================
  Files         159      152       -7     
  Lines       48111    48002     -109     
  Branches    10937    10922      -15     
==========================================
- Hits        38145    38038     -107     
- Misses       7454     7458       +4     
+ Partials     2512     2506       -6     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1081?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1081/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `90.73% <85.24%> (-1.34%)` | :arrow_down: |
| [aesara/link/numba/dispatch/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/1081/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZXh0cmFfb3BzLnB5) | `98.00% <100.00%> (ø)` | |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1081/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `85.90% <0.00%> (-14.10%)` | :arrow_down: |
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1081/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `87.12% <0.00%> (-12.88%)` | :arrow_down: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1081/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `87.27% <0.00%> (-12.73%)` | :arrow_down: |
| [aesara/tensor/opt\_uncanonicalize.py](https://codecov.io/gh/aesara-devs/aesara/pull/1081/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9vcHRfdW5jYW5vbmljYWxpemUucHk=) | `96.03% <0.00%> (-3.97%)` | :arrow_down: |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/1081/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `49.71% <0.00%> (-1.30%)` | :arrow_down: |
| [aesara/link/numba/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1081/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvcmFuZG9tLnB5) | `97.74% <0.00%> (-1.09%)` | :arrow_down: |
| [aesara/sandbox/multinomial.py](https://codecov.io/gh/aesara-devs/aesara/pull/1081/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvbXVsdGlub21pYWwucHk=) | `75.91% <0.00%> (-0.61%)` | :arrow_down: |
| ... and [58 more](https://codecov.io/gh/aesara-devs/aesara/pull/1081/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

</details>
aseyboldt(2022-07-29 03:11:41):Is it possible that codecov doesn't pick up changes when I force-push? Somehow I still see the old version of the patch in the coverage report...
aseyboldt(2022-08-05 15:34:29):Comparison of the constant index case with the non-constant index case:

```python
%env NUMBA_BOUNDSCHECK=0

import aesara
import aesara.tensor as at
import numpy as np

n, k = 100_000, 100
idxs_vals = np.random.randint(k, size=n)
#idxs_vals.sort()
x_vals = np.random.randn(k)
a_vals = np.random.randn(n)

x = at.dvector("x")
a = at.dvector("d")
idxs = at.vector("idx", dtype=np.int64)
out = at.inc_subtensor(x[idxs], a)
func = aesara.function([idxs, x, a], out, mode="NUMBA")

func_inner = func.vm.jit_fn
_ = func_inner(idxs_vals, x_vals, a_vals)
print("time with non-const index:")
%timeit func_inner(idxs_vals, x_vals, a_vals)

x = at.dvector("x")
a = at.dvector("d")
out = at.inc_subtensor(x[idxs_vals], a)
func = aesara.function([x, a], out, mode="NUMBA")

func_inner = func.vm.jit_fn
func_inner(x_vals, a_vals);
print("time with const index:")
%timeit func_inner(x_vals, a_vals)
```

```
time with non-const index:
90.9 µs ± 3.61 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)
time with const index:
62.7 µs ± 974 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)
```

So the non-const index case is about 1.4x slower.
If we enable boundschecks, this increases to ~2x.

The asm of the non-const version without boundschecks looks ok, but it has to deal with the possibility of negative indices:
```
.LBB3_13:
	movq	(%rdx), %rax
	vmovsd	(%rsi), %xmm0
	movq	%rax, %rdi
	sarq	$63, %rdi
	andq	%r12, %rdi
	addq	%rax, %rdi
	vaddsd	(%rbx,%rdi,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rbx,%rdi,8)
	leaq	(%r9,%rdx), %rax
	movq	(%r9,%rdx), %rdx
	leaq	(%rcx,%rsi), %rdi
	vmovsd	(%rcx,%rsi), %xmm0
	movq	%rdx, %rsi
	sarq	$63, %rsi
	andq	%r12, %rsi
	addq	%rdx, %rsi
	vaddsd	(%rbx,%rsi,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rbx,%rsi,8)
	leaq	(%r9,%rax), %rsi
	movq	(%r9,%rax), %rax
	leaq	(%rcx,%rdi), %rbp
	vmovsd	(%rcx,%rdi), %xmm0
	movq	%rax, %rdx
	sarq	$63, %rdx
	andq	%r12, %rdx
	addq	%rax, %rdx
	vaddsd	(%rbx,%rdx,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rbx,%rdx,8)
	leaq	(%r9,%rsi), %rdx
	movq	(%r9,%rsi), %rax
	vmovsd	(%rcx,%rbp), %xmm0
	movq	%rax, %rdi
	sarq	$63, %rdi
	andq	%r12, %rdi
	addq	%rax, %rdi
	vaddsd	(%rbx,%rdi,8), %xmm0, %xmm0
	leaq	(%rcx,%rbp), %rsi
	vmovsd	%xmm0, (%rbx,%rdi,8)
	addq	%r9, %rdx
	addq	%rcx, %rsi
	addq	$-4, %r15
	jne	.LBB3_13
```

If we enable boundschecks, we get branching in the loop:
```
.LBB3_8:
	movq	(%rdx), %rbx
	movq	%rbx, %rax
	sarq	$63, %rax
	andq	%r12, %rax
	addq	%rbx, %rax
	cmpq	%r12, %rax
	jge	.LBB3_10
	testq	%rax, %rax
	js	.LBB3_10
	vmovsd	(%rdi), %xmm0
	vaddsd	(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rbp,%rax,8)
	addq	%rcx, %rdx
	addq	%rsi, %rdi
	decq	%r14
	jne	.LBB3_8
```

In comparison the constant-index case looks pretty nice:
```
.LBB3_10:
	movq	(%rdi,%rbx), %rax
	vmovsd	(%rcx), %xmm0
	vaddsd	(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rbp,%rax,8)
	movq	8(%rdi,%rbx), %rax
	vmovsd	(%r8,%rcx), %xmm0
	vaddsd	(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rbp,%rax,8)
	movq	16(%rdi,%rbx), %rax
	vmovsd	(%rcx,%r8,2), %xmm0
	vaddsd	(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rbp,%rax,8)
	movq	24(%rdi,%rbx), %rax
	vmovsd	(%rsi,%rcx), %xmm0
	vaddsd	(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rbp,%rax,8)
	addq	%rdx, %rcx
	addq	$32, %rdi
	cmpq	$8192, %rdi
	jne	.LBB3_10
```
And we get safe indexing even without `boundscheck=True`.
aseyboldt(2022-08-05 15:37:26):This also raises the question, how we want to deal with out of bounds access by default.
I'm not really comfortable with a default implementation that doesn't check bounds for indexing. Should we just enable boundschecking by default using a config option (right now we use the numba default boundscheck=False), and allow users to overwrite that if they ask explicitly? Or should we write ops like indexing that use user-input to be safe even when `boundscheck=False`?
brandonwillard(2022-08-06 04:31:58):You've demonstrated that there's possibly a clear difference between constant and non-constant inputs, but we really need to know whether or not all the extra code is providing value, and only a comparison with and without it would help determine that.  Also, it's better if you provide the generated LLVM IR instead of the ASM generated for your machine.
aseyboldt(2022-08-12 22:40:11):I turned part of it into a rewrite, that makes it a bit cleaner. Apart from that I'm not really sure what extra code you are referring to.
aseyboldt(2022-08-13 03:48:00):numbas default for boundschecks is False, so unless we change that, this means that `at.as_tensor_variable(np.zeros(2))[3]` has undefined behavior. I think this is *terrible* API. We don't have this problem in most numba ops, because most of the time user input can't make us access incorrect memory even if boundschecks are off, because we (hopefully) control the bounds of loops correctly.
So I think we really need boundschecks of some sort by default.
We can however sometimes tell if boundschecks are unnecessary and optimize them away (something that numba can't do on its own), so why wouldn't we?
brandonwillard(2022-08-15 20:30:25):> numbas default for boundschecks is False, so unless we change that, this means that `at.as_tensor_variable(np.zeros(2))[3]` has undefined behavior. I think this is _terrible_ API. 
> We don't have this problem in most numba ops, because most of the time user input can't make us access incorrect memory even if boundschecks are off, because we (hopefully) control the bounds of loops correctly. 
> So I think we really need boundschecks of some sort by default. We can however sometimes tell if boundschecks are unnecessary and optimize them away (something that numba can't do on its own), so why wouldn't we?

Aesara's responsibility is to faithfully preserve _the results of explicitly defined computations for valid inputs_ when transpiling to Numba and other targets.  Since most errors aren't specified in an Aesara graph&mdash;aside from `RaiseOp`s&mdash;they don't fall under that responsibility.  In general, we currently aren't trying to preserve _all_ of the behavior of a single target&mdash;Python included&mdash;across all other transpilation targets.

Regardless, the scope of this PR&mdash;and its related issue&mdash;does not cover manual bounds checking.  We can discuss it in a new issue or Discussion, though.
aseyboldt(2022-08-21 23:27:21):I'm actually a bit shocked you would accept something in aesara where we access invalid memory for wrong user input by default. I am not going to remove boundchecks from the PR, I'd feel responsible for all the headache that would lead to.

> Aesara's responsibility is to faithfully preserve the results of explicitly defined computations for valid inputs when transpiling to Numba and other targets

Not sure where that is coming from. I'd say aesara's responsibility is to produce decent code, however that happens. And invalid memory access is certainly not that.
brandonwillard(2022-08-22 00:32:28):> I'm actually a bit shocked you would accept something in aesara where we access invalid memory for wrong user input by default. 

You seem to be aware that bounds checking already exists in Numba, but you're also assigning the same responsibility to Aesara.  If you have this much disgust for a lack of bounds checking, then you need to take that up with Numba&mdash;and a few other programming languages, as well.

[As I said above](https://github.com/aesara-devs/aesara/pull/1081#pullrequestreview-1071861991), if you found a bug in Numba's bounds checking that's solved by your implementation, please report it to them.  We will always consider adding code that works around a current Numba bug or missing feature, but that doesn't seem to be the case here.  If it is, tell us.

As you mentioned, we can override Numba's defaults and compile these graphs with bounds checking turned on by default.  That's a viable approach.  That's also _a completely independent change_; one that does not factor into the issue addressed by this PR.

> I am not going to remove boundchecks from the PR, I'd feel responsible for all the headache that would lead to.

That's fine; we can take care of it.

> > Aesara's responsibility is to faithfully preserve the results of explicitly defined computations for valid inputs when transpiling to Numba and other targets
> 
> Not sure where that is coming from. 

That's in reference to the kinds of computations that should be expressed in our Numba implementations of Aesara nodes.  If you read the rest of what I wrote, you'll see how it relates to explicit error handling like the kind you've added.

> I'd say aesara's responsibility is to produce decent code, however that happens. And invalid memory access is certainly not that.

Unless the code was explicitly designed/intended to prevent invalid memory accesses caused by bad user input, such an error says nothing about the quality of the code.  It only says something about the purpose and/or expectations of the code.  Sometimes the purpose/expectations for code involves **performance**, and bounds checking can hinder performance quite a bit.  In that case, bounds checking would not make for decent code.

Regardless, unnecessary redundancy does not make code more decent, so, unless your additions are addressing something currently missing from Numba (as mentioned above), these changes are not more decent than the same code without the redundant bounds checking.
aseyboldt(2022-08-22 15:50:20):I kind of hope we are just talking past each other here, so I'll just summarize a bit, and hopefully that helps:

`AdvancedIncSubtensor1` is using *user defined* indices, so I think there have to be boundschecks of some kind by default. I don't think this necessarily needs to be the case for most other ops, because most of the time we will only access invalid memory if there is a bug in aesara, but not if there is a bug in the user code.
Checked array access is the norm all over the python ecosystem (python itself, numpy, scipy, sklearn, pytorch, jax, tensorflow...). numba is the only exception I can think of right now, where it is not on by default. I don't actually agree with this default but I also think this is still much more reasonable in numba itself compared to aesara, because if you use numba directly it is much less hidden.

This is why I set `boundschecks=True` on the numba implementation of that op, so that we use the numba boundscheck support by default.

There is however a very common case where we can eliminate the boundschecks during graph execution and still have safe array access: If the array of indices is known at compile time we can simply pre-compute the maximum and minimum entry, and check at graph execution time if those are valid for the other input arrays.

I proposed two different implementations of that, one where this happens entirely in the numba dispatch, and one where I moved it to the graph itself using a rewrite.
ricardoV94(2022-08-23 07:39:13):Sounds like numba gives us the option to enable boundchecks but doesn't do it by default. What's wrong with opting to use that in Aesara? 

We can have a numba-specific Aesara flag for disabling boundchecks introduced in numba Ops, if we don't want to add a numba specific variable at the Op level. 

Also what's with that `check_input` class variable in these `Op`s that doesn't seem to be used for anything?
brandonwillard(2022-08-23 15:29:13):> Sounds like numba gives us the option to enable boundchecks but doesn't do it by default. What's wrong with opting to use that in Aesara?
> 
> We can have a numba-specific Aesara flag for disabling boundchecks introduced in numba Ops, if we don't want to add a numba specific variable at the Op level.

Yes, if we want bounds checking in Numba, we need to use Numba's bound checking.  That's it.

> Also what's with that `check_input` class variable in these `Op`s that doesn't seem to be used for anything?

I think that variable is used by `COp` to perform C-level checks/validation.
aseyboldt(2022-08-23 15:40:37):I give up.
Sorry @ricardoV94...
ricardoV94(2022-08-23 19:43:27):> Yes, if we want bounds checking in Numba, we need to use Numba's bound checking. That's it.

Isn't this what the current PR proposed? Or are you referring to the small `check` inner-function? 
brandonwillard(2022-08-24 00:39:38):> Isn't this what the current PR proposed? Or are you referring to the small `check` inner-function?

This PR brings bounds checking to our graphs by adding a new property to `AdvancedIncSubtensor1` `Op`s; however, we don't benefit from having bounds checking at the graph-level (i.e. via explicit `CheckAndRaise` nodes).  

Our Python and C backends already perform bounds checking, and extra work would be needed in order to provide versions that don't (and use the newly introduced property).  Likewise, if we're going to do anything with bounds checking at the graph-level, we would need to do it for **all** `*Subtensor*` `Op`s, and not just `AdvancedIncSubtensor1`.

Also, has anyone considered how adding a new property like that to `AdvancedIncSubtensor1` affects other operations (e.g. node merging)?

Anyway, the approach in this PR consists of a much bigger set of changes than we need.  We only need a simple implementation in the spirit of
```python
@numba_njit(boundscheck=boundscheck)
def advancedincsubtensor1(x, vals, idxs):
    for idx, val in zip(idxs, vals):
        x[idx] += val
    return x
```
where `boundscheck` is potentially pulled from an `aesara.config` option or something similar.  At the very least, we don't want to override a user's local/environment's Numba config options, so, if a user sets [`NUMBA_BOUNDSCHECK`](https://numba.readthedocs.io/en/stable/reference/pysemantics.html?highlight=boundscheck#bounds-checking), Aesara should honor that value.  That's a hard requirement.

Also, if we're adding bounds checking for `AdvancedIncSubtensor`, then we need to add it to all the other Numba `*Subtensor*` implementations.  That's one of the reasons why **this is a distinct issue that should be addressed in another PR**.

brandonwillard(2022-08-24 01:27:12):I've create https://github.com/aesara-devs/aesara/pull/1143 to cover the issue associated with this PR.  We can address the default bounds checking after that.  In the meantime, if anyone wants (or ever wanted) bounds checking in Numba, they should be able to set [`NUMBA_BOUNDSCHECK`](https://numba.readthedocs.io/en/stable/reference/pysemantics.html?highlight=boundscheck#bounds-checking), as Numba itself advises doing.
brandonwillard(2022-07-28 22:56:50):We generally try to avoid manual checks at the Numba level.  Partly because the same checks can be introduced downstream by Numba itself.  For instance, if the values are constants, then some such checks occur at compile-time (e.g. during constant folding-like optimization passes), and at run-time in the code generated by `zip`, `for`, and `z[idx]`.  

Also, we want to honor the Numba-level options for disabling things like bounds checks.  If we add similar checks of our own, then we can end up effectively overriding such options.

There are definitely cases in which manual checks are warranted, but it's not clear to me whether or not this is one of those cases.
aseyboldt(2022-07-28 23:02:59):The point of that is that if we do it manually, we can always set `boundscheck=False` for that function without any safety issues (if the indices are known at compile time, as indicated in the code.)
I checked that this cleans up the generated assembly quite a bit, and also speeds up the execution of the function.
I've seen a lot of models where a big share of the execution time is in this op, so even smaller performance improvements matter.

I think even in general manual checks might be a good idea in many cases, often the optimizer will then optimize away the later checks and we end up with cleaner and faster asm code. Generally, the fewer checks happen within the loop the better.
ricardoV94(2022-08-12 22:47:40):What happened to `AdvancedIncSubtensor` (without the `1`)?
ricardoV94(2022-08-12 22:48:20):Can't numba optimize away the check when the inputs are constant?
ricardoV94(2022-08-12 22:51:34):I saw now you mention it in the PR description... maybe worth adding that explanation to the commit message?
aseyboldt(2022-08-12 23:06:06):done
aseyboldt(2022-08-12 23:10:50):Unfortunately not, because at compile time it doesn't know the shape of the array it is indexing into yet. But even if it did, I don't think the optimization model of llvm would allow an optimization like this, because it would change observable behaviour: With the optimization *no* element of the array is changed when there is an out of bounds access at the end, but without the optimization we still change the array up to this point. So unless it can prove that this can't be observed it is not allowed to move the check to the front of the loop.
Anyway, I checked it definitely doesn't do this right now.
aseyboldt(2022-08-12 23:11:44):I guess you referred to numba, not llvm. So the C-rules don't really apply, it still doesn't do this either however...
brandonwillard(2022-08-13 00:08:02):LLVM can and does perform constant propagation.  That's not enough to guarantee that bounds checks are completely removed, but it's an important thing for us to know when writing implementations.
codecov[bot](2022-07-29 14:38:20):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1083?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1083](https://codecov.io/gh/aesara-devs/aesara/pull/1083?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (bdced2d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/fd50f36b404d1c89a841907d3682537d5f7719ab?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (fd50f36) will **decrease** coverage by `0.01%`.
> The diff coverage is `88.88%`.

> :exclamation: Current head bdced2d differs from pull request most recent head 14f113b. Consider uploading reports for the commit 14f113b to get more accurate results

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1083/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1083?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1083      +/-   ##
==========================================
- Coverage   79.28%   79.26%   -0.02%     
==========================================
  Files         152      152              
  Lines       48008    48018      +10     
  Branches    10925    10926       +1     
==========================================
+ Hits        38061    38063       +2     
- Misses       7450     7455       +5     
- Partials     2497     2500       +3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1083?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1083/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `85.41% <85.71%> (+<0.01%)` | :arrow_up: |
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/1083/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1083/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.33% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/1083/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `49.71% <0.00%> (-1.30%)` | :arrow_down: |
| [aesara/link/numba/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1083/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvcmFuZG9tLnB5) | `97.74% <0.00%> (-1.09%)` | :arrow_down: |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1083/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `89.00% <0.00%> (-0.30%)` | :arrow_down: |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1083/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.92% <0.00%> (-0.04%)` | :arrow_down: |
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1083/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `74.76% <0.00%> (+1.86%)` | :arrow_up: |

RuneDominik(2022-08-01 14:01:41):While writing the tests, some errors became apparent (wrong normalization in the gradient and wrong dtype due to the use of `upgrade_to_float64`). Consequently I will have to rewrite the history to meet the PR-requirements. I'll do so when no further substantial requests exist.
RuneDominik(2022-08-04 09:38:57):Please let me know If I should further change the history of the PR. I'm not 100% sure if my rebasing-outcome is what is intended to be endorsed by the PR Guidelines.
brandonwillard(2022-08-04 17:51:41):> Please let me know If I should further change the history of the PR. I'm not 100% sure if my rebasing-outcome is what is intended to be endorsed by the PR Guidelines.

It looks like this branch needs to be rebased onto upstream's (i.e. this repo's) `main`, because it appears to have picked up some unrelated commits from there.
RuneDominik(2022-08-05 09:18:28):Thanks for the hint, should be fixed now.
brandonwillard(2022-08-09 00:26:13):```suggestion
```
This docstring isn't adding any extra information, so it's not necessary.  Also, I don't believe it's in NumPy format (i.e. it shouldn't start with a newline).
codecov[bot](2022-07-29 23:34:29):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1084?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1084](https://codecov.io/gh/aesara-devs/aesara/pull/1084?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (bec1d3f) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/8763981ca4263e153c68e6be39c03a272c027b60?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8763981) will **increase** coverage by `0.02%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1084/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1084?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1084      +/-   ##
==========================================
+ Coverage   79.23%   79.26%   +0.02%     
==========================================
  Files         152      152              
  Lines       47943    48000      +57     
  Branches    10909    10925      +16     
==========================================
+ Hits        37990    38047      +57     
  Misses       7453     7453              
  Partials     2500     2500              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1084?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1084/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.92% <ø> (ø)` | |
| [aesara/tensor/nlinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1084/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubGluYWxnLnB5) | `98.57% <0.00%> (-0.01%)` | :arrow_down: |
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/1084/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.69% <0.00%> (+0.09%)` | :arrow_up: |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1084/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.31% <0.00%> (+0.51%)` | :arrow_up: |

rlouf(2022-07-29 23:40:50):We can start simple with adding a single page to the documentation that contains doc for every distribution available, like PyMC does.
rlouf(2022-08-01 17:15:06):I added the `GammaRV` Op  to the [random.basic](https://aesara.readthedocs.io/en/latest/library/tensor/random/basic.html) documentation. Good to merge on my end.
brandonwillard(2022-08-01 18:33:14):This is a good addition.  It reminds me that we still need to do this (i.e. replace manually entered method documentation with `autoclass` directives) for _all_ references to objects/classes in the documentation.
rlouf(2022-08-01 19:06:11):Yes. I looked at the documentation of the `aesara.tensor` module and was surprised to see it was all manually entered.

We'll also need to document the `RandomStream` approach better, and we can pull the corresponding Ops's docstrings.
brandonwillard(2022-08-01 20:03:19):We should also provide an `aesara.tensor.random.default_rng` interface to `RandomStream`.
codecov[bot](2022-08-04 18:52:01):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1088?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1088](https://codecov.io/gh/aesara-devs/aesara/pull/1088?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3706c2c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/1d36872e32f973eb2afa6a9bca078db343325205?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1d36872) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1088/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1088?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1088   +/-   ##
=======================================
  Coverage   79.27%   79.27%           
=======================================
  Files         152      152           
  Lines       48011    48002    -9     
  Branches    10925    10925           
=======================================
- Hits        38062    38055    -7     
+ Misses       7451     7450    -1     
+ Partials     2498     2497    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1088?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1088/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvcmFuZG9tLnB5) | `98.82% <100.00%> (+1.08%)` | :arrow_up: |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1088/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.94% <100.00%> (-0.01%)` | :arrow_down: |

ricardoV94(2022-08-01 17:24:20):In a previous iteration, I simply set `p=np.broadcast_to(p, size + p.shape[-1:])`, and let that function capture any broadcast issues, but calling `cumsum` on the broadcasted array below seems to be considerably slower, so I opted for the explicit check here.
brandonwillard(2022-08-04 19:30:14):FYI: I used that `np.searchsorted` approach only for the convenience, so we should definitely consider alternative approaches when/if they address other issues (e.g. code complexity, performance, etc.) as well.
ricardoV94(2022-08-05 11:58:58):I don't see any obvious issue with that approach. This PR already simplifies logic a bit so I am happy with the state of affairs.
codecov[bot](2022-08-02 21:18:45):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1091?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1091](https://codecov.io/gh/aesara-devs/aesara/pull/1091?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9f85539) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/01c4a55fdcd38e807bb48d60e9115d4bb1f77e03?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (01c4a55) will **increase** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1091/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1091?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1091      +/-   ##
==========================================
+ Coverage   79.26%   79.27%   +0.01%     
==========================================
  Files         152      152              
  Lines       48000    48011      +11     
  Branches    10925    10925              
==========================================
+ Hits        38047    38062      +15     
+ Misses       7453     7451       -2     
+ Partials     2500     2498       -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1091?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1091/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.95% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1091/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `72.89% <0.00%> (-1.87%)` | :arrow_down: |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1091/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `89.29% <0.00%> (+0.29%)` | :arrow_up: |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/1091/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `51.00% <0.00%> (+1.29%)` | :arrow_up: |

rlouf(2022-08-04 21:21:30):I'll keep adding 3-4 docstrings every day until every distribution is documented. We can merge now or wait, I don't have a preference.
brandonwillard(2022-08-04 17:40:54):I think we need to use single backticks for "linkable" library objects and double backticks for generic code expressions.
E.g.
```suggestion
            Sample shape. If the given size is, e.g. ``(m, n, k)`` then ``m * n * k``
```
brandonwillard(2022-08-04 17:43:25):It might not matter in this direction, though. All I do know that we don't want to use double backticks for class/function/whatever names that could be linked via Sphinx.
codecov[bot](2022-08-04 04:33:56):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1095?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1095](https://codecov.io/gh/aesara-devs/aesara/pull/1095?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e470fcb) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/01c4a55fdcd38e807bb48d60e9115d4bb1f77e03?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (01c4a55) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1095/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1095?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1095   +/-   ##
=======================================
  Coverage   79.26%   79.27%           
=======================================
  Files         152      152           
  Lines       48000    48001    +1     
  Branches    10925    10925           
=======================================
+ Hits        38047    38052    +5     
+ Misses       7453     7451    -2     
+ Partials     2500     2498    -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1095?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/1095/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `51.00% <100.00%> (+1.29%)` | :arrow_up: |
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1095/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `72.89% <0.00%> (-1.87%)` | :arrow_down: |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1095/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `89.29% <0.00%> (+0.29%)` | :arrow_up: |

ricardoV94(2022-08-04 03:14:43):The error message could more succinctly say both branches must have the same number of dimensions since that's what's being checked.
ricardoV94(2022-08-04 03:18:13):Can we check instead a case where one branch is shape=(1,) and the other shape=(2,)? Just because some Type error checks might still be lurking around in the codebase.
codecov[bot](2022-08-05 18:28:27):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1099?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1099](https://codecov.io/gh/aesara-devs/aesara/pull/1099?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (142b979) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/1d36872e32f973eb2afa6a9bca078db343325205?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1d36872) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1099/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1099?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1099   +/-   ##
=======================================
  Coverage   79.27%   79.28%           
=======================================
  Files         152      152           
  Lines       48011    48017    +6     
  Branches    10925    10925           
=======================================
+ Hits        38062    38068    +6     
  Misses       7451     7451           
  Partials     2498     2498           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1099?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1099/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.96% <100.00%> (+0.01%)` | :arrow_up: |

codecov[bot](2022-08-05 22:04:45):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1100?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1100](https://codecov.io/gh/aesara-devs/aesara/pull/1100?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ef591ef) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/1d36872e32f973eb2afa6a9bca078db343325205?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1d36872) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1100/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1100?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1100   +/-   ##
=======================================
  Coverage   79.27%   79.27%           
=======================================
  Files         152      152           
  Lines       48011    48011           
  Branches    10925    10925           
=======================================
  Hits        38062    38062           
  Misses       7451     7451           
  Partials     2498     2498           
```



brandonwillard(2022-08-11 16:33:06):Here are the graphs from each `local_elemwise_alloc` test case:
```python
tests/tensor/test_basic_opt.py::test_local_elemwise_alloc[<lambda>-x_shape0-y_shape0]
Elemwise{mul,no_inplace} [id A] 3
 |Alloc [id B] 2
 | |TensorConstant{1} [id C]
 | |Shape_i{0} [id D] 1
 | | |y [id E]
 | |Shape_i{1} [id F] 0
 |   |y [id E]
 |x [id G]
PASSED
tests/tensor/test_basic_opt.py::test_local_elemwise_alloc[<lambda>-x_shape1-y_shape1]
Elemwise{mul,no_inplace} [id A] 3
 |Alloc [id B] 2
 | |TensorConstant{1} [id C]
 | |Shape_i{0} [id D] 1
 | | |y [id E]
 | |Shape_i{1} [id F] 0
 |   |y [id E]
 |x [id G]
PASSED
tests/tensor/test_basic_opt.py::test_local_elemwise_alloc[<lambda>-x_shape2-y_shape2]
Elemwise{mul,no_inplace} [id A] 6
 |x [id B]
 |Assert{msg=Shapes must be equal} [id C] 5
   |y [id D]
   |All [id E] 4
     |Elemwise{eq,no_inplace} [id F] 3
       |MakeVector{dtype='int64'} [id G] 2
       | |Shape_i{0} [id H] 1
       | | |y [id D]
       | |Shape_i{1} [id I] 0
       |   |y [id D]
       |TensorConstant{[2 3]} [id J]
PASSED
tests/tensor/test_basic_opt.py::test_local_elemwise_alloc[<lambda>-x_shape3-y_shape3]
Elemwise{Mul}[(0, 0)] [id A] 2
 |Alloc [id B] 1
 | |x [id C]
 | |TensorConstant{1} [id D]
 | |TensorConstant{3} [id E]
 |InplaceDimShuffle{x,x} [id F] 0
   |y [id G]
PASSED
tests/tensor/test_basic_opt.py::test_local_elemwise_alloc[<lambda>-x_shape4-y_shape4]
Elemwise{mul,no_inplace} [id A] 2
 |InplaceDimShuffle{x} [id B] 1
 | |y [id C]
 |Alloc [id D] 0
   |TensorConstant{1} [id E]
   |x [id F]
XPASS (Not implemented)
tests/tensor/test_basic_opt.py::test_local_elemwise_alloc[<lambda>-x_shape5-y_shape5]
Elemwise{mul,no_inplace} [id A] 1
 |Alloc [id B] 0
 | |x [id C]
 | |TensorConstant{15} [id D]
 | |TensorConstant{1} [id E]
 |y [id F]
PASSED
tests/tensor/test_basic_opt.py::test_local_elemwise_alloc[<lambda>-x_shape6-y_shape6]
Elemwise{mul,no_inplace} [id A] 6
 |Assert{msg=Shapes must be equal} [id B] 5
 | |x [id C]
 | |All [id D] 4
 |   |Elemwise{eq,no_inplace} [id E] 3
 |     |MakeVector{dtype='int64'} [id F] 2
 |     | |Shape_i{0} [id G] 1
 |     | | |x [id C]
 |     | |Shape_i{1} [id H] 0
 |     |   |x [id C]
 |     |TensorConstant{[15  2]} [id I]
 |y [id J]
PASSED
tests/tensor/test_basic_opt.py::test_local_elemwise_alloc[<lambda>-x_shape7-y_shape7]
Elemwise{Mul}[(0, 0)] [id A] 2
 |Alloc [id B] 1
 | |x [id C]
 | |TensorConstant{15} [id D]
 | |TensorConstant{1} [id E]
 |Alloc [id F] 0
   |y [id G]
   |TensorConstant{15} [id D]
   |TensorConstant{1} [id E]
PASSED
tests/tensor/test_basic_opt.py::test_local_elemwise_alloc[<lambda>-x_shape8-y_shape8]
Elemwise{mul,no_inplace} [id A] 12
 |Assert{msg=Shapes must be equal} [id B] 11
 | |x [id C]
 | |All [id D] 10
 |   |Elemwise{eq,no_inplace} [id E] 9
 |     |MakeVector{dtype='int64'} [id F] 8
 |     | |Shape_i{0} [id G] 7
 |     | | |x [id C]
 |     | |Shape_i{1} [id H] 6
 |     |   |x [id C]
 |     |TensorConstant{[15  2]} [id I]
 |Assert{msg=Shapes must be equal} [id J] 5
   |y [id K]
   |All [id L] 4
     |Elemwise{eq,no_inplace} [id M] 3
       |MakeVector{dtype='int64'} [id N] 2
       | |Shape_i{0} [id O] 1
       | | |y [id K]
       | |Shape_i{1} [id P] 0
       |   |y [id K]
       |TensorConstant{[15  2]} [id I]
PASSED
tests/tensor/test_basic_opt.py::test_local_elemwise_alloc[<lambda>-x_shape9-y_shape9]
Elemwise{mul,no_inplace} [id A] 7
 |InplaceDimShuffle{1,0} [id B] 6
 | |Assert{msg=Shapes must be equal} [id C] 5
 |   |x [id D]
 |   |All [id E] 4
 |     |Elemwise{eq,no_inplace} [id F] 3
 |       |MakeVector{dtype='int64'} [id G] 2
 |       | |Shape_i{0} [id H] 1
 |       | | |x [id D]
 |       | |Shape_i{1} [id I] 0
 |       |   |x [id D]
 |       |TensorConstant{[15  2]} [id J]
 |y [id K]
PASSED
tests/tensor/test_basic_opt.py::test_local_elemwise_alloc[<lambda>-x_shape10-y_shape10]
Elemwise{mul,no_inplace} [id A] 2
 |InplaceDimShuffle{x,0,1} [id B] 1
 | |x [id C]
 |InplaceDimShuffle{x,0,1} [id D] 0
   |y [id E]
PASSED
tests/tensor/test_basic_opt.py::test_local_elemwise_alloc[<lambda>-x_shape11-y_shape11]
Elemwise{mul,no_inplace} [id A] 2
 |InplaceDimShuffle{x,1,0} [id B] 1
 | |x [id C]
 |InplaceDimShuffle{x,0,1} [id D] 0
   |y [id E]
PASSED
```
Aside from the shape-specifying inputs to the `Alloc` `Op`s in these tests, the inputs have no static shape information.  None of the resulting graphs contain `BroadcastTo` `Op`s, so it looks like our rewrites are doing their jobs.
codecov[bot](2022-08-12 06:03:12):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1102?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1102](https://codecov.io/gh/aesara-devs/aesara/pull/1102?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b07bc49) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/cfc931fae57ece76605de98a499d701c6b57b51e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (cfc931f) will **decrease** coverage by `0.01%`.
> The diff coverage is `80.70%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1102/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1102?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1102      +/-   ##
==========================================
- Coverage   79.28%   79.27%   -0.02%     
==========================================
  Files         151      151              
  Lines       48005    48004       -1     
  Branches    10922    10919       -3     
==========================================
- Hits        38061    38053       -8     
- Misses       7441     7447       +6     
- Partials     2503     2504       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1102?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/subtensor\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1102/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3Jfb3B0LnB5) | `86.81% <71.42%> (-0.31%)` | :arrow_down: |
| [aesara/tensor/basic\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1102/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpY19vcHQucHk=) | `85.69% <86.66%> (-0.21%)` | :arrow_down: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/1102/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `88.92% <92.85%> (-0.02%)` | :arrow_down: |
| [aesara/tensor/math\_opt.py](https://codecov.io/gh/aesara-devs/aesara/pull/1102/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9tYXRoX29wdC5weQ==) | `87.14% <0.00%> (-0.13%)` | :arrow_down: |

ricardoV94(2022-08-12 10:38:51):Should we include conditions where one of the dims is a constant of 1 (and also where both are constants of 1)? Or are those checked in a different test?
ricardoV94(2022-08-12 10:46:47):Should this be raising an error? Why was it called like this before?
ricardoV94(2022-08-12 10:49:22):A lot of missing coverage, I guess that was already the case before?
brandonwillard(2022-08-12 20:38:13):Yes, unfortunately.
brandonwillard(2022-08-13 22:16:47):Yes, those should be covered by some of the other tests, but I added some explicit ones anyway.
brandonwillard(2022-08-13 22:17:30):It's just a very poorly named test method.
brandonwillard(2022-08-13 23:24:46):Now that I think about it, that whole `ARange` branch is effectively unreachable and/or pointless, because, if `idx.owner.inputs` are all constants (as the rewrite requires), the entire node would've been constant folded before reaching that point (i.e. there would be no `ARange` node at all).
codecov[bot](2022-08-08 17:23:29):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1105?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1105](https://codecov.io/gh/aesara-devs/aesara/pull/1105?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d50fc01) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2c9f692aac70c59d46ae4dc69cabe4940bf3539b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2c9f692) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1105/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1105?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1105   +/-   ##
=======================================
  Coverage   79.30%   79.31%           
=======================================
  Files         162      162           
  Lines       48162    48180   +18     
  Branches    10938    10938           
=======================================
+ Hits        38197    38215   +18     
  Misses       7453     7453           
  Partials     2512     2512           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1105?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1105/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `98.99% <100.00%> (+0.03%)` | :arrow_up: |

</details>
rlouf(2022-08-17 01:40:34):I think I have found a small API inconsistency. Indeed, while `PermutationRV` behaves identically to its numpy equivalent by interpreting `permutation(a)` as `permutation(np.range(a))` when `a`  is an `int`:

```python
import aesara.tensor as at
import numpy as np

srng = at.random.RandomStream(0)

b = at.iscalar('b')
c_rv = srng.permutation(b)

print(c_rv.eval({b: 20}))
# [10  8 19 16  0 17 18  7  9 12  1 15  4  6  3  5 11  2 13 14]

rng = np.random.default_rng()
print(rng.permutation(20))
# [ 6  2 18  9  3 16  5  4 14 12 19 17  0  1  7 15 13  8 10 11]
```

`ChoiceRV` does not:

```python
import aesara.tensor as at
import numpy as np

srng = at.random.RandomStream(0)

b = at.iscalar('b')
c_rv = srng.choice(b)

print(c_rv.eval({b: 100}))
# 100; does not change if we change seed

rng = np.random.default_rng()
print(rng.choice(100))
# 30; changes with seed
```

Should I go ahead and make `ChoiceRV` behave similarly to `PermutationRV` or is there a reason for this inconsistency?
brandonwillard(2022-08-17 02:09:26):> Should I go ahead and make `ChoiceRV` behave similarly to `PermutationRV` or is there a reason for this inconsistency?

If it's not behaving like it does in NumPy, then it most likely needs to be fixed.
rlouf(2022-08-17 18:02:27):Interestingly, `ChoiceRV`'s behavior also differs from NumPy's in that it does not accept input tensors that have more than one dimention while NumPy does. The following raises an error:

```python
import aesara.tensor as at
import numpy as np

arr = np.vstack([[1,2], [3,4]])
srng = at.random.RandomStream(0)
c_rv = srng.choice(at.as_tensor(arr))
print(c_rv.eval())
```

while

```python
import aesara.tensor as at
import numpy as np

arr = np.vstack([[1,2], [3,4]])
srng = at.random.RandomStream(0)
c_rv = srng.choice(at.as_tensor(arr))
print(c_rv.eval())
# [1, 2]
```

I could not find an explanation for this anywhere in the codebase, although it seems that this was intentional as the tests explicitly test for the above example raising an exception. If you can think of a specific reason for this behavior I will document it, otherwise I will change it to follow NumPy's.

Besides this I have no docstring left to add.
rlouf(2022-08-24 03:30:17):Thank you for the thorough review. I included all suggestions that were not related to the behavior when `size=None` and rebased the changes.

I think we may define "sample" differently? For instance for the normal distribution:

````python
import aesara.tensor as at

srng = at.random.RandomStream(0)
loc = at.vector()
scale = at.vector()
Y_rv = snrg.normal(loc, scale, size=None)

Y_rv.eval()
# An array of dimensions np.broadcast(loc, scale).size`
````

And not a single sample. Perhaps I should also check these broadcasting behaviors while we're at it.

Also, what about my [comment](https://github.com/aesara-devs/aesara/pull/1105#issuecomment-1218334644) about `ChoiceRV` behaving differently from its NumPy equivalent?
brandonwillard(2022-08-24 03:53:10):> Also, what about my [comment](https://github.com/aesara-devs/aesara/pull/1105#issuecomment-1218334644) about `ChoiceRV` behaving differently from its NumPy equivalent?

Looks like that might not have been implemented yet, so we need an issue for it.
brandonwillard(2022-08-24 19:34:29):FYI: I've been waiting to see the rendered documentation, but the job doesn't seem to finish.
rlouf(2022-08-24 19:48:18):Regarding the  docstring for the `size` argument. I think that the following:

```python
size
   Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
   independent, identically distributed samples are
   returned. Default is `None` in which case a single sample
   is returned.
```

Is true (most of the time) when
(1) Arguments are scalars.
(2) The distribution's support is 0-dimensional

When a parameter must be of dimension > 0 (`DirichletRV` for instance) or the distribution's support is at least a vector then we need to specify the sampling shape in terms of these parameter's shape. NumPy could be a little more explicit in some of these docstrings.

I've also prepared a small write-up on shape semantics and broadcasting that we can add later to complement the content of these docstrings.
ricardoV94(2022-08-24 19:49:41):The binomial is pretty clear:

> size: int or tuple of ints, optional
>
> Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. If size is None (default), a single value is returned if n and p are both scalars. Otherwise, np.broadcast(n, p).size samples are drawn.

https://numpy.org/doc/stable/reference/random/generated/numpy.random.binomial.html
brandonwillard(2022-08-24 19:51:23):> Regarding the docstring for the `size` argument. I think that the following:
> 
> ```python
> size
>    Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
>    independent, identically distributed samples are
>    returned. Default is `None` in which case a single sample
>    is returned.
> ```
> 
> Is true (most of the time) when (1) Arguments are scalars. (2) The distribution's support is 0-dimensional
> 
> When a parameter must be of dimension > 0 (`DirichletRV` for instance) or the distribution's support is at least a vector then we need to specify the sampling shape in terms of these parameter's shape. NumPy could be a little more explicit in some of these docstrings.
> 
> I've also prepared a small write-up on shape semantics and broadcasting that we can add later to complement the content of these docstrings.

Yeah, that works.  The basic idea is that `size` replicates the dimensions determined by the parameters and the support dimensions of the underlying distribution.
brandonwillard(2022-08-24 19:53:37):> The binomial is pretty clear:
> 
> > size: int or tuple of ints, optional
> > Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. If size is None (default), a single value is returned if n and p are both scalars. Otherwise, np.broadcast(n, p).size samples are drawn.
> 
> https://numpy.org/doc/stable/reference/random/generated/numpy.random.binomial.html

It is.  It would be nice to have one explanation that covers everything, though.
rlouf(2022-08-24 19:59:40):Documentation for the binomial is very clear in NumPy, but I've found that it wasn't always the case. Imo it's ok to document the simplest case in these docstrings, and have a separate tutorial on shape semantics and broadcasting behavior.
ricardoV94(2022-08-24 20:03:31):> Documentation for the binomial is very clear in NumPy, but I've found that it wasn't always the case. Imo it's ok to document the simplest case in these docstrings, and have a separate tutorial on shape semantics and broadcasting behavior.

Certainly. The "gaps" in their docs may come from the fact that they do not support batched parameters in multivariate distributions. Which in itself is worth mentioning.
rlouf(2022-08-25 03:21:46):I have updated all the docstrings to only explain the non-broadcasted cases (eg scalar and scalar parameters for the normal distribution, scalar and vector parameters for the multinomial distribution, etc.) instead of enumerating the different possibilities. I think this should do alongside a general explanation of how broadcasting works with `RandomVariables` and what the `size` argument represents.

Broadcasting rules are not always trivial, we should explicit them in the distributions' docstring in the form of `gufunc` signatures for instance.
brandonwillard(2022-08-11 16:46:11):```suggestion
        f(x; \mu, \lambda) = \frac{1}{2 \lambda} \exp\left(-\frac{|x-\mu|}{\lambda}\right)
```
brandonwillard(2022-08-11 16:47:38):```suggestion
        f(x; \mu, \lambda) = \sqrt{\frac{\lambda}{2 \pi x^3}} \exp\left(-\frac{\lambda (x-\mu)^2}{2 \mu^2 x}\right)
```
brandonwillard(2022-08-11 16:47:58):```suggestion
        f(x; \alpha, \beta) = \frac{\beta^\alpha}{\Gamma(\alpha)} x^{-(\alpha+1)} \exp\left(-\frac{\beta}{x}\right)
```
brandonwillard(2022-08-11 16:48:33):```suggestion
        f(x; x_0, \gamma) = \frac{1}{\pi \gamma \left(1 + (\frac{x-x_0}{\gamma})^2\right)}
```
brandonwillard(2022-08-11 16:48:56):```suggestion
        f(x; x_0, \gamma) = \frac{1}{\pi \gamma \left(1 + (\frac{x-x_0}{\gamma})^2\right)}
```
brandonwillard(2022-08-11 16:49:56):```suggestion
    before observing the :math:`n`\th success in terms of the probability of
```
brandonwillard(2022-08-11 16:50:37):```suggestion
    where :math:`B` is the beta function:
```
brandonwillard(2022-08-20 21:15:02):```suggestion
        f(\boldsymbol{x}; \boldsymbol{\mu}, \Sigma) = \det(2 \pi \Sigma)^{-1/2}  \exp\left(-\frac{1}{2} (\boldsymbol{x} - \boldsymbol{\mu})^T \Sigma (\boldsymbol{x} - \boldsymbol{\mu})\right)
```
brandonwillard(2022-08-20 21:15:27):```suggestion
    r"""A multivariate normal random variable.
```
brandonwillard(2022-08-20 21:17:40):```suggestion
            Given a size of, for example, `(m, n, k)`, `m * n * k` samples are generated. Because each sample is
            `N`-dimensional, the output shape is `(m, n, k, N)`. If no shape is
            specified, a single `N`-dimensional sample is returned.
```
brandonwillard(2022-08-20 21:18:33):```suggestion
    for :math:`x > 0`, where :math:`\alpha > 0` and :math:`\beta > 0`. :math:`Gamma` is the gamma function :
```
brandonwillard(2022-08-20 21:21:02):```suggestion
        r"""Draw samples from a truncated exponential distribution.
```
brandonwillard(2022-08-20 21:22:19):```suggestion
           Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:23:13):```suggestion
           Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:23:31):```suggestion
           Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:23:46):```suggestion
           Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:24:00):```suggestion
           Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:24:15):```suggestion
            Sample shape. If the given size is `(m, n, k)`, then `m * n *
```
brandonwillard(2022-08-20 21:24:28):```suggestion
            Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:24:41):```suggestion
            Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:24:54):```suggestion
            Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:25:05):```suggestion
            Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:25:18):```suggestion
            Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:25:33):```suggestion
            Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:25:45):```suggestion
            Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:25:59):```suggestion
            Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:26:09):```suggestion
            Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:26:22):```suggestion
            Sample shape. If the given size is `(m, n, k)`, then `m * n * k`
```
brandonwillard(2022-08-20 21:28:01):```suggestion
            is returned.
```
brandonwillard(2022-08-20 21:28:55):```suggestion
    The probability mass function for `binomial` for the number :math:`k` of successes
```
brandonwillard(2022-08-20 21:29:27):```suggestion
            variable is returned.
```
brandonwillard(2022-08-20 21:30:51):```suggestion
            f(k; p, n, a, b) = {n \choose k} \frac{\operatorname{B}(k+a, n-k+b)}{\operatorname{B}(a,b)}
```
brandonwillard(2022-08-20 21:31:04):```suggestion
    where :math:`\operatorname{B}` is the beta function:
```
brandonwillard(2022-08-20 21:31:17):```suggestion
        \operatorname{B}(a, b) = \int_0^1 t^{a-1} (1-t)^{b-1} \mathrm{d}t
```
brandonwillard(2022-08-20 21:35:36):```suggestion
            independent, identically distributed random samples are
            returned. Default is `None`, in which case a single sample
            is returned.
```
brandonwillard(2022-08-20 21:36:16):```suggestion
            be greater than or equal to `low`, unless `high=None`, in which case
```
brandonwillard(2022-08-20 21:36:31):```suggestion
            Upper boundary of the output interval.  All values generated
```
brandonwillard(2022-08-20 21:37:08):```suggestion
            independent, identically distributed samples are
            returned. Default is `None`, in which case a single
            sample is returned.
```
brandonwillard(2022-08-20 21:37:29):```suggestion
            Lower boundary of the output interval.  All values generated
```
brandonwillard(2022-08-20 21:37:41):```suggestion
            Upper boundary of the output interval.  All values generated
```
brandonwillard(2022-08-20 21:38:13):```suggestion
            independent, identically distributed samples are
            returned. Default is `None`, in which case a single sample
            is returned.
```
brandonwillard(2022-08-20 21:39:39):```suggestion
            When ``True``, sampling is performed with replacement.
```
brandonwillard(2022-08-20 21:40:10):```suggestion
            The probabilities associated with each entry in `a`. If not
            given, all elements have equal probability.
```
brandonwillard(2022-08-20 21:40:54):```suggestion
        r"""Randomly permute a sequence or a range of values.
```
brandonwillard(2022-08-20 21:41:16):```suggestion
            If `x` is an integer, randomly permute `np.arange(x)`. If `x` is a sequence,
            shuffle its elements randomly.
```
brandonwillard(2022-08-20 21:42:30):```suggestion
           independent, identically distributed samples are
           returned. Default is `None`, in which case a single sample
```
brandonwillard(2022-08-20 21:42:49):```suggestion
           independent, identically distributed sample are
           returned. Default is `None`, in which case a single sample
           is returned.
```
brandonwillard(2022-08-20 21:43:05):```suggestion
           independent, identically distributed samples are
           returned. Default is `None`, in which case a single sample
           is returned.
```
brandonwillard(2022-08-20 21:43:21):```suggestion
           independent, identically distributed samples are
           returned. Default is `None` in which case a single sample
           is returned.
```
brandonwillard(2022-08-20 21:44:34):```suggestion
           independent, identically distributed samples are
           returned. Default is `None` in which case a single sample
           is returned.
```
brandonwillard(2022-08-20 21:44:51):```suggestion
            independent, identically distributed samples are
            returned. Default is `None` in which case a single sample
            is returned.
```
brandonwillard(2022-08-20 21:45:14):```suggestion
            independent, identically distributed samples are
            returned. Default is `None` in which case a single sample
```
brandonwillard(2022-08-20 21:46:03):```suggestion
            independent, identically distributed samples are
            returned. Default is `None`, in which case a sample
```
brandonwillard(2022-08-20 21:47:49):```suggestion
            independent, identically distributed samples are
            returned. Default is `None`, in which case a single
            sample is returned.
```
brandonwillard(2022-08-20 21:48:44):```suggestion
            independent, identically distributed samples are
            returned. Default is `None`, in which case a single sample
            is returned.
```
brandonwillard(2022-08-20 21:49:22):```suggestion
            independent, identically distributed samples are
            returned. Default is `None`, in which case a single sample
            is returned.
```
brandonwillard(2022-08-20 21:50:20):```suggestion
            independent, identically distributed samples are
            returned. If size is `None` (default), then a single sample
            is returned.
```
brandonwillard(2022-08-20 21:52:04):```suggestion
            k` independent samples are returned. Default is `None`, in
            which case a single sample is returned.
```
rlouf(2022-08-24 03:17:38):Note to self: check the broadcasting behavior.
rlouf(2022-08-24 19:32:51):This is not correct, if `size=None` then `p.size` samples are returned in an array of shape `np.shape(p)`.

```python
import aesara.tensor as at

srng = at.random.RandomStream(0)
p = at.matrix()
rv = srng.bernoulli(p)

print(rv.eval({p: [[0.9, 0.7], [.1, .5]]}))
# [[0, 1], [0, 0]]
```

rlouf(2022-08-24 19:38:19):If size is `None`, then `np.broadcast(n, p).size` samples are indeed drawn.

```python
import aesara.tensor as at
import numpy as np

srng = at.random.RandomStream(0)
n = np.array([10, 9, 11])
p = np.array([[0.5, 0.5], [.1, .9], [.2, .8]])
rv = srng.multinomial(n, p)

print(np.shape(np.broadcast(n, p)))
# (3, 2)
print(rv.eval().shape)
# (3, 2)
```
ricardoV94(2022-08-24 19:45:35):Yes, `size=None` is equivalent to `size=p.shape`. How does NumPy describe it?
rlouf(2022-08-24 19:53:35):`BernoulliRV` uses Scipy's sampling function, and Scipy just says "default computed from input arguments". I find that NumPy is inconsistent in the way they describe the samples' shape; we need to clarify what we want to document here (see my last comment in the main thread). I think that shape of the sample when arguments are in their most simple form (scalar, vector, ...) is probably best.
codecov[bot](2022-08-10 03:04:08):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1108?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1108](https://codecov.io/gh/aesara-devs/aesara/pull/1108?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3ebb9e5) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2dc759127547d4b836629e927b7af24f840cc91c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (2dc7591) will **decrease** coverage by `0.00%`.
> The diff coverage is `63.93%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1108/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1108?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1108      +/-   ##
==========================================
- Coverage   79.28%   79.28%   -0.01%     
==========================================
  Files         152      151       -1     
  Lines       48026    47999      -27     
  Branches    10926    10921       -5     
==========================================
- Hits        38077    38055      -22     
+ Misses       7452     7441      -11     
- Partials     2497     2503       +6     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1108?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/1108/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `54.29% <23.80%> (-0.05%)` | :arrow_down: |
| [aesara/link/c/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1108/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9vcC5weQ==) | `60.95% <78.26%> (-0.09%)` | :arrow_down: |
| [aesara/link/c/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1108/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9iYXNpYy5weQ==) | `87.57% <93.33%> (+0.20%)` | :arrow_up: |
| [aesara/link/c/interface.py](https://codecov.io/gh/aesara-devs/aesara/pull/1108/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9pbnRlcmZhY2UucHk=) | `94.18% <100.00%> (+0.13%)` | :arrow_up: |
| [aesara/link/c/cutils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1108/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jdXRpbHMucHk=) | `28.88% <0.00%> (-40.00%)` | :arrow_down: |
| [aesara/link/c/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1108/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy90eXBlLnB5) | `76.41% <0.00%> (+0.43%)` | :arrow_up: |

codecov[bot](2022-08-12 11:40:48):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1111?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1111](https://codecov.io/gh/aesara-devs/aesara/pull/1111?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (cb7d3c5) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/6c6bf08a1118f78991f98e290de03e9917d4f791?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (6c6bf08) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1111/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1111?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1111   +/-   ##
=======================================
  Coverage   79.28%   79.28%           
=======================================
  Files         151      151           
  Lines       47999    48005    +6     
  Branches    10921    10922    +1     
=======================================
+ Hits        38055    38061    +6     
  Misses       7441     7441           
  Partials     2503     2503           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1111?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch.py](https://codecov.io/gh/aesara-devs/aesara/pull/1111/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoLnB5) | `81.87% <100.00%> (+0.18%)` | :arrow_up: |

brandonwillard(2022-08-17 23:10:24):Here's the generated `run` method's code.  It has the superfluous `PyArray_ScalarAsCtype` call.

<details>
  <summary>Source</summary>

```cpp
  int run(void) {
    int __failure = 0;

    PyObject* py_V1;

    PyArrayObject* V1;

    typedef npy_int32 dtype_V1;

    PyObject* py_V3;

    typedef npy_int32 dtype_V3;

    npy_int32 V3;

    {
      py_V1 = PyList_GET_ITEM(storage_V1, 0);
      { Py_XINCREF(py_V1); }

      if (py_V1 == Py_None) {
        V1 = NULL;

      } else {
        V1 = NULL;
        if (py_V1 == Py_None) {
          // We can either fail here or set V1 to NULL and rely on Ops
          // using tensors to handle the NULL case, but if they fail to do so
          // they'll end up with nasty segfaults, so this is public service.
          PyErr_SetString(PyExc_ValueError, "expected an ndarray, not None");
          {
            __failure = 2;
            if (!PyErr_Occurred()) {
              PyErr_SetString(PyExc_RuntimeError,
                              "Unexpected error in an Op's C code. "
                              "No Python exception was set.");
            }
            goto __label_2;
          }
        }
        if (!PyArray_Check(py_V1)) {
          PyErr_SetString(PyExc_ValueError, "expected an ndarray");
          {
            __failure = 2;
            if (!PyErr_Occurred()) {
              PyErr_SetString(PyExc_RuntimeError,
                              "Unexpected error in an Op's C code. "
                              "No Python exception was set.");
            }
            goto __label_2;
          }
        }
        // We expect NPY_INT32
        if (!PyArray_ISALIGNED((PyArrayObject*)py_V1)) {
          PyArrayObject* tmp = (PyArrayObject*)py_V1;
          PyErr_Format(
              PyExc_NotImplementedError,
              "expected an aligned array of type %ld "
              "(NPY_INT32), got non-aligned array of type %ld"
              " with %ld dimensions, with 3 last dims "
              "%ld, %ld, %ld"
              " and 3 last strides %ld %ld, %ld.",
              (long int)NPY_INT32,
              (long int)PyArray_TYPE((PyArrayObject*)py_V1),
              (long int)PyArray_NDIM(tmp),
              (long int)(PyArray_NDIM(tmp) >= 3
                             ? PyArray_DIMS(tmp)[PyArray_NDIM(tmp) - 3]
                             : -1),
              (long int)(PyArray_NDIM(tmp) >= 2
                             ? PyArray_DIMS(tmp)[PyArray_NDIM(tmp) - 2]
                             : -1),
              (long int)(PyArray_NDIM(tmp) >= 1
                             ? PyArray_DIMS(tmp)[PyArray_NDIM(tmp) - 1]
                             : -1),
              (long int)(PyArray_NDIM(tmp) >= 3
                             ? PyArray_STRIDES(tmp)[PyArray_NDIM(tmp) - 3]
                             : -1),
              (long int)(PyArray_NDIM(tmp) >= 2
                             ? PyArray_STRIDES(tmp)[PyArray_NDIM(tmp) - 2]
                             : -1),
              (long int)(PyArray_NDIM(tmp) >= 1
                             ? PyArray_STRIDES(tmp)[PyArray_NDIM(tmp) - 1]
                             : -1));
          {
            __failure = 2;
            if (!PyErr_Occurred()) {
              PyErr_SetString(PyExc_RuntimeError,
                              "Unexpected error in an Op's C code. "
                              "No Python exception was set.");
            }
            goto __label_2;
          }
        }
        // This is a TypeError to be consistent with DEBUG_MODE
        // Note: DEBUG_MODE also tells the name of the container
        if (PyArray_TYPE((PyArrayObject*)py_V1) != NPY_INT32) {
          PyErr_Format(PyExc_TypeError,
                       "expected type_num %d (NPY_INT32) got %d", NPY_INT32,
                       PyArray_TYPE((PyArrayObject*)py_V1));
          {
            __failure = 2;
            if (!PyErr_Occurred()) {
              PyErr_SetString(PyExc_RuntimeError,
                              "Unexpected error in an Op's C code. "
                              "No Python exception was set.");
            }
            goto __label_2;
          }
        }

        V1 = (PyArrayObject*)(py_V1);
        Py_XINCREF(V1);
      }

      {
        py_V3 = PyList_GET_ITEM(storage_V3, 0);
        { Py_XINCREF(py_V3); }

        if (!PyObject_TypeCheck(py_V3, &PyInt32ArrType_Type)) {
          PyErr_Format(PyExc_ValueError, "Scalar check failed (npy_int32)");
          {
            __failure = 4;
            if (!PyErr_Occurred()) {
              PyErr_SetString(PyExc_RuntimeError,
                              "Unexpected error in an Op's C code. "
                              "No Python exception was set.");
            }
            goto __label_4;
          }
        }

        PyArray_ScalarAsCtype(py_V3, &V3);

        {
          // Op class TensorFromScalar

          // PyArray_Desc *dtype = PyArray_DescrFromType(dtype_V3)
          // V1 = (PyArrayObject*)PyArray_FromAny((PyObject*)V3, NULL, 0, 0,
          // NPY_ARRAY_ENSUREARRAY, NULL);
          V1 = (PyArrayObject*)PyArray_FromScalar(py_V3, NULL);
          if (py_V1 == NULL) {
            {
              __failure = 5;
              if (!PyErr_Occurred()) {
                PyErr_SetString(PyExc_RuntimeError,
                                "Unexpected error in an Op's C code. "
                                "No Python exception was set.");
              }
              goto __label_5;
            };
          }
          Py_XINCREF(V1);
        __label_5:

          double __DUMMY_5;
        }
      __label_4 :

      {
        Py_XDECREF(py_V3);
      }

        double __DUMMY_4;
      }
    __label_2:

      if (!__failure) {
        { Py_XDECREF(py_V1); }
        if (!V1) {
          Py_INCREF(Py_None);
          py_V1 = Py_None;
        } else if ((void*)py_V1 != (void*)V1) {
          py_V1 = (PyObject*)V1;
        }

        { Py_XINCREF(py_V1); }

        if (V1 && !PyArray_ISALIGNED((PyArrayObject*)py_V1)) {
          PyErr_Format(
              PyExc_NotImplementedError,
              "c_sync: expected an aligned array, got non-aligned array of "
              "type %ld"
              " with %ld dimensions, with 3 last dims "
              "%ld, %ld, %ld"
              " and 3 last strides %ld %ld, %ld.",
              (long int)PyArray_TYPE((PyArrayObject*)py_V1),
              (long int)PyArray_NDIM(V1),
              (long int)(PyArray_NDIM(V1) >= 3
                             ? PyArray_DIMS(V1)[PyArray_NDIM(V1) - 3]
                             : -1),
              (long int)(PyArray_NDIM(V1) >= 2
                             ? PyArray_DIMS(V1)[PyArray_NDIM(V1) - 2]
                             : -1),
              (long int)(PyArray_NDIM(V1) >= 1
                             ? PyArray_DIMS(V1)[PyArray_NDIM(V1) - 1]
                             : -1),
              (long int)(PyArray_NDIM(V1) >= 3
                             ? PyArray_STRIDES(V1)[PyArray_NDIM(V1) - 3]
                             : -1),
              (long int)(PyArray_NDIM(V1) >= 2
                             ? PyArray_STRIDES(V1)[PyArray_NDIM(V1) - 2]
                             : -1),
              (long int)(PyArray_NDIM(V1) >= 1
                             ? PyArray_STRIDES(V1)[PyArray_NDIM(V1) - 1]
                             : -1));
          {
            __failure = 2;
            if (!PyErr_Occurred()) {
              PyErr_SetString(PyExc_RuntimeError,
                              "Unexpected error in an Op's C code. "
                              "No Python exception was set.");
            }
            goto __label_2;
          }
        }

        PyObject* old = PyList_GET_ITEM(storage_V1, 0);
        { Py_XINCREF(py_V1); }
        PyList_SET_ITEM(storage_V1, 0, py_V1);
        { Py_XDECREF(old); }
      }

      if (V1) {
        Py_XDECREF(V1);
      }

      { Py_XDECREF(py_V1); }

      double __DUMMY_2;
    }

    if (__failure) {
      // When there is a failure, this code puts the exception
      // in __ERROR.
      PyObject* err_type = NULL;
      PyObject* err_msg = NULL;
      PyObject* err_traceback = NULL;
      PyErr_Fetch(&err_type, &err_msg, &err_traceback);
      if (!err_type) {
        err_type = Py_None;
        Py_INCREF(Py_None);
      }
      if (!err_msg) {
        err_msg = Py_None;
        Py_INCREF(Py_None);
      }
      if (!err_traceback) {
        err_traceback = Py_None;
        Py_INCREF(Py_None);
      }
      PyObject* old_err_type = PyList_GET_ITEM(__ERROR, 0);
      PyObject* old_err_msg = PyList_GET_ITEM(__ERROR, 1);
      PyObject* old_err_traceback = PyList_GET_ITEM(__ERROR, 2);
      PyList_SET_ITEM(__ERROR, 0, err_type);
      PyList_SET_ITEM(__ERROR, 1, err_msg);
      PyList_SET_ITEM(__ERROR, 2, err_traceback);
      { Py_XDECREF(old_err_type); }
      { Py_XDECREF(old_err_msg); }
      { Py_XDECREF(old_err_traceback); }
    }
    // The failure code is returned to index what code block failed.
    return __failure;
  }
```

</details>

It would be nice if the compiler removed that call, but I doubt it always/ever will, so we might need to do something about it ourselves.
codecov[bot](2022-08-18 00:18:34):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1124?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1124](https://codecov.io/gh/aesara-devs/aesara/pull/1124?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0a16c22) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/9f176da71d41635e8854fd601fd6a68102b0c6e5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9f176da) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1124/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1124?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1124   +/-   ##
=======================================
  Coverage   79.25%   79.25%           
=======================================
  Files         159      159           
  Lines       48097    48104    +7     
  Branches    10934    10934           
=======================================
+ Hits        38117    38124    +7     
  Misses       7469     7469           
  Partials     2511     2511           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1124?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1124/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `90.66% <100.00%> (+0.04%)` | :arrow_up: |

mattearllongshot(2022-08-19 13:31:45):This is much faster, thank you:

Before  (9f176da71d41635e8854fd601fd6a68102b0c6e5)
```
Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  19.4%    19.4%       0.331s       1.00e-05s     C     33000        3   CGemv{inplace}
  17.7%    37.0%       0.302s       1.37e-05s     Py    22000        2   BroadcastTo
   9.7%    46.8%       0.166s       1.51e-05s     C     11000        1   Elemwise{...}
   7.2%    54.0%       0.123s       1.12e-05s     C     11000        1   Elemwise{...}[(0, 3)]
   6.9%    60.9%       0.118s       2.15e-06s     C     55000        5   IncSubtensor{InplaceInc;int64}
   5.5%    66.4%       0.094s       2.14e-06s     Py    44000        4   TensorFromScalar
   2.4%    68.8%       0.041s       3.69e-06s     C     11000        1   Softmax{axis=-1}
   1.8%    70.6%       0.031s       2.00e-07s     C     154000       14   Switch
   1.8%    72.4%       0.031s       5.56e-07s     C     55000        5   InplaceDimShuffle{x,0}
   1.7%    74.1%       0.029s       1.34e-06s     C     22000        2   Alloc
   1.7%    75.8%       0.029s       1.89e-07s     C     154000       14   EQ
   1.3%    77.2%       0.023s       6.84e-07s     C     33000        3   InplaceDimShuffle{0,x}
   1.3%    78.5%       0.022s       1.02e-06s     C     22000        2   Elemwise{...}
   1.3%    79.8%       0.022s       2.01e-06s     C     11000        1   SoftmaxGrad{axis=-1}
   1.3%    81.0%       0.022s       1.82e-07s     C     121000       11   maximum
   1.3%    82.3%       0.022s       4.98e-07s     C     44000        4   InplaceDimShuffle{x}
   1.3%    83.6%       0.022s       2.18e-07s     C     99000        9   Shape_i{0}
   1.2%    84.8%       0.021s       2.75e-07s     C     77000        7   Sum{acc_dtype=float64}
   0.9%    85.7%       0.015s       1.39e-07s     C     110000       10   Abs
   0.9%    86.6%       0.015s       4.52e-07s     C     33000        3   AllocEmpty{dtype='float64'}
   ... (remaining 31 Ops account for  13.40%(0.23s) of the runtime)
```

After  (0a16c225ef8f2de1205bc1494a4ecb50108ce4b6)
```
Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  19.8%    19.8%       0.342s       1.55e-05s     Py    22000        2   BroadcastTo
  19.6%    39.4%       0.339s       1.03e-05s     C     33000        3   CGemv{inplace}
   9.9%    49.3%       0.170s       1.55e-05s     C     11000        1   Elemwise{...}
   7.6%    56.8%       0.131s       2.38e-06s     C     55000        5   IncSubtensor{InplaceInc;int64}
   7.2%    64.1%       0.125s       1.13e-05s     C     11000        1   Elemwise{...}[(0, 3)]
   2.4%    66.5%       0.041s       3.77e-06s     C     11000        1   Softmax{axis=-1}
   1.9%    68.4%       0.033s       1.52e-06s     C     22000        2   Alloc
   1.8%    70.2%       0.031s       2.03e-07s     C     154000       14   Switch
   1.8%    72.0%       0.031s       5.66e-07s     C     55000        5   InplaceDimShuffle{x,0}
   1.8%    73.8%       0.031s       2.01e-07s     C     154000       14   EQ
   1.4%    75.2%       0.025s       7.58e-07s     C     33000        3   InplaceDimShuffle{0,x}
   1.4%    76.6%       0.024s       2.02e-07s     C     121000       11   maximum
   1.4%    78.0%       0.024s       5.45e-07s     C     44000        4   InplaceDimShuffle{x}
   1.4%    79.4%       0.023s       3.05e-07s     C     77000        7   Sum{acc_dtype=float64}
   1.3%    80.7%       0.023s       2.11e-06s     C     11000        1   SoftmaxGrad{axis=-1}
   1.3%    82.0%       0.022s       1.01e-06s     C     22000        2   Elemwise{...}
   1.3%    83.3%       0.022s       2.20e-07s     C     99000        9   Shape_i{0}
   1.0%    84.3%       0.018s       5.47e-07s     C     33000        3   AllocEmpty{dtype='float64'}
   0.9%    85.2%       0.016s       3.61e-07s     C     44000        4   TensorFromScalar
   0.9%    86.2%       0.016s       1.42e-07s     C     110000       10   Abs
   ... (remaining 31 Ops account for  13.85%(0.24s) of the runtime)
```
mattearllongshot(2022-08-19 13:34:14):I notice that `BroadcastTo` is now taking a chunk of time (it wasn't in 2.7.9), but I've worked out a way to avoid having that node appear in our graph.  Perhaps worth a separate issue to make a C implementation for that node, although it's not a problem for us at the moment.
ricardoV94(2022-08-18 07:08:51):I am always confused by the reference counting, but do we need this xincref? `ScalarFromTensor` doesn't do it. Is it because there the output is not an array there?
ricardoV94(2022-08-18 07:10:21):Should we use the dtype of `x` directly instead of `NULL` since we have it?
brandonwillard(2022-08-18 15:00:08):Yes, we need the `INCREF` there.
brandonwillard(2022-08-18 15:01:17):The first argument should be a `numpy.generic` instance, so `NULL` should get its dtype just like we would using the `dtype_%(x)s` value (i.e. there's no guessing involved, since the dtype is already "attached" to the first argument).

Also, there's no need for us to convert our dtype information to the correct type/format this way.
brandonwillard(2022-08-19 00:22:50):> Is it because there the output is not an array there?

After the call to `PyArray_FromScalar`, the returned object has a reference count of one, which I believe is subsequently decremented within the generated `run` method (see the code in https://github.com/aesara-devs/aesara/pull/1124#issuecomment-1218608975), so we need the extra increment to keep it from being freed.

Really, my comment above is pointing out how the C code generated for scalars is perhaps unreasonably specialized for only certain use cases, and this might be another example of that.
codecov[bot](2022-08-19 21:12:11):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1127?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1127](https://codecov.io/gh/aesara-devs/aesara/pull/1127?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (873a5b6) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/9f176da71d41635e8854fd601fd6a68102b0c6e5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9f176da) will **decrease** coverage by `0.01%`.
> The diff coverage is `87.50%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1127/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1127?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1127      +/-   ##
==========================================
- Coverage   79.25%   79.23%   -0.02%     
==========================================
  Files         159      159              
  Lines       48097    48100       +3     
  Branches    10934    10935       +1     
==========================================
- Hits        38117    38111       -6     
- Misses       7469     7475       +6     
- Partials     2511     2514       +3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1127?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1127/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `91.97% <33.33%> (-0.45%)` | :arrow_down: |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/1127/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `88.04% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1127/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `90.14% <0.00%> (-0.48%)` | :arrow_down: |

</details>
codecov[bot](2022-08-20 00:35:21):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1130?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1130](https://codecov.io/gh/aesara-devs/aesara/pull/1130?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d73ad01) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/813d0409a961eb9af09c077f0736b97fe5dd3c98?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (813d040) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1130/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1130?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1130   +/-   ##
=======================================
  Coverage   79.27%   79.28%           
=======================================
  Files         159      159           
  Lines       48108    48119   +11     
  Branches    10935    10936    +1     
=======================================
+ Hits        38138    38149   +11     
  Misses       7456     7456           
  Partials     2514     2514           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1130?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/1130/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `89.09% <100.00%> (+0.17%)` | :arrow_up: |

</details>
ricardoV94(2022-08-20 09:47:08):Does the docs build fail mean anything?
brandonwillard(2022-08-20 17:45:54):> Does the docs build fail mean anything?

No, that's unrelated (from what I can tell).
zoj613(2022-08-21 12:13:39):Not sure how useful this info is for this implementation since I haven't looked over it yet but numpy has a C function for broadcasting arrays to a particular shape via [`PyArray_BroadcastToShape`](https://github.com/numpy/numpy/blob/d4baf3641471971552206b02f94323a54b54d99a/numpy/core/src/multiarray/iterators.c#L202-L271). It would be interesting to see the performance difference vs the current approach. [Here](https://github.com/zoj613/polyagamma/blob/7bbba58edb5c2a0396be30545e92afb1de6c6d42/polyagamma/_polyagamma.pyx#L96-L117)  is a code snippet where I made use of it in the past (It does not require reference counting).
brandonwillard(2022-08-21 14:00:39):> Not sure how useful this info is for this implementation since I haven't looked over it yet but numpy has a C function for broadcasting arrays to a particular shape via [`PyArray_BroadcastToShape`](https://github.com/numpy/numpy/blob/d4baf3641471971552206b02f94323a54b54d99a/numpy/core/src/multiarray/iterators.c#L202-L271). It would be interesting to see the performance difference vs the current approach. [Here](https://github.com/zoj613/polyagamma/blob/7bbba58edb5c2a0396be30545e92afb1de6c6d42/polyagamma/_polyagamma.pyx#L96-L117) is a code snippet where I made use of it in the past (It does not require reference counting).

I believe that's part of the [old iterator API](https://numpy.org/doc/stable/reference/c-api/iterator.html#converting-from-previous-numpy-iterators).
zoj613(2022-08-21 14:02:34):> > Not sure how useful this info is for this implementation since I haven't looked over it yet but numpy has a C function for broadcasting arrays to a particular shape via [`PyArray_BroadcastToShape`](https://github.com/numpy/numpy/blob/d4baf3641471971552206b02f94323a54b54d99a/numpy/core/src/multiarray/iterators.c#L202-L271). It would be interesting to see the performance difference vs the current approach. [Here](https://github.com/zoj613/polyagamma/blob/7bbba58edb5c2a0396be30545e92afb1de6c6d42/polyagamma/_polyagamma.pyx#L96-L117) is a code snippet where I made use of it in the past (It does not require reference counting).
> 
> I believe that's part of the old iterator API.


What are the advantages of using the new one over the old? I've barely seen any code bases making use of the new one.
brandonwillard(2022-08-21 14:10:41):> What are the advantages of using the new one over the old? I've barely seen any code bases making use of the new one.

Not sure, but I would assume the newer one will be better supported going forward.  All I know is that `np.broadcast_to` appears to use the new one, too, and this implementation is based on that.
codecov[bot](2022-08-20 23:23:38):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1131?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1131](https://codecov.io/gh/aesara-devs/aesara/pull/1131?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (6542063) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/83547c1832c98977aaa40870d31d10f32086fa6f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (83547c1) will **increase** coverage by `0.03%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1131/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1131?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1131      +/-   ##
==========================================
+ Coverage   79.23%   79.27%   +0.03%     
==========================================
  Files         159      159              
  Lines       48107    48108       +1     
  Branches    10935    10935              
==========================================
+ Hits        38118    38138      +20     
+ Misses       7475     7456      -19     
  Partials     2514     2514              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1131?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/c/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1131/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9iYXNpYy5weQ==) | `87.59% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/1131/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `54.37% <0.00%> (+0.08%)` | :arrow_up: |
| [aesara/link/c/cutils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1131/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jdXRpbHMucHk=) | `68.88% <0.00%> (+40.00%)` | :arrow_up: |

</details>
codecov[bot](2022-08-21 01:38:32):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1133?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1133](https://codecov.io/gh/aesara-devs/aesara/pull/1133?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (19588c6) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/813d0409a961eb9af09c077f0736b97fe5dd3c98?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (813d040) will **not change** coverage.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1133/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1133?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1133   +/-   ##
=======================================
  Coverage   79.27%   79.27%           
=======================================
  Files         159      159           
  Lines       48108    48108           
  Branches    10935    10935           
=======================================
  Hits        38138    38138           
  Misses       7456     7456           
  Partials     2514     2514           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1133?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1133/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `91.97% <100.00%> (ø)` | |

</details>
codecov[bot](2022-08-21 12:25:08):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1135?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1135](https://codecov.io/gh/aesara-devs/aesara/pull/1135?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (38ff225) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/8867a72094d8df9f7810d091c9856e11edfe693d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8867a72) will **not change** coverage.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1135/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1135?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1135   +/-   ##
=======================================
  Coverage   79.27%   79.27%           
=======================================
  Files         159      159           
  Lines       48108    48108           
  Branches    10935    10935           
=======================================
  Hits        38138    38138           
  Misses       7456     7456           
  Partials     2514     2514           
```



</details>
maresb(2022-08-21 12:23:49):!?!?!? How did that not work? :thinking: 
maresb(2022-08-21 12:44:52):I am really confused. Where is this ReadTheDocs workflow even being registered? I see nothing about it in `.github/workflows`.

![image](https://user-images.githubusercontent.com/15216687/185791534-9d1160f4-44ef-40f7-8354-9b24fa7feac1.png)

brandonwillard(2022-08-21 15:17:55):See the comment [here](https://matrix.to/#/!QqFchLNQAbmeuhDMrX:gitter.im/$Q7ahD2HNIIItMHbepcYt_c5O3BadNnMknlaTNA-zVxI?via=matrix.org&via=gitter.im).
maresb(2022-08-22 07:10:00):Ok, the missing piece for me was the [Conda Support](https://docs.readthedocs.io/en/stable/guides/conda.html) page for Read the Docs.
maresb(2022-08-22 18:10:20):Thanks @brandonwillard for the approval! Shall I squash and merge?
brandonwillard(2022-08-22 18:25:45):> Thanks @brandonwillard for the approval! Shall I squash and merge?

Looks like there's a merge commit in there, so you might need to rebase first, then squash and merge.
maresb(2022-08-22 18:27:56):Ok, but what's the rationale? If I squash and merge then it doesn't matter, right?
brandonwillard(2022-08-22 18:29:56):> Ok, but what's the rationale? If I squash and merge then it doesn't matter, right?

If the squash and merge action leaves a linear history, then it should be fine, but I don't know how GitHub's "Squash and merge" handles those situations.
maresb(2022-08-22 18:30:37):I'm pretty sure it does the right thing, but I'll do it by hand just to be safe...
brandonwillard(2022-08-22 18:45:13):Just so we're clear, those two commits can just be "Rebased and merged".
maresb(2022-08-22 18:46:24):As would be done by pressing
![image](https://user-images.githubusercontent.com/15216687/185995924-d6946f4a-8d66-4fbf-8df8-b409f152a070.png)
?
maresb(2022-08-22 18:47:54):(It should already be rebased on the current head of main.)
brandonwillard(2022-08-22 18:50:18):> As would be done by pressing ![image](https://user-images.githubusercontent.com/15216687/185995924-d6946f4a-8d66-4fbf-8df8-b409f152a070.png) ?

No, the "Rebase and merge" button this time, because the two commits in this PR appear to be separate enough changes, so we might as well keep them as is.  Really, it's not a big deal in this exact case, so you can do whichever you want.
maresb(2022-08-22 18:50:45):Ah, ok, got it! Thanks for the clarification.
codecov[bot](2022-08-21 23:06:08):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1138?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1138](https://codecov.io/gh/aesara-devs/aesara/pull/1138?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (43fc102) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/8867a72094d8df9f7810d091c9856e11edfe693d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8867a72) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1138/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1138?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1138   +/-   ##
=======================================
  Coverage   79.27%   79.28%           
=======================================
  Files         159      159           
  Lines       48108    48111    +3     
  Branches    10935    10937    +2     
=======================================
+ Hits        38138    38145    +7     
+ Misses       7456     7454    -2     
+ Partials     2514     2512    -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1138?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/1138/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `88.92% <ø> (ø)` | |
| [aesara/tensor/rewriting/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1138/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvYmFzaWMucHk=) | `85.72% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/graph/rewriting/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1138/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3Jld3JpdGluZy91dGlscy5weQ==) | `92.85% <0.00%> (+4.08%)` | :arrow_up: |

</details>
rlouf(2022-08-24 02:49:03):Refactoring much appreciated, it makes the codebase breathe a little more.
codecov[bot](2022-08-24 02:41:32):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1143?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1143](https://codecov.io/gh/aesara-devs/aesara/pull/1143?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f6a5416) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/f2a7fb990ac7609c074b022278c976c683defdd0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f2a7fb9) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1143/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1143?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1143   +/-   ##
=======================================
  Coverage   79.28%   79.29%           
=======================================
  Files         159      159           
  Lines       48111    48132   +21     
  Branches    10937    10941    +4     
=======================================
+ Hits        38145    38166   +21     
  Misses       7454     7454           
  Partials     2512     2512           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1143?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1143/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.44% <100.00%> (+0.38%)` | :arrow_up: |

</details>
brandonwillard(2022-08-25 20:01:41):I've created #1148 and #1147 as follow-ups to this and https://github.com/aesara-devs/aesara/pull/1081.
codecov[bot](2022-08-24 05:56:04):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1144?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1144](https://codecov.io/gh/aesara-devs/aesara/pull/1144?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d47fb7c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/63f52536a09b13cc55481f071ccb4fc59c9740f4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (63f5253) will **not change** coverage.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1144/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1144?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1144   +/-   ##
=======================================
  Coverage   79.30%   79.30%           
=======================================
  Files         162      162           
  Lines       48162    48162           
  Branches    10938    10938           
=======================================
  Hits        38197    38197           
  Misses       7453     7453           
  Partials     2512     2512           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1144?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/rewriting/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/1144/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvc2hhcGUucHk=) | `79.33% <ø> (-0.05%)` | :arrow_down: |
| [aesara/tensor/rewriting/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1144/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvYmFzaWMucHk=) | `92.46% <100.00%> (+0.01%)` | :arrow_up: |

</details>
Armavica(2022-08-26 23:54:21):I am sorry, but I am not sure how this would work. The function `obj2sctype` doesn't seem to return either a `dtype` or an object whose `.dtype` is a `dtype`, as shown by

``` python
for a in ["float64", np.int8, np.int8(4).dtype]:
    assert not isinstance(np.obj2sctype(a), np.dtype)
    assert not isinstance(np.obj2sctype(a).dtype, np.dtype)
```

It is possible that I am missing something though, as this dtype manipulation is extremely confusing to me.
brandonwillard(2022-08-27 00:13:40):> I am sorry, but I am not sure how this would work. The function `obj2sctype` doesn't seem to return either a `dtype` or an object whose `.dtype` is a `dtype`, as shown by
> 
> ```python
> for a in ["float64", np.int8, np.int8(4).dtype]:
>     assert not isinstance(np.obj2sctype(a), np.dtype)
>     assert not isinstance(np.obj2sctype(a).dtype, np.dtype)
> ```
> 
> It is possible that I am missing something though, as this dtype manipulation is extremely confusing to me.

Likewise, I'm probably not thinking of the same issue that you are.

Are the deprecation warnings caused by something like the following?
```python
import numpy as np
import aesara.tensor as at


np.dtype(at.vector("x"))
# <ipython-input-11-4480ef785bc5>:1: DeprecationWarning: in the future the `.dtype` attribute of a given datatype object must be a valid dtype instance. `data_type.dtype` may need to be coerced using `np.dtype(data_type.dtype)`. (Deprecated NumPy 1.20)
#   np.dtype(at.vector("x"))
```
Armavica(2022-08-27 00:23:39):Yes, I think that is the idea, at least for some of the warnings.
brandonwillard(2022-08-27 00:29:42):> Yes, I think that is the idea, at least for some of the warnings.

I think I found a test that provides an example of the warnings you're talking about: `pymc/tests/test_logprob.py::test_joint_logp_basic`.  

In that case, `pymc.distributions.logprob.joint_logp` is passing a `TensorType`&mdash;via `var[0].type`&mdash;to the `TensorVariable.astype` method [here](https://github.com/pymc-devs/pymc/blob/193e8679e9307be27232c34df1cefbf87ff6b456/pymc/distributions/logprob.py#L190), when it should be using `var[0].dtype`.
Armavica(2022-08-27 00:38:00):Amazing, it looks like this fixes everything! Thank you very much!
codecov[bot](2022-08-27 05:09:44):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1150?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1150](https://codecov.io/gh/aesara-devs/aesara/pull/1150?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (02b77f9) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/a1679df845bb5ce7a1dd8caf1c23bf094a854613?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a1679df) will **increase** coverage by `0.02%`.
> The diff coverage is `96.22%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1150/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1150?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1150      +/-   ##
==========================================
+ Coverage   79.33%   79.35%   +0.02%     
==========================================
  Files         162      162              
  Lines       48212    48260      +48     
  Branches    10943    10955      +12     
==========================================
+ Hits        38247    38295      +48     
  Misses       7453     7453              
  Partials     2512     2512              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1150?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/rewriting/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/1150/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvc3VidGVuc29yLnB5) | `88.45% <95.34%> (+0.39%)` | :arrow_up: |
| [aesara/tensor/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/1150/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zdWJ0ZW5zb3IucHk=) | `89.43% <100.00%> (+0.19%)` | :arrow_up: |
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1150/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `92.04% <100.00%> (+0.07%)` | :arrow_up: |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/1150/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `88.06% <100.00%> (+0.02%)` | :arrow_up: |

</details>
ricardoV94(2022-08-27 16:25:29):This looks great. One thing we could also explore (separately) is converting constant negative indexes to positive indexes when the shape of the tensor is fixed. We sometimes know this at the Aesara level, but I think this info is not conveyed to the backends following compilation.
aseyboldt(2022-08-27 04:22:16):Maybe it would be better to add an explicit check for `index_val.dtype == bool`, just to make it obvious what's happening in that case? I think strictly speaking this wouldn't be necessary because a min of booleans still has dtype bool and `np.min_scalar_type(False) == bool`, but it might improve readability and make this case more obvious and also remind anyone working on this code in the future that this is a case that needs to be handles correctly.
codecov[bot](2022-08-28 02:32:35):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1153?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1153](https://codecov.io/gh/aesara-devs/aesara/pull/1153?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (34261cd) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/a1679df845bb5ce7a1dd8caf1c23bf094a854613?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a1679df) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1153/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1153?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1153      +/-   ##
==========================================
- Coverage   79.33%   79.33%   -0.01%     
==========================================
  Files         162      161       -1     
  Lines       48212    48211       -1     
  Branches    10943    10943              
==========================================
- Hits        38247    38246       -1     
  Misses       7453     7453              
  Partials     2512     2512              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1153?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/rewriting/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/1153/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvc2hhcGUucHk=) | `79.33% <100.00%> (ø)` | |
| [aesara/link/numba/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1153/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvX19pbml0X18ucHk=) | | |

</details>
codecov[bot](2022-08-28 14:35:27):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1154?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1154](https://codecov.io/gh/aesara-devs/aesara/pull/1154?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c222345) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5b935bc6a5ea352323c7e0b0407478ef744bcec5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5b935bc) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1154/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1154?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1154   +/-   ##
=======================================
  Coverage   79.33%   79.33%           
=======================================
  Files         161      161           
  Lines       48211    48212    +1     
  Branches    10943    10943           
=======================================
+ Hits        38246    38247    +1     
  Misses       7453     7453           
  Partials     2512     2512           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1154?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1154/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `90.00% <100.00%> (+<0.01%)` | :arrow_up: |

</details>
brandonwillard(2022-08-31 20:44:52):This work is part of https://github.com/aesara-devs/aesara/issues/695.  We need to create a single, consistent interface for this information and apply it to all the (effectively) block-wise `Op`s&mdash;which includes all the scalar `Op`s used by `Elemwise` (i.e. we need to replace all the `nfunc_spec`s).
codecov[bot](2022-08-31 21:43:46):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1160?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1160](https://codecov.io/gh/aesara-devs/aesara/pull/1160?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ac3e073) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/62326376a778c589553d6c219c4254ed4b75557d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (6232637) will **increase** coverage by `0.21%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head ac3e073 differs from pull request most recent head 4b3af51. Consider uploading reports for the commit 4b3af51 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1160/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1160?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1160      +/-   ##
==========================================
+ Coverage   79.14%   79.35%   +0.21%     
==========================================
  Files         173      161      -12     
  Lines       48528    48282     -246     
  Branches    10322    10962     +640     
==========================================
- Hits        38408    38316      -92     
+ Misses       7628     7454     -174     
- Partials     2492     2512      +20     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1160?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1160/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `99.00% <100.00%> (ø)` | |
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1160/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `72.89% <0.00%> (-8.69%)` | :arrow_down: |
| [aesara/link/vm.py](https://codecov.io/gh/aesara-devs/aesara/pull/1160/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `90.26% <0.00%> (-2.30%)` | :arrow_down: |
| [aesara/link/numba/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1160/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2NhbGFyLnB5) | `86.00% <0.00%> (-1.34%)` | :arrow_down: |
| [aesara/compile/function/pfunc.py](https://codecov.io/gh/aesara-devs/aesara/pull/1160/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `81.40% <0.00%> (-1.01%)` | :arrow_down: |
| [aesara/link/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1160/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `61.12% <0.00%> (-0.72%)` | :arrow_down: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/1160/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `49.76% <0.00%> (-0.41%)` | :arrow_down: |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/1160/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `51.00% <0.00%> (-0.29%)` | :arrow_down: |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/1160/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `88.06% <0.00%> (-0.19%)` | :arrow_down: |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1160/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `90.04% <0.00%> (-0.10%)` | :arrow_down: |
| ... and [33 more](https://codecov.io/gh/aesara-devs/aesara/pull/1160/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

</details>
rlouf(2022-09-01 05:19:29):Regardless of how we implement the interface we need to communicate how the _current_ shape systems works to the users in the documentation, and I think gufunc signatures are the right tool for that.
rlouf(2022-09-13 05:46:57):They were!
rlouf(2022-09-13 07:55:37):Squashed the commits.
rlouf(2022-09-28 14:22:58):Should we merge this? This documents the current behavior of `RandomVariable`s and as such is useful even before #695 is merged.
ricardoV94(2022-09-13 05:09:55):```suggestion
        `(), (), () -> ()`
```

ricardoV94(2022-09-13 05:11:48):```suggestion
        `(x) -> (x)`
```

brandonwillard(2022-09-28 19:22:07):This is a bit misleading, because `RandomVariable`s aren't technically `gufunc`s in Aesara (or NumPy?)
rlouf(2022-10-04 13:03:42):Is that less confusing @brandonwillard ?
brandonwillard(2022-10-04 15:52:51):Yeah, that works.
codecov[bot](2022-09-01 10:09:15):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1163?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1163](https://codecov.io/gh/aesara-devs/aesara/pull/1163?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3fcfd28) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/d7fb940264a392857781b075e1b8178c603001a2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d7fb940) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1163/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1163?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1163   +/-   ##
=======================================
  Coverage   79.35%   79.35%           
=======================================
  Files         161      161           
  Lines       48260    48266    +6     
  Branches    10955    10957    +2     
=======================================
+ Hits        38295    38301    +6     
  Misses       7453     7453           
  Partials     2512     2512           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1163?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1163/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `99.00% <100.00%> (+0.01%)` | :arrow_up: |

</details>
brandonwillard(2022-09-01 15:34:14):I'm not sure that we should be cloning this anymore.
brandonwillard(2022-09-01 15:34:55):```suggestion
    # TODO: The exception is raised at runtime but could be raised at compile
    # time in some situations using static shape analysis.
```
rlouf(2022-09-01 17:24:32):What was the intent originally?
brandonwillard(2022-09-01 17:26:21):I believe it was related to the old need to clone every `Variable`.
codecov[bot](2022-09-02 16:49:15):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1166?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1166](https://codecov.io/gh/aesara-devs/aesara/pull/1166?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (763e732) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c2ed818e844901e55e3639a75ca135b836ff8244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c2ed818) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 763e732 differs from pull request most recent head df00335. Consider uploading reports for the commit df00335 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1166/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1166?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1166   +/-   ##
=======================================
  Coverage   79.35%   79.35%           
=======================================
  Files         161      161           
  Lines       48266    48271    +5     
  Branches    10957    10957           
=======================================
+ Hits        38301    38306    +5     
  Misses       7453     7453           
  Partials     2512     2512           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1166?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1166/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `90.04% <100.00%> (+0.03%)` | :arrow_up: |

</details>
ltoniazzi(2022-09-02 19:33:59):Sorry, I merged instead of rebasing, is that ok? 
brandonwillard(2022-09-02 19:36:08):> Sorry, I merged instead of rebasing, is that ok?

You'll need to rebase instead.
ltoniazzi(2022-09-02 21:14:01):Should I squash the commits now?
brandonwillard(2022-09-02 17:41:23):```suggestion
        raise ValueError("Number of dimensions of `v` must be greater than one.")
```
brandonwillard(2022-09-02 17:42:50):```suggestion
        assert np.array_equal(f(), np.flatnonzero(m))
```
brandonwillard(2022-09-02 17:44:47):```suggestion
        x_val = [[1.0, 2.0], [3.0, 4.0]]
        assert np.array_equal(run_tile(x, x_val, (2,), use_symbolic_reps), np.tile(x_val, (2,)))
```
brandonwillard(2022-09-02 17:45:16):```suggestion
        x_val = 1.0
        assert np.array_equal(run_tile(x, x_val, (2,), use_symbolic_reps), np.tile(x_val, (2,)))
```
brandonwillard(2022-09-02 17:45:52):```suggestion
```
brandonwillard(2022-09-02 17:46:14):```suggestion
        assert np.array_equal(f(), np.array([3, 4, 0, 2, 1]))
```
brandonwillard(2022-09-02 17:46:38):```suggestion
        assert np.array_equal(f(), np.diag(xx))
```
brandonwillard(2022-09-02 17:46:53):```suggestion
    assert np.array_equal(f(), np.eye(2))
```
rlouf(2022-09-09 14:44:24):This is ready for review, Mypy complains that `Module "numpy.random.bit_generator" has no attribute "_coerce_to_uint32_array"  [attr-defined]` which does not make sense to me (especially since it does not complain on `main`).
brandonwillard(2022-09-09 16:08:32):> This is ready for review, Mypy complains that `Module "numpy.random.bit_generator" has no attribute "_coerce_to_uint32_array" [attr-defined]` which does not make sense to me (especially since it does not complain on `main`).

You can add an ignore for that.
codecov[bot](2022-09-12 21:56:40):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1168?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1168](https://codecov.io/gh/aesara-devs/aesara/pull/1168?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a93a707) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/1d899ee964d834dd2109a2b37d33e0c13561f1f3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1d899ee) will **decrease** coverage by `0.24%`.
> The diff coverage is `66.44%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1168/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1168?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1168      +/-   ##
==========================================
- Coverage   79.35%   79.11%   -0.25%     
==========================================
  Files         161      173      +12     
  Lines       48282    48451     +169     
  Branches    10962    10960       -2     
==========================================
+ Hits        38316    38332      +16     
- Misses       7454     7611     +157     
+ Partials     2512     2508       -4     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1168?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/rewriting/db.py](https://codecov.io/gh/aesara-devs/aesara/pull/1168/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL3Jld3JpdGluZy9kYi5weQ==) | `86.38% <ø> (ø)` | |
| [aesara/link/jax/dispatch/test\_subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/1168/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3Rlc3Rfc3VidGVuc29yLnB5) | `0.00% <0.00%> (ø)` | |
| [aesara/link/jax/dispatch/scan.py](https://codecov.io/gh/aesara-devs/aesara/pull/1168/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NjYW4ucHk=) | `15.25% <15.25%> (ø)` | |
| [aesara/link/jax/dispatch/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/1168/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3N1YnRlbnNvci5weQ==) | `67.92% <67.92%> (ø)` | |
| [aesara/link/jax/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1168/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL2VsZW13aXNlLnB5) | `80.59% <80.59%> (ø)` | |
| [aesara/link/jax/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1168/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL2Jhc2ljLnB5) | `81.25% <81.25%> (ø)` | |
| [aesara/link/jax/dispatch/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/1168/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NoYXBlLnB5) | `86.48% <86.48%> (ø)` | |
| [aesara/link/jax/dispatch/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/1168/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL2V4dHJhX29wcy5weQ==) | `86.56% <86.56%> (ø)` | |
| [aesara/link/jax/dispatch/nlinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1168/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL25saW5hbGcucHk=) | `88.57% <88.57%> (ø)` | |
| [aesara/link/jax/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1168/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3RlbnNvcl9iYXNpYy5weQ==) | `92.06% <92.06%> (ø)` | |
| ... and [7 more](https://codecov.io/gh/aesara-devs/aesara/pull/1168/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

</details>
brandonwillard(2022-09-12 21:55:09):Do you want to make `dispatch` modules for these in a follow-up PR?  Regardless, we should create an issue for these.
rlouf(2022-09-12 21:57:36):Do you mean `jax/dispatch/subtensor.py` and `jax/dispatch/shape.py`? I'm happy to do it in this PR.
brandonwillard(2022-09-12 22:08:00):> Do you mean `jax/dispatch/subtensor.py` and `jax/dispatch/shape.py`? I'm happy to do it in this PR.

Yes, those two.
rlouf(2022-09-13 07:54:24):I just pushed the changes.
ricardoV94(2022-09-22 11:21:23):It seems to be that Scan takes quite some liberties to what Alloc means. This sounds similar to the whole Unbroadcasting thing also going on with Scan: https://github.com/aesara-devs/aesara/pull/915
ricardoV94(2022-11-25 15:56:00):Closing, as this was addressed in https://github.com/aesara-devs/aesara/pull/1253
codecov[bot](2022-09-14 00:19:16):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1181?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1181](https://codecov.io/gh/aesara-devs/aesara/pull/1181?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3c50a5f) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0b9bba1ac860a00f24f5f5ad43be92df1187c8ad?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0b9bba1) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 3c50a5f differs from pull request most recent head 771679d. Consider uploading reports for the commit 771679d to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1181/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1181?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1181   +/-   ##
=======================================
  Coverage   79.11%   79.11%           
=======================================
  Files         173      173           
  Lines       48449    48460   +11     
  Branches    10959    10962    +3     
=======================================
+ Hits        38332    38341    +9     
- Misses       7610     7611    +1     
- Partials     2507     2508    +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1181?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/raise\_op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1181/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3JhaXNlX29wLnB5) | `98.78% <100.00%> (+0.07%)` | :arrow_up: |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1181/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.00% <100.00%> (+0.03%)` | :arrow_up: |
| [aesara/link/jax/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1181/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL2Jhc2ljLnB5) | `81.25% <0.00%> (-2.63%)` | :arrow_down: |

</details>
brandonwillard(2022-09-15 00:10:49):I've also added a missing `ScalarVariable.shape`, which returns an empty list, of course.
ricardoV94(2022-09-14 06:15:31):Can we test infer_shape and grad for scalars?
brandonwillard(2022-09-14 17:15:14):> Can we test infer_shape and grad for scalars?

Yes, we definitely should.
ricardoV94(2022-09-16 14:20:40):fscalar returns a TensorType

```suggestion
    a = float32("a")
```
codecov[bot](2022-09-14 19:32:31):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1183?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1183](https://codecov.io/gh/aesara-devs/aesara/pull/1183?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (364b9f3) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/7075c7f8c7b643e4d21ff6aa417846f03464f7b9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7075c7f) will **not change** coverage.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1183/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1183?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1183   +/-   ##
=======================================
  Coverage   79.11%   79.11%           
=======================================
  Files         173      173           
  Lines       48451    48451           
  Branches    10960    10960           
=======================================
  Hits        38332    38332           
  Misses       7611     7611           
  Partials     2508     2508           
```



</details>
maresb(2022-09-14 19:38:42):Thanks a lot for this fix! LGTM.
codecov[bot](2022-09-15 08:49:29):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1185?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1185](https://codecov.io/gh/aesara-devs/aesara/pull/1185?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (f799962) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/b35d6188323b372879c0b7375095a6041d3a1a54?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b35d618) will **increase** coverage by `0.00%`.
> The diff coverage is `83.33%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1185/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1185?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1185   +/-   ##
=======================================
  Coverage   79.11%   79.11%           
=======================================
  Files         173      173           
  Lines       48451    48449    -2     
  Branches    10960    10959    -1     
=======================================
  Hits        38332    38332           
+ Misses       7611     7610    -1     
+ Partials     2508     2507    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1185?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1185/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL2Jhc2ljLnB5) | `83.87% <83.33%> (+2.62%)` | :arrow_up: |

</details>
ricardoV94(2022-09-15 07:49:58):CC @junpenglao
codecov[bot](2022-09-15 09:31:42):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1186?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1186](https://codecov.io/gh/aesara-devs/aesara/pull/1186?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7061bea) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0d69809948bd61f086322e8323748809fc979047?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0d69809) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1186/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1186?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1186   +/-   ##
=======================================
  Coverage   79.14%   79.14%           
=======================================
  Files         173      173           
  Lines       48471    48485   +14     
  Branches    10963    10966    +3     
=======================================
+ Hits        38361    38375   +14     
  Misses       7607     7607           
  Partials     2503     2503           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1186?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1186/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `90.13% <100.00%> (+0.09%)` | :arrow_up: |

</details>
brandonwillard(2022-09-15 19:06:12):We're using type hints now instead of docstring type descriptions.
ricardoV94(2022-09-16 13:07:48):Is it fine to still include them in the docstrings?
brandonwillard(2022-09-16 15:59:28):I'd rather not, just in case it messes with the way docstrings are rendered in Sphinx; especially, when we start using the type hints in the documentation.
ricardoV94(2022-09-16 16:21:37):Can you point me to an example of docstrings with the format we want to follow? Should I just remove whatever was after `:` in the parameter enumeration?
brandonwillard(2022-09-16 16:49:16):I think you might need to use `typing.Sequence` here.  (At least for some versions of Python?)
brandonwillard(2022-09-16 16:51:01):It's best to just remove the type info from the docstring.  With the type hints in place, it will just amount to extra work later on when/if those types are adjusted.
ricardoV94(2022-09-16 16:55:40):Oh I assumed it came from typing when it autocompleted.
rlouf(2022-09-21 07:14:49):It's not clear what the behavior will be if the indices in `source` and `destination` are not unique, and when they are out of bounds.
ricardoV94(2022-09-21 07:51:25):It will fail. Those checks are done by the numpy helper `normalize_axis_tuple`. This is basically a copy-paste of the numpy implementation: https://github.com/numpy/numpy/blob/v1.23.0/numpy/core/numeric.py#L1410-L1478
codecov[bot](2022-09-16 05:53:08):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1187?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1187](https://codecov.io/gh/aesara-devs/aesara/pull/1187?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (63b9ca3) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5d97ffa6476839590b089cf96056b1784bd63bf0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5d97ffa) will **decrease** coverage by `0.02%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 63b9ca3 differs from pull request most recent head b7c9c4b. Consider uploading reports for the commit b7c9c4b to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1187/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1187?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1187      +/-   ##
==========================================
- Coverage   79.14%   79.11%   -0.03%     
==========================================
  Files         173      173              
  Lines       48485    48450      -35     
  Branches    10966    10959       -7     
==========================================
- Hits        38375    38333      -42     
- Misses       7607     7610       +3     
- Partials     2503     2507       +4     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1187?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/sandbox/rng\_mrg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1187/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvcm5nX21yZy5weQ==) | `84.14% <100.00%> (+0.03%)` | :arrow_up: |
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1187/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `72.89% <0.00%> (-8.69%)` | :arrow_down: |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/1187/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `51.00% <0.00%> (-0.29%)` | :arrow_down: |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/1187/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `88.06% <0.00%> (-0.19%)` | :arrow_down: |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1187/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `90.04% <0.00%> (-0.10%)` | :arrow_down: |
| [aesara/raise\_op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1187/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3JhaXNlX29wLnB5) | `98.70% <0.00%> (-0.08%)` | :arrow_down: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1187/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.66% <0.00%> (-0.08%)` | :arrow_down: |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1187/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `78.97% <0.00%> (-0.04%)` | :arrow_down: |
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1187/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `91.80% <0.00%> (ø)` | |
| [aesara/sparse/sharedvar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1187/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9zaGFyZWR2YXIucHk=) | `94.11% <0.00%> (ø)` | |
| ... and [2 more](https://codecov.io/gh/aesara-devs/aesara/pull/1187/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

</details>
brandonwillard(2022-09-16 01:01:55):```suggestion
    "The module `aesara.sandbox.rng_mrg` is deprecated. "
    "Use the module `aesara.tensor.random` for random variables instead.",
```
codecov[bot](2022-09-16 09:58:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1188?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1188](https://codecov.io/gh/aesara-devs/aesara/pull/1188?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (aed5986) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/739bd49f996974811592bd3384662d9284426b6d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (739bd49) will **decrease** coverage by `5.05%`.
> The diff coverage is `86.40%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1188/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1188?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1188      +/-   ##
==========================================
- Coverage   79.15%   74.09%   -5.06%     
==========================================
  Files         173      174       +1     
  Lines       48536    48605      +69     
  Branches    10322    10340      +18     
==========================================
- Hits        38417    36014    -2403     
- Misses       7628    10305    +2677     
+ Partials     2491     2286     -205     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1188?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/signal/conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/1188/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaWduYWwvY29udi5weQ==) | `0.00% <0.00%> (-75.68%)` | :arrow_down: |
| [aesara/tensor/rewriting/special.py](https://codecov.io/gh/aesara-devs/aesara/pull/1188/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvc3BlY2lhbC5weQ==) | `77.77% <77.77%> (ø)` | |
| [aesara/tensor/special.py](https://codecov.io/gh/aesara-devs/aesara/pull/1188/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zcGVjaWFsLnB5) | `90.64% <90.64%> (ø)` | |
| [aesara/link/jax/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1188/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL2VsZW13aXNlLnB5) | `80.59% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1188/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.12% <100.00%> (ø)` | |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1188/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `85.07% <100.00%> (-0.34%)` | :arrow_down: |
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1188/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `32.61% <100.00%> (-47.67%)` | :arrow_down: |
| [aesara/tensor/signal/pool.py](https://codecov.io/gh/aesara-devs/aesara/pull/1188/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaWduYWwvcG9vbC5weQ==) | `28.30% <100.00%> (-40.97%)` | :arrow_down: |
| [aesara/tensor/nnet/neighbours.py](https://codecov.io/gh/aesara-devs/aesara/pull/1188/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L25laWdoYm91cnMucHk=) | `0.00% <0.00%> (-91.27%)` | :arrow_down: |
| [aesara/tensor/nnet/conv3d2d.py](https://codecov.io/gh/aesara-devs/aesara/pull/1188/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvbnYzZDJkLnB5) | `0.00% <0.00%> (-81.16%)` | :arrow_down: |
| ... and [25 more](https://codecov.io/gh/aesara-devs/aesara/pull/1188/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

</details>
twiecki(2022-09-16 13:41:39):I would vote to also keep conv2d around, as convolutions are super common in all kinds of areas. I'd actually love to have a conv1d also, as there were too many cases where we had to roll our own.
brandonwillard(2022-09-16 16:01:12):> Anything else we want to salvage ?

Looks good to me.
rlouf(2022-09-26 08:52:24):> > Anything else we want to salvage ?
> 
> Looks good to me.

Just to be clear, do you mean that we only keep `Softmax`, `LogSoftmax` (which should be expressed as an Aesara graph + rewrites instead but that's another PR) and `SoftmaxGrad` and remove everything else?
ricardoV94(2022-09-26 09:28:57):Agree with @twiecki to keep the `conv2d` `Op` until we find some place to move it to. Everything else seems very specialized, easy to recreate.
rlouf(2022-09-26 09:32:05):We have the deprecation period to move it somewhere else, and it's better to raise a warning while we're considering moving it so downstream callers are not surprised the day it disappears.

(In this case we'll also need to update the warning when it is moved elsewhere)
rlouf(2022-09-29 20:49:22):I have moved `Softmax`, `LogSoftmax` and `SoftmaxGrad` to `aesara.tensor.math`, but it may be better to create a new `aesara.tensor.special` module for these functions to have a familiar import path.
rlouf(2022-09-29 21:30:08):Alright went through the checklist, will take another good look (especially at the documentation) tomorrow and move softmax-related `Op`s and functions to `aesara.tensor.special`. Then it should be good to merge once tests pass here.

Also, I indicated rel-2.9.0 as the deadline after which everything will be deleted. Does that sound right?
brandonwillard(2022-09-29 22:02:00):> Also, I indicated rel-2.9.0 as the deadline after which everything will be deleted. Does that sound right?

Yeah, that sounds fine.
twiecki(2022-09-30 13:35:37):So it seems like `conv2d` is being dropped?
rlouf(2022-09-30 14:10:38):> I'd actually love to have a conv1d also, as there were too many cases where we had to roll our own.

We can open an issue to implement the equivalent of `np.convolve`. That's in scope.

As for `conv_2d` the question is more: why should we keep it _in Aesara_?
rlouf(2022-09-30 14:17:52):Opened an issue for 1d convolution: https://github.com/aesara-devs/aesara/issues/1223
twiecki(2022-09-30 14:19:48):> conv_2d the question is more: why should we keep it in Aesara?

Don't have a good reason other than that it's useful to some PyMC models. The alternative is to add this to `pymc/aesaraf.py`, which is a fine solution too.
brandonwillard(2022-09-30 19:55:30):> > conv_2d the question is more: why should we keep it in Aesara?
> 
> Don't have a good reason other than that it's useful to some PyMC models. The alternative is to add this to `pymc/aesaraf.py`, which is a fine solution too.

I believe the original idea was to create a separate project and move all this DL-specific code there.  We can always do that.  We can also keep `conv2d` for the time being, especially if removing it will break things in PyMC.
rlouf(2022-09-30 20:18:15):> I believe the original idea was to create a separate project and move all this DL-specific code there.

Yeah that would be the ideal. You will still be able to import `conv_2d` after this PR is merged, and we can use the deprecation period to find a solution that works for everyone.


rlouf(2022-10-01 13:46:16):I removed the tests since there's no point in having them in the codebase if we're going to skip them anyway (and they can be retrieved from the git history should we move them somewhere else), but I can bring them back if you think that's a better idea.
brandonwillard(2022-10-01 19:08:28):> I removed the tests since there's no point in having them in the codebase if we're going to skip them anyway (and they can be retrieved from the git history should we move them somewhere else), but I can bring them back if you think that's a better idea.

Well, if we're going to keep the code around (e.g. `conv2d`), we need to keep some tests.  We can consider reducing the amount of testing, though, because the tests in these sub-packages are among the most redundant, wasteful, and unnecessarily time-consuming.  That's actually one of the reasons why this refactoring is so immediately helpful.
rlouf(2022-10-01 21:41:14):I reverted the commit that deleted the tests.
rlouf(2022-10-04 09:11:02):I am currently excluding all  the test related to `aesara.tensor.nnet` and `aesara.tensor.signal`. I can either include the tests related to `conv2d` individually, or use `pytests.mark.skip` on the others. I think refactoring the `nnet` and `signal` test suite is out of scope for this PR, and even for Aesara now that they're getting deprecated. 

What is your preferred solution?
brandonwillard(2022-10-05 19:00:30):> I am currently excluding all the test related to `aesara.tensor.nnet` and `aesara.tensor.signal`. I can either include the tests related to `conv2d` individually, or use `pytests.mark.skip` on the others. I think refactoring the `nnet` and `signal` test suite is out of scope for this PR, and even for Aesara now that they're getting deprecated.
> 
> What is your preferred solution?

We can include them individually, if that's not too involved.
rlouf(2022-10-12 14:25:27):@brandonwillard I included the `conv2d` tests individidually, I think we can merge this if the tests pass.

@twiecki I could not find where `conv2d` is used in PyMC. Would you mind opening an issue there regarding the deprecation of this `Op` in Aesara so you can start porting the code?
rlouf(2022-10-13 11:38:19):Codecov warnings are about tests in `nnet` and `signal`, I think this can be reviewed one last time and merged.
brandonwillard(2022-10-17 21:25:33):This looks like it's in response to https://github.com/aesara-devs/aesara/issues/1221.
rlouf(2022-09-16 13:22:01):Thank you for contributing. I tried to make it run on my machine (with `matrix` and `vector`s instead of shared variables), and the comments are left are the took things that prevented it from running.
rlouf(2022-09-16 16:09:06):> N.B. We really should find a way to run `black` on our code snippets in the documentation.

And run the examples in the CI! For instance this one is not going to compile because of the use of `shared` variables (which are not necessary).
LegrandNico(2022-09-16 18:03:55):> Just some formatting changes to match the rest of the library.
> 
> N.B. We really should find a way to run black on our code snippets in the documentation.

Have you tried using [blacken-docs](https://github.com/asottile/blacken-docs)?
brandonwillard(2022-09-16 18:50:42):> > N.B. We really should find a way to run `black` on our code snippets in the documentation.
> 
> And run the examples in the CI! For instance this one is not going to compile because of the use of `shared` variables (which are not necessary).

Why shouldn't it compile and/or run?
rlouf(2022-09-16 21:17:40):Unless I missed something the values of the shared variables were not specified.
brandonwillard(2022-09-16 21:44:25):> Unless I missed something the values of the shared variables were not specified.

They're defined, I believe, just not in the same code block.
LegrandNico(2022-09-17 09:59:27):> > Unless I missed something the values of the shared variables were not specified.
> They're defined, I believe, just not in the same code block.

I think this is making the example a bit confusing as the creation of the input variables is hidden from the user, and then the code is commented to mention you should presume the variables already exist. It would probably be easier for the understanding to have everything in the same block.
rlouf(2022-09-17 10:26:17):> It would probably be easier for the understanding to have everything in the same block.

Indeed I always like to copy/paste examples from the documentation when I start playing with a library. I'm sure I'm not the only one.
rlouf(2022-09-16 09:17:19):```suggestion
   srng = at.random.RandomStream(1234)
```
rlouf(2022-09-16 09:18:31):It's an implicit convention, but we usually use `srng` for `RandomStream`s
rlouf(2022-09-16 09:19:29):```suggestion
   import aesara.tensor as at
```
rlouf(2022-09-16 09:20:05):```suggestion
       hsample = srng.binomial(1, hmean, size=hmean.shape)
```
rlouf(2022-09-16 13:20:52):```suggestion
   srng = at.random.RandomStream(1234)
```
rlouf(2022-09-16 13:21:09):```suggestion
       return srng.binomial(1, vmean, size=vsample.shape)
```
brandonwillard(2022-09-16 16:02:16):```suggestion
   def one_step(vsample):
       hmean = at.sigmoid(at.dot(vsample, W) + bhid)
       hsample = srng.binomial(1, hmean, size=hmean.shape)
       vmean = at.sigmoid(at.dot(hsample, W.T) + bvis)
```
brandonwillard(2022-09-16 16:02:48):```suggestion
   values, updates = aesara.scan(one_step, outputs_info=sample, n_steps=10)
```
brandonwillard(2022-09-16 16:05:13):```suggestion
   import numpy as np
   
   rng = np.random.default_rng(203940)
   W_values = rng.uniform(size=(2, 2))
   bvis_values = rng.uniform(size=(2,))
   bhid_values = rng.uniform(size=(2,))
```
ricardoV94(2022-09-16 16:16:30):> Looks like that `None` case isn't working in at least one test situation.

Something weird with the use of `convert_variable` in `IfElse`, which looks like it should have been `filter_variable`, since `convert_variable` is supposed to return None when it can't do its job
ricardoV94(2022-09-16 20:51:39):Getting a bit bogged down with sparse/dense conversion types. Not super clear what should and should not be allowed.
brandonwillard(2022-09-16 21:00:50):> Getting a bit bogged down with sparse/dense conversion types. Not super clear what should and should not be allowed.

As I recall, `SparseTensorType` will raise `NotImplementedError`s for dtype and sparsity-format changes.
brandonwillard(2022-09-16 21:05:36):You can change the `pytest.raises` in `test_Sparse_convert_variable` to an `assert ... is None`.
brandonwillard(2022-09-16 23:14:22):Better yet, https://github.com/aesara-devs/aesara/pull/1192 will address these `SparseTensorType` issues.
codecov[bot](2022-09-19 10:28:28):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1190?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1190](https://codecov.io/gh/aesara-devs/aesara/pull/1190?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (e6cd121) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/7d0edb87e25bb68a0b3d026457668c7949cf348c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (7d0edb8) will **not change** coverage.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1190/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1190?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1190   +/-   ##
=======================================
  Coverage   79.13%   79.13%           
=======================================
  Files         173      173           
  Lines       48465    48465           
  Branches    10963    10963           
=======================================
  Hits        38354    38354           
  Misses       7608     7608           
  Partials     2503     2503           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1190?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1190/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `91.80% <100.00%> (ø)` | |
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1190/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `81.57% <0.00%> (ø)` | |

</details>
codecov[bot](2022-09-17 01:44:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1192?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1192](https://codecov.io/gh/aesara-devs/aesara/pull/1192?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (dc294fc) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5043ac8e83232d7e773b80e3fc2a44cabe57016e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5043ac8) will **increase** coverage by `0.01%`.
> The diff coverage is `92.15%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1192/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1192?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1192      +/-   ##
==========================================
+ Coverage   79.12%   79.13%   +0.01%     
==========================================
  Files         173      173              
  Lines       48458    48465       +7     
  Branches    10961    10963       +2     
==========================================
+ Hits        38341    38354      +13     
+ Misses       7610     7608       -2     
+ Partials     2507     2503       -4     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1192?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/sparse/sharedvar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1192/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9zaGFyZWR2YXIucHk=) | `94.11% <ø> (ø)` | |
| [aesara/sparse/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1192/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS90eXBlLnB5) | `81.57% <86.66%> (+8.68%)` | :arrow_up: |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/1192/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `51.28% <100.00%> (+0.28%)` | :arrow_up: |
| [aesara/sparse/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1192/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `82.87% <100.00%> (-0.02%)` | :arrow_down: |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1192/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `89.00% <0.00%> (-0.30%)` | :arrow_down: |

</details>
rlouf(2022-09-17 05:48:17):Does this solve the inconsistencies observed in #881?
codecov[bot](2022-09-20 14:41:14):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1198?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1198](https://codecov.io/gh/aesara-devs/aesara/pull/1198?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (53744c9) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/cd3a3ce24d362e51234786fa198fa3158e2e1ffa?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (cd3a3ce) will **not change** coverage.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1198/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1198?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1198   +/-   ##
=======================================
  Coverage   79.14%   79.14%           
=======================================
  Files         173      173           
  Lines       48471    48471           
  Branches    10963    10963           
=======================================
  Hits        38361    38361           
  Misses       7607     7607           
  Partials     2503     2503           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1198?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/scan.py](https://codecov.io/gh/aesara-devs/aesara/pull/1198/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2Nhbi5weQ==) | `95.55% <100.00%> (ø)` | |

</details>
rlouf(2022-09-23 11:02:17):I see there's a `unique_name_generator` function in `aesara.link.utils`, is that its purpose?
brandonwillard(2022-09-23 15:27:19):> I see there's a `unique_name_generator` function in `aesara.link.utils`, is that its purpose?

Yes
codecov[bot](2022-09-20 16:15:15):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1199?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1199](https://codecov.io/gh/aesara-devs/aesara/pull/1199?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (38ea760) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/84e69fc890434564757747fafc7646e54db6e14f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (84e69fc) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1199/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1199?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1199   +/-   ##
=======================================
  Coverage   79.13%   79.14%           
=======================================
  Files         173      173           
  Lines       48465    48470    +5     
  Branches    10963    10963           
=======================================
+ Hits        38354    38360    +6     
+ Misses       7608     7607    -1     
  Partials     2503     2503           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1199?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1199/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.73% <100.00%> (+0.07%)` | :arrow_up: |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/1199/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `88.25% <0.00%> (+0.18%)` | :arrow_up: |

</details>
codecov[bot](2022-09-20 21:03:20):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1201?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1201](https://codecov.io/gh/aesara-devs/aesara/pull/1201?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b53c80a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/84e69fc890434564757747fafc7646e54db6e14f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (84e69fc) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1201/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1201?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1201   +/-   ##
=======================================
  Coverage   79.13%   79.13%           
=======================================
  Files         173      173           
  Lines       48465    48466    +1     
  Branches    10963    10963           
=======================================
+ Hits        38354    38355    +1     
  Misses       7608     7608           
  Partials     2503     2503           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1201?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1201/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `90.04% <100.00%> (+<0.01%)` | :arrow_up: |

</details>
codecov[bot](2022-09-21 22:31:05):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1203?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1203](https://codecov.io/gh/aesara-devs/aesara/pull/1203?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (aefeeef) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/69c10443b1a8e5492efc62436515cc6bb81c8c74?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (69c1044) will **increase** coverage by `0.00%`.
> The diff coverage is `97.27%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1203/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1203?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff            @@
##             main    #1203    +/-   ##
========================================
  Coverage   79.13%   79.14%            
========================================
  Files         173      173            
  Lines       48492    48523    +31     
  Branches    10966    10319   -647     
========================================
+ Hits        38374    38403    +29     
- Misses       7625     7628     +3     
+ Partials     2493     2492     -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1203?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/scan.py](https://codecov.io/gh/aesara-devs/aesara/pull/1203/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2Nhbi5weQ==) | `94.11% <96.96%> (-1.44%)` | :arrow_down: |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1203/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.46% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/link/numba/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1203/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvdGVuc29yX2Jhc2ljLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/link/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1203/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `61.25% <100.00%> (+0.12%)` | :arrow_up: |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1203/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `85.41% <0.00%> (-0.07%)` | :arrow_down: |
| [aesara/link/numba/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1203/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2NhbGFyLnB5) | `87.33% <0.00%> (+1.33%)` | :arrow_up: |

</details>
brandonwillard(2022-09-23 00:24:22):While working on this, I noticed some inner-function typing issues that&mdash;again&mdash;involve the distinction between NumPy and Numba scalars (cf. https://github.com/aesara-devs/aesara/issues/1063).  More specifically, an inner-function could return a Numba scalar for a tap with storage that is typed as a NumPy scalar.

If I can find a reasonable general solution soon, then I'll include it in this PR; otherwise, we can merge this and handle that issue separately.
codecov[bot](2022-09-22 11:45:44):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1205?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1205](https://codecov.io/gh/aesara-devs/aesara/pull/1205?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (0a34abd) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5d97ffa6476839590b089cf96056b1784bd63bf0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (5d97ffa) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1205/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1205?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1205   +/-   ##
=======================================
  Coverage   79.14%   79.14%           
=======================================
  Files         173      173           
  Lines       48485    48486    +1     
  Branches    10966    10966           
=======================================
+ Hits        38375    38376    +1     
  Misses       7607     7607           
  Partials     2503     2503           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1205?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1205/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `61.12% <ø> (ø)` | |
| [aesara/link/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1205/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYmFzaWMucHk=) | `86.49% <100.00%> (ø)` | |
| [aesara/sandbox/rng\_mrg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1205/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NhbmRib3gvcm5nX21yZy5weQ==) | `84.14% <100.00%> (+0.03%)` | :arrow_up: |

</details>
ricardoV94(2022-09-22 12:30:39):This wasn't changed by this PR, but I wonder does the hack actually work? There's a whole bunch of logic downstream concerning garbage collection and whatnot that is supposed to rely on this. Too dense for me to take a look though :D
brandonwillard(2022-09-23 04:11:44):> This wasn't changed by this PR, but I wonder does the hack actually work? There's a whole bunch of logic downstream concerning garbage collection and whatnot that is supposed to rely on this. Too dense for me to take a look though :D

It must be working; how else have we been using Numba/JAX to evaluate graphs?  

The hackish part is that we were and still are (to some extent) using the old `Function`/`VM` framework to do something that it wasn't designed to do.  For example, **we don't have a thunk for each node in the graph**, like we normally would.

To be clear, shared variable and `updates` support for the JIT backends has always been incomplete, and this falls squarely into the latter.
codecov[bot](2022-09-23 23:23:55):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1210?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1210](https://codecov.io/gh/aesara-devs/aesara/pull/1210?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1b8652e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/8d612023da17e1c9c9c80f327d534ee337ab0da3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8d61202) will **not change** coverage.
> The diff coverage is `n/a`.

> :exclamation: Current head 1b8652e differs from pull request most recent head 1263df9. Consider uploading reports for the commit 1263df9 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1210/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1210?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1210   +/-   ##
=======================================
  Coverage   79.14%   79.14%           
=======================================
  Files         173      173           
  Lines       48486    48486           
  Branches    10966    10966           
=======================================
  Hits        38376    38376           
  Misses       7607     7607           
  Partials     2503     2503           
```



</details>
codecov[bot](2022-09-24 20:47:29):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1211?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1211](https://codecov.io/gh/aesara-devs/aesara/pull/1211?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4be8bc0) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/1390cc395f5f27c3a0359000b20c4adb7435dca2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1390cc3) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1211/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1211?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1211   +/-   ##
=======================================
  Coverage   74.10%   74.11%           
=======================================
  Files         174      174           
  Lines       48624    48636   +12     
  Branches    10351    10351           
=======================================
+ Hits        36035    36047   +12     
  Misses      10301    10301           
  Partials     2288     2288           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1211?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1211/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `99.03% <100.00%> (+0.02%)` | :arrow_up: |

</details>
rlouf(2022-11-03 14:43:39):Removed the commits related to `StandardXRV`s, I will open an issue for that and reference the relevant comments. This PR is only about `StudentTRV`.
brandonwillard(2022-09-25 23:49:15):We should at least expose this via our NumPy-like API (e.g. create a `standard_t`).
rlouf(2022-09-26 04:54:44):I did this to be consistent with  `Cauchy` and `Gamma` that are implemented as `ScipyRandomVariable`s even though there is a `standard_cauchy` and `standard_gamma` in NumPy. I don't mind either way.
rlouf(2022-09-26 14:38:42):Oh did you mean adding `standard_t`? In this case I can add `standard_cauchy`, `standard_exponential` and `standard_gamma` for NumPy compatibility as well while I'm at it.
brandonwillard(2022-09-29 22:44:29):> Oh did you mean adding `standard_t`? In this case I can add `standard_cauchy`, `standard_exponential` and `standard_gamma` for NumPy compatibility as well while I'm at it.

Yeah, that would be good.
brandonwillard(2022-09-30 22:08:54):If we only intend to add `standard_gamma` for NumPy interface compatibility, then the `GammaRV` `Op` alone should suffice, no?  For instance, `standard_gamma` could be an `Op` constructor function that effectively removes the shape and rate arguments from `GammaRV`.

As always, we want to avoid adding new `Op`s whenever we reasonably can.

N.B. This is an example of the concern stated in https://github.com/aesara-devs/aemcmc/pull/67#discussion_r984062408.
ricardoV94(2022-10-01 06:28:35):I think the issue is that you can't use RandomStream if you don't have a specific Op. That's why the standard_nornal was made a subclass as well IIRC
rlouf(2022-10-01 07:26:54):> If we only intend to add `standard_gamma` for NumPy interface compatibility, then the `GammaRV` `Op` alone should suffice, no? For instance, `standard_gamma` could be an `Op` constructor function that effectively removes the shape and rate arguments from `GammaRV`.
> 
> As always, we want to avoid adding new `Op`s whenever we reasonably can.
> 
> N.B. This is an example of the concern stated in [aesara-devs/aemcmc#67 (comment)](https://github.com/aesara-devs/aemcmc/pull/67#discussion_r984062408).

I agree with all this.

@ricardoV94 we can monkey patch the base classes. I'm not a big fan of this approach, but it should work:

```python
import aesara.tensor as at
from aesara.tensor.random.basic import NormalRV

def create_standard_normal():

    def standard_call(self, shape, size=None, **kwargs):
        return self.general_call(0., 1., size, **kwargs)

    RV = NormalRV
    RV.general_call = RV.__call__
    RV.__call__ = standard_call
    return RV()


standard_normal = create_standard_normal()

print(type(normal))
# <class 'aesara.tensor.random.basic.NormalRV'>
print(type(standard_normal))
# <class 'aesara.tensor.random.basic.NormalRV'>
```

ricardoV94(2022-10-01 07:29:59):Does it work with RandomStream like that?
rlouf(2022-10-01 07:35:10):I think it will, `RandomStream` checks that the attribute is both in `aesara.tensor.random.basic` and is an instance of `RandomVariable`. We'll soon know for sure.
rlouf(2022-10-01 09:15:54):This quickly gets complicated, monkey patching affects the class globally so i would need to replace the method of the instance directly.

By the way, I've noticed that NumPy's `Generator` [has a a method for every RV](https://github.com/numpy/numpy/blob/main/numpy/random/_generator.pyx)
ricardoV94(2022-10-01 09:39:02):Maybe we can add a canonical rewrite that replaces the standard versions immediately?

Or can we tweak RandomStream perhaps?
rlouf(2022-10-01 09:58:03):> Maybe we can add a canonical rewrite that replaces the standard versions immediately?

That would certainly work. But I'd rather not rely on rewrites to "fix" a problem in the representation of objects in the IR, which is also my concern in https://github.com/aesara-devs/aesara/issues/1213. It would be better if they were represented by the same type in the original graph.
rlouf(2022-10-01 13:43:56):Adding / Replacing most methods in class instances works fine, for instance:

```python
import aesara.tensor as at
from aesara.tensor.random.basic import t, StudentTRV

def create_standard_t():

    C = StudentTRV()

    def new_call(self, df, size=None, **kwargs):
        return self.__call__(df, 0, 1, size, **kwargs)

    C.call = new_call.__get__(C)
    return C

standard_t = create_standard_t()
print(standard_t.call(2.).owner.inputs)
# [RandomGeneratorSharedVariable(<Generator(PCG64) at 0x7F618591A420>), TensorConstant{[]}, TensorConstant{11}, TensorConstant{2.0}, TensorConstant{0}, TensorConstant{1}]
```
However, special methods like `__call__` are looked up with respect to the class of the object, and not its instance. So if we monkey patch the method it will end up affecting all the instances of the class, and thus instances of the non-standard `RandomVariable`. So I think that's a dead end.
brandonwillard(2022-10-05 19:18:48):Yeah, I think we should be able to update `RandomStream` to handle these cases without too much difficulty and/or compromise.
codecov[bot](2022-09-26 13:20:38):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1214?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1214](https://codecov.io/gh/aesara-devs/aesara/pull/1214?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (90d8920) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/8171925a00ae1ad2b2945f5dc0be38b47a54fb5d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (8171925) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1214/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1214?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1214   +/-   ##
=======================================
  Coverage   79.09%   79.09%           
=======================================
  Files         173      173           
  Lines       48481    48495   +14     
  Branches    10964    10968    +4     
=======================================
+ Hits        38344    38358   +14     
  Misses       7642     7642           
  Partials     2495     2495           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1214?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/linker.py](https://codecov.io/gh/aesara-devs/aesara/pull/1214/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2xpbmtlci5weQ==) | `100.00% <100.00%> (ø)` | |

</details>
brandonwillard(2022-09-26 22:19:53):Perhaps we should set a seed value here to guarantee the consistency of the `assert` that follows?
ricardoV94(2022-09-27 04:50:41):The `f() != f()`? That should be incredibly rare to happen by chance.
brandonwillard(2022-09-29 16:49:08):No chance is better than any in this scenario, especially given the effort required to avoid it entirely.
ricardoV94(2022-09-30 07:41:51):Done
codecov[bot](2022-09-29 21:52:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1218?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1218](https://codecov.io/gh/aesara-devs/aesara/pull/1218?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (b6ea0fe) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/000a1c87b18d01c983e00b37e45f6cf3add1cdf0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (000a1c8) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1218/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1218?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1218      +/-   ##
==========================================
- Coverage   79.09%   79.09%   -0.01%     
==========================================
  Files         173      173              
  Lines       48486    48481       -5     
  Branches    10966    10964       -2     
==========================================
- Hits        38349    38344       -5     
  Misses       7642     7642              
  Partials     2495     2495              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1218?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/scan/rewriting.py](https://codecov.io/gh/aesara-devs/aesara/pull/1218/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NjYW4vcmV3cml0aW5nLnB5) | `78.93% <100.00%> (-0.10%)` | :arrow_down: |

</details>
codecov[bot](2022-09-29 19:05:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1219?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1219](https://codecov.io/gh/aesara-devs/aesara/pull/1219?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3bf3506) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ec82b9f7ac1bdab73110afb8ee2e1a1517b8755d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ec82b9f) will **decrease** coverage by `0.05%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1219/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1219?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1219      +/-   ##
==========================================
- Coverage   79.14%   79.09%   -0.06%     
==========================================
  Files         173      173              
  Lines       48486    48486              
  Branches    10966    10966              
==========================================
- Hits        38376    38349      -27     
- Misses       7607     7642      +35     
+ Partials     2503     2495       -8     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1219?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/1219/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ibGFzLnB5) | `79.71% <ø> (ø)` | |
| [aesara/tensor/sort.py](https://codecov.io/gh/aesara-devs/aesara/pull/1219/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zb3J0LnB5) | `86.89% <100.00%> (ø)` | |
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/1219/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `52.20% <0.00%> (-2.17%)` | :arrow_down: |

</details>
codecov[bot](2022-09-30 20:03:41):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1224?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1224](https://codecov.io/gh/aesara-devs/aesara/pull/1224?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (9159973) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/eddc85fced747bd54fe7f0fb5de5a8eb9912e312?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (eddc85f) will **increase** coverage by `0.03%`.
> The diff coverage is `50.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1224/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1224?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1224      +/-   ##
==========================================
+ Coverage   79.09%   79.13%   +0.03%     
==========================================
  Files         173      173              
  Lines       48495    48492       -3     
  Branches    10968    10966       -2     
==========================================
+ Hits        38358    38374      +16     
+ Misses       7642     7625      -17     
+ Partials     2495     2493       -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1224?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/1224/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `50.17% <50.00%> (+0.40%)` | :arrow_up: |
| [aesara/compile/function/pfunc.py](https://codecov.io/gh/aesara-devs/aesara/pull/1224/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `82.41% <0.00%> (+1.00%)` | :arrow_up: |
| [aesara/link/vm.py](https://codecov.io/gh/aesara-devs/aesara/pull/1224/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `92.55% <0.00%> (+2.29%)` | :arrow_up: |

</details>
codecov[bot](2022-10-05 00:57:21):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1234?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1234](https://codecov.io/gh/aesara-devs/aesara/pull/1234?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a84e153) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/3d96ee804ab9404713ebab2283c1530857ca47f4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (3d96ee8) will **increase** coverage by `0.00%`.
> The diff coverage is `85.71%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1234/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1234   +/-   ##
=======================================
  Coverage   79.14%   79.14%           
=======================================
  Files         173      173           
  Lines       48523    48528    +5     
  Branches    10319    10322    +3     
=======================================
+ Hits        38403    38408    +5     
  Misses       7628     7628           
  Partials     2492     2492           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1234/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `61.84% <85.71%> (+0.59%)` | :arrow_up: |

</details>
codecov[bot](2022-10-07 18:15:18):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1241?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1241](https://codecov.io/gh/aesara-devs/aesara/pull/1241?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (bc73460) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/a619a4eca5c9207c8059533230cebd0f534e29b2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (a619a4e) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1241/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1241?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1241   +/-   ##
=======================================
  Coverage   79.14%   79.15%           
=======================================
  Files         173      173           
  Lines       48528    48536    +8     
  Branches    10322    10322           
=======================================
+ Hits        38408    38417    +9     
  Misses       7628     7628           
+ Partials     2492     2491    -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1241?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1241/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvcmFuZG9tLnB5) | `98.81% <100.00%> (-0.01%)` | :arrow_down: |
| [aesara/link/numba/dispatch/scan.py](https://codecov.io/gh/aesara-devs/aesara/pull/1241/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2Nhbi5weQ==) | `95.31% <100.00%> (+1.19%)` | :arrow_up: |

</details>
ricardoV94(2022-10-09 06:15:57):Can you now remove this logic here? https://github.com/aesara-devs/aesara/blob/739bd49f996974811592bd3384662d9284426b6d/aesara/link/numba/linker.py#L44-L52
codecov[bot](2022-10-10 02:42:24):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1245?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1245](https://codecov.io/gh/aesara-devs/aesara/pull/1245?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (31b77a2) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/31b77a2ef1c96524884f82a063300e6324c9d5c5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (31b77a2) will **not change** coverage.
> The diff coverage is `n/a`.

> :exclamation: Current head 31b77a2 differs from pull request most recent head 9304396. Consider uploading reports for the commit 9304396 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1245/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1245?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1245   +/-   ##
=======================================
  Coverage   74.12%   74.12%           
=======================================
  Files         174      174           
  Lines       48654    48654           
  Branches    10353    10353           
=======================================
  Hits        36064    36064           
  Misses      10300    10300           
  Partials     2290     2290           
```



</details>
brandonwillard(2022-10-14 20:54:42):OK, this should be good merge once the [Numba 0.57 RC](https://github.com/numba/numba/milestone/63) release is created containing all the `Generator` support.
brandonwillard(2023-05-06 23:04:33):The current failure will be fixed by https://github.com/aesara-devs/aesara/pull/1496.
ricardoV94(2022-10-09 06:16:56):The test name should be changed now that it no longer uses RandomStates
ricardoV94(2022-10-09 06:20:30):Should we match the Type or message in this test?
brandonwillard(2022-10-13 06:21:06):It looks like the next step might involve updates to `DimShuffle.input_broadcastable` and `DimShuffle`'s broadcastable dimension dropping feature.
brandonwillard(2022-10-20 23:58:22):Looks like this required some long overdue updates to the use of `TensorType.broadcastable` in `Scan`.  With these changes, `Scan` should propagate exact static shape information a lot better in certain cases. 
codecov[bot](2022-10-21 03:56:33):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1253?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1253](https://codecov.io/gh/aesara-devs/aesara/pull/1253?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (272880e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/240827cf98db436d99b41dde2a642f256c4332d5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (240827c) will **decrease** coverage by `4.24%`.
> The diff coverage is `75.17%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1253/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1253?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1253      +/-   ##
==========================================
- Coverage   78.35%   74.10%   -4.25%     
==========================================
  Files         152      174      +22     
  Lines       47685    48624     +939     
  Branches    10881    10351     -530     
==========================================
- Hits        37364    36035    -1329     
- Misses       7773    10301    +2528     
+ Partials     2548     2288     -260     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1253?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/compiledir.py](https://codecov.io/gh/aesara-devs/aesara/pull/1253/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvY29tcGlsZWRpci5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/compile/io.py](https://codecov.io/gh/aesara-devs/aesara/pull/1253/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvaW8ucHk=) | `83.01% <0.00%> (-5.67%)` | :arrow_down: |
| [aesara/d3viz/d3viz.py](https://codecov.io/gh/aesara-devs/aesara/pull/1253/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2Qzdml6L2Qzdml6LnB5) | `23.68% <ø> (ø)` | |
| [aesara/d3viz/formatting.py](https://codecov.io/gh/aesara-devs/aesara/pull/1253/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2Qzdml6L2Zvcm1hdHRpbmcucHk=) | `12.88% <ø> (ø)` | |
| [aesara/gradient.py](https://codecov.io/gh/aesara-devs/aesara/pull/1253/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `76.90% <ø> (-0.33%)` | :arrow_down: |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1253/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `89.00% <ø> (+1.20%)` | :arrow_up: |
| [aesara/graph/destroyhandler.py](https://codecov.io/gh/aesara-devs/aesara/pull/1253/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Rlc3Ryb3loYW5kbGVyLnB5) | `69.55% <ø> (+0.56%)` | :arrow_up: |
| [aesara/graph/features.py](https://codecov.io/gh/aesara-devs/aesara/pull/1253/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZlYXR1cmVzLnB5) | `64.69% <ø> (-1.27%)` | :arrow_down: |
| [aesara/graph/fg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1253/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `87.39% <ø> (+0.61%)` | :arrow_up: |
| [aesara/graph/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1253/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL29wLnB5) | `86.59% <ø> (+18.15%)` | :arrow_up: |
| ... and [242 more](https://codecov.io/gh/aesara-devs/aesara/pull/1253/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

</details>
anirudhacharya(2022-10-16 09:22:19):Hello reviewers, this is my first PR in this repo, I will try to make more PRs in the future.

I wanted to know more about this project and about Theano's/Aesara's symbolic computation graphs, so I thought making a few PRs on the way might be good.

A couple of questions - 
1. I tried running `pytest tests/compile/function/test_types.py` locally but I got the following error - 
```
ImportError while importing test module '/Users/anirudhacharya/Code/aesara/tests/compile/function/test_types.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../.pyenv/versions/3.7.5/lib/python3.7/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/compile/function/test_types.py:7: in <module>
    import aesara.tensor as at
aesara/__init__.py:64: in <module>
    from aesara.configdefaults import config
aesara/configdefaults.py:11: in <module>
    from setuptools._distutils.spawn import find_executable
E   ModuleNotFoundError: No module named 'setuptools._distutils'
```
but I also got the same error with the latest commit on the main branch, so I don't think the error has anything to do with the changes in this PR. Is there some setup or installation that I am missing? I am able to successfully use `pytest` on other python projects on my machine.

2. I would also like to add this https://github.com/aesara-devs/aesara/issues/746 in this PR itself. Can someone point me where in the documentation the `as_symbolic` function might go, would it be here - https://github.com/aesara-devs/aesara/blob/main/doc/library/graph/graph.rst

@brandonwillard @michaelosthege @ricardoV94 @rlouf 
rlouf(2022-10-17 07:22:41):> but I also got the same error with the latest commit on the main branch, so I don't think the error has anything to do with the changes in this PR. Is there some setup or installation that I am missing? I am able to successfully use `pytest` on other python projects on my machine.

I reran the test on the `main` branch to check, but they run without problem. Did you create a fresh environment and follow the [installation instruction for developers](https://aesara.readthedocs.io/en/latest/dev_start_guide.html) ? Let's see if the tests pass in CI.

> 2. I would also like to add this [Add `aesara.as_symbolic` to the documentation #746](https://github.com/aesara-devs/aesara/issues/746) in this PR itself. Can someone point me where in the documentation the `as_symbolic` function might go, would it be here - https://github.com/aesara-devs/aesara/blob/main/doc/library/graph/graph.rst
 
It is better to open separate PRs for separate issues unless they're directly related. It makes the review process easier and generally means we can merge PRs faster. It is also best to centralize the information and ask questions in the issue directly. I added a suggestion there.
codecov[bot](2022-10-17 08:32:56):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1262?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1262](https://codecov.io/gh/aesara-devs/aesara/pull/1262?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (fd8d2da) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/471657a5ac3e9868797bcd779a4e635915999c5d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (471657a) will **not change** coverage.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1262/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1262?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1262   +/-   ##
=======================================
  Coverage   74.10%   74.10%           
=======================================
  Files         174      174           
  Lines       48624    48624           
  Branches    10351    10351           
=======================================
  Hits        36035    36035           
  Misses      10301    10301           
  Partials     2288     2288           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1262?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/1262/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.00% <100.00%> (ø)` | |

</details>
rlouf(2022-10-17 09:04:07):Please capitalize your commit as explained in [this reference in the PR checklist](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html) and use a message more explicit than "refactor X", such as e.g. "Use `time.time_ns()` instead of `time.time()`". LGTM otherwise.
anirudhacharya(2022-10-17 09:43:33):> Please capitalize your commit as explained in [this reference in the PR checklist](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html) and use a message more explicit than "refactor X", such as e.g. "Use `time.time_ns()` instead of `time.time()`". LGTM otherwise.

I have updated the commit message as requested.
anirudhacharya(2022-10-17 11:17:07):> I reran the test on the `main` branch to check, but they run without problem. Did you create a fresh environment and follow the [installation instruction for developers](https://aesara.readthedocs.io/en/latest/dev_start_guide.html) ? Let's see if the tests pass in CI.
> 
> >

The CI did pass( the first run) with all green, so I did a `git clean` and followed the instructions on the link you gave to rebuild and rerun the tests. I did not get the error that I mentioned before, but a few of the tests did fail with the error `CompilationFailed`, and I am trying to resolve them here in this issue https://github.com/aesara-devs/aesara/issues/1263
anirudhacharya(2022-10-17 11:21:22):The latest [test failures](https://github.com/aesara-devs/aesara/actions/runs/3264052105/jobs/5365336600) on the CI are due to the following - 
```
ERROR: Could not install packages due to an OSError: HTTPSConnectionPool(host='files.pythonhosted.org', port=443): Max retries exceeded with url: /packages/94/b3/ff2845971788613e646e667043fdb5f128e2e540aefa09a3c55be8290d6d/filelock-3.8.0-py3-none-any.whl (Caused by NewConnectionError('<pip._vendor.urllib3.connection.HTTPSConnection object at 0x7f8f4072ae20>: Failed to establish a new connection: [Errno 101] Network is unreachable'))
```

It was some sort of a network issue, I think it might pass if we reran the tests.
brandonwillard(2022-10-18 01:00:18):Thanks for the PR!

Before going any further, we need to address https://github.com/aesara-devs/aesara/issues/1246#issuecomment-1281676732.
anirudhacharya(2022-10-20 23:57:09):> I'm not sure what's up, but I'm seeing Codecov warnings in the full "Files changed" diff for code that wasn't changed. Perhaps we need to update the Codecov settings?

@brandonwillard I am not sure how the CI is setup, but `codecov` settings seem to be coming from here - https://github.com/aesara-devs/aesara/blob/be0ea5ca1c13362be28fc209789cc59816893f17/codecov.yml#L18y

Instead of maybe changing/loosening the settings, can we check why `codecov` raised the error - 
`Added line #L47 was not covered by tests`
when that line was not added in this PR at all? 

It would seem my PR is not the only one that is facing this issue, and this issue might be flaky( `codecov/patch` failed but `codecov/project` passed) - https://github.com/aesara-devs/aesara/pull/1245/checks?check_run_id=8918034749. 

Can we just rerun only `codecov` for this PR and see if the error repeats?


brandonwillard(2022-10-24 19:41:50):> @brandonwillard I am not sure how the CI is setup, but `codecov` settings seem to be coming from here - https://github.com/aesara-devs/aesara/blob/be0ea5ca1c13362be28fc209789cc59816893f17/codecov.yml#L18y

Well, it looks like the issue has gone away by itself, because now I don't see all those beta-feature annotations any more.  We could likely make some improvements to the Codecov settings, though.

Regardless, it looks like a merge commit has been added, so we'll need to rebase this and remove it in order to merge.
anirudhacharya(2022-10-25 00:42:29):> Regardless, it looks like a merge commit has been added, so we'll need to rebase this and remove it in order to merge.

If we do a squash and merge this will not be a problem.

> * Should we use `time.perf_counter_ns` instead?

This sounds reasonable. Also,  doesn't it make sense to record it as `ns` itself,  instead of dividing by `10**9` before recording the time?

> * Do we want to make the timer/counter configurable?

Configurable, how? What needs to be configured?

brandonwillard(2022-10-25 00:53:21):> If we do a squash and merge this will not be a problem.

Whichever way is fine; I just want to be clear that this branch can't be added to `main` in its current form.  

> This sounds reasonable. Also, doesn't it make sense to record it as `ns` itself, instead of dividing by `10**9` before recording the time?

Yes, that's one of the things that made me think about it.

> Configurable, how? What needs to be configured?

For instance, if one wanted to use `time.time_ns` instead, we could provide and option for that.  At best, it might be worth creating an issue for the idea, but it would be very low priority.






anirudhacharya(2022-10-17 13:21:04):For review - @brandonwillard @rlouf 
brandonwillard(2022-10-17 23:32:45):Thanks for the contribution!
rlouf(2022-10-18 07:46:32):I'm closing this; I need this change in #1202.
codecov[bot](2022-10-17 22:39:01):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1269?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1269](https://codecov.io/gh/aesara-devs/aesara/pull/1269?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (588313b) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/739bd49f996974811592bd3384662d9284426b6d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (739bd49) will **not change** coverage.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1269/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1269?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1269   +/-   ##
=======================================
  Coverage   79.15%   79.15%           
=======================================
  Files         173      173           
  Lines       48536    48536           
  Branches    10322    10322           
=======================================
  Hits        38417    38417           
  Misses       7628     7628           
  Partials     2491     2491           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1269?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/1269/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `89.09% <ø> (ø)` | |

</details>
brandonwillard(2022-11-04 21:10:32):These tests are sensitive to the `aesara.config.floatX` value, and that's why they're failing; otherwise, the tests pass.
rlouf(2022-11-01 22:13:35):Thank you for contributing. Did you check that the following `Variable`s subclasses don't override the `clone` method?

- `Variable`
- `Constant`
- `TensorVariable`
- `TensorSharedVariable`
- `SparseVariable`
- `RandomVariable`

(found in the docstring of `Variable`, there may be more in the codebase)
wd60622(2022-11-01 22:22:19):> Thank you for contributing. Did you check that the following `Variable`s subclasses don't override the `clone` method?

Not yet. Will take a look into it


rlouf(2022-11-01 22:25:43):By the way I see that the checks fail. If you didn't mean for this to be merged yet you can turn it into a draft PR.
wd60622(2022-11-01 22:29:54):> By the way I see that the checks fail. If you didn't mean for this to be merged yet you can turn it into a draft PR.

Totally. I'm not seeing that as an option on my side. Maybe since this is my first PR here? Feel free to switch if you see it on your end
rlouf(2022-11-01 22:34:21):Sure. It's kind of hidden in the right menu:

![2022-11-01-233343_272x177_scrot](https://user-images.githubusercontent.com/3885044/199354589-f56627c7-c9ef-42a5-a35d-951c0498af96.png)

wd60622(2022-11-02 23:50:29):I grepped all the `clone` methods and changed all the depend upon the `Variable` class. Was having some mypy issues on my end but pushed up changes so far
brandonwillard(2022-11-03 05:25:44):I think we can get away with only using `**kwargs`.  The in-line suggestions describe the basic idea, but I think it could be simplified a bit more.
wd60622(2022-11-03 14:28:37):> I think we can get away with only using `**kwargs`. The in-line suggestions describe the basic idea, but I think it could be simplified a bit more.

Gotcha. I can switch to kwargs then. Is this looking to be expanded upon, then? Is there are reason for not wanting to be explicit with this functionality?
rlouf(2022-11-13 08:58:51):Would you mind removing the merge commit and rebasing your branch on `main` instead? And make sure that the tests pass with your current changes as well?
wd60622(2022-11-13 19:31:16):> Would you mind removing the merge commit and rebasing your branch on `main` instead? And make sure that the tests pass with your current changes as well?

That merge was done from GitHub via the sync with main and usually doesn't cause any problems. Want me to override that and perform differently than GitHub interface?

Tests are passing on my end.  It appears to me they just aren't running yet because of the `mypy` complaint which I don't fully understand atm
wd60622(2022-11-18 15:56:14):Thank you both for the suggestions and commentary. Was a bit silent but I explored all of them.

I ended up switching to the kwargs approach. That solved the mypy issues like @brandonwillard suggested. 
This seemed to be the only solution that bypassed those mypy. For instance,
- explicit with `Variable` in clone causes errors down the line in child classes 
- Even isolating just a switch in the `Variable` clone method toward the `name` argument raised that same mypy issue. i.e. there seems to be difficulty being explicit with a name argument. 
rlouf(2022-11-18 16:34:53):Thank you. Before we can merge this could you please squash your commits with a commit name that follows [these guidelines](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)?
wd60622(2022-11-18 19:05:26):> Thank you. Before we can merge this could you please squash your commits with a commit name that follows [these guidelines](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)?

Gave it my best attempt. Not sure how to do the squash without pulling in all the commits that were not by me
rlouf(2022-11-18 20:32:17):> Gave it my best attempt. Not sure how to do the squash without pulling in all the commits that were not by me

Ah yes, it wouldn't be a problem with rebasing. I will take a look and try to fix this when I can.
wd60622(2022-11-18 20:58:51):> Ah yes, it wouldn't be a problem with rebasing. I will take a look and try to fix this when I can.

Thanks. Appreciate that.
Did `git rebase -i HEAD~6` with some fixups and a reword on my end and it looks clean locally.
Not sure if there was a better way for the GitHub display

codecov[bot](2022-11-18 23:53:53):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1282?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1282](https://codecov.io/gh/aesara-devs/aesara/pull/1282?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (1af253f) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ac5fb058c946bfb86ff50a6557055844823b0164?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (ac5fb05) will **decrease** coverage by `0.00%`.
> The diff coverage is `77.77%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1282/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1282?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1282      +/-   ##
==========================================
- Coverage   74.10%   74.10%   -0.01%     
==========================================
  Files         174      174              
  Lines       48673    48681       +8     
  Branches    10379    10379              
==========================================
+ Hits        36070    36074       +4     
- Misses      10309    10313       +4     
  Partials     2294     2294              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1282?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1282/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `88.53% <75.00%> (-0.47%)` | :arrow_down: |
| [aesara/compile/sharedvalue.py](https://codecov.io/gh/aesara-devs/aesara/pull/1282/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvc2hhcmVkdmFsdWUucHk=) | `80.48% <100.00%> (+0.24%)` | :arrow_up: |

</details>
rlouf(2022-11-19 07:05:05):Looks good to me now. Thank you for contributing!
brandonwillard(2022-11-03 05:12:15):```suggestion
        name = kwargs.get("name", self.name)
```
brandonwillard(2022-11-03 05:12:47):```suggestion
    def clone(self, **kwargs):
```
brandonwillard(2022-11-03 05:13:51):```suggestion
    def clone(self, **kwargs):
```
brandonwillard(2022-11-03 05:14:03):```suggestion
    def clone(self, **kwargs):
```
brandonwillard(2022-11-03 05:20:21):```suggestion
        r3 = r1.clone(name=r3_name)
```
wd60622(2022-11-03 14:31:59):This is causing the [mypy flag](https://github.com/aesara-devs/aesara/actions/runs/3381594594/jobs/5616641298) in the tests. I thought the defined `OptionalApplyType` for owner arg would allow this. 
And it was throwing it either way... Has mypy changed at all? 
brandonwillard(2022-11-04 20:48:17):> Has mypy changed at all?

No, I think it's the other signature changes that make this an invalidly typed call for certain subclasses of `Variable`.

rlouf(2022-11-06 06:01:13):Why not being explicit here, or adding this as a keyword-only argument? Is it type-related?
wd60622(2022-11-13 19:35:54):What signature change are you talking about? 
The `__class__` in this case is `Variable` which didn't have a signature change ([L437](https://github.com/wd60622/aesara/blob/dda6490e5102c910656ebd4ebfc342077da54bfa/aesara/graph/basic.py#L434-L441)). Thought that would be what is used here. 
brandonwillard(2022-11-13 22:59:05):A subclass of `Variable` might add new arguments to its `__init__` and/or `copy` methods, so I believe we need this kind of flexibility for [LSP](https://en.wikipedia.org/wiki/Liskov_substitution_principle)-related reasons.  This should explain all the typing problems seen here.
brandonwillard(2022-11-13 23:39:49):> What signature change are you talking about?
> The `__class__` in this case is `Variable` which didn't have a signature change ([L437](https://github.com/wd60622/aesara/blob/dda6490e5102c910656ebd4ebfc342077da54bfa/aesara/graph/basic.py#L434-L441)). Thought that would be what is used here.

The addition of signature changes in _subclasses_ of this class&mdash;at the time when that comments was made, of course.  For instance, `AtomicVariable.clone` currently seems problematic.

I think the current issue is likely due to the type information associated with `self.__class__`.  I'm guessing that this is inferred by Mypy to be a type that can't take a `None` value for its `owner` value in general.

There were always Mypy problems with the typing of the `owner` property and arguments in `Variable`, and that led to the use of `OptionalApplyType` as a workaround, but I'm now assuming that this original issue is appearing again in a different form.

You can try using `Variable` instead of `self.__class__` and see if that removes the potentially conflicting `Generic` information from `OptionalApplyType`.  That's not a real solution to this problem, but it will help determine what's going on.  (N.B. Using `reveal_type(self.__class__)` might tell us what's going on, as well.) 





brandonwillard(2022-11-03 04:40:41):```suggestion
Our technical scope and project governance may open up later, of course. For now, though, we would characterize
```
rlouf(2022-12-02 15:06:25):I have now registered the JAX implementation for every Aesara `RandomVariable` that has a JAX implementation in the JAX library individually, and added some minimal test for each.

I will now try to generalize the implementation, and improve the tests / make them more exhaustive.

The current implementation is half way there, but not completely satisfactory: a user that has defined a custom `RandomVariable` would need to register `jax_funcify_RandomVariable` as well as `make_sample_fn`. Instead I should register `jax_funcify_RandomVariable` for all `RandomVariable` ops, and fail in the generic `make_sample_fn` if the name of the distribution cannot be found in the `jax.random` namespace. One would then only need to import `make_sample_fn` and register their implementation in JAX.
rlouf(2022-12-05 10:07:31):The transpilation process of `RandomVariable`s now goes through two functions:

- The first, registered for the generic `RandomVariable` handles the `size` parameters; if we know at compile-time it is a constant use this constant, if it is the output of a `Shape` operator then use the output of a previous node. These are the two situations in which JAX will not complain, so we fail gracefully otherwise.
- The second, `jax_sample_fn` registers the implementation of the sampling function for each `RandomVariable` subtype  individually. This way users can register an implementation for the `RandomVariable`s they defined without having to worry about JAX's quirks.

We should use this pattern throughout the JAX backend to handle the `shape` arguments, which is one big pain point with this backend. Along with powerful shape inference on our side it should be enough to handle most problematic cases gracefully. 

There is one case I still need to handle. The following fails to compile while the corresponding JAX code is perfectly valid:

```python
import aesara
import aesara.tensor as at

x_at = at.dmatrix()
f = at.random.normal(0, 1, size=(x_at.shape[0],))
g_fn = aesara.function([x_at], f, mode=jax_mode)

aesara.dprint(f.inputs[1])
# MakeVector{dtype='int64'} [id A]
# |Subtensor{int64} [id B]
#   |Shape [id C]
#   | |<TensorType(float64, (?, ?))> [id D]
#   |ScalarConstant{0} [id E]
```

This is due to the way `MakeVector` is implemented: calling `jnp.array(x)` on this creates a `TracedArray`. This example works if I disable the check in `funcify_RandomVariable` and change the `MakeVector` implementation to:

```python
@jax_funcify.register(MakeVector)
def jax_funcify_MakeVector(op, **kwargs):
    def makevector(*x):
        return tuple(x)
```

I am not sure what `MakeVector` is used for besides this case, but we may need to use a different `Op` here on the JAX side to differentiate between cases. I will also need to update my primitive `isinstance(node.inputs[1], Shape)` test to take this case into account, this type of checks will become routine in the backend.

Finally, this is a subtlety, but while the following is perfectly valid Aesara code:

```python
```python
import aesara
import aesara.tensor as at

x_at = at.dmatrix()
f = at.random.normal(0, 1, size=x_at.shape[0])
g_fn = aesara.function([x_at], f, mode=jax_mode)
```

its equivalent will fail to compile in JAX with `TypeError: jax.core.NamedShape() argument after * must be an iterable, not int`

### Static arguments

There's a third case I did not consider for now, since it involves deeper changes in the backend, but that we should eventually support:

```python
import aesara
import aesara.tensor as at

size = at.iscalar()
x_rv = at.random.normal(0, 1, size=size)

fn = aesara.function([size], x_rv)
```

In this case, JAX will happily JIT-compile the function if `size` is in the `static_argnums` parameters. We would need a simple system that tracks the parameters that should be passed as static to `jax.jit`, and use this information at the end of the transpilation process when the function is jit-compiled. Alternatively we can defer jit-compilation to the user and let them set this parameter as static should they want to. The choice here matters, because JAX will re-compile the function each time a new value is passed for parameters marked as static.
codecov[bot](2022-12-05 11:05:19):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1284?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1284](https://codecov.io/gh/aesara-devs/aesara/pull/1284?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (e4090a9) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ae182f02f879741e409f927b27e874d8a1a4ef21?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (ae182f0) will **increase** coverage by `0.07%`.
> The diff coverage is `99.38%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1284/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1284?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1284      +/-   ##
==========================================
+ Coverage   74.27%   74.35%   +0.07%     
==========================================
  Files         175      177       +2     
  Lines       48887    49036     +149     
  Branches    10375    10379       +4     
==========================================
+ Hits        36312    36461     +149     
- Misses      10282    10283       +1     
+ Partials     2293     2292       -1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1284?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/mode.py](https://codecov.io/gh/aesara-devs/aesara/pull/1284/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvbW9kZS5weQ==) | `84.47% <ø> (ø)` | |
| [aesara/tensor/random/rewriting/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1284/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vcmV3cml0aW5nL2Jhc2ljLnB5) | `94.16% <ø> (ø)` | |
| [aesara/link/jax/dispatch/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/1284/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NoYXBlLnB5) | `88.46% <93.33%> (+1.97%)` | :arrow_up: |
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1284/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (+2.63%)` | :arrow_up: |
| [aesara/tensor/random/rewriting/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1284/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vcmV3cml0aW5nL19faW5pdF9fLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/random/rewriting/jax.py](https://codecov.io/gh/aesara-devs/aesara/pull/1284/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vcmV3cml0aW5nL2pheC5weQ==) | `100.00% <100.00%> (ø)` | |

</details>
rlouf(2022-12-05 17:09:06):Currently the following fail to compile to JAX but shouldn't. I reproduce the graph of the `size` parameter:

- [ ] The size argument is an `InplaceDimShuffle` because Aesara converts scalar arguments to vectors

```python
rng = shared(np.random.RandomState(123))
x_at = at.dmatrix()
out = at.random.normal(0, 1, size=x_at.shape[1], rng=rng)

aesara.dprint(out.owner.inputs[1])
# InplaceDimShuffle{x} [id A]
# |Subtensor{int64} [id B]
#   |Shape [id C]
#   | |<TensorType(float64, (?, ?))> [id D]
#   |ScalarConstant{1} [id E]
```

- [ ] The `size` argument is a `MakeVector` because the user inputs the shape as a tuple

```python
x_at = at.dmatrix()
out = at.random.normal(0, 1, size=(x_at.shape[0],), rng=rng)
aesara.dprint(out.owner.inputs[1])
# MakeVector{dtype='int64'} [id A]
# |Subtensor{int64} [id B]
#   |Shape [id C]
#   | |<TensorType(float64, (?, ?))> [id D]
#   |ScalarConstant{0} [id E]
```

These two cases can be handled with a rewrite that replaces `MakeVector` and `DimShuffle((), ('x',))` when found as the `size` argument of a `RandomVariable` by a new `ShapeTuple` `Op` that returns its inputs in a tuple.
rlouf(2022-12-06 17:34:50):I added a rewrite that replaces `MakeVector` and `DimShuffle` (when used to convert a scalar into a 1d vector) by a dummy `JAXShapeTuple` `Op` when found as a `size` input to a `RandomVariable`. This is my first time writing rewrites, and I need help to both make this work, and better organize the code.

### How to make this work?

The most pressing problem I have is that the linker does not seem to transpile the new `JAXShapeTuple` (even though I registered it). On the following example:

```python
import aesara.tensor as at

rng = shared(np.random.RandomState(123))
x_at = at.dmatrix()
out = at.random.normal(0, 1, size=(x_at.shape[0],), rng=rng)
jax_fn = function([x_at], out, mode=jax_mode)
assert jax_fn(np.ones((2, 3))).shape == (2,)
```

The `FunctionGraph` instance passed to `jax_funcify` in `aesara.link.jax.linker` does contain the `JAXShapeTuple` `Op` instead of the original `MakeVector` `Op`:

```python
# normal_rv{0, (0, 0), floatX, False}.1 [id A] 3
#  |RandomStateSharedVariable(<RandomState(MT19937) at 0x7FDD0F5C7140>) [id B]
#  |JAXShapeTuple [id C] 2
#  | |Subtensor{int64} [id D] 1
#  |   |Shape [id E] 0
#  |   | |<TensorType(float64, (?, ?))> [id F]
#  |   |ScalarConstant{0} [id G]
#  |TensorConstant{11} [id H]
#  |TensorConstant{0} [id I]
#  |TensorConstant{1} [id J]

```

But it seems to be skipped during transpilation: 

```python
  def jax_funcified_fgraph(tensor_variable, random_state_shared_variable):
      # Shape(<TensorType(float64, (?, ?))>)
      tensor_variable_1 = shape(tensor_variable)
      # Subtensor{int64}(Shape.0, ScalarConstant{0})
      tensor_variable_2 = subtensor(tensor_variable_1, scalar_constant)
      # MakeVector{dtype='int64'}(Subtensor{int64}.0)
      tensor_variable_3 = makevector(tensor_variable_2)
      # normal_rv{0, (0, 0), floatX, False}(RandomStateSharedVariable(<RandomState(MT19937) at 0x7F3BE3FC7140>), JAXShapeTuple.0, TensorConstant{11}, TensorConstant{0}, TensorConstant{1})
      variable, tensor_variable_5 = sample_fn(random_state_shared_variable, tensor_variable_4, tensor_constant, tensor_constant_1, tensor_constant_2)
```

### How to better organize the code?

The rewrite currently lives in `aesara.link.jax.linker` as a standalone rewrite, but this is obviously not ideal. What is the recommended way to store and apply the rewrites here?
brandonwillard(2022-12-06 18:05:58):Try using `aesara.graph.rewriting.basic.in2out` instead of `WalkingGraphRewriter` directly.  

Also, we'll need to add this rewrite to the JAX `Mode` (e.g. register it with `aesara.compile.optdb` under the `"jax"` tag), so that it can be run within the complete rewriting framework (e.g. in the presence of `Feature`s that track changes, etc.)
rlouf(2022-12-07 09:58:39):I added the rewrite in a standalone `aesara.link.jax.dispatch.rewriting` module, registered it in `optdb` under the "jax" tag there, included the "jax" tag in the database query, but I don't know how to make the registration in `optdb` effective (`mode.__position__` currently does not contain the rewrite).
brandonwillard(2022-12-08 21:34:14):We should add a short description of why this is needed, if only so that we/others don't forget.
brandonwillard(2022-12-08 21:35:54):Same here; i.e. we should mention that we expect a specific rewrite will make these cases work.
ricardoV94(2022-11-06 09:18:42):Should we only fuse when the unreduced output has a single client, and therefore is definitely never needed?
codecov[bot](2022-11-06 15:55:29):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1285?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1285](https://codecov.io/gh/aesara-devs/aesara/pull/1285?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (91f3438) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/3ad936ffaf346bd6d1c0202f56dc292c3f7621c8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (3ad936f) will **increase** coverage by `0.03%`.
> The diff coverage is `94.53%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1285/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1285?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1285      +/-   ##
==========================================
+ Coverage   74.12%   74.15%   +0.03%     
==========================================
  Files         174      174              
  Lines       48652    48706      +54     
  Branches    10366    10372       +6     
==========================================
+ Hits        36064    36119      +55     
- Misses      10299    10301       +2     
+ Partials     2289     2286       -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1285?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/function/pfunc.py](https://codecov.io/gh/aesara-devs/aesara/pull/1285/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `84.18% <ø> (-0.24%)` | :arrow_down: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/1285/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.16% <75.00%> (+0.16%)` | :arrow_up: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1285/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.07% <90.54%> (-0.52%)` | :arrow_down: |
| [aesara/tensor/rewriting/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1285/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvZWxlbXdpc2UucHk=) | `86.40% <94.44%> (+0.65%)` | :arrow_up: |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1285/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.02% <95.16%> (+0.10%)` | :arrow_up: |
| [aesara/compile/mode.py](https://codecov.io/gh/aesara-devs/aesara/pull/1285/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvbW9kZS5weQ==) | `84.47% <100.00%> (+1.22%)` | :arrow_up: |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1285/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.40% <100.00%> (+0.37%)` | :arrow_up: |

</details>
brandonwillard(2022-11-06 18:20:58):> Should we only fuse when the unreduced output has a single client, and therefore is definitely never needed?

Yeah, that and a few other things need/needed to be done before this stops being a draft.  I just added it now, though&mdash;along with another fix.
brandonwillard(2022-11-06 18:52:49):Some current results:
```python
import numpy as np

import aesara
import aesara.tensor as at

from aesara.compile.mode import get_mode


fusion_mode = get_mode("FAST_RUN").including("local_careduce_fusion")
no_fusion_mode = get_mode("FAST_RUN").excluding("local_careduce_fusion")


x = at.matrix("x")
y = at.exp(x).sum(axis=1)

y_fn = aesara.function([x], y, mode=no_fusion_mode)

aesara.dprint(y_fn)
# Sum{axis=[1], acc_dtype=float64} [id A] 1
#  |Elemwise{exp,no_inplace} [id B] 0
#    |x [id C]

y_fusion_fn = aesara.function([x], y, mode=fusion_mode)

aesara.dprint(y_fusion_fn)
# CAReduce{Composite{(i0 + exp(i1))}}{axis=[1], acc_dtype=float64} [id A] 0
#  |x [id B]

rng = np.random.default_rng(23920)

x_small_val = rng.random((10, 10))
x_large_val = rng.random((5000, 2000))

%timeit y_fn(x_small_val)
# 6.58 µs ± 151 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)

%timeit y_fn(x_large_val)
# 198 ms ± 16.8 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

res = y_fn(x_large_val)
exp_res = np.exp(x_large_val).sum(axis=1)
assert res.shape == exp_res.shape
assert np.allclose(res, exp_res)

%timeit y_fusion_fn(x_small_val)
# 6.25 µs ± 558 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)

%timeit y_fusion_fn(x_large_val)
# 55.3 ms ± 826 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)

res = y_fusion_fn(x_large_val)
assert res.shape == exp_res.shape
assert np.allclose(res, exp_res)
```
ColtAllen(2022-11-10 19:04:17):> Looks good. Seems like we might need to go over the test values being used and/or potentially some subtleties of those gradient implementations.

Thanks for the quick response. The [docs for scipy.special.factorial](https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.factorial.html?highlight=factorial#scipy.special.factorial) suggest it only accepts integer arguments, but it works just fine with floats. Changing the testing input types for `TestFactorialBroadcast `is now throwing a tolerance error similar to that of `TestPochBroadcast` :

```
test_grad - aesara.gradient.GradientError: GradientError: numeric gradient and analytic gradient exceed tolerance:
E                       At position 1 of argument 0 with shape (2, 1),
E                           val1 = 14.836027      ,  val2 = 128.113961
E                           abs. error = 113.277934,  abs. tolerance = 0.050000
E                           rel. error = 0.792431,  rel. tolerance = 0.000100
E               Exception args: Test Elemwise{factorial_inplace,inplace}::normal: Error occurred while computing the gradient on the following inputs: [array([[2.50818975],
E                      [4.71063693]])]
```

What could be causing this `GradientError`? Perhaps `makeBroadcastTester(eps=2e-10)` should be adjusted? Does `eps` even need to be specified at all? 

As for `TestHyp2F1Broadcast`, it seems some combinations of testing input values are shooting to infinity in the summation loop before that gradient expression converges. I'll check to see if the inputs are valid/reasonable and if another loop break criterion can be added.
ColtAllen(2022-11-10 19:55:03):Turns out `TestHyp2F1Broadcast` also had unreasonable tests values. After making those changes, every `Op` now has a `GradientError`:

```
test_grad - aesara.gradient.GradientError: GradientError: numeric gradient and analytic gradient exceed tolerance:
E                       At position 0 of argument 0 with shape (2, 3),
E                           val1 = -48538346782196181189920139818200480218765603896390449205366505275561749456688053098819858451084244350695136091976910166574438712182302091308166577389179037024256.000000      ,  val2 = 3520008228282594454153617700017716374498340850794903970680924876145639825585099133611446954617413017396337770314707559185864868875633180509958375955496960000000.000000
E                           abs. error = 52058355010478775644073757518218196593263944747185353176047430151707389282273152232431305405701657368091473862291617725760303581057935271818124953344675997024256.000000,  abs. tolerance = 0.050000
E                           rel. error = 1.000000,  rel. tolerance = 0.000100
E               Exception args: Test Elemwise{hyp2f1,no_inplace}::normal: Error occurred while computing the gradient on the following inputs: [array([[764.16214925, 550.49823533, 542.19109217],
E                      [613.93532095, 341.6967123 , 284.38215306]]), array([[764.16214925, 550.49823533, 542.19109217],
E                      [613.93532095, 341.6967123 , 284.38215306]]), array([[764.16214925, 550.49823533, 542.19109217],
E                      [613.93532095, 341.6967123 , 284.38215306]]), array([[0.38208107, 0.27524912, 0.27109555],
E                      [0.30696766, 0.17084836, 0.14219108]])]
```

If I could get some more clarification on how to resolve these `GradientErrors`, I think we'll be set.
brandonwillard(2022-11-10 20:26:09):> Thanks for the quick response. The [docs for scipy.special.factorial](https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.factorial.html?highlight=factorial#scipy.special.factorial) suggest it only accepts integer arguments, but it works just fine with floats.

Yeah, some version of the gamma function should be/is likely being used in that case.
brandonwillard(2022-11-10 20:28:29):> If I could get some more clarification on how to resolve these `GradientErrors`, I think we'll be set.

The magnitudes of those printed values might be indicating under/overflow of some sort.  A numerical approximation is used for testing, and, if both values are so large, that could mean the test points are in an unstable/unsupported range of values for the given gradient representations (i.e. the exact functional forms of the gradients being used) and/or approximation routine.
ColtAllen(2022-11-11 13:43:41):I don't know if this is exactly kosher, but with `makeBroadcastTester(grad=None)`, all tests are now passing. I've noticed not all tests in `aesara/tests/tensor/test_math_scipy.py` have this `grad` parameter set, so I'm unsure when/if it's required.
ColtAllen(2022-11-11 13:51:35):> We should see whether or not the existing `Gamma` works for this instead. For instance, we could change `factorial` below to a helper function that constructs `Gamma` graphs.

Like this?

```
@staticmethod
def st_impl(n):
    return gamma(n+1)
```

Because if the same is done for `Poch`, then `Hyp2F1` could be defined entirely in terms of existing `Ops`  if that infinite summation loop still works. If none of these `Op`s require SciPy implementations, would this even still be the appropriate module to add them? Would `makeBroadcastTester(expected=scipy.special.hyp2f1)` still be valid testing criterion? 
brandonwillard(2022-11-11 17:45:29):> Like this?
> 
> ```
> @staticmethod
> def st_impl(n):
>     return gamma(n+1)
> ```
> 
> Because if the same is done for `Poch`, then `Hyp2F1` could be defined entirely in terms of existing `Ops` if that infinite summation loop still works.

Yes, let's try that first.  We may need to follow these changes with some rewrites that produce better gradients in certain cases, but that's good, because it better fits the design and intention of the library.  Also, no worries if you're not familiar with the rewriting aspects of Aesara; we'll help with or follow-up on that.


> If none of these `Op`s require SciPy implementations, would this even still be the appropriate module to add them? Would `makeBroadcastTester(expected=scipy.special.hyp2f1)` still be valid testing criterion?

Great question; the answer would be "yes"&mdash;to both questions perhaps&mdash;if those functions are part of the SciPy interface or have equivalents of some sort.  If they aren't then `aesara.tensor.math` is fine.



brandonwillard(2022-11-11 18:33:15):Sorry, I meant that we should replace `Factorial` with a helper function that creates `gamma(n + 1)` graphs using the existing `Gamma` `Op`.  In other words, we wouldn't need a new `Op` for the factorial&mdash;or anything else we can derive using existing `Op`s.
ColtAllen(2022-11-11 19:44:56):> Sorry, I meant that we should replace `Factorial` with a helper function that creates `gamma(n + 1)` graphs using the existing `Gamma` `Op`. In other words, we wouldn't need a new `Op` for the factorial—or anything else we can derive using existing `Op`s.

So replace the current `Factorial` `Op` code with this, in effect?

```
factorial = aesara.function([n],gamma(n+1))
```

Doing this for `Hyp2F1` is trickier because it requires a `scan` function for the infinite summation, but here's my first pass at it:

```
def converge(prev_result, result):
    return prev_result, aesara.scan.utils.until(prev_result==result)
            
results, updates = aesara.scan(
    fn = lambda n, a, b, c, z: if abs(z) >=1 raise NotImplementedError() else ((poch(a,n) * poch(b,n))/poch(c,n)) * ((z**n)/factorial(n)),
        outputs_info=at.constant(1.),
        non_sequences=[a,b,c,z],
        n_steps = 1024
        )
            
        final_result = results.sum()

hyp2f1 = aesara.function(inputs=[a,b,c,z], outputs=final_result , updates=updates)

```

I want to add that `converge` early termination function so that it doesn't loop 1,024 times for this 'infinite' summation, but I'm not quite sure how to include it.
brandonwillard(2022-11-11 23:52:16):> So replace the current `Factorial` `Op` code with this, in effect?
> 
> ```
> factorial = aesara.function([n],gamma(n+1))
> ```

Well, more like the following:
```python
def factorial(x: TensorLike) -> TensorVariable:
    return gamma(x + 1)
```

A user could then construct a graph with `at.factorial(...)` and use `aesara.function` to compile it.  The same goes for `Poch`.

> Doing this for `Hyp2F1` is trickier because it requires a `scan` function for the infinite summation, but here's my first pass at it:

We can continue pursuing a custom `Op` solution for `hyp2f1` in this PR&mdash;at least until we find a non-series-based approach or improve the `Scan` `while`-loop situation more (e.g. it currently allocates large-ish arrays by default for all `while` loops, the Cython implementation is too inefficient for small numbers of iterations, etc.)

ColtAllen(2022-11-12 00:29:02):> Well, more like the following:
> 
> ```python
> def factorial(x: TensorLike) -> TensorVariable:
>     return gamma(x + 1)
> ```
>

The typing variables seem to be throwing circular import errors:

```
_________________________ ERROR collecting tests/tensor/test_math_scipy.py _________________________
tests/tensor/test_math_scipy.py:12: in <module>
    from aesara import function
aesara/__init__.py:120: in <module>
    from aesara import scalar, tensor
aesara/scalar/__init__.py:2: in <module>
    from .math import *
aesara/scalar/math.py:14: in <module>
    from aesara.tensor.var import TensorVariable
aesara/tensor/__init__.py:105: in <module>
    from aesara.tensor import (  # noqa
aesara/tensor/blas.py:165: in <module>
    from aesara.tensor.math import Dot, add, mul, neg, sub
aesara/tensor/math.py:1310: in <module>
    def erf(a):
aesara/tensor/elemwise.py:1813: in scalar_elemwise
    return construct(symbol[0])
aesara/tensor/elemwise.py:1795: in construct
    scalar_op = getattr(scalar, symbolname)
E   AttributeError: partially initialized module 'aesara.scalar' has no attribute 'erf' (most likely due to a circular import)
```

Dispensing with type hinting is raising a new error in `aesara./tensor/elemwise.py`:

```
________________________________ERROR collecting tests/tensor/test_math_scipy.py ________________________________
tests/tensor/test_math_scipy.py:16: in <module>
    from aesara.tensor import inplace
aesara/tensor/inplace.py:406: in <module>
    def factorial_inplace(n):
aesara/tensor/elemwise.py:1813: in scalar_elemwise
    return construct(symbol[0])
aesara/tensor/elemwise.py:1786: in construct
    inplace_scalar_op = scalar_op.__class__(transfer_type(0))
E   TypeError: function() missing required argument 'globals' (pos 2)
```


> We can continue pursuing a custom `Op` solution for `hyp2f1` in this PR—at least until we find a non-series-based approach or improve the `Scan` `while`-loop situation more (e.g. it currently allocates large-ish arrays by default for all `while` loops, the Cython implementation is too inefficient for small numbers of iterations, etc.)

If this is the case, `Factorial` and `Poch` can be set aside for now, since they're only included as building blocks for constructing `Hyp2F1` natively. However, this is a significant dependency for one of the modules in my [BTYD](https://github.com/ColtAllen/btyd/) library, and it's in my best interest to optimize `Hyp2F1`. If you think `Factorial` and `Poch`  should still be included in this PR, I'm happy to continue working out how to do so.
brandonwillard(2022-11-12 00:39:11):> The typing variables seem to be throwing circular import errors:

I was thinking of helper/graph-constructor functions like the following:
```python
from typing import TYPE_CHECKING

import aesara
import aesara.tensor as at


if TYPE_CHECKING:
    from aesara.tensor import TensorLike, TensorVariable


def factorial(n: "TensorLike") -> "TensorVariable":
    return at.gamma(n + 1)


def poch(z: "TensorLike", m: "TensorLike") -> "TensorVariable":
    return at.gamma(z + m) / at.gamma(z)


z = at.scalar("z")
n = at.scalar("n")
res = (factorial(n), poch(z, n))

res_fn = aesara.function([z, n], res)

res_fn(2.0, 7)
# [array(5040.), array(40320.)]
```
ColtAllen(2022-11-12 01:29:23):Importing `aesara.tensor` into `aesara.scalar.math` is still raising the same `AttributeError` as before. Perhaps these `Ops` should be defined in `aesara.tensor.math` instead? The only relation to `scipy` at this point is an expected value for testing.
brandonwillard(2022-11-12 01:31:30):> Importing `aesara.tensor` into `aesara.scalar.math` is still raising the same `AttributeError` as before. Perhaps these `Ops` should be defined in `aesara.tensor.math` instead? The only relation to `scipy` at this point is an expected value for testing.

Ah, yes, `aesara.tensor.math` would work, but `aesara.tensor.special` is probably the place those need to be.
ColtAllen(2022-11-12 01:47:38):> Ah, yes, `aesara.tensor.math` would work, but `aesara.tensor.special` is probably the place those need to be.

Defining `factorial` in `aesara.tensor.special` is raising the same `TypeError: function() missing required argument 'globals' (pos 2)` exception. Removing the inplace definition from `aesara.tensor.inplace` clears up that error, but raises a new one when running `TestFactorialBroadcast::test_good`:

`AttributeError: ("'function' object has no attribute 'make_node'", 'Test Elemwise{factorial,no_inplace}::normal: Error occurred while making a node with inputs [array([[2.50818975],\n       [4.71063693]])]')`

All tests will pass if `makeBroadcastTester(good = None) `, but I'm not sure if this is the best idea.
brandonwillard(2022-11-12 01:51:27):> > Ah, yes, `aesara.tensor.math` would work, but `aesara.tensor.special` is probably the place those need to be.
> 
> Defining `factorial` in `aesara.tensor.special` is raising the same `TypeError: function() missing required argument 'globals' (pos 2)` exception. Removing the inplace definition from `aesara.tensor.inplace` clears up that error, but raises a new one when running `TestFactorialBroadcast::test_good`:
> 
> `AttributeError: ("'function' object has no attribute 'make_node'", 'Test Elemwise{factorial,no_inplace}::normal: Error occurred while making a node with inputs [array([[2.50818975],\n [4.71063693]])]')`
> 
> All tests will pass if `makeBroadcastTester(good = None) `, but I'm not sure if this is the best idea.

We can't use those test constructors in this case, since they're probably only intended to be used with direct `Op` implementations.  All we need are a few simple tests that make sure each helper function is at least defined correctly (i.e. it computes the quantities of interest).  A `pytest.mark.parametrized` test that checks a few sample points against the corresponding `scipy.special` functions should be sufficient in each case.
ColtAllen(2022-11-12 02:06:20):> All we need are a few simple tests that make sure each helper function is at least defined correctly (i.e. it computes the quantities of interest). A `pytest.mark.parametrized` test that checks a few sample points against the corresponding `scipy.special` functions should be sufficient in each case.

Ok, that sounds straightforward. The current tests are also passing if the helper functions call the scalar `Ops` rather than the tensor equivalents, in which case I suppose they can continue to be defined in `aesara.scalar.math`.

What about the inplace definition in `aesara.tensor.inplace`? Tests won't even run unless it is removed.
ColtAllen(2022-11-12 18:38:34):Helper functions and their respective tests have been written, but the `Elemwise` errors still persist:

`AttributeError: ("'function' object has no attribute 'make_node'", 'Test Elemwise{factorial,no_inplace}::normal: Error occurred while making a node with inputs [array([[2.50818975],\n [4.71063693]])]')`

These are such simple helper implementations for `at.gamma` that I've rewritten the derivatives for `Hyp2F1` in terms of `gamma` without issue. If we dispense with the helper `factorial` and `poch` functions in this PR, I think it'll be ready to submit for review.
ColtAllen(2022-11-13 02:13:40):Tests are passing! Still need to double-check everything, but this should be about ready for review.
ColtAllen(2022-11-16 17:23:58):If there are no other comments, I'm going to merge the base branch changes and submit this for review.
brandonwillard(2022-11-16 17:40:57):> If there are no other comments, I'm going to merge the base branch changes and submit this for review.

Sounds good!  N.B. You'll have to rebase onto `upstream/main` (i.e. no merge commits) for the branch to be mergeable.
codecov[bot](2022-11-23 03:33:08):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1288?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1288](https://codecov.io/gh/aesara-devs/aesara/pull/1288?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (092fb69) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/b64cb852f002e799ceca8081fb41bd4195c39221?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (b64cb85) will **increase** coverage by `0.01%`.
> The diff coverage is `84.53%`.

> :exclamation: Current head 092fb69 differs from pull request most recent head c692690. Consider uploading reports for the commit c692690 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1288/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1288?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1288      +/-   ##
==========================================
+ Coverage   74.69%   74.71%   +0.01%     
==========================================
  Files         194      194              
  Lines       49730    49826      +96     
  Branches    10527    10539      +12     
==========================================
+ Hits        37145    37226      +81     
- Misses      10262    10272      +10     
- Partials     2323     2328       +5     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1288?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1288?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `85.00% <82.55%> (-0.30%)` | :arrow_down: |
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/1288?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1288?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.42% <100.00%> (+0.03%)` | :arrow_up: |
| [aesara/tensor/special.py](https://codecov.io/gh/aesara-devs/aesara/pull/1288?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9zcGVjaWFsLnB5) | `90.90% <100.00%> (+0.26%)` | :arrow_up: |

</details>
ColtAllen(2022-11-23 04:37:58):> I just rebased, squashed, and removed the type hints. Looks like we need to clean up some other type-related things before we can add type hints to those functions.

Thanks! (Sorry for my delay in getting around to this.)

Looks like the testing coverage report is failing because the derivatives aren't covered for `Hyp2F1`. Could this be due to `TestHyp2F1Broadcast = makeBroadcastTester(grad=None)`? These derivatives are contained in the `Hyp2F1Der` Op, so perhaps a `makeBroadcastTester` should also be added for it as well?

Note that when/if `scan` is performant enough for inifinite summations, `hyp2f1` can be moved to `aesara.tensor.special` and refactored in terms of `poch` and `factorial`, then `Hyp2F1Der` can be removed.
brandonwillard(2022-11-24 18:16:48):> Could this be due to `TestHyp2F1Broadcast = makeBroadcastTester(grad=None)`? These derivatives are contained in the `Hyp2F1Der` Op, so perhaps a `makeBroadcastTester` should also be added for it as well?

Yeah, that's probably it.

> Note that when/if `scan` is performant enough for inifinite summations, `hyp2f1` can be moved to `aesara.tensor.special` and refactored in terms of `poch` and `factorial`, then `Hyp2F1Der` can be removed.

Definitely.  We have quite a few big improvements to `Scan` that we're waiting to push, so that time will come much sooner than later.
ColtAllen(2022-11-30 19:53:23):> > Note that when/if `scan` is performant enough for inifinite summations, `hyp2f1` can be moved to `aesara.tensor.special` and refactored in terms of `poch` and `factorial`, then `Hyp2F1Der` can be removed.
> 
> Definitely. We have quite a few big improvements to `Scan` that we're waiting to push, so that time will come much sooner than later.

Do you think these enhancements will be merged in the next 1-2 months? If so, I'd prefer to wait until that happens. Otherwise I'll be submitting an additional follow-up PR with the aforementioned revisions.
brandonwillard(2022-11-30 20:03:44):> Do you think these enhancements will be merged in the next 1-2 months? If so, I'd prefer to wait until that happens. Otherwise I'll be submitting an additional follow-up PR with the aforementioned revisions.

The question is really whether or not we'll have the necessary improvements available for _all backends_ (i.e. C, JAX, and Numba) in that time, and I can say that we're primarily focusing on Numba and JAX at the moment, so 1-2 months might not hold for the C backend.

Regardless, multiple/staged PRs are perfectly fine&mdash;and often preferable&mdash;on our end, so no worries there.
ColtAllen(2022-12-01 01:24:20):> Following up on this: there are some Codecov annotations saying that we're missing lines in `Hyp2F1` and `Hyp2F1Der`, so we need to either confirm that those annotations are erroneous and/or add tests that reach those lines.
> 

Tests need to be added for `Hyp2F1Der`.

The missing lines in `Hyp2F1` are all in `grad`, and are just direct calls to `Hyp2F1Der`. Do they still require testing?





brandonwillard(2022-12-01 19:22:59):> The missing lines in `Hyp2F1` are all in `grad`, and are just direct calls to `Hyp2F1Der`. Do they still require testing?

Yeah, I think that's how we can get the missing coverage for both classes.
ColtAllen(2022-12-06 19:21:01):I've started writing these additional tests, and could use some help with the gradients and their respective tests.

Here's how the tests are set up for `Hyp2F1`:

```
_good_broadcast_quaternary_hyp2f1 = dict(
    normal=(
        random_ranged(0, 1000, (2, 3)),
        random_ranged(0, 1000, (2, 3)),
        random_ranged(0, 1000, (2, 3)),
        random_ranged(0, 0.5, (2, 3)),
    ),
)

TestHyp2F1Broadcast = makeBroadcastTester(
    op=at.hyp2f1,
    expected=expected_hyp2f1,
    good=_good_broadcast_quaternary_hyp2f1,
    grad=_good_broadcast_quaternary_hyp2f1,
    eps=2e-10,
)

TestHyp2F1InplaceBroadcast = makeBroadcastTester(
    op=inplace.hyp2f1_inplace,
    expected=expected_hyp2f1,
    good=_good_broadcast_quaternary_hyp2f1,
    grad=_good_broadcast_quaternary_hyp2f1,
    eps=2e-10,
    inplace=True,
)
```

They are returning this jumbled error for `test_grad`:

```
TypeError: ('float() argument must be a string or a number, not \'ScalarVariable\'\nApply node that caused the error: 
Elemwise{hyp2f1_der}(input 0, input 1, input 2, input 3, TensorConstant{(1, 1) of 0.0})\nToposort index: 0\nInputs types: 
[TensorType(float64, (2, 3)), TensorType(float64, (2, 3)), TensorType(float64, (2, 3)), TensorType(float64, (2, 3)), TensorType(float64, (1, 1))]\n
Inputs shapes: [(2, 3), (2, 3), (2, 3), (2, 3), (1, 1)]\nInputs strides: [(24, 8), (24, 8), (24, 8), (24, 8), (8, 8)]\n
Inputs values: [\'not shown\', \'not shown\', \'not shown\', \'not shown\', array([[0.]])]\nOutputs clients: [[Elemwise{Mul}[(0, 1)](random_projection, Elemwise{hyp2f1_der}.0)]]\n\n
Backtrace when the node is created (use Aesara flag traceback__limit=N to make it longer):\n 
File "/mnt/c/Users/colta/portfolio/aesara/tests/tensor/utils.py", line 585, in test_grad\n    
utt.verify_grad(\n  
File "/mnt/c/Users/colta/portfolio/aesara/tests/unittest_tools.py", line 70, in verify_grad\n   
 orig_verify_grad(op, pt, n_tests, rng, *args, **kwargs)\n 
File "/mnt/c/Users/colta/portfolio/aesara/aesara/gradient.py", line 1854, in verify_grad\n 
symbolic_grad = grad(cost, tensor_pt, disconnected_inputs="ignore")\n  File "/mnt/c/Users/colta/portfolio/aesara/aesara/gradient.py", line 623, in grad\n 
rval: Sequence[Variable] = _populate_grad_dict(\n  File "/mnt/c/Users/colta/portfolio/aesara/aesara/gradient.py", line 1434, in _populate_grad_dict\n 
rval = [access_grad_cache(elem) for elem in wrt]\n  File "/mnt/c/Users/colta/portfolio/aesara/aesara/gradient.py", line 1434, in <listcomp>\n    rval = [access_grad_cache(elem) for elem in wrt]\n
File "/mnt/c/Users/colta/portfolio/aesara/aesara/gradient.py", line 1387, in access_grad_cache\n 
term = access_term_cache(node)[idx]\n  File "/mnt/c/Users/colta/portfolio/aesara/aesara/gradient.py", line 1213, in access_term_cache\n 
input_grads = node.op.L_op(inputs, node.outputs, new_output_grads)\n\n
HINT: Use the Aesara flag `exception_verbosity=high` for a debug print-out and storage map footprint of this Apply node.', 
'Test Elemwise{hyp2f1,no_inplace}::normal: Error occurred while computing the gradient on the following inputs: 
[array([[764.16214925, 550.49823533, 542.19109217],\n       [613.93532095, 341.6967123 , 284.38215306]]), 
array([[764.16214925, 550.49823533, 542.19109217],\n       [613.93532095, 341.6967123 , 284.38215306]]),
array([[764.16214925, 550.49823533, 542.19109217],\n       [613.93532095, 341.6967123 , 284.38215306]]), 
array([[0.38208107, 0.27524912, 0.27109555],\n       [0.30696766, 0.17084836, 0.14219108]])]')
```

Here's the testing setup for the gradients Op `Hyp2F1Der`:

```
_good_broadcast_pentanary_hyp2f1_der = dict(
    normal=(
        random_ranged(0, 1000, (2, 3)),
        random_ranged(0, 1000, (2, 3)),
        random_ranged(0, 1000, (2, 3)),
        random_ranged(0, 0.5, (2, 3)),
        integers_ranged(-1, 3, (2, 3)),
    ),
)

TestHyp2F1DerBroadcast = makeBroadcastTester(
    op=at.hyp2f1_der,
    expected=expected_hyp2f1,
    good=_good_broadcast_pentanary_hyp2f1_der,
    eps=2e-10,
)
```

The last parameter for this Op is a flag indicating which variable the derivative is taken wrt, but the `makeBroadcastTester` utility doesn't seem to like it:
`numpy.core._exceptions._UFuncOutputCastingError: Cannot cast ufunc 'hyp2f1' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'`
brandonwillard(2023-01-01 23:11:14):@ColtAllen, right after your last update on this, it looks like you were asked by the PyMC [Labs] group to move this work to their fork of Aesara where it was later completed.

I don't know if you're aware, but they are downstreaming Aesara, so working on it here means that it will eventually show up there. Also, it should be possible to create a PR for both repos based on the same underlying branch, in which case there would be no delay or disparity.

I apologize if our review efforts weren't to your liking, especially since you seem to have felt the need to take the results elsewhere and leave things in this state. If you had external pressures and—for example—needed things to go faster, we would've preferred that you inform us so that we could have accommodated.

Regardless, we know that the situation created by PyMC [Labs] and their fork can be confusing and divisive, and—because of this—we're more than willing to help however we can.
ColtAllen(2023-01-02 13:57:24):Hey @brandonwillard,

I apologize for my lack of communication in this matter. I spent most of December traveling and have been playing catch-up since I got back last night.

I created this PR because it's a key backend requirement for the [btyd](https://github.com/ColtAllen/btyd) library I've been working on, for which I've also been the sole developer. The PyMC [Labs] team are working on a very similar library and reached out to me about merging efforts. I was thrilled to join them because communities are paramount to the success and survival of open-source projects (plus I prefer working with others over going solo).

It was determined in the downstream PR the gradients for the `Hyp2F1` Op are best written in C or Stan for performance and numerical stability, and both languages fall outside my present skillset. I'm afraid there isn't much else I can contribute to this PR beyond copy/pasting what's been done downstream by others.

I attempted a PR beyond my abilities and ultimately abandoned one project in favor of another, so if anyone is at fault here, it's me. Your comments were very helpful while I was working on this - in fact, what I enjoyed most about this PR was checking my email and getting a notification you responded.
ColtAllen(2023-01-16 02:43:26):Thought I'd wrap up this PR as a courtesy. Gradients and respective tests have been added.
brandonwillard(2022-11-10 20:34:58):We should see whether or not the existing `Gamma` works for this instead.  For instance, we could change `factorial` below to a helper function that constructs `Gamma` graphs.
brandonwillard(2022-11-12 21:52:14):These need to be in `aesara.tensor.[special|math]` and `aesara.tensor.math.gamma` needs to be used, because `aesara.tensor.math.gamma` is an `Elemwise` `Op`.  That `Elemwise` version of `gamma` is created from the scalar `aesara.scalar.math.Gamma` `Op` via the `scalar_elemwise` decorator in `aesara.tensor.math`, which creates the `Elemwise` like `gamma = Elemwise(Gamma, ...)`.

In general, `Elemwise` `Op`s are the most common way that `ScalarOp`s are used in Aesara, since they add broadcasting to scalar operations.

brandonwillard(2022-11-12 21:55:28):The `scalar_elemwise` decorator will look for a `ScalarOp` instance with the name `poch`/`factorial`, and this is where the errors likely start.  Instead, if we remove these and define `poch` and `factorial` using the `Elemwise` version of `gamma` (i.e. the one created by `scalar_elemwise` in `aesara.tensor.math`) then everything should work.
codecov[bot](2022-11-10 21:40:49):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1291?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1291](https://codecov.io/gh/aesara-devs/aesara/pull/1291?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (d56381e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/1390cc395f5f27c3a0359000b20c4adb7435dca2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (1390cc3) will **increase** coverage by `0.01%`.
> The diff coverage is `97.29%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1291/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1291?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1291      +/-   ##
==========================================
+ Coverage   74.10%   74.12%   +0.01%     
==========================================
  Files         174      174              
  Lines       48624    48654      +30     
  Branches    10351    10353       +2     
==========================================
+ Hits        36035    36064      +29     
+ Misses      10301    10300       -1     
- Partials     2288     2290       +2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1291?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/link/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvdXRpbHMucHk=) | `60.18% <90.90%> (-1.67%)` | :arrow_down: |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.68% <100.00%> (+0.21%)` | :arrow_up: |
| [aesara/link/numba/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2NhbGFyLnB5) | `87.41% <100.00%> (+0.08%)` | :arrow_up: |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `99.03% <100.00%> (+0.02%)` | :arrow_up: |
| [aesara/link/jax/dispatch/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL2V4dHJhX29wcy5weQ==) | `95.52% <0.00%> (+8.95%)` | :arrow_up: |

</details>
codecov[bot](2022-11-12 03:34:35):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1296?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1296](https://codecov.io/gh/aesara-devs/aesara/pull/1296?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (ca56923) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/31b77a2ef1c96524884f82a063300e6324c9d5c5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (31b77a2) will **not change** coverage.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1296/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1296?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@           Coverage Diff           @@
##             main    #1296   +/-   ##
=======================================
  Coverage   74.12%   74.12%           
=======================================
  Files         174      174           
  Lines       48654    48654           
  Branches    10353    10353           
=======================================
  Hits        36064    36064           
  Misses      10300    10300           
  Partials     2290     2290           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1296?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1296/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `89.00% <100.00%> (ø)` | |

</details>
codecov[bot](2022-11-15 00:40:47):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1297?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#1297](https://codecov.io/gh/aesara-devs/aesara/pull/1297?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (4a8ea3d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/eace7f689b061121656f295d4b14393c08c004be?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (eace7f6) will **decrease** coverage by `0.00%`.
> The diff coverage is `85.19%`.

> :exclamation: Current head 4a8ea3d differs from pull request most recent head 75274ef. Consider uploading reports for the commit 75274ef to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1297/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/aesara-devs/aesara/pull/1297?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main    #1297      +/-   ##
==========================================
- Coverage   74.12%   74.11%   -0.01%     
==========================================
  Files         174      174              
  Lines       48654    48673      +19     
  Branches    10353    10379      +26     
==========================================
+ Hits        36064    36076      +12     
- Misses      10300    10305       +5     
- Partials     2290     2292       +2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1297?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `60.45% <0.00%> (ø)` | |
| [aesara/link/c/params\_type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL2xpbmsvYy9wYXJhbXNfdHlwZS5weQ==) | `80.41% <ø> (ø)` | |
| [aesara/tensor/fourier.py](https://codecov.io/gh/aesara-devs/aesara/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9mb3VyaWVyLnB5) | `60.81% <0.00%> (ø)` | |
| [aesara/tensor/nnet/corr.py](https://codecov.io/gh/aesara-devs/aesara/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvcnIucHk=) | `16.81% <0.00%> (ø)` | |
| [aesara/tensor/nnet/corr3d.py](https://codecov.io/gh/aesara-devs/aesara/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvcnIzZC5weQ==) | `17.26% <0.00%> (ø)` | |
| [aesara/tensor/rewriting/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvYmFzaWMucHk=) | `92.12% <ø> (ø)` | |
| [aesara/tensor/signal/pool.py](https://codecov.io/gh/aesara-devs/aesara/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9zaWduYWwvcG9vbC5weQ==) | `28.30% <50.00%> (ø)` | |
| [aesara/sparse/sandbox/sp.py](https://codecov.io/gh/aesara-devs/aesara/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3NwYXJzZS9zYW5kYm94L3NwLnB5) | `73.48% <66.66%> (ø)` | |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.59% <75.00%> (-0.15%)` | :arrow_down: |
| [aesara/tensor/nnet/abstract\_conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Fic3RyYWN0X2NvbnYucHk=) | `18.80% <81.81%> (+0.18%)` | :arrow_up: |
| ... and [27 more](https://codecov.io/gh/aesara-devs/aesara/pull/1297/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

</details>
codecov[bot](2022-11-20 21:40:21):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1299?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1299](https://codecov.io/gh/aesara-devs/aesara/pull/1299?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (63943c0) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e8c042b3a472cc197e60b3c4231945a1f0aba0fb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (e8c042b) will **not change** coverage.
> The diff coverage is `99.13%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1299/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1299?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1299   +/-   ##
=======================================
  Coverage   74.22%   74.22%           
=======================================
  Files         174      174           
  Lines       48754    48754           
  Branches    10367    10367           
=======================================
  Hits        36190    36190           
  Misses      10275    10275           
  Partials     2289     2289           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1299?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvX19pbml0X18ucHk=) | `100.00% <ø> (ø)` | |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.50% <97.14%> (ø)` | |
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.12% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZXh0cmFfb3BzLnB5) | `98.00% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/nlinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvbmxpbmFsZy5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvcmFuZG9tLnB5) | `98.28% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2NhbGFyLnB5) | `87.41% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/scan.py](https://codecov.io/gh/aesara-devs/aesara/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc2Nhbi5weQ==) | `95.31% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvdGVuc29yX2Jhc2ljLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/link/numba/linker.py](https://codecov.io/gh/aesara-devs/aesara/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvbGlua2VyLnB5) | `100.00% <100.00%> (ø)` | |

</details>
codecov[bot](2022-11-16 00:04:47):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1300?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1300](https://codecov.io/gh/aesara-devs/aesara/pull/1300?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (e212ce8) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/1390cc395f5f27c3a0359000b20c4adb7435dca2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (1390cc3) will **increase** coverage by `0.00%`.
> The diff coverage is `86.44%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1300/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1300?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1300   +/-   ##
=======================================
  Coverage   74.10%   74.11%           
=======================================
  Files         174      174           
  Lines       48624    48673   +49     
  Branches    10351    10379   +28     
=======================================
+ Hits        36035    36076   +41     
- Misses      10301    10305    +4     
- Partials     2288     2292    +4     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1300?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/debugmode.py](https://codecov.io/gh/aesara-devs/aesara/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZGVidWdtb2RlLnB5) | `60.45% <0.00%> (ø)` | |
| [aesara/link/c/params\_type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvYy9wYXJhbXNfdHlwZS5weQ==) | `80.41% <ø> (ø)` | |
| [aesara/tensor/fourier.py](https://codecov.io/gh/aesara-devs/aesara/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9mb3VyaWVyLnB5) | `60.81% <0.00%> (ø)` | |
| [aesara/tensor/nnet/corr.py](https://codecov.io/gh/aesara-devs/aesara/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvcnIucHk=) | `16.81% <0.00%> (ø)` | |
| [aesara/tensor/nnet/corr3d.py](https://codecov.io/gh/aesara-devs/aesara/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvcnIzZC5weQ==) | `17.26% <0.00%> (ø)` | |
| [aesara/tensor/rewriting/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvYmFzaWMucHk=) | `92.12% <ø> (ø)` | |
| [aesara/tensor/signal/pool.py](https://codecov.io/gh/aesara-devs/aesara/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9zaWduYWwvcG9vbC5weQ==) | `28.30% <50.00%> (ø)` | |
| [aesara/sparse/sandbox/sp.py](https://codecov.io/gh/aesara-devs/aesara/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NwYXJzZS9zYW5kYm94L3NwLnB5) | `73.48% <66.66%> (ø)` | |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.59% <75.00%> (-0.15%)` | :arrow_down: |
| [aesara/tensor/nnet/abstract\_conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Fic3RyYWN0X2NvbnYucHk=) | `18.80% <81.81%> (+0.18%)` | :arrow_up: |
| ... and [34 more](https://codecov.io/gh/aesara-devs/aesara/pull/1300/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
brandonwillard(2022-11-20 19:46:49):We have to squash these before/when we merge; otherwise, this looks good, thanks!
codecov[bot](2022-11-20 22:00:03):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1302?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1302](https://codecov.io/gh/aesara-devs/aesara/pull/1302?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (bdb521b) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/14c394d0c62d7435395acea1e7fed55105c16984?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (14c394d) will **increase** coverage by `0.05%`.
> The diff coverage is `n/a`.

> :exclamation: Current head bdb521b differs from pull request most recent head aed5f93. Consider uploading reports for the commit aed5f93 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1302/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1302?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1302      +/-   ##
==========================================
+ Coverage   74.10%   74.15%   +0.05%     
==========================================
  Files         174      174              
  Lines       48673    48629      -44     
  Branches    10373    10364       -9     
==========================================
- Hits        36067    36061       -6     
+ Misses      10315    10277      -38     
  Partials     2291     2291              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1302?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/slinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1302/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9zbGluYWxnLnB5) | `95.40% <ø> (+11.00%)` | :arrow_up: |

</details>
rlouf(2022-11-24 10:21:11):I just rebased your changes on `main`, will merge if the tests pass. Thank you for contributing!
codecov[bot](2022-11-20 07:12:25):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1305?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1305](https://codecov.io/gh/aesara-devs/aesara/pull/1305?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (65c6faf) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5aa1780188fff164ced4b46d2dee606fd72c8c45?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (5aa1780) will **increase** coverage by `0.02%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1305/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1305?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1305      +/-   ##
==========================================
+ Coverage   74.10%   74.12%   +0.02%     
==========================================
  Files         174      174              
  Lines       48681    48660      -21     
  Branches    10379    10372       -7     
==========================================
- Hits        36074    36071       -3     
+ Misses      10313    10297      -16     
+ Partials     2294     2292       -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1305?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/function/pfunc.py](https://codecov.io/gh/aesara-devs/aesara/pull/1305/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `84.42% <100.00%> (+2.01%)` | :arrow_up: |
| [aesara/compile/sharedvalue.py](https://codecov.io/gh/aesara-devs/aesara/pull/1305/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvc2hhcmVkdmFsdWUucHk=) | `93.75% <100.00%> (+13.26%)` | :arrow_up: |
| [aesara/scan/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1305/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYW4vYmFzaWMucHk=) | `84.59% <100.00%> (ø)` | |
| [aesara/sparse/sharedvar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1305/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NwYXJzZS9zaGFyZWR2YXIucHk=) | `94.11% <100.00%> (ø)` | |
| [aesara/tensor/random/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/1305/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdmFyLnB5) | `95.45% <100.00%> (-4.55%)` | :arrow_down: |
| [aesara/tensor/sharedvar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1305/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9zaGFyZWR2YXIucHk=) | `82.60% <100.00%> (+5.05%)` | :arrow_up: |

</details>
codecov[bot](2022-11-20 04:12:52):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1306?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1306](https://codecov.io/gh/aesara-devs/aesara/pull/1306?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (9965035) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5aa1780188fff164ced4b46d2dee606fd72c8c45?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (5aa1780) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1306/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1306?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1306      +/-   ##
==========================================
- Coverage   74.10%   74.10%   -0.01%     
==========================================
  Files         174      174              
  Lines       48681    48673       -8     
  Branches    10379    10373       -6     
==========================================
- Hits        36074    36067       -7     
- Misses      10313    10315       +2     
+ Partials     2294     2291       -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1306?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/1306/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `77.05% <100.00%> (+0.34%)` | :arrow_up: |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1306/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `85.13% <100.00%> (+0.06%)` | :arrow_up: |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1306/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `87.66% <0.00%> (-0.88%)` | :arrow_down: |
| [aesara/graph/fg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1306/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `88.53% <0.00%> (+1.14%)` | :arrow_up: |

</details>
brandonwillard(2022-11-22 04:09:02):Thanks, @j0ker70!
codecov[bot](2022-11-23 19:31:41):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1312?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1312](https://codecov.io/gh/aesara-devs/aesara/pull/1312?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (2bd953b) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/14c394d0c62d7435395acea1e7fed55105c16984?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (14c394d) will **increase** coverage by `0.05%`.
> The diff coverage is `93.33%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1312/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1312?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1312      +/-   ##
==========================================
+ Coverage   74.10%   74.15%   +0.05%     
==========================================
  Files         174      174              
  Lines       48673    48706      +33     
  Branches    10373    10372       -1     
==========================================
+ Hits        36067    36119      +52     
+ Misses      10315    10301      -14     
+ Partials     2291     2286       -5     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1312?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/misc/check\_blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL21pc2MvY2hlY2tfYmxhcy5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/misc/elemwise\_time\_test.py](https://codecov.io/gh/aesara-devs/aesara/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL21pc2MvZWxlbXdpc2VfdGltZV90ZXN0LnB5) | `0.00% <0.00%> (ø)` | |
| [aesara/misc/latence\_gpu\_transfert.py](https://codecov.io/gh/aesara-devs/aesara/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL21pc2MvbGF0ZW5jZV9ncHVfdHJhbnNmZXJ0LnB5) | `0.00% <0.00%> (ø)` | |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.16% <75.00%> (+0.16%)` | :arrow_up: |
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `52.04% <77.77%> (ø)` | |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.07% <90.54%> (-0.52%)` | :arrow_down: |
| [aesara/graph/rewriting/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL3Jld3JpdGluZy9iYXNpYy5weQ==) | `65.03% <92.30%> (ø)` | |
| [aesara/tensor/rewriting/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvZWxlbXdpc2UucHk=) | `86.40% <94.73%> (+0.65%)` | :arrow_up: |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.02% <95.16%> (+0.10%)` | :arrow_up: |
| [aesara/compile/function/pfunc.py](https://codecov.io/gh/aesara-devs/aesara/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vcGZ1bmMucHk=) | `84.18% <100.00%> (+1.77%)` | :arrow_up: |
| ... and [17 more](https://codecov.io/gh/aesara-devs/aesara/pull/1312/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
rlouf(2022-11-23 19:41:22):Thank you for contributing! Should be good after squashing your commits.
brandonwillard(2022-11-25 03:34:23):Thanks, @redbopo!
rlouf(2022-11-24 21:15:17):Thank you for opening a PR. It looks like you need to format your code using `pre-commit.`
codecov[bot](2022-11-25 01:43:04):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1313?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1313](https://codecov.io/gh/aesara-devs/aesara/pull/1313?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (dff0aca) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/a7ef6db7535c60911446930b12f35d986c2e0094?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (a7ef6db) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1313/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1313?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1313   +/-   ##
=======================================
  Coverage   74.22%   74.22%           
=======================================
  Files         174      174           
  Lines       48731    48732    +1     
  Branches    10367    10367           
=======================================
+ Hits        36170    36171    +1     
  Misses      10273    10273           
  Partials     2288     2288           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1313?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/1313/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9zaGFwZS5weQ==) | `91.74% <100.00%> (+0.01%)` | :arrow_up: |

</details>
codecov[bot](2022-11-27 22:11:25):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1315?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1315](https://codecov.io/gh/aesara-devs/aesara/pull/1315?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (3eb3375) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/71e2f1ee23975a5aef40ef1845bdd2e6e60c64d3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (71e2f1e) will **not change** coverage.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1315/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1315?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1315   +/-   ##
=======================================
  Coverage   74.75%   74.75%           
=======================================
  Files         194      194           
  Lines       49899    49899           
  Branches    10554    10554           
=======================================
  Hits        37303    37303           
  Misses      10269    10269           
  Partials     2327     2327           
```



</details>
dgerlanc(2023-03-16 21:06:31):Resolved by https://github.com/aesara-devs/aesara/pull/1452
codecov[bot](2022-11-29 08:13:35):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1317?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1317](https://codecov.io/gh/aesara-devs/aesara/pull/1317?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (43304c8) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/14c394d0c62d7435395acea1e7fed55105c16984?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (14c394d) will **increase** coverage by `0.12%`.
> The diff coverage is `93.31%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1317/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1317?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1317      +/-   ##
==========================================
+ Coverage   74.10%   74.22%   +0.12%     
==========================================
  Files         174      174              
  Lines       48673    48754      +81     
  Branches    10373    10367       -6     
==========================================
+ Hits        36067    36190     +123     
+ Misses      10315    10275      -40     
+ Partials     2291     2289       -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1317?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL2Jhc2ljLnB5) | `83.87% <ø> (ø)` | |
| [aesara/link/jax/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NjYWxhci5weQ==) | `97.40% <ø> (ø)` | |
| [aesara/misc/check\_blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL21pc2MvY2hlY2tfYmxhcy5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/misc/elemwise\_time\_test.py](https://codecov.io/gh/aesara-devs/aesara/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL21pc2MvZWxlbXdpc2VfdGltZV90ZXN0LnB5) | `0.00% <0.00%> (ø)` | |
| [aesara/misc/latence\_gpu\_transfert.py](https://codecov.io/gh/aesara-devs/aesara/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL21pc2MvbGF0ZW5jZV9ncHVfdHJhbnNmZXJ0LnB5) | `0.00% <0.00%> (ø)` | |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.16% <75.00%> (+0.16%)` | :arrow_up: |
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `52.04% <77.77%> (ø)` | |
| [aesara/tensor/slinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9zbGluYWxnLnB5) | `92.59% <81.15%> (+8.18%)` | :arrow_up: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.07% <90.54%> (-0.52%)` | :arrow_down: |
| [aesara/graph/rewriting/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL3Jld3JpdGluZy9iYXNpYy5weQ==) | `65.03% <92.30%> (ø)` | |
| ... and [34 more](https://codecov.io/gh/aesara-devs/aesara/pull/1317/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
codecov[bot](2022-11-30 19:39:02):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1320?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1320](https://codecov.io/gh/aesara-devs/aesara/pull/1320?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (b6aa331) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/14c394d0c62d7435395acea1e7fed55105c16984?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (14c394d) will **increase** coverage by `0.12%`.
> The diff coverage is `91.73%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1320/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1320?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1320      +/-   ##
==========================================
+ Coverage   74.10%   74.22%   +0.12%     
==========================================
  Files         174      174              
  Lines       48673    48732      +59     
  Branches    10373    10367       -6     
==========================================
+ Hits        36067    36171     +104     
+ Misses      10315    10273      -42     
+ Partials     2291     2288       -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1320?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1320/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NjYWxhci5weQ==) | `97.40% <ø> (ø)` | |
| [aesara/misc/check\_blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/1320/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL21pc2MvY2hlY2tfYmxhcy5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/misc/elemwise\_time\_test.py](https://codecov.io/gh/aesara-devs/aesara/pull/1320/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL21pc2MvZWxlbXdpc2VfdGltZV90ZXN0LnB5) | `0.00% <0.00%> (ø)` | |
| [aesara/misc/latence\_gpu\_transfert.py](https://codecov.io/gh/aesara-devs/aesara/pull/1320/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL21pc2MvbGF0ZW5jZV9ncHVfdHJhbnNmZXJ0LnB5) | `0.00% <0.00%> (ø)` | |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/1320/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.16% <75.00%> (+0.16%)` | :arrow_up: |
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/1320/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `52.04% <77.77%> (ø)` | |
| [aesara/tensor/slinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1320/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9zbGluYWxnLnB5) | `92.59% <81.15%> (+8.18%)` | :arrow_up: |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1320/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.07% <90.54%> (-0.52%)` | :arrow_down: |
| [aesara/graph/rewriting/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1320/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL3Jld3JpdGluZy9iYXNpYy5weQ==) | `65.03% <92.30%> (ø)` | |
| [aesara/tensor/rewriting/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1320/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvZWxlbXdpc2UucHk=) | `86.40% <94.73%> (+0.65%)` | :arrow_up: |
| ... and [23 more](https://codecov.io/gh/aesara-devs/aesara/pull/1320/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
brandonwillard(2022-12-06 23:03:37):Given what appear to be multiple attempts by members of @pymc-devs and your @pymc-labs organization to copy our work without attribution, we have decided to suspend contributions from individuals directly involved in these organizations until further notice. We believe these actions are in direct conflict with the cooperative spirit of open-source development and do not want to be associated with such activity.
codecov[bot](2022-12-06 20:35:36):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1336?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1336](https://codecov.io/gh/aesara-devs/aesara/pull/1336?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (4dfd74d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e8c042b3a472cc197e60b3c4231945a1f0aba0fb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (e8c042b) will **increase** coverage by `0.04%`.
> The diff coverage is `96.77%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1336/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1336?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1336      +/-   ##
==========================================
+ Coverage   74.22%   74.27%   +0.04%     
==========================================
  Files         174      175       +1     
  Lines       48754    48841      +87     
  Branches    10367    10369       +2     
==========================================
+ Hits        36190    36276      +86     
- Misses      10275    10276       +1     
  Partials     2289     2289              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1336?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1336/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.30% <0.00%> (-0.20%)` | :arrow_down: |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1336/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `85.13% <60.00%> (ø)` | |
| [aesara/link/numba/dispatch/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1336/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvX19pbml0X18ucHk=) | `100.00% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/sparse.py](https://codecov.io/gh/aesara-devs/aesara/pull/1336/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc3BhcnNlLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/link/vm.py](https://codecov.io/gh/aesara-devs/aesara/pull/1336/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvdm0ucHk=) | `92.55% <100.00%> (ø)` | |

</details>
brandonwillard(2022-12-07 01:22:29):@aesara-devs/core I merged this to see whether or not some typing updates in this PR would get rid of https://github.com/aesara-devs/aesara/issues/1221.  I'll create a follow-up to this shortly.
codecov[bot](2022-12-08 03:08:18):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1337?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1337](https://codecov.io/gh/aesara-devs/aesara/pull/1337?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (4de8dae) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/75f09bfafdb3be3f12a12046f1a0976ce79970a9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (75f09bf) will **increase** coverage by `0.00%`.
> The diff coverage is `80.39%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1337/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1337?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1337   +/-   ##
=======================================
  Coverage   74.27%   74.27%           
=======================================
  Files         175      175           
  Lines       48841    48886   +45     
  Branches    10369    10375    +6     
=======================================
+ Hits        36276    36311   +35     
- Misses      10276    10282    +6     
- Partials     2289     2293    +4     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1337?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1337/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.24% <ø> (-0.07%)` | :arrow_down: |
| [aesara/link/numba/dispatch/sparse.py](https://codecov.io/gh/aesara-devs/aesara/pull/1337/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc3BhcnNlLnB5) | `92.53% <80.00%> (-7.47%)` | :arrow_down: |
| [aesara/link/numba/linker.py](https://codecov.io/gh/aesara-devs/aesara/pull/1337/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvbGlua2VyLnB5) | `100.00% <100.00%> (ø)` | |

</details>
codecov[bot](2022-12-07 15:49:50):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1338?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1338](https://codecov.io/gh/aesara-devs/aesara/pull/1338?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (78d2dbf) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/bfcfe4b94aeafa4f49374c62c939bf10aaa89d71?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (bfcfe4b) will **increase** coverage by `0.29%`.
> The diff coverage is `91.82%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1338/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1338?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1338      +/-   ##
==========================================
+ Coverage   74.36%   74.66%   +0.29%     
==========================================
  Files         177      177              
  Lines       49066    49050      -16     
  Branches    10379    10400      +21     
==========================================
+ Hits        36488    36623     +135     
+ Misses      10285    10131     -154     
- Partials     2293     2296       +3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1338?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL2VsZW13aXNlLnB5) | `80.59% <50.00%> (ø)` | |
| [aesara/link/jax/dispatch/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NoYXBlLnB5) | `94.82% <75.00%> (+6.36%)` | :arrow_up: |
| [aesara/tensor/rewriting/jax.py](https://codecov.io/gh/aesara-devs/aesara/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvamF4LnB5) | `86.44% <86.44%> (ø)` | |
| [aesara/link/jax/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NjYWxhci5weQ==) | `96.72% <95.74%> (-0.69%)` | :arrow_down: |
| [aesara/link/jax/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL2Jhc2ljLnB5) | `92.59% <100.00%> (+8.72%)` | :arrow_up: |
| [aesara/link/jax/dispatch/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3N1YnRlbnNvci5weQ==) | `100.00% <100.00%> (+32.07%)` | :arrow_up: |
| [aesara/link/jax/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3RlbnNvcl9iYXNpYy5weQ==) | `97.22% <100.00%> (+5.15%)` | :arrow_up: |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `89.88% <0.00%> (-0.07%)` | :arrow_down: |
| [tests/link/jax/test\_subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-dGVzdHMvbGluay9qYXgvdGVzdF9zdWJ0ZW5zb3IucHk=) | | |
| ... and [2 more](https://codecov.io/gh/aesara-devs/aesara/pull/1338/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
rlouf(2022-12-08 09:21:09):Here is another issue I would like to fix in this PR. When operating on scalars, `jax.lax.X` returns a `TracedArray` when the correponding Python operator does not:

```python
import jax
import jax.numpy as jnp

@jax.jit
def fn():
    a = 3 + 2
    b = jnp.ones(3) + jnp.ones(3)
    print(a)
    print(b)
    return a

@jax.jit
def fn_lax_add():
    a = jax.lax.add(3, 2)
    print(a)
    return a

fn()
# 5
# Traced<ShapedArray(float32[3])>with<DynamicJaxprTrace(level=0/1)>

fn_lax_add()
# Traced<ShapedArray(int32[], weak_type=True)>with<DynamicJaxprTrace(level=0/1)>
```

```python
import jax

@jax.jit
def fn():
    a = 3 * 2
    print(a)
    return a

@jax.jit
def fn_lax_mul():
    a = jax.lax.mul(3, 2)
    print(a)
    return a

fn()
# 6

fn_lax_mul()
# Traced<ShapedArray(int32[], weak_type=True)>with<DynamicJaxprTrace(level=0/1)>
```

```python
import jax

@jax.jit
def fn():
    a = 3 / 2
    print(a)
    return a

@jax.jit
def fn_lax_div():
    a = jax.lax.div(3, 2)
    print(a)
    return a

fn()
# 1.5
fn_lax_div()
# Traced<ShapedArray(int32[], weak_type=True)>with<DynamicJaxprTrace(level=0/1)>
```

Since this can cause problems down the line when the result of the operation is passed as a `size` or `shape` parameter we should handle these cases explicitly in the backend. The problem was originally observed in #1202 
rlouf(2022-12-08 14:16:18):The problem is illustrated by the following MWE:

```python
import aesara
import aesara.tensor as at
import numpy as np

x = at.matrix('x')
shape = x.shape[0] + x.shape[1]
out = at.ones(shape)

fn = aesara.function((x,), out, mode="JAX")
try:
    fn(np.ones((2,3)))
except Exception as e:
    print(e)
# Shapes must be 1D sequences of concrete values of integer type, got (Traced<ShapedArray(int64[], weak_type=True)>with<DynamicJaxprTrace(level=0/1)>,).
# If using `jit`, try using `static_argnums` or applying `jit` to smaller subfunctions.
# Apply node that caused the error: Alloc(TensorConstant{1.0}, Elemwise{Add}[(0, 0)].0)
# Toposort index: 3
# Inputs types: [TensorType(float64, ()), TensorType(int64, ())]
# Inputs shapes: [(2, 3)]
# Inputs strides: [(24, 8)]
# Inputs values: ['not shown']
# Outputs clients: [['output']]
```

While the equivalent JAX implementation:

```python
import jax
import jax.numpy as jnp
import numpy as np

@jax.jit
def fn(x):
    shape = x.shape[0] + x.shape[1]
    return jnp.ones(shape)

print(fn(np.ones((2,3))))
# [1. 1. 1. 1. 1.]
```

rlouf(2022-12-12 15:15:21):I have now fixed everything all the issues I identified in #1202 that were not related to the `Scan` implementation.

There is one last error that I do not understand in `test_jas_Reshape_concrete_shape`. The compiled JAX function returns the expected result, but Aesara fails with the following error message:

```python
self = <aesara.tensor.shape.Reshape object at 0x7fbb71e8e9e0>
node = Reshape{2}(a, JAXShapeTuple.0), inp = [array([1., 2., 3., 4.]), None]
out_ = [[None]], params = Params(ndim:int32:2)

    def perform(self, node, inp, out_, params):
        x, shp = inp
        (out,) = out_
>       if len(shp) != self.ndim:
E       TypeError: object of type 'NoneType' has no len()
```

Do you see what might be the issue @brandonwillard ?
brandonwillard(2022-12-13 05:02:32):> I have now fixed everything all the issues I identified in #1202 that were not related to the `Scan` implementation.
> 
> There is one last error that I do not understand in `test_jas_Reshape_concrete_shape`. The compiled JAX function returns the expected result, but Aesara fails with the following error message:
> 
> ```python
> self = <aesara.tensor.shape.Reshape object at 0x7fbb71e8e9e0>
> node = Reshape{2}(a, JAXShapeTuple.0), inp = [array([1., 2., 3., 4.]), None]
> out_ = [[None]], params = Params(ndim:int32:2)
> 
>     def perform(self, node, inp, out_, params):
>         x, shp = inp
>         (out,) = out_
> >       if len(shp) != self.ndim:
> E       TypeError: object of type 'NoneType' has no len()
> ```
> 
> Do you see what might be the issue @brandonwillard ?

Yeah, there shouldn't be a `JAXShapeTuple` in a graph being evaluated in Python.  Looks like we need to use separate optimization queries for each testing mode.
rlouf(2022-12-14 15:25:53):Ready for review.
rlouf(2022-12-13 20:42:23):Use separate queries for Python and JAX mode so `JAXShapeTuple` are only present in the graphs compiled by JAX.
brandonwillard(2022-12-13 21:36:32):I added a commit to that effect.
dgerlanc(2022-12-07 21:32:24):LGTM!
brandonwillard(2022-12-07 18:27:12):```suggestion

* Modular design
```

Looks like we need the newline in order to format the list.
codecov[bot](2022-12-09 03:34:40):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1343?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1343](https://codecov.io/gh/aesara-devs/aesara/pull/1343?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (53b6c18) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5dee3c714fcfb31c84ee90795a0482c1dfc97bd3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (5dee3c7) will **increase** coverage by `0.00%`.
> The diff coverage is `94.73%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1343/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1343?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1343   +/-   ##
=======================================
  Coverage   74.27%   74.27%           
=======================================
  Files         175      175           
  Lines       48886    48887    +1     
  Branches    10375    10375           
=======================================
+ Hits        36311    36312    +1     
  Misses      10282    10282           
  Partials     2293     2293           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1343?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1343/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.25% <90.00%> (+0.01%)` | :arrow_up: |
| [aesara/link/numba/dispatch/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/1343/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZXh0cmFfb3BzLnB5) | `98.00% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/nlinalg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1343/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvbmxpbmFsZy5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/sparse.py](https://codecov.io/gh/aesara-devs/aesara/pull/1343/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvc3BhcnNlLnB5) | `92.53% <100.00%> (ø)` | |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1343/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `85.13% <100.00%> (ø)` | |

</details>
AdrienCorenflos(2022-12-12 15:55:21):I ran pre-commit, should be good
AdrienCorenflos(2022-12-13 12:37:51):@rlouf 
rlouf(2022-12-13 13:03:34):Should be good to merge once the tests pass. Thanks for spotting this and fixing it!
codecov[bot](2022-12-13 14:07:39):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1345?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1345](https://codecov.io/gh/aesara-devs/aesara/pull/1345?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (16b50ba) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2434cb46c119b43daeaec853ce3b1f8e68d0781a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (2434cb4) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1345/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1345?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1345   +/-   ##
=======================================
  Coverage   74.35%   74.35%           
=======================================
  Files         177      177           
  Lines       49046    49056   +10     
  Branches    10379    10379           
=======================================
+ Hits        36468    36478   +10     
  Misses      10285    10285           
  Partials     2293     2293           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1345?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1345/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (ø)` | |

</details>
codecov[bot](2022-12-09 21:11:31):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1346?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1346](https://codecov.io/gh/aesara-devs/aesara/pull/1346?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (8d3089d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/fe3e76d961653ed1180e8badeb7d721861a1c2f5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (fe3e76d) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1346/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1346?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1346   +/-   ##
=======================================
  Coverage   74.35%   74.36%           
=======================================
  Files         177      177           
  Lines       49036    49046   +10     
  Branches    10379    10379           
=======================================
+ Hits        36461    36471   +10     
  Misses      10283    10283           
  Partials     2292     2292           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1346?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1346/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (ø)` | |

</details>
rlouf(2022-12-10 09:53:02):Thank you for contributing!
juanitorduz(2022-12-09 19:55:04):Seem `scipy`'s implementation does not accept a `loc` param ? https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.lognorm.html
brandonwillard(2022-12-09 21:18:04):It seems to work with something like `scipy.stats.lognorm(1, loc=10).rvs()`.
codecov[bot](2022-12-09 23:33:21):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1347?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1347](https://codecov.io/gh/aesara-devs/aesara/pull/1347?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (6d2031d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ae182f02f879741e409f927b27e874d8a1a4ef21?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (ae182f0) will **increase** coverage by `0.07%`.
> The diff coverage is `99.42%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1347/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1347?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1347      +/-   ##
==========================================
+ Coverage   74.27%   74.35%   +0.07%     
==========================================
  Files         175      177       +2     
  Lines       48887    49046     +159     
  Branches    10375    10379       +4     
==========================================
+ Hits        36312    36468     +156     
- Misses      10282    10285       +3     
  Partials     2293     2293              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1347?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/mode.py](https://codecov.io/gh/aesara-devs/aesara/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvbW9kZS5weQ==) | `84.47% <ø> (ø)` | |
| [aesara/tensor/random/rewriting/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vcmV3cml0aW5nL2Jhc2ljLnB5) | `94.16% <ø> (ø)` | |
| [aesara/link/jax/dispatch/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NoYXBlLnB5) | `88.46% <93.33%> (+1.97%)` | :arrow_up: |
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (+2.63%)` | :arrow_up: |
| [aesara/tensor/random/rewriting/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vcmV3cml0aW5nL19faW5pdF9fLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/random/rewriting/jax.py](https://codecov.io/gh/aesara-devs/aesara/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vcmV3cml0aW5nL2pheC5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/rewriting/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvbWF0aC5weQ==) | `86.02% <0.00%> (-0.20%)` | :arrow_down: |

</details>
rlouf(2022-12-10 07:24:35):Should we at least have a benchmark that covers each backend to monitor compilation time?
brandonwillard(2022-12-10 18:13:56):> Should we at least have a benchmark that covers each backend to monitor compilation time?

Yes, definitely.  We need to start adding benchmarks for a lot of things.  I'm planning on repurposing some of those old Theano tests (i.e. the ones that are actually just examples) into benchmark tests.

We'll need to do that across a few follow-up PRs, but, in the meantime, it looks like we'll need to merge this so we can more easily test some of its functionality (e.g. comparisons of saved perf. data and new changes in a PR, saving to a separate perf. stats. site, the GitHub comment functionality, etc.)
brandonwillard(2022-12-11 20:31:04):I've added some settings that I hope will prevent `benchmark-action` from breaking on PRs, while still comparing benchmarks from `main` and PR branches and failing the workflow when they're past a threshold.

We might need to merge this just to see if it works on the push events.  After that, we can open a test PR with a failing benchmark test and see if the PR alert/failure works.
rlouf(2022-12-12 09:26:52):Thanks! We also need to figure out if the licenses are compatible and how to do proper attribution if you took inspiration from someone else's implementation. It looks like [Numpyro is licensed under Apache 2.0](https://github.com/pyro-ppl/numpyro/blob/master/LICENSE.md)
GStechschulte(2022-12-12 20:51:22):> Thanks! We also need to figure out if the licenses are compatible and how to do proper attribution if you took inspiration from someone else's implementation. It looks like [Numpyro is licensed under Apache 2.0](https://github.com/pyro-ppl/numpyro/blob/master/LICENSE.md)

Based on the NumPyro Apache License 2.0 section 4, we may reproduce and distribute copies of the Work or Derivative Works (the JAX implementation of MultinomialRV) provided we:

1. give any other recipients of the Work or Derivative Works a copy of this License; and
2. the modified file must contain carry a notice stating the file was changed
3. in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work
4. if the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation

Since inspiration was drawn from a few functions and not an entire file, I suggest we include, in addition to (1), (2), (3), in the documentation for this RV, something along the lines 

> MultinomialRV uses source code from the file xyz.py from <link to src code GitHub file> of the NumPyro project, copyright YYYY, licensed under the Apache 2.0 license>
rlouf(2022-12-14 13:32:29):I rebased your branch on `main` to use the new key splitting scheme in the JAX backend. You'll have to pull the changes!
rlouf(2022-12-14 21:17:37):Yes you need to `git pull --rebase` in such cases. Here's [a good explanation of how rebasing  works](https://git-scm.com/docs/git-rebase). And of course [the documentation for `git pull`](https://git-scm.com/docs/git-pull)
rlouf(2023-01-16 19:53:38):@GStechschulte I think we should follow @AdrienCorenflos's suggestion here. I'll take another look at it this week.
rlouf(2023-02-21 15:23:53):@GStechschulte I rebased your branch on `main`. Do  you plan on implementing @AdrienCorenflos's suggestion above?
rlouf(2023-03-10 14:08:53):> @rlouf, I had to add a case for `Constant`s in `assert_size_argument_jax_compatible`. You'll need to confirm that this is valid more generally.

That's valid. I was so focused on the complex case that I forgot the simplest one.
rlouf(2022-12-13 13:12:19):I am surprised because JAX does have an implementation for the categorical distribution [here](https://jax.readthedocs.io/en/latest/_autosummary/jax.random.categorical.html#jax.random.categorical) that uses their implementation for the Gumbel distribution. Is this justified in the codebase, or is it just because it was implemented at a time where `jax.random.categorical` was not available (which you should be able to determine with `git blame`)?
rlouf(2022-12-13 13:20:01):Couldn't we use `jax.nn.one_hot` on the output of the categorical and then reduce the resulting tensor?
GStechschulte(2022-12-13 19:17:39):Yeah, your proposal seems to be a more elegant solution; thanks. Just committed.
rlouf(2022-12-15 16:00:05):Is that different from `jax.random.categorical`?
GStechschulte(2022-12-15 20:05:46):Yes, the `jax.random.categorical` uses their implementation of the Gumbel distribution. However, after using `git blame`, it seems the NumPyro team used this implementation before the implementation of the `jax.random.categorical`. 

If we would like to update this code to use the `jax.random.categorical`, it would be the following:

```python3

def sample_fn(rng, size, dtype, *parameters):

        rng_key = rng["jax_state"]
        rng_key, sampling_key = jax.random.split(rng_key, 2)

        n, p = parameters
        n_max = jax.numpy.max(n)
        size = size or p.shape[:-1]
    
        logits = jax.scipy.special.logit(p)
        indices = jax.random.categorical(jax_key, logits, shape=(n_max,) + size)
        one_hot = jax.nn.one_hot(indices, p.shape[0])
        sample = jax.numpy.sum(one_hot, axis=0, dtype=dtype, keepdims=False)

        rng["jax_state"] = rng_key

        return (rng, sample)
```
rlouf(2022-12-16 09:22:44):That looks much simpler, great!

Since the multinomial distribution is slightly more complex than the other ones when it comes to shapes we should make sure that the output shape of the samples that are generated in the JAX backend is identical to those of the samples generated with the other backends.
AdrienCorenflos(2022-12-22 11:19:29):I tend to use `jax.random.choice` for this kind of thing. `jax.random.categorical` (via Gumbel) has a quadratic complexity.

![image](https://user-images.githubusercontent.com/19948263/209123329-c909174d-6968-4478-88f1-e7c6a186f475.png)

AdrienCorenflos(2022-12-22 11:24:26):You just need to check the Gumbel implementation, they form a N by N array.
brandonwillard(2023-01-01 19:48:08):This looks like a job for a "local" Git ignore (see [here](https://stackoverflow.com/a/1753078/3006474)).
rlouf(2022-12-13 13:28:08):This looks good! Waiting for #1345 to be merged. In the meantime, would you mind rebasing your changes and renaming the commit to match the PR title?
theorashid(2022-12-13 15:04:35):I rebased and changed the split key to match https://github.com/aesara-devs/aesara/pull/1345.
rlouf(2022-12-13 16:14:59):I cleaned the commits; should be good to merge if the tests pass. Thank you for contributing!
codecov[bot](2022-12-13 17:38:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1362?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1362](https://codecov.io/gh/aesara-devs/aesara/pull/1362?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (e0b8fb1) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/94f3f32374dcfce7324d296be973f3f5445ea413?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (94f3f32) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1362/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1362?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1362   +/-   ##
=======================================
  Coverage   74.35%   74.36%           
=======================================
  Files         177      177           
  Lines       49056    49066   +10     
  Branches    10379    10379           
=======================================
+ Hits        36478    36488   +10     
  Misses      10285    10285           
  Partials     2293     2293           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1362?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1362/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (ø)` | |

</details>
rlouf(2022-12-13 13:23:03):Looks good, waiting for #1345 to be merged to update the key splitting mechanism.
rlouf(2023-02-21 15:02:03):Thanks for your contribution @larryshamalama!
rlouf(2023-02-21 16:51:04):I am unable to reproduce the test failure locally (it even works with smaller a smaller number of samples). We need to understand what causes this.
larryshamalama(2023-02-23 22:34:52):I can have a look later, but I'm currently on vacation until early March so I will only be able to do so then. Admittedly, I have not looked much into this PR after its inception...
rlouf(2023-02-24 06:28:03):I don't think the failures have anything to do with your implementation; the tests pass locally for me.
brandonwillard(2023-03-10 01:50:34):Thanks, @larryshamalama!
codecov[bot](2022-12-12 17:41:37):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1364?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1364](https://codecov.io/gh/aesara-devs/aesara/pull/1364?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (a85c8a9) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/67ea5b6d895c370b350c440c1e3c93639a69744e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (67ea5b6) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1364/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1364?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1364   +/-   ##
=======================================
  Coverage   74.66%   74.66%           
=======================================
  Files         177      177           
  Lines       49050    49051    +1     
  Branches    10400    10400           
=======================================
+ Hits        36623    36624    +1     
  Misses      10131    10131           
  Partials     2296     2296           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1364?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `99.03% <100.00%> (+<0.01%)` | :arrow_up: |

</details>
brandonwillard(2022-12-15 00:36:43):[The current error](https://github.com/aesara-devs/aesara/actions/runs/3699762886/jobs/6267501681#step:6:678) looks like it might be due to recent changes in JAX.
rlouf(2022-12-15 14:08:58):> [The current error](https://github.com/aesara-devs/aesara/actions/runs/3699762886/jobs/6267501681#step:6:678) looks like it might be due to recent changes in JAX.

Yes. Pushed a fix in #1372 
brandonwillard(2022-12-12 17:40:46):In this case, we need to reuse the existing `UniformRV` `Op`.  Something like `random = uniform` might work.
redbopo(2022-12-14 14:37:06):Fixed, Thanks.
codecov[bot](2022-12-12 19:18:17):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1365?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1365](https://codecov.io/gh/aesara-devs/aesara/pull/1365?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (ec69d3c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ae182f02f879741e409f927b27e874d8a1a4ef21?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (ae182f0) will **increase** coverage by `0.07%`.
> The diff coverage is `99.42%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1365/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1365?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1365      +/-   ##
==========================================
+ Coverage   74.27%   74.35%   +0.07%     
==========================================
  Files         175      177       +2     
  Lines       48887    49046     +159     
  Branches    10375    10379       +4     
==========================================
+ Hits        36312    36468     +156     
- Misses      10282    10285       +3     
  Partials     2293     2293              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1365?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/mode.py](https://codecov.io/gh/aesara-devs/aesara/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvbW9kZS5weQ==) | `84.47% <ø> (ø)` | |
| [aesara/tensor/random/rewriting/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vcmV3cml0aW5nL2Jhc2ljLnB5) | `94.16% <ø> (ø)` | |
| [aesara/link/jax/dispatch/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NoYXBlLnB5) | `88.46% <93.33%> (+1.97%)` | :arrow_up: |
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (+2.63%)` | :arrow_up: |
| [aesara/tensor/random/rewriting/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vcmV3cml0aW5nL19faW5pdF9fLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/random/rewriting/jax.py](https://codecov.io/gh/aesara-devs/aesara/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vcmV3cml0aW5nL2pheC5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/rewriting/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvbWF0aC5weQ==) | `86.02% <0.00%> (-0.20%)` | :arrow_down: |

</details>
theorashid(2022-12-14 16:42:48):Also, n00b git question. What the correct git for rebasing and changing the commit name? I f'd it up a bit last time. I just ran `git fetch upstream`
`git rebase upstream/main`
rlouf(2022-12-14 17:31:58):To pull from upstream and rebase `git pull --rebase upstream`.

To rename a commit `git rebase -i`. The git doc is pretty good if you need more details.
theorashid(2022-12-14 19:06:50):Well I did the rebase but I made a mess again lol. I'll have a look after the football. Don't merge yet and I'll let you know if I can't fix it
rlouf(2022-12-14 19:50:43):Don't hesitate to ask for help!
theorashid(2022-12-14 21:03:19):Hey, yeah I'm not sure how to do this unfortunately. I can only seem to amend the 14 rebase commits rather than the 2 I added. And there's no option to squash. Please let me know how you fix this and I'll never ask again next time I contribute

Also, the workflows are failing but that isn't to do with me by the looks of it. My tests pass locally
theorashid(2022-12-15 07:52:51):Great, thank you. This should be good to go. btw I'm used to repos which squash all commits before merging for pull requests
codecov[bot](2022-12-15 17:16:43):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1370?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1370](https://codecov.io/gh/aesara-devs/aesara/pull/1370?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (1bd931f) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/67ea5b6d895c370b350c440c1e3c93639a69744e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (67ea5b6) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1370/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1370   +/-   ##
=======================================
  Coverage   74.66%   74.66%           
=======================================
  Files         177      177           
  Lines       49050    49060   +10     
  Branches    10400    10400           
=======================================
+ Hits        36623    36633   +10     
  Misses      10131    10131           
  Partials     2296     2296           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1370/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (ø)` | |

</details>
rlouf(2022-12-15 17:22:00):It is only one commit now. Thanks for your contribution!
maresb(2022-12-15 00:10:39):Ah, looks like I have to modify the GH workflows.
codecov[bot](2022-12-17 18:23:27):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1371?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1371](https://codecov.io/gh/aesara-devs/aesara/pull/1371?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (aafd5fa) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/67ea5b6d895c370b350c440c1e3c93639a69744e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (67ea5b6) will **increase** coverage by `0.02%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1371/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1371?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1371      +/-   ##
==========================================
+ Coverage   74.66%   74.68%   +0.02%     
==========================================
  Files         177      195      +18     
  Lines       49050    49744     +694     
  Branches    10400    10529     +129     
==========================================
+ Hits        36623    37153     +530     
- Misses      10131    10266     +135     
- Partials     2296     2325      +29     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1371?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `99.03% <100.00%> (+<0.01%)` | :arrow_up: |
| [aesara/tensor/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci91dGlscy5weQ==) | `96.42% <0.00%> (ø)` | |
| [aesara/tensor/random/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vX19pbml0X18ucHk=) | `100.00% <0.00%> (ø)` | |
| [aesara/typed\_list/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3R5cGVkX2xpc3QvX19pbml0X18ucHk=) | `100.00% <0.00%> (ø)` | |
| [aesara/tensor/nnet/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9ubmV0L19faW5pdF9fLnB5) | `100.00% <0.00%> (ø)` | |
| [aesara/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3V0aWxzLnB5) | `66.99% <0.00%> (ø)` | |
| [aesara/scan/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYW4vX19pbml0X18ucHk=) | `100.00% <0.00%> (ø)` | |
| [aesara/d3viz/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2Qzdml6L19faW5pdF9fLnB5) | `100.00% <0.00%> (ø)` | |
| [aesara/tensor/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1371/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9fX2luaXRfXy5weQ==) | `95.55% <0.00%> (ø)` | |
| ... and [10 more](https://codecov.io/gh/aesara-devs/aesara/pull/1371/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
maresb(2022-12-22 00:21:59):Thanks a lot for the approval! I still want to do one final pass to readd the fields which were dropped by the `ini2toml` tool which I used. This may take me a few days. (BTW, would you be okay with me unsquashing the commit f07ec5012d498072319e0bcecb1632688632ace5 since the extended commit information includes instructions for generating `pyproject.toml` with `ini2toml`?)
brandonwillard(2022-12-22 01:02:06):> BTW, would you be okay with me unsquashing the commit [f07ec50](https://github.com/aesara-devs/aesara/commit/f07ec5012d498072319e0bcecb1632688632ace5) since the extended commit information includes instructions for generating `pyproject.toml` with `ini2toml`?

No problem.
maresb(2022-12-25 16:22:05):Unsquashing...
maresb(2022-12-25 19:43:43):@brandonwillard, got some time on the train today. I think this is now ready to merge. I made an exhaustive comparison with the original `setup.cfg`, squashed the commits to an extent that I think they'll be a useful when doing the same for other aesara-devs projects, and finally, again I compared the sdists and wheels to make sure nothing was amiss.

Since your last commit, `git diff 48ed84f @ > changes.patch`

```diff
diff --git a/pyproject.toml b/pyproject.toml
index 65a7b0fa0..675601a51 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -75,6 +75,7 @@ platforms = [
     "Mac OS-X",
     "Unix",
 ]
+# Not from setup.cfg
 include-package-data = false
 
 [tool.setuptools.packages.find]
@@ -82,12 +83,11 @@ exclude = [
     "tests",
     "tests.*",
 ]
+# Not from setup.cfg:
 namespaces = false
 
 [tool.setuptools.package-data]
 "*" = [
-    "*.txt",
-    "*.rst",
     "*.txt",
     "*.rst",
     "*.cu",
@@ -99,6 +99,8 @@ namespaces = false
     "*.cpp",
     "ChangeLog",
     "c_code/*",
+]
+"aesara" = [
     "py.typed",
 ]
 "aesara.misc" = ["*.sh"]
@@ -153,7 +155,7 @@ lines_after_imports = 2
 lines_between_sections = 1
 honor_noqa = true
 skip_gitignore = true
-skip = ["aesara/version.py", "**/__init__.py"]
+skip = ["aesara/version.py"]
 skip_glob = ["**/*.pyx"]
 
 [tool.mypy]
@@ -261,6 +263,14 @@ module = ["aesara.tensor.rewriting.basic"]
 ignore_errors = true
 check_untyped_defs = false
 
+[[tool.mypy.overrides]]
+module = ["aesara.tensor.rewriting.shape"]
+warn_unused_ignores = false
+
+[[tool.mypy.overrides]]
+module = ["aesara.tensor.rewriting.elemwise"]
+warn_unused_ignores = false
+
 [[tool.mypy.overrides]]
 module = ["aesara.tensor.subtensor"]
 ignore_errors = true
@@ -326,6 +336,10 @@ module = ["aesara.tensor.random.utils"]
 ignore_errors = true
 check_untyped_defs = false
 
+[[tool.mypy.overrides]]
+module = ["aesara.scan.op"]
+warn_unused_ignores = false
+
 [[tool.mypy.overrides]]
 module = ["aesara.link.numba.dispatch.extra_ops"]
 ignore_errors = true
```

Explanations: `include-package-data = false` and `namespaces = false` were not present in `setup.cfg`. These will be removed when we switch to Hatch, so I'm not inclined to track down what's going on. The removed `.txt` and `.rst` entries are duplicated. Also, `**/__init__.py` was not originally in `setup.cfg` so I removed it. Finally, I readded the `warn_unused_ignores = false` entries which were missing.

brandonwillard(2022-12-15 01:07:59):FYI: This was needed to avoid an error in the `pre-commit`-generated virtual environments.
maresb(2022-12-15 10:14:52):Thanks for mentioning this! I was in a rush and forgot to break it out into a separate commit. (Probably should be a separate PR.)

Adding `python39` breaks pre-commit locally for me, since I don't have a `python39` executable. I think there must be some underlying issue. Could you share the error which led you to introduce this?
brandonwillard(2022-12-15 18:24:38):I believe it was this issue: https://github.com/python/importlib_metadata/issues/406.
rlouf(2022-12-16 09:20:43):I've add the same issue as @maresb locally.
maresb(2022-12-16 10:20:07):@rlouf, we resolved it in https://github.com/aesara-devs/aesara/pull/1374 :smiley: 
maresb(2022-12-16 10:25:14):And after rebase the change to `.pre-commit-config.yml` is gone from this branch.
codecov[bot](2022-12-15 15:21:29):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1372?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1372](https://codecov.io/gh/aesara-devs/aesara/pull/1372?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (607bfc4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2434cb46c119b43daeaec853ce3b1f8e68d0781a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (2434cb4) will **increase** coverage by `0.30%`.
> The diff coverage is `93.46%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1372/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1372?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1372      +/-   ##
==========================================
+ Coverage   74.35%   74.66%   +0.30%     
==========================================
  Files         177      177              
  Lines       49046    49050       +4     
  Branches    10379    10400      +21     
==========================================
+ Hits        36468    36623     +155     
+ Misses      10285    10131     -154     
- Partials     2293     2296       +3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1372?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL2VsZW13aXNlLnB5) | `80.59% <50.00%> (ø)` | |
| [aesara/link/jax/dispatch/shape.py](https://codecov.io/gh/aesara-devs/aesara/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NoYXBlLnB5) | `94.82% <75.00%> (+6.36%)` | :arrow_up: |
| [aesara/tensor/rewriting/jax.py](https://codecov.io/gh/aesara-devs/aesara/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvamF4LnB5) | `86.44% <86.44%> (ø)` | |
| [aesara/link/jax/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NjYWxhci5weQ==) | `96.72% <95.74%> (-0.69%)` | :arrow_down: |
| [aesara/link/jax/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL2Jhc2ljLnB5) | `92.59% <100.00%> (+8.72%)` | :arrow_up: |
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/link/jax/dispatch/subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3N1YnRlbnNvci5weQ==) | `100.00% <100.00%> (+32.07%)` | :arrow_up: |
| [aesara/link/jax/dispatch/tensor\_basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3RlbnNvcl9iYXNpYy5weQ==) | `97.22% <100.00%> (+5.15%)` | :arrow_up: |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `89.88% <0.00%> (-0.07%)` | :arrow_down: |
| [tests/link/jax/test\_subtensor.py](https://codecov.io/gh/aesara-devs/aesara/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-dGVzdHMvbGluay9qYXgvdGVzdF9zdWJ0ZW5zb3IucHk=) | | |
| ... and [3 more](https://codecov.io/gh/aesara-devs/aesara/pull/1372/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
maresb(2022-12-15 19:56:35):Rebased on main
maresb(2022-12-15 20:41:19):I have approval, passing checks, and the big green "Rebase and merge" button. Does that mean I'm allowed to push it? :smile: 
brandonwillard(2022-12-15 21:54:09):> I have approval, passing checks, and the big green "Rebase and merge" button. Does that mean I'm allowed to push it? smile

Yes, of course.
codecov[bot](2022-12-18 21:10:44):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1375?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1375](https://codecov.io/gh/aesara-devs/aesara/pull/1375?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (9dae630) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/96eca11f8822038eb4dc9978a212eeb24501763f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (96eca11) will **increase** coverage by `0.10%`.
> The diff coverage is `n/a`.

> :exclamation: Current head 9dae630 differs from pull request most recent head 9d46e0f. Consider uploading reports for the commit 9d46e0f to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1375/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1375?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1375      +/-   ##
==========================================
+ Coverage   74.59%   74.69%   +0.10%     
==========================================
  Files         196      194       -2     
  Lines       49813    49730      -83     
  Branches    10547    10527      -20     
==========================================
- Hits        37157    37145      -12     
+ Misses      10331    10262      -69     
+ Partials     2325     2323       -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1375?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/bin/aesara\_cache.py](https://codecov.io/gh/aesara-devs/aesara/pull/1375?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2Jpbi9hZXNhcmFfY2FjaGUucHk=) | | |

</details>
maresb(2022-12-20 16:16:50):@brandonwillard, how would you feel about first merging #1371? Otherwise this PR has lots of big commits.

Thanks for the review! Looks great at first glance. Will go through it in detail now...
brandonwillard(2022-12-20 16:46:16):> @brandonwillard, how would you feel about first merging #1371? Otherwise this PR has lots of big commits.

Yeah, I'll look at that next.
maresb(2022-12-25 20:05:59):TODO: see if any of the pre-defined setuptools-scm formats are pushable to PyPI. If so, eliminate the nightly script.
maresb(2022-12-26 11:25:15):Details about the construction of version numbers are as follows. But this may be superfluous given the suggestion proposed in the next comment...

There are two parts to a setuptools_scm version number: the "version scheme" followed by the "local scheme".

These are both defined in terms of entry points, so the options are obtainable with

```python
from setuptools_scm import get_version
from importlib.metadata import entry_points

version_schemes = [
    ep.name for ep in entry_points(group="setuptools_scm.version_scheme")
]
local_schemes = [
    ep.name for ep in entry_points(group="setuptools_scm.local_scheme")
]
print(f"{version_schemes=}\n\nlocal_schemes={local_schemes}")
```

```python
version_schemes=['calver-by-date', 'guess-next-dev', 'no-guess-dev', 'post-release', 'python-simplified-semver', 'release-branch-semver']

local_schemes=['dirty-tag', 'no-local-version', 'node-and-date', 'node-and-timestamp']
```

To first inspect just the `version_scheme`, we can set `local_scheme="no-local-version"`:

```python
print(
    {
        version_scheme: get_version(
            version_scheme=version_scheme, local_scheme="no-local-version"
        )
        for version_scheme in version_schemes
    }
)
```

```python
{'calver-by-date': '22.12.25.0.dev97', 'guess-next-dev': '2.8.10.dev97', 'no-guess-dev': '2.8.9.post1.dev97', 'post-release': '2.8.9.post97', 'python-simplified-semver': '2.8.10.dev97', 'release-branch-semver': '2.9.0.dev97'}
```

Note how all of the possibilities except for `calver-by-date`, `no-guess-dev`, and `post-release` increment the version number in some way.

The most concise possibility is `post-release`, so next we fix this and look at `local_scheme`, which depends on whether or not the repository is clean:

```python
print("Clean:")
print(
    {
        local_scheme: get_version(
            version_scheme="post-release", local_scheme=local_scheme
        )
        for local_scheme in local_schemes
    }
)
!echo >> pyproject.toml
print("Dirty:")
print(
    {
        local_scheme: get_version(
            version_scheme="post-release", local_scheme=local_scheme
        )
        for local_scheme in local_schemes
    }
)
!git checkout -q pyproject.toml
```

```python
Clean:
{'dirty-tag': '2.8.9.post97', 'no-local-version': '2.8.9.post97', 'node-and-date': '2.8.9.post97+g1945ad8cb', 'node-and-timestamp': '2.8.9.post97+g1945ad8cb'}
Dirty:
{'dirty-tag': '2.8.9.post97+dirty', 'no-local-version': '2.8.9.post97', 'node-and-date': '2.8.9.post97+g1945ad8cb.d20221226', 'node-and-timestamp': '2.8.9.post97+g1945ad8cb.d20221226110450'}
```

maresb(2022-12-26 11:32:40):Why not just do `version_scheme="post-release", local_scheme="no-local-version"`. Then the version number will look like `2.8.9.post97`, where `97` is the number of commits on main since the last release. (`git checkout @~97` switches to `rel-2.8.9`.) Rather than running the job nightly, we can run it on merge-to-main, which is probably more useful anyways.

Getting the version number set correctly could then be accomplished in a GH Actions workflow with a few simple `dasel` commands to set `version_scheme` and `local_scheme` in `pyproject.toml`, and would eliminate the need for Python scripts.

Then `aesara-nightly` is no longer a fitting name, so either we leave it as-is for "historical reasons" or we come up with something else.
maresb(2022-12-26 15:40:56):Just pushed a quick implementation of the idea of my last post (only tested locally).
maresb(2022-12-29 21:50:55):Rebased on #1376
maresb(2022-12-30 12:16:27):Rebased on main
maresb(2023-01-01 23:37:35):This requires at least one more iteration, since `setuptools_scm` completely replaces the selection of files in the package (Git-driven). See ea65078 for all the changes. In particular,

* I noticed that `aesara/scan/scan_perform.pyx` is missing from the current distributions. It looks important, so I added it.

* I noticed that two files were being included under `tests/link/c/c_code` by virtue of having the `.c` and `.h` extensions. This looks wrong, so I removed it.

Additionally, I noticed that `aesara-cache` is being installed in a top-level module called `bin`. This seems very undesirable, as it should probably instead go under `aesara.bin`. I will make a subsequent PR to address this.
maresb(2023-01-02 21:56:44):I had a look and the test is failing due to more setuptools nastiness... without the `[tool.setuptools.package-data]` block which I removed from `pyproject.toml`, `setuptools_scm` manages to create a sdist containing `.c` files. This much I checked. But the big surprise comes during installation, and without that block those files are not installed. (If I edit the `pyproject.toml` within the `.tar.gz` and readd the block, then it installs correctly.) Looks like I just have to restore the block (and add `*.pyx` to get `scan_perform.pyx`)
maresb(2023-01-03 21:39:25):Just rebased on main. All checks were green.
rlouf(2023-01-06 12:31:42):One question: won't this cause issues when running the tests locally if the user hasn't built the package locally since there won't be any `_version.py` file?
maresb(2023-01-06 15:25:17):The `_version.py` file is generated not only by building but also by installing. So as long as the user runs `pip install [--editable] .` as they should, it should work.

What can however go wrong is that for an `--editable` install, if the version number changes, then you have to rerun `pip install -e .` in order to trigger an update to `_version.py`. Also if you have a clone which is somehow missing some release tags, then the version may also be incorrect. (That happened to me at some point as I described in https://github.com/aesara-devs/aesara/pull/1375#discussion_r1060207816, but unfortunately I don't remember exactly how.)
maresb(2023-01-06 22:08:58):I'm not sure what to think of this:

> Warning: Performance alert! Previous value was 61258.103085955845 and current value is 28070.87678331834. It is 2.182265397650837x worse than previous exceeding a ratio threshold 2
Warning: Performance alert! Previous value was 1.3921410587885548 and current value is 0.6737363168561912. It is 2.066299565510444x worse than previous exceeding a ratio threshold 2
Error: # :warning: **Performance Alert** :warning:

maresb(2023-01-06 22:11:37):Hmm, dependabot did bump the version on the performance tests. I wonder if that has anything to do with it.

On the other hand, the benchmarks succeeded in #1384. Maybe this simply deployed to slow runners.
brandonwillard(2023-01-07 00:13:32):> Hmm, dependabot did bump the version on the performance tests. I wonder if that has anything to do with it.
> 
> On the other hand, the benchmarks succeeded in #1384. Maybe this simply deployed to slow runners.

Looks like it's one of the JAX benchmarks, so it could be due to a number of things (e.g. compilation, test seeding, etc.)  I'll put in a PR to at least guarantee that the test data is the same every time.
maresb(2023-01-09 14:16:53):The benchmarks failed again.

I wonder if the automerge failed to properly await the coverage results and prematurely merged https://github.com/aesara-devs/aesara/pull/1382#issuecomment-1375269170.

Since I believe I know what's wrong, I prepended a commit to this PR to hopefully fix it. @brandonwillard, do you still approve of a rebase (no squash) merge with the extra commit?
maresb(2023-01-09 14:19:09):Is it possible to rerun the "Benchmarks" test without rerunning the whole thing?
maresb(2023-01-10 02:05:25):@brandonwillard, tests were all green before rebase. Are we okay to automerge (rebase) now, given the extra commit I added for fixing coverage?
maresb(2023-01-10 03:28:10):@brandonwillard thanks, now I'm just missing an approving review. (It wouldn't allow me to self-approve this time.)
maresb(2023-02-05 08:53:25):# Addendum

This PR unintentionally dropped support for `git archive`. See https://github.com/aesara-devs/aesara/pull/1405 for a fix. 
brandonwillard(2022-12-20 00:48:57):This is fine if we can somehow guarantee that we won't start seeing https://github.com/aesara-devs/aesara/issues/1221 again; otherwise, we don't want to reintroduce it.
brandonwillard(2022-12-20 00:50:09):```suggestion
        "Unable to find the version number that is generated when either building or "
```
brandonwillard(2022-12-20 00:51:21):```suggestion
```
brandonwillard(2022-12-20 00:51:41):Should this be a `DeprecationWarning` per what follows?
brandonwillard(2022-12-20 00:54:16):Looks like this is missing an entry for an `aesara.scan` module.  That&mdash;plus the removed ignore directive above&mdash;is how we got past https://github.com/aesara-devs/aesara/issues/1221.
brandonwillard(2022-12-20 00:56:57):We need entries for `aesara.version` and the newly added script.
brandonwillard(2022-12-20 00:58:52):I need to understand more about this, because it seems like it could be indicative of a general issue with this approach.
maresb(2022-12-20 16:19:25):Oh yikes, that looks tricky! Thanks for the context. I will need to follow up here to try and understand better what's going on.
maresb(2022-12-20 16:29:12):It cannot be a warning unless I reimplement the aforementioned variables so that execution can proceed. If you think that those variables are part of Aesara's public interface and shouldn't be removed, then I'll try to reimplement them, but I wanted to default to skipping work that might be unnecessary.
brandonwillard(2022-12-20 16:42:22):Either one is fine; I just wasn't sure which it was supposed to be, given that both type/class objects were present.
brandonwillard(2022-12-20 16:44:45):Yeah, I would _really_ like to fix that problem at the source, but it was/is annoyingly elusive.
maresb(2022-12-20 17:12:45):My understanding is that we compute the version by looking through the git history to find the latest matching git tag. The default commands (see the RTD CI logs) download a truncated history. This command runs afterwards to download more. I chose 1000 because it's way more than I think we would ever need, and way smaller than the whole commit history. What Ida at don't understand is why it was no prob w versioneer
maresb(2022-12-20 22:26:51):Great! Sorry for the confusion; having `DeprecationWarning` there was purely an error on my part.
maresb(2022-12-20 22:54:38):TODO: Why didn't the `setup.cfg` → `pyproject.toml` tool convert the `warn_unused_ignores = false` lines?
maresb(2022-12-20 22:54:55):Added
maresb(2022-12-20 22:56:14):Working around this by adding `warn_unused_ignores = false` as below and reverting the removal of `#type: ignore`, but I'll still take a stab at understanding what's really going on.
maresb(2022-12-20 22:58:11):(Actually this should be done in #1371.)
brandonwillard(2022-12-30 17:53:11):This looks neat!
maresb(2022-12-30 19:04:21):Great, then let's keep this in favor of the Python script-based approach. (Will squash the commit which introduces this.)
maresb(2022-12-30 19:07:03):Unfortunately I haven't gotten a chance to look into this yet. The issue no longer creeps up here since readding `warn_unused_ignores = false` in #1376. Is this blocking the merge?
maresb(2022-12-30 19:10:51):Are you still concerned about this? I think `--depth 1000` is better than `--unshallow` (i.e. depth=\infty) due to bandwidth/CI time considerations, and 1000 is way more than we could conceivably need.
maresb(2022-12-30 19:16:44):Squashed. What do you think about the dev builds being called `aesara-nightly` while being built on merge-to-main?
brandonwillard(2022-12-31 21:05:13):That sounds good.
brandonwillard(2022-12-31 21:06:18):No, that's not a real concern.
maresb(2023-01-02 23:08:59):I have a vague suspicion about what might be going on here...

In case I'm working from a fork, then it's possible that my fork might not have all the tags. (Git is sometimes a bit weird about synchronizing tags, although mainly in the push direction.) Then `setuptools_scm` may not have the info to compute the version.

Typing this out, it doesn't make much sense, but at some point during testing I somehow ended up installing a very "old" version of aesara simply because the tags were old. I don't have any actionable ideas, this is just something to think about.
maresb(2022-12-29 18:49:31):Along these lines, how much longer do you plan to support Python 3.7? Support in other libraries is beginning to be phased out. It would be nice to be able to bump `requires-python` to 3.8.
brandonwillard(2022-12-29 18:50:08):I added a few more minor fixes that should help the Sphinx documentation generation process.
brandonwillard(2022-12-29 18:51:09):> Along these lines, how much longer do you plan to support Python 3.7? Support in other libraries is beginning to be phased out. It would be nice to be able to bump `requires-python` to 3.8.

I'm fine with that change.  We might want to bundle it with the next big release, though.
maresb(2022-12-29 18:56:22):Just saw that a test for #4324 failed with a nonsensical error from setup-python, so hopefully this will help.

https://github.com/aesara-devs/aesara/actions/runs/3796153938/jobs/6455995636
codecov[bot](2022-12-29 20:32:34):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1376?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1376](https://codecov.io/gh/aesara-devs/aesara/pull/1376?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (4108323) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/f874925fecabd50a751d82c6d8a9aad41ce1acbe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (f874925) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1376/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1376?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1376   +/-   ##
=======================================
  Coverage   74.68%   74.69%           
=======================================
  Files         195      195           
  Lines       49744    49748    +4     
  Branches    10529    10529           
=======================================
+ Hits        37153    37157    +4     
  Misses      10266    10266           
  Partials     2325     2325           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1376?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1376/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.39% <100.00%> (-0.02%)` | :arrow_down: |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/1376/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `87.82% <100.00%> (+0.13%)` | :arrow_up: |

</details>
maresb(2022-12-29 21:26:20):Looks ready to merge
maresb(2022-12-29 21:27:20):Perhaps we should configure one/some of those actions which automatically opens PRs to update these things.
brandonwillard(2022-12-30 01:31:28):> Perhaps we should configure one/some of those actions which automatically opens PRs to update these things.

That would be cool!
codecov[bot](2022-12-29 23:24:20):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1377?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1377](https://codecov.io/gh/aesara-devs/aesara/pull/1377?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (0fcc6a4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0b6b8df34bd457d332406ec6153251c92e2c6ec5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (0b6b8df) will **not change** coverage.
> The diff coverage is `n/a`.

> :exclamation: Current head 0fcc6a4 differs from pull request most recent head 9dc5e64. Consider uploading reports for the commit 9dc5e64 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1377/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1377?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1377   +/-   ##
=======================================
  Coverage   74.69%   74.69%           
=======================================
  Files         195      195           
  Lines       49748    49748           
  Branches    10529    10529           
=======================================
  Hits        37157    37157           
  Misses      10266    10266           
  Partials     2325     2325           
```



</details>
maresb(2023-01-02 23:18:00):The account doesn't exist yet:

```yaml
committer_username: 'Aesara Bot'
committer_email: 'aesarabot@users.noreply.github.com'
```
maresb(2023-01-05 23:39:51):#1386 seems like a better approach
brandonwillard(2022-12-30 17:17:42):We should make this something more generic (e.g. an Aesara user), if we can.
maresb(2023-01-02 23:13:27):For security we'd probably want to create a [machine account](https://docs.github.com/en/site-policy/github-terms/github-terms-of-service#3-account-requirements).

> You must be a human to create an Account. Accounts registered by "bots" or other automated methods are not permitted. We do permit machine accounts:
> A machine account is an Account set up by an individual human who accepts the Terms on behalf of the Account, provides a valid email address, and is responsible for its actions. A machine account is used exclusively for performing automated tasks. Multiple users may direct the actions of a machine account, but the owner of the Account is ultimately responsible for the machine's actions. You may maintain no more than one free machine account in addition to your free Personal Account.
brandonwillard(2023-01-03 21:48:28):It sounds like we should be able to use the `aesara.devs@gmail.com` email.
maresb(2023-01-03 21:50:07):Unless you want it to be no-reply?
brandonwillard(2023-01-03 22:11:25):You can use `aesara-machine-user` (and `aesara-machine-user@users.noreply.github.com`) now.
maresb(2023-01-03 22:15:23):Done!
codecov[bot](2022-12-29 23:38:04):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1378?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1378](https://codecov.io/gh/aesara-devs/aesara/pull/1378?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (13c4419) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0f8d849b31e431ad8a4896bfe2fc543078870144?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (0f8d849) will **not change** coverage.
> The diff coverage is `n/a`.

> :exclamation: Current head 13c4419 differs from pull request most recent head 6c25532. Consider uploading reports for the commit 6c25532 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1378/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1378?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1378   +/-   ##
=======================================
  Coverage   74.69%   74.69%           
=======================================
  Files         195      195           
  Lines       49748    49748           
  Branches    10529    10529           
=======================================
  Hits        37157    37157           
  Misses      10266    10266           
  Partials     2325     2325           
```



</details>
maresb(2023-01-03 21:41:44):Rebased on main (all checks were green)
maresb(2023-01-06 12:37:47):An alternative would be to install the [pre-commit app](https://github.com/marketplace/pre-commit-ci).

I feel somewhat reluctant about apps due to the lack of transparency. The app would probably give a better "experience" whatever that means. In contrast, this action is simple and transparent: just a few lines of YAML upstream.

I'm happy either way; it's nice to have the functionality.
codecov[bot](2022-12-31 13:20:59):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1380?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1380](https://codecov.io/gh/aesara-devs/aesara/pull/1380?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (5d798c0) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/baa6b7fa3f5ba53359bf1180260b0afb6b924287?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (baa6b7f) will **not change** coverage.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1380/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1380?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1380   +/-   ##
=======================================
  Coverage   74.69%   74.69%           
=======================================
  Files         195      195           
  Lines       49748    49748           
  Branches    10529    10529           
=======================================
  Hits        37157    37157           
  Misses      10266    10266           
  Partials     2325     2325           
```



</details>
codecov[bot](2023-01-02 23:58:38):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1382?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1382](https://codecov.io/gh/aesara-devs/aesara/pull/1382?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (4b9b10d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0f8d849b31e431ad8a4896bfe2fc543078870144?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (0f8d849) will **decrease** coverage by `0.09%`.
> The diff coverage is `0.00%`.

> :exclamation: Current head 4b9b10d differs from pull request most recent head 4777151. Consider uploading reports for the commit 4777151 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1382/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1382?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1382      +/-   ##
==========================================
- Coverage   74.69%   74.59%   -0.10%     
==========================================
  Files         195      196       +1     
  Lines       49748    49813      +65     
  Branches    10529    10547      +18     
==========================================
  Hits        37157    37157              
- Misses      10266    10331      +65     
  Partials     2325     2325              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1382?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/bin/aesara\_cache.py](https://codecov.io/gh/aesara-devs/aesara/pull/1382?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2Jpbi9hZXNhcmFfY2FjaGUucHk=) | `0.00% <0.00%> (ø)` | |

</details>
maresb(2023-01-03 00:01:36):Maybe there should be test coverage for `aesara-cache`?
brandonwillard(2023-01-03 21:36:53):> Maybe there should be test coverage for `aesara-cache`?

Yeah, we (and Theano) badly need that.
maresb(2023-01-03 21:43:13):> and Theano

I thought Aesara officially took over Theano.
brandonwillard(2023-01-03 21:49:49):> > and Theano
> 
> I thought Aesara officially took over Theano.

Yes; I'm just saying that I don't recall inheriting such tests from Theano.
maresb(2023-01-09 08:38:08):Oh, nice! I'm glad it merged.

Do you understand what went wrong earlier with the coverage check? (It was failing on `aesara_cache.py` even after I had added it to the `omit` list.)
maresb(2023-01-09 08:56:30):Oh, probably I should have added it to `[tool.coverage.run]` instead of `[tool.coverage.report]`...
codecov[bot](2023-01-03 00:00:54):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1383?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1383](https://codecov.io/gh/aesara-devs/aesara/pull/1383?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (6da16f4) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/0b6b8df34bd457d332406ec6153251c92e2c6ec5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (0b6b8df) will **not change** coverage.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1383/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1383?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1383   +/-   ##
=======================================
  Coverage   74.69%   74.69%           
=======================================
  Files         195      195           
  Lines       49748    49748           
  Branches    10529    10529           
=======================================
  Hits        37157    37157           
  Misses      10266    10266           
  Partials     2325     2325           
```



</details>
codecov[bot](2023-01-03 01:06:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1384?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1384](https://codecov.io/gh/aesara-devs/aesara/pull/1384?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (cce4fa5) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/d789a5f1b4e36fc675adcb7c8eda8fc203314183?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (d789a5f) will **decrease** coverage by `0.02%`.
> The diff coverage is `n/a`.

> :exclamation: Current head cce4fa5 differs from pull request most recent head 051652b. Consider uploading reports for the commit 051652b to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1384/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1384?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1384      +/-   ##
==========================================
- Coverage   74.71%   74.69%   -0.02%     
==========================================
  Files         194      194              
  Lines       49826    49730      -96     
  Branches    10539    10527      -12     
==========================================
- Hits        37226    37145      -81     
+ Misses      10272    10262      -10     
+ Partials     2328     2323       -5     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1384?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/special.py](https://codecov.io/gh/aesara-devs/aesara/pull/1384?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9zcGVjaWFsLnB5) | `90.64% <0.00%> (-0.27%)` | :arrow_down: |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1384?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.39% <0.00%> (-0.04%)` | :arrow_down: |
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/1384?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <0.00%> (ø)` | |
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1384?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `85.29% <0.00%> (+0.29%)` | :arrow_up: |

</details>
maresb(2023-01-03 10:56:09):Ok, I think I got it!!! Excludes are now determined by the root `/.gitignore` union additional excludes from `pyproject.toml`. The last few missing files were caused by a few `/.gitignore` rules that were too broad.

Unlike my previous PRs, once #1371 is merged I want to do a "squash and merge" here, so I'm not curating my individual commits.
maresb(2023-01-03 21:46:01):Rebased on latest changes. All tests were green.
maresb(2023-01-06 00:31:47):I made another review pass since I hadn't yet checked the wheel. The `bin/` directory was missing from the wheel, so I reincluded it. I'm feeling fairly confident now that I've done due diligence here.
maresb(2023-01-06 22:07:28):[deleted, wrong PR]
maresb(2023-01-10 07:49:51):Still open question: Is there any reason for docs/ to be included in the sdist? It's not in the wheel, and it takes up significant space.
brandonwillard(2023-01-10 08:09:09):> Still open question: Is there any reason for docs/ to be included in the sdist? It's not in the wheel, and it takes up significant space.

Good question; I'm not aware of one at the moment, so we can probably remove it.
maresb(2023-01-17 12:01:13):> > Still open question: Is there any reason for docs/ to be included in the sdist? It's not in the wheel, and it takes up significant space.
> 
> Good question; I'm not aware of one at the moment, so we can probably remove it.

Great, let's do it in the next PR though. (One thing at a time.)
maresb(2023-01-31 09:05:55):Thanks for the approval!

Interesting... if I update the branch with a rebase (via the GH interface), then it discards your approving review. But with a merge update, it retains your approval. (Since I ultimately want to squash-and-merge, the Git history will remain linear.)
maresb(2023-02-05 08:55:24):# Addendum

This PR broke nightly builds because it didn't adapt the key names for hatch-vcs. See #1406 for the issue and #1407 for the fix.
codecov[bot](2023-01-06 08:30:00):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1387?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1387](https://codecov.io/gh/aesara-devs/aesara/pull/1387?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (70fe5e6) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/30ceb98bd0526465dab2048e0dcd80e89a63036e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (30ceb98) will **not change** coverage.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1387/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1387?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1387   +/-   ##
=======================================
  Coverage   74.69%   74.69%           
=======================================
  Files         195      195           
  Lines       49748    49748           
  Branches    10529    10529           
=======================================
  Hits        37157    37157           
  Misses      10266    10266           
  Partials     2325     2325           
```



</details>
codecov[bot](2023-01-06 08:36:07):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1388?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1388](https://codecov.io/gh/aesara-devs/aesara/pull/1388?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (822a131) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/b6a780bcedc34c8ce3c0883d98f092a93892c3ac?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (b6a780b) will **not change** coverage.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1388/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1388?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1388   +/-   ##
=======================================
  Coverage   74.69%   74.69%           
=======================================
  Files         195      195           
  Lines       49748    49748           
  Branches    10529    10529           
=======================================
  Hits        37157    37157           
  Misses      10266    10266           
  Partials     2325     2325           
```



</details>
codecov[bot](2023-01-06 08:59:58):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1389?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1389](https://codecov.io/gh/aesara-devs/aesara/pull/1389?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (5d5cb25) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/edc1788a025bc5ae59a6954df8df0b8bfc9a1a90?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (edc1788) will **not change** coverage.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1389/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1389?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1389   +/-   ##
=======================================
  Coverage   74.69%   74.69%           
=======================================
  Files         195      195           
  Lines       49748    49748           
  Branches    10529    10529           
=======================================
  Hits        37157    37157           
  Misses      10266    10266           
  Partials     2325     2325           
```



</details>
maresb(2023-01-06 18:59:06):I would like to [use automerge](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request) but I just see a greyed out "Rebase and merge" button. Maybe I don't have permissions?
brandonwillard(2023-01-06 21:54:24):> I would like to [use automerge](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request) but I just see a greyed out "Rebase and merge" button. Maybe I don't have permissions?

We can do that, but I would first like to look into/understand how we can decide exactly when it gets used.  I'll need a minute to read the docs.
maresb(2023-01-06 22:05:15):The case I have in mind is when a PR has been approved, but we have to let the checks finish. That way I don't have to remember to merge it later on.
brandonwillard(2023-01-07 00:03:35):> The case I have in mind is when a PR has been approved, but we have to let the checks finish. That way I don't have to remember to merge it later on.

Yeah, that case is good.
brandonwillard(2023-01-07 00:07:56):OK, it's enabled.
maresb(2023-01-06 18:42:35):I changed my mind. Given that these are bumped individually and that we have to wait for the tests to pass, I think it's easier on a daily schedule.
codecov[bot](2023-01-07 01:34:36):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1391?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1391](https://codecov.io/gh/aesara-devs/aesara/pull/1391?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (0df0b08) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/d84cc42c5ffb972b2036104064960759f1bed61c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (d84cc42) will **not change** coverage.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1391/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1391?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1391   +/-   ##
=======================================
  Coverage   74.69%   74.69%           
=======================================
  Files         195      195           
  Lines       49748    49748           
  Branches    10529    10529           
=======================================
  Hits        37157    37157           
  Misses      10266    10266           
  Partials     2325     2325           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1391?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/sparse/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1391?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `82.53% <100.00%> (ø)` | |

</details>
maresb(2023-01-09 14:09:30):Is the seed expected to significantly affect running times? In other words, is the path of execution (significantly) dependent on the seed, e.g. with stopping criteria?
brandonwillard(2023-01-09 16:44:36):> Is the seed expected to significantly affect running times? In other words, is the path of execution (significantly) dependent on the seed, e.g. with stopping criteria?

Yes, the generated matrices should affect the performance.
codecov[bot](2023-01-09 04:33:15):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1392?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1392](https://codecov.io/gh/aesara-devs/aesara/pull/1392?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (81fab67) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/65ce38559c7f8a922fc0a4c1c44ebb4ef7e29ae0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (65ce385) will **not change** coverage.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1392/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1392?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1392   +/-   ##
=======================================
  Coverage   74.69%   74.69%           
=======================================
  Files         195      195           
  Lines       49748    49748           
  Branches    10529    10529           
=======================================
  Hits        37157    37157           
  Misses      10266    10266           
  Partials     2325     2325           
```



</details>
codecov[bot](2023-01-18 20:28:14):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1398?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1398](https://codecov.io/gh/aesara-devs/aesara/pull/1398?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (1c24a2c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e71bd7824c421f2292f841855fea916ef509d815?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (e71bd78) will **not change** coverage.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1398/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1398?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1398   +/-   ##
=======================================
  Coverage   74.69%   74.69%           
=======================================
  Files         194      194           
  Lines       49730    49730           
  Branches    10527    10527           
=======================================
  Hits        37145    37145           
  Misses      10262    10262           
  Partials     2323     2323           
```



</details>
brandonwillard(2023-01-18 20:55:46):Looks like we need to merge this sooner than later in order to unblock other PRs.
maresb(2023-01-19 00:15:45):Indeed, thanks for taking care of this. I didn't realize that the other PRs were blocked.
brandonwillard(2023-01-19 00:16:24):> Indeed, thanks for taking care of this. I didn't realize that the other PRs were blocked.

Oh, no problem; I just noticed it today.
Smit-create(2023-01-21 06:21:32):I'm unable to test the changes locally because of some lock issues in macOS. If I run the following command:
```console
% pytest -v tests/tensor/test_math.py::test_log1mexp_grad_lim
```

<details>
<summary> Timeout Error </summary>
<p>

```console
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <filelock._unix.UnixFileLock object at 0x1368913c0>, timeout = 120
poll_interval = 0.05

    def acquire(
        self,
        timeout: float | None = None,
        poll_interval: float = 0.05,
        *,
        poll_intervall: float | None = None,
        blocking: bool = True,
    ) -> AcquireReturnProxy:
        """
        Try to acquire the file lock.
    
        :param timeout: maximum wait time for acquiring the lock, ``None`` means use the default :attr:`~timeout` is and
         if ``timeout < 0``, there is no timeout and this method will block until the lock could be acquired
        :param poll_interval: interval of trying to acquire the lock file
        :param poll_intervall: deprecated, kept for backwards compatibility, use ``poll_interval`` instead
        :param blocking: defaults to True. If False, function will return immediately if it cannot obtain a lock on the
         first attempt. Otherwise this method will block until the timeout expires or the lock is acquired.
        :raises Timeout: if fails to acquire lock within the timeout period
        :return: a context object that will unlock the file when the context is exited
    
        .. code-block:: python
    
            # You can use this method in the context manager (recommended)
            with lock.acquire():
                pass
    
            # Or use an equivalent try-finally construct:
            lock.acquire()
            try:
                pass
            finally:
                lock.release()
    
        .. versionchanged:: 2.0.0
    
            This method returns now a *proxy* object instead of *self*,
            so that it can be used in a with statement without side effects.
    
        """
        # Use the default timeout, if no timeout is provided.
        if timeout is None:
            timeout = self.timeout
    
        if poll_intervall is not None:
            msg = "use poll_interval instead of poll_intervall"
            warnings.warn(msg, DeprecationWarning, stacklevel=2)
            poll_interval = poll_intervall
    
        # Increment the number right at the beginning. We can still undo it, if something fails.
        with self._thread_lock:
            self._lock_counter += 1
    
        lock_id = id(self)
        lock_filename = self._lock_file
        start_time = time.monotonic()
        try:
            while True:
                with self._thread_lock:
                    if not self.is_locked:
                        _LOGGER.debug("Attempting to acquire lock %s on %s", lock_id, lock_filename)
                        self._acquire()
    
                if self.is_locked:
                    _LOGGER.debug("Lock %s acquired on %s", lock_id, lock_filename)
                    break
                elif blocking is False:
                    _LOGGER.debug("Failed to immediately acquire lock %s on %s", lock_id, lock_filename)
                    raise Timeout(self._lock_file)
                elif 0 <= timeout < time.monotonic() - start_time:
                    _LOGGER.debug("Timeout on acquiring lock %s on %s", lock_id, lock_filename)
>                   raise Timeout(self._lock_file)
E                   filelock._error.Timeout: The file lock 'The file lock '/Users/thebigbool/.aesara/compiledir_macOS-13.0-x86_64-i386-64bit-i386-3.10.8-64/.lock' could not be acquired.
E                   Apply node that caused the error: Elemwise{Composite{Switch(IsInf(Composite{(i0 / expm1((-i1)))}(i0, i1)), i2, Composite{(i0 / expm1((-i1)))}(i0, i1))}}(TensorConstant{-1.0}, x, TensorConstant{-inf})
E                   Toposort index: 0
E                   Inputs types: [TensorType(float64, ()), TensorType(float64, ()), TensorType(float32, ())]
E                   
E                   HINT: Use a linker other than the C linker to print the inputs' shapes and strides.
E                   HINT: Re-running with most Aesara optimizations disabled could provide a back-trace showing when this node was created. This can be done by setting the Aesara flag 'optimizer=fast_compile'. If that does not work, Aesara optimizations can be disabled with 'optimizer=None'.
E                   HINT: Use the Aesara flag `exception_verbosity=high` for a debug print-out and storage map footprint of this Apply node.' could not be acquired.

../../opt/anaconda3/envs/aesara-dev/lib/python3.10/site-packages/filelock/_api.py:183: Timeout
============================= slowest 50 durations =============================
120.03s call     tests/tensor/test_math.py::test_log1mexp_grad_lim

(2 durations < 0.005s hidden.  Use -vv to show these durations.)
=========================== short test summary info ============================
FAILED tests/tensor/test_math.py::test_log1mexp_grad_lim - filelock._error.Timeout: The file lock 'The file lock '/Users/thebigbool/.a...
======================== 1 failed in 140.14s (0:02:20) =========================
```

</p>
</details>
Smit-create(2023-01-24 04:14:25):Seems like some OS issue as the tests already run on CI. Any pointers on this @brandonwillard?
brandonwillard(2023-01-25 01:01:21):> Seems like some OS issue as the tests already run on CI. Any pointers on this @brandonwillard?

I would first check that `~/.aesara`&mdash;or wherever your Aesara cache directory (i.e. `base_compiledir`) is located&mdash;isn't pointing to a remote directory or something similar that could trip up `filelock`.

Does this happen literally every time something is compiled in Aesara, or only when that particular test is run?
Smit-create(2023-01-25 10:48:00):> Does this happen literally every time something is compiled in Aesara, or only when that particular test is run?

This happens to me whenever I try to run the tests.
brandonwillard(2023-01-26 04:10:02):> > Does this happen literally every time something is compiled in Aesara, or only when that particular test is run?
> 
> This happens to me whenever I try to run the tests.

Very interesting!  Don't fix anything just yet; I would like to get on a call first and check it out.  If it's an Aesara bug, this would be a great opportunity to squash it.

In the meantime, you can always test things using the Python backend by setting the Aesara `cxx` setting to an empty string.
codecov[bot](2023-01-26 05:11:31):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1399?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1399](https://codecov.io/gh/aesara-devs/aesara/pull/1399?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (8cbed4d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/b64cb852f002e799ceca8081fb41bd4195c39221?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (b64cb85) will **increase** coverage by `0.00%`.
> The diff coverage is `80.95%`.

> :exclamation: Current head 8cbed4d differs from pull request most recent head 5fbbc8a. Consider uploading reports for the commit 5fbbc8a to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1399/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1399?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1399   +/-   ##
=======================================
  Coverage   74.69%   74.69%           
=======================================
  Files         194      194           
  Lines       49730    49751   +21     
  Branches    10527    10532    +5     
=======================================
+ Hits        37145    37162   +17     
- Misses      10262    10264    +2     
- Partials     2323     2325    +2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1399?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/rewriting/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1399?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvbWF0aC5weQ==) | `85.95% <80.95%> (-0.07%)` | :arrow_down: |

</details>
brandonwillard(2023-01-30 19:32:36):> > > Does this happen literally every time something is compiled in Aesara, or only when that particular test is run?
> > 
> > 
> > This happens to me whenever I try to run the tests.
> 
> Very interesting! Don't fix anything just yet; I would like to get on a call first and check it out. If it's an Aesara bug, this would be a great opportunity to squash it.
> 
> In the meantime, you can always test things using the Python backend by setting the Aesara `cxx` setting to an empty string.

This was solved by re-constructing the environment using the `environment-arm.yml` discussed in https://github.com/aesara-devs/aesara/issues/909.
rlouf(2023-01-31 15:44:45):Looks good, merging!
brandonwillard(2023-01-25 01:49:40):I think the reason that this is failing in CI is that some test runs use a "fast compilation" mode that performs fewer rewrite passes.  The rewrite you added is registered under the "specialize" passes, which are probably not being performed in those cases.

You can manually set the mode in the call to `function`.  Something like the following might suffice:
```python
mode = get_default_mode().including("log_diff_exp")
f = function(..., mode=mode)
```
brandonwillard(2023-01-25 02:03:34):`Elemwise` `Op`s are very common in a graph, so we don't want to run this code on _all_ of those nodes&mdash;only the ones that use the `log` `Op`.  If you change this to something like `@node_rewriter([log])`, the rewrite could be more efficient when applied to a large graph with many different `Elemwise`s, because a hash lookup can be used instead of all the `isinstance` conditions in `log_diff_exp`.  (Some of the other rewrites in that file likely need to be refactored to account for this as well, but we can address that later.)

The only requirement/assumption here is that `log` (i.e. the `Elemwise` instance created in `aesara.tensor.math`) is effectively a singleton-like instance of `Elemwise` with the scalar `Log` `Op`, and it should be.  (N.B. It's possible for one to create another such instance, but Aesara shouldn't do it.)
brandonwillard(2023-01-25 02:04:55):```suggestion
```

These checks against the `tracks` objects (i.e. `[Elemwise]`) are now automatic in the objects constructed by `node_rewriter`.  Again, we still need to update the old rewrites to reflect this at some point.
brandonwillard(2023-01-25 02:07:13):```suggestion
    r"""Rewrite that changes ``log(exp(a) - exp(b))`` to ``a + log1mexp(b - a)``."""
```
Smit-create(2023-01-25 10:48:48):Thanks, understood!
Smit-create(2023-01-25 10:49:10):Yeah, makes sense. Thanks!
vrii14(2023-01-26 11:54:00):I have raised this PR for issue #1401. Kindly review
rlouf(2023-01-26 12:28:46):Thank you!
brandonwillard(2023-02-05 00:14:15):~I'm not very familiar with this feature.  How would people use it with Aesara?~. Nevermind; I see now.
maresb(2023-02-05 02:05:32):Thanks a lot for pointing this out! Looks like I missed this when I switched over to setuptools_scm. Tentatively it looks good, but I am currently AFK but will try and take a closer look within a day or so. (Feel free to ping me.)
brandonwillard(2023-02-05 02:24:03):@carlsmedstad, many thanks!
maresb(2023-02-05 08:14:39):@carlsmedstad, for both my own understanding, and for testing, would you be willing to explain more about your particular use case?

When transitioning to setuptools_scm, I was focused on the PyPI-published sdist. In that case, the version is exported both in the metadata (`PKG_INFO`) and in `aesara/_version.py`. Do you have some sort of custom `git archive` workflow? Or are you using the GitHub-published archive associated with the release? In these cases I see that indeed no version info was being exported, and now that we have this PR, we should probably be testing for this.

Thanks again for bringing this to our attention!
carlsmedstad(2023-02-05 11:39:40):Your're welcome!

I maintain a few packages in the Arch User Repository (AUR) [one of which is for Aesara](https://aur.archlinux.org/packages/python-aesara). My preferred packaging workflow is to use the git archive from a GitHub/GitLab release as the source. The main reasons for this is that:

* This source is language agnostic. I maintain software built in Python, Go, C, etc. and would like to reuse as much as possible between packages.
* This works well with _Watch_ -> _Custom_ -> _Releases_ notifications. When I get an email about a new release I know the source for the new version is available.

Hopefully that explains my use case and my reasons for it :)
maresb(2023-02-05 11:50:58):That makes a lot of sense. Thank you for the explanation, and also thanks for repackaging Aesara!

I'll make sure to add a test around the git archive, and please do reach out again in case you run into any further issues or have other suggestions.
codecov[bot](2023-02-05 09:53:27):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1407?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1407](https://codecov.io/gh/aesara-devs/aesara/pull/1407?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (8b792d1) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/e5184630a488eb7f0dcb42eca115821caf5c1b9c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (e518463) will **not change** coverage.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1407/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1407?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1407   +/-   ##
=======================================
  Coverage   74.71%   74.71%           
=======================================
  Files         194      194           
  Lines       49847    49847           
  Branches    10544    10544           
=======================================
  Hits        37243    37243           
  Misses      10274    10274           
  Partials     2330     2330           
```



</details>
maresb(2023-02-05 09:10:46):In the spirit of changing no more than one thing at a time, I don't see any rush on merging this. We may want to wait until after the Hatch stuff is already released and shown to be stable.
maresb(2023-02-05 09:36:25):Strange, this is failing with

```
OSError: License file does not exist: LICENSE.txt
```

This doesn't make any sense to me yet, and it builds for me locally. I wonder if this could be related in some way to https://github.com/aesara-devs/aesara/issues/1409?

I'm out of time right now, so I'll have to come back to this if someone else doesn't get it first.
dgerlanc(2023-02-18 00:23:32):> Strange, this is failing with
> 
> ```
> OSError: License file does not exist: LICENSE.txt
> ```
> 
> This doesn't make any sense to me yet, and it builds for me locally. I wonder if this could be related in some way to #1409?
> 
> I'm out of time right now, so I'll have to come back to this if someone else doesn't get it first.

`LICENSE.txt` seems to be a symbolic link to `docs/LICENSE.txt`, which I'm guessing is the issue.

maresb(2023-02-18 10:55:57):Thanks @dgerlanc for solving the mystery!

I think it's fairly standard these days to just have `LICENSE.txt` in the project root, and I suspect that `doc/LICENSE.txt` may be some legacy artifact. Let's see if deleting it breaks anything.
brandonwillard(2023-02-19 01:04:32):Thanks as always, @maresb!
maresb(2023-02-19 11:17:55):Thanks for the merge! Results are looking good:
![image](https://user-images.githubusercontent.com/15216687/219944578-735ec4f7-5b08-4d2d-8452-94a445ec0252.png)
![image](https://user-images.githubusercontent.com/15216687/219944587-2f10c6f0-85cb-48cc-8b08-1617aa397d5e.png)

brandonwillard(2023-02-19 14:32:03):> Thanks for the merge! Results are looking good: ![image](https://user-images.githubusercontent.com/15216687/219944578-735ec4f7-5b08-4d2d-8452-94a445ec0252.png) ![image](https://user-images.githubusercontent.com/15216687/219944587-2f10c6f0-85cb-48cc-8b08-1617aa397d5e.png)

Wow, much better!
codecov[bot](2023-02-07 00:35:38):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1412?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1412](https://codecov.io/gh/aesara-devs/aesara/pull/1412?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (d0535e1) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/b64cb852f002e799ceca8081fb41bd4195c39221?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (b64cb85) will **increase** coverage by `0.03%`.
> The diff coverage is `86.42%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1412/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1412      +/-   ##
==========================================
+ Coverage   74.69%   74.72%   +0.03%     
==========================================
  Files         194      194              
  Lines       49730    49866     +136     
  Branches    10527    10549      +22     
==========================================
+ Hits        37145    37262     +117     
- Misses      10262    10274      +12     
- Partials     2323     2330       +7     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/rewriting/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvbWF0aC5weQ==) | `85.95% <80.95%> (-0.07%)` | :arrow_down: |
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `85.00% <82.55%> (-0.30%)` | :arrow_down: |
| [aesara/printing.py](https://codecov.io/gh/aesara-devs/aesara/pull/1412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3ByaW50aW5nLnB5) | `51.48% <100.00%> (+1.07%)` | :arrow_up: |
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/1412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.42% <100.00%> (+0.03%)` | :arrow_up: |
| [aesara/tensor/special.py](https://codecov.io/gh/aesara-devs/aesara/pull/1412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9zcGVjaWFsLnB5) | `90.90% <100.00%> (+0.26%)` | :arrow_up: |

</details>
codecov[bot](2023-02-10 09:38:38):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1413?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1413](https://codecov.io/gh/aesara-devs/aesara/pull/1413?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (95849b0) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2f9a9e64ff3923de693bfc5e6624f0c6e494d582?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (2f9a9e6) will **decrease** coverage by `0.01%`.
> The diff coverage is `n/a`.

> :exclamation: Current head 95849b0 differs from pull request most recent head ea6accc. Consider uploading reports for the commit ea6accc to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1413/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1413      +/-   ##
==========================================
- Coverage   74.72%   74.72%   -0.01%     
==========================================
  Files         194      194              
  Lines       49877    49866      -11     
  Branches    10549    10549              
==========================================
- Hits        37273    37262      -11     
  Misses      10274    10274              
  Partials     2330     2330              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci90eXBlLnB5) | `90.95% <ø> (ø)` | |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/1413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `87.82% <ø> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.02% <0.00%> (-0.02%)` | :arrow_down: |
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `99.03% <0.00%> (-0.02%)` | :arrow_down: |
| [aesara/tensor/rewriting/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvbWF0aC5weQ==) | `85.95% <0.00%> (ø)` | |

</details>
dgerlanc(2023-02-18 00:21:15):I'd vote "no" on d3viz.

Where is the multicore stuff?
rlouf(2023-02-18 05:42:15):Yeah I don't think we want to maintain the D3 viz module at all. The multi core stuff was just two paragraphs with not much information in it, I ended up removing it.
rlouf(2023-02-07 21:59:27):Thank you for contributing! I think we'll need to alias `true_div` to not break the code that currently relies on this, and add a deprecation warning.
sudarsan2k5(2023-02-08 19:43:27):Hi @rlouf I have added an alias for `true_division` but could you please guide me how to set deprecation warning for an alias? I know how to do with Function but not sure for an alias/variable.
rlouf(2023-02-08 20:18:29):The alias is a function, and you can add it to the `DEPRECATED_NAMES` list at the end of the module.

PS: it's only a small change to add the `at.divide` alias for the new `at.true_divide` so we should add it here as well.
sudarsan2k5(2023-02-09 17:57:30):Hi @rlouf, as you suggested, I have created an alias `divide` to `true_divide` and deprecated `true_div`.

Could you please check that I did everything correctly because there is no deprecation warning while importing it?

Is there anything else we need to do for `true_div` in this PR? Also, I'm not sure how to fix the failed cases; please advise.

Is it also necessary to rename the class `TrueDiv` to `TrueDivide`?
codecov[bot](2023-02-13 19:18:36):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1414?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1414](https://codecov.io/gh/aesara-devs/aesara/pull/1414?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (1354dab) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/a5008d1789ea30e4733ed0910bc875087fe1788f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (a5008d1) will **increase** coverage by `0.00%`.
> The diff coverage is `80.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1414/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1414?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1414   +/-   ##
=======================================
  Coverage   74.72%   74.72%           
=======================================
  Files         194      194           
  Lines       49866    49868    +2     
  Branches    10549    10549           
=======================================
+ Hits        37262    37264    +2     
  Misses      10274    10274           
  Partials     2330     2330           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1414?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1414?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.07% <ø> (ø)` | |
| [aesara/tensor/nnet/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1414?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Jhc2ljLnB5) | `32.69% <33.33%> (ø)` | |
| [aesara/tensor/nnet/batchnorm.py](https://codecov.io/gh/aesara-devs/aesara/pull/1414?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9ubmV0L2JhdGNobm9ybS5weQ==) | `15.38% <50.00%> (ø)` | |
| [aesara/tensor/rewriting/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1414?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvbWF0aC5weQ==) | `85.95% <76.19%> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1414?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.04% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/scalar/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1414?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9tYXRoLnB5) | `85.00% <100.00%> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1414?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.42% <100.00%> (ø)` | |
| [aesara/tensor/rewriting/special.py](https://codecov.io/gh/aesara-devs/aesara/pull/1414?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvc3BlY2lhbC5weQ==) | `77.77% <100.00%> (ø)` | |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/1414?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `87.82% <100.00%> (ø)` | |

</details>
brandonwillard(2023-02-13 19:20:22):Thanks @sudarsan2k5!
brandonwillard(2023-02-10 05:33:46):```suggestion
        true_divide,
```
brandonwillard(2023-02-10 05:36:02):Is `__truedivide__` an actual Python dunder method?
sudarsan2k5(2023-02-13 17:19:19):Yes, I checked again and found [`__truediv__`](https://docs.python.org/3/library/operator.html#operator.__truediv__) is a python operator so I have a correct this, Thanks for correcting me.
brandonwillard(2023-02-13 19:03:53):Ha, I like that spell check on my phone changed "dunder" to "Dundee"!
brandonwillard(2023-02-13 19:06:16):Seems like we need some kind of meme GIF for [this situation](https://www.youtube.com/watch?v=01NHcTM5IA4&t=2s).
sudarsan2k5(2023-02-13 19:13:37):ha ha ha 🤣
codecov[bot](2023-02-13 20:34:11):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1432](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (711b8c6) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c4330719564496f182cc7f8471c03512e76735f3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (c433071) will **decrease** coverage by `0.01%`.
> The diff coverage is `87.50%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1432/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1432      +/-   ##
==========================================
- Coverage   74.86%   74.86%   -0.01%     
==========================================
  Files         194      194              
  Lines       50107    50105       -2     
  Branches    12098    12098              
==========================================
- Hits        37514    37512       -2     
  Misses      10266    10266              
  Partials     2327     2327              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/profiling.py](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `74.55% <ø> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `89.99% <ø> (ø)` | |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.07% <ø> (ø)` | |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `87.82% <50.00%> (ø)` | |
| [aesara/tensor/rewriting/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvbWF0aC5weQ==) | `86.11% <60.00%> (ø)` | |
| [aesara/link/jax/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NjYWxhci5weQ==) | `96.72% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.12% <100.00%> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.17% <100.00%> (-0.01%)` | :arrow_down: |
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1432?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.67% <100.00%> (-0.01%)` | :arrow_down: |

</details>
sudarsan2k5(2023-02-16 06:20:50):I believe there is still some `int_div` that I need to replace with `floor_div` and have to add the test for deprecation warning so converting this to draft.
sudarsan2k5(2023-02-16 11:34:45):Hi @brandonwillard,

I made the below changes
1. replaced `floor_div` with `floor_divide`
2. added an alias `int_div` to `floor_divide`
3. removed some `int_div` imports and used `floor_divide` inplace of it
4. changed some function names and docs to maintain consistency across the code base
5. renamed `true_div_inplace` to `true_divide_inplace` for consistency
6. added tests for the deprecation of `int_div` and `floor_div`
sudarsan2k5(2023-02-18 18:39:42):![image](https://user-images.githubusercontent.com/108286640/219882715-617c8bc2-2e72-46cc-9a86-ef7eee7f63bb.png)

Thank you, Now this is working fine
sudarsan2k5(2023-02-26 16:02:48):Hi @rlouf I have renamed `floor_div` for `floor_divide`, added related tests and also renamed to related class name, could you please check if this PR is ready to merge or anything else is still pending? Thanks
rlouf(2023-02-27 08:15:19):Looks good to me. Thank you for contributing @sudarsan2k5, NumPy compatibility is very important. 
brandonwillard(2023-02-13 23:37:00):```suggestion
    """Element-wise `divmod`, using `floor_divide` and `mod_check`."""
```
sudarsan2k5(2023-02-16 11:36:49):I have a question here: the test for deprecation of `floor_div` is working fine, but the test for `int_div` is not working; could you please point out where I went wrong?
rlouf(2023-02-16 12:47:39):Try to rebase your branch on `main`, I think this was fixed in https://github.com/aesara-devs/aesara/pull/1434
sudarsan2k5(2023-02-16 18:18:32):I have already tried this, you can the tests which I have added for checking `floor_div` is working fine but the tests for `int_div` is not working, don't know what is the issue here, they both present at the same location.
brandonwillard(2023-02-17 22:59:10):[The error in CI](https://github.com/aesara-devs/aesara/actions/runs/4193522778/jobs/7270555369#step:6:1196) says that the issue is with the `aesara.scalar.basic` check.
brandonwillard(2023-02-17 23:01:43):```suggestion
```
brandonwillard(2023-02-17 23:03:02):```suggestion
```
brandonwillard(2023-02-17 23:03:22):This is the one that's failing in CI.
brandonwillard(2023-02-17 23:04:04):```suggestion
```
I don't think these references are necessary when an entry for the deprecated object is added to `DEPRECATED_NAMES` below.
brandonwillard(2023-02-17 23:04:21):```suggestion
```
sudarsan2k5(2023-02-18 19:19:50):Since we are renaming everything, should we also rename the class `IntDiv`, I thing that will make our code consistence
rlouf(2023-02-18 21:46:29):It's a good idea
codecov[bot](2023-02-14 14:08:01):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1433?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1433](https://codecov.io/gh/aesara-devs/aesara/pull/1433?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (86b6db8) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/49617995406a6d02a411361e7f03f331d238f9f8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (4961799) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1433/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1433?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1433   +/-   ##
=======================================
  Coverage   74.72%   74.72%           
=======================================
  Files         194      194           
  Lines       49868    49877    +9     
  Branches    10549    10549           
=======================================
+ Hits        37264    37273    +9     
  Misses      10274    10274           
  Partials     2330     2330           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1433?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/random/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1433?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `99.05% <100.00%> (+0.01%)` | :arrow_up: |

</details>
rlouf(2023-02-14 15:25:15):FYI we don't use `TST:` or other prefixes in the library. Other than that looks good to me!
codecov[bot](2023-02-16 01:02:46):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1434?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1434](https://codecov.io/gh/aesara-devs/aesara/pull/1434?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (9e3c2f9) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2f9a9e64ff3923de693bfc5e6624f0c6e494d582?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (2f9a9e6) will **increase** coverage by `0.02%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1434/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1434?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1434      +/-   ##
==========================================
+ Coverage   74.72%   74.75%   +0.02%     
==========================================
  Files         194      194              
  Lines       49877    49896      +19     
  Branches    10549    10553       +4     
==========================================
+ Hits        37273    37298      +25     
+ Misses      10274    10270       -4     
+ Partials     2330     2328       -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1434?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1434?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.68% <ø> (+0.26%)` | :arrow_up: |
| [aesara/scalar/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1434?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1434?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.16% <100.00%> (+0.12%)` | :arrow_up: |
| [aesara/tensor/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1434?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9fX2luaXRfXy5weQ==) | `96.29% <100.00%> (+0.74%)` | :arrow_up: |

</details>
codecov[bot](2023-02-17 05:41:25):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1435?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1435](https://codecov.io/gh/aesara-devs/aesara/pull/1435?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (059fe55) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/2f9a9e64ff3923de693bfc5e6624f0c6e494d582?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (2f9a9e6) will **increase** coverage by `0.02%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 059fe55 differs from pull request most recent head a3dc641. Consider uploading reports for the commit a3dc641 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1435/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1435?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1435      +/-   ##
==========================================
+ Coverage   74.72%   74.75%   +0.02%     
==========================================
  Files         194      194              
  Lines       49877    49912      +35     
  Branches    10549    10553       +4     
==========================================
+ Hits        37273    37314      +41     
+ Misses      10274    10270       -4     
+ Partials     2330     2328       -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1435?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1435?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (ø)` | |
| [aesara/scalar/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1435?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9fX2luaXRfXy5weQ==) | `100.00% <0.00%> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1435?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.16% <0.00%> (+0.12%)` | :arrow_up: |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1435?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.68% <0.00%> (+0.26%)` | :arrow_up: |
| [aesara/tensor/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1435?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9fX2luaXRfXy5weQ==) | `96.29% <0.00%> (+0.74%)` | :arrow_up: |

</details>
brandonwillard(2023-02-17 23:10:29):```suggestion
    r"""Provide a JAX implementation of `WaldRV`.
    
    The uses the Multiple Roots transformation sampling from [1]_.

    It is based on the following observation:
    
    .. math::
    
        \frac{\lambda(X - \mu^2)}{\mu^2X} \sim \chi_{(1)}^2
        
    References
    ----------
    .. [1] Michael, John R.; Schucany, William R.; Haas, Roy W.
        Generating Random Variates Using Transformations with Multiple Roots 
    
    """
```
codecov[bot](2023-02-18 21:14:22):## [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1439?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1439](https://codecov.io/gh/aesara-devs/aesara/pull/1439?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (273680a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c4330719564496f182cc7f8471c03512e76735f3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (c433071) will **decrease** coverage by `0.12%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 273680a differs from pull request most recent head e3c340d. Consider uploading reports for the commit e3c340d to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1439/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1439?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1439      +/-   ##
==========================================
- Coverage   74.86%   74.75%   -0.12%     
==========================================
  Files         194      194              
  Lines       50107    49898     -209     
  Branches    12098    10554    -1544     
==========================================
- Hits        37514    37302     -212     
- Misses      10266    10269       +3     
  Partials     2327     2327              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1439?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/gradient.py](https://codecov.io/gh/aesara-devs/aesara/pull/1439?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `77.02% <ø> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1439?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.16% <100.00%> (-0.02%)` | :arrow_down: |
| [aesara/sparse/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1439?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NwYXJzZS9iYXNpYy5weQ==) | `82.53% <100.00%> (-0.01%)` | :arrow_down: |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1439?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.67% <100.00%> (-0.01%)` | :arrow_down: |
| [aesara/tensor/rewriting/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1439?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvbWF0aC5weQ==) | `85.95% <100.00%> (-0.17%)` | :arrow_down: |

... and [37 files with indirect coverage changes](https://codecov.io/gh/aesara-devs/aesara/pull/1439/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

</details>
rlouf(2023-02-19 07:44:00):Although this can be changed in a separate PR, we should also keep in mind the change suggested in https://github.com/aesara-devs/aesara/issues/1213.
brandonwillard(2023-03-08 00:47:15):Looks like this has some merge conflicts that need to be resolved now.
Smit-create(2023-02-19 03:19:12):Before removing `sqr` completely, I suggest adding some deprecation warnings and testing those warnings. Once we are sure that no one uses `sqr`, we can then safely remove it.
codecov[bot](2023-02-19 02:08:05):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1441?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1441](https://codecov.io/gh/aesara-devs/aesara/pull/1441?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (375050a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/ead2c02b098f5fb520853be5cca278bbbdc8ec02?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (ead2c02) will **increase** coverage by `0.05%`.
> The diff coverage is `95.93%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1441/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1441?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1441      +/-   ##
==========================================
+ Coverage   74.75%   74.80%   +0.05%     
==========================================
  Files         194      194              
  Lines       49896    49978      +82     
  Branches    10553    10572      +19     
==========================================
+ Hits        37298    37385      +87     
+ Misses      10270    10267       -3     
+ Partials     2328     2326       -2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1441?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/rewriting/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1441?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvbWF0aC5weQ==) | `86.10% <87.50%> (+0.15%)` | :arrow_up: |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/1441?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.60% <90.47%> (+0.43%)` | :arrow_up: |
| [aesara/graph/fg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1441?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `88.91% <95.45%> (+0.38%)` | :arrow_up: |
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/1441?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `79.16% <100.00%> (+2.10%)` | :arrow_up: |
| [aesara/compile/ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/1441?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvb3BzLnB5) | `84.45% <100.00%> (+0.77%)` | :arrow_up: |
| [aesara/link/c/cmodule.py](https://codecov.io/gh/aesara-devs/aesara/pull/1441?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvYy9jbW9kdWxlLnB5) | `52.32% <100.00%> (+0.27%)` | :arrow_up: |
| [aesara/scan/op.py](https://codecov.io/gh/aesara-devs/aesara/pull/1441?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYW4vb3AucHk=) | `85.14% <100.00%> (+0.01%)` | :arrow_up: |
| [aesara/tensor/\_\_init\_\_.py](https://codecov.io/gh/aesara-devs/aesara/pull/1441?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9fX2luaXRfXy5weQ==) | `96.29% <100.00%> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1441?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.68% <100.00%> (ø)` | |

</details>
rlouf(2023-02-27 08:18:14):The doc has changed substantially since #1413 was merged, so you'll unfortunately need to solve the merge conflicts. The changes look good.
maresb(2023-02-27 08:21:14):Ah, ok, no worries. I'll take care of it once I find the time.
maresb(2023-02-27 08:22:49):Is there a simple way to check which backend Aesara is using?
rlouf(2023-02-27 08:24:15):> Is there a simple way to check which backend Aesara is using?

I might have misunderstood your question, but Aesara is always using C unless you specify `aesara.function(...., mode="JAX")` or `aesara.function(...., mode="NUMBA")`.
codecov[bot](2023-02-20 13:35:48):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1444?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1444](https://codecov.io/gh/aesara-devs/aesara/pull/1444?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (552346f) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/4c7465062a492a4f555ce23c8510e890c628bc33?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (4c74650) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1444/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1444?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1444   +/-   ##
=======================================
  Coverage   74.81%   74.81%           
=======================================
  Files         194      194           
  Lines       49995    50007   +12     
  Branches    10572    10572           
=======================================
+ Hits        37402    37414   +12     
  Misses      10267    10267           
  Partials     2326     2326           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1444?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1444?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (ø)` | |

</details>
rlouf(2023-02-21 06:30:04):Thank you @Smit-create!
Smit-create(2023-02-20 12:33:29):Reference: http://www.nrbook.com/devroye/Devroye_files/chapter_ten.pdf (pg. 15-16)
codecov[bot](2023-02-21 03:05:29):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1447](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (05c835a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/311c9010a81f7396d8244a1883a2b6bdfb442187?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (311c901) will **increase** coverage by `0.05%`.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1447/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1447      +/-   ##
==========================================
+ Coverage   74.81%   74.86%   +0.05%     
==========================================
  Files         194      194              
  Lines       50007    50107     +100     
  Branches    10572    12098    +1526     
==========================================
+ Hits        37414    37514     +100     
+ Misses      10267    10266       -1     
- Partials     2326     2327       +1     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/typed\_list/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3R5cGVkX2xpc3QvYmFzaWMucHk=) | `85.80% <0.00%> (-2.63%)` | :arrow_down: |
| [aesara/tensor/nnet/conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9ubmV0L2NvbnYucHk=) | `66.94% <0.00%> (-0.23%)` | :arrow_down: |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `51.14% <0.00%> (-0.15%)` | :arrow_down: |
| [aesara/tensor/extra\_ops.py](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9leHRyYV9vcHMucHk=) | `89.35% <0.00%> (-0.13%)` | :arrow_down: |
| [aesara/tensor/blas.py](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9ibGFzLnB5) | `79.59% <0.00%> (-0.08%)` | :arrow_down: |
| [aesara/sandbox/fourier.py](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NhbmRib3gvZm91cmllci5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/tensor/nnet/ctc.py](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9ubmV0L2N0Yy5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/compile/profiling.py](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `74.55% <0.00%> (ø)` | |
| [aesara/compile/compiledir.py](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvY29tcGlsZWRpci5weQ==) | `0.00% <0.00%> (ø)` | |
| [aesara/tensor/nnet/abstract\_conv.py](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9ubmV0L2Fic3RyYWN0X2NvbnYucHk=) | `18.80% <0.00%> (ø)` | |
| ... and [25 more](https://codecov.io/gh/aesara-devs/aesara/pull/1447?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
rlouf(2023-02-21 14:51:06):Should we bump the python version in the CI as well?
brandonwillard(2023-02-21 15:15:14):> Should we bump the python version in the CI as well?

That's exactly what I was thinking (and why I haven't merged this yet).
rlouf(2023-02-21 14:46:36):Looks good! Can you also add the distributions to [the documentation](https://github.com/aesara-devs/aesara/blob/main/doc/reference/random/index.rst)?

I see that the tests fail in CI, but they don't on my machine. We need to figure out what's happening here; is NumPy's output consistent to begin with?
codecov[bot](2023-02-21 16:30:05):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1448](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (775076d) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c4330719564496f182cc7f8471c03512e76735f3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (c433071) will **increase** coverage by `0.00%`.
> The diff coverage is `92.85%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1448/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1448   +/-   ##
=======================================
  Coverage   74.86%   74.87%           
=======================================
  Files         194      194           
  Lines       50107    50123   +16     
  Branches    12098    12098           
=======================================
+ Hits        37514    37530   +16     
  Misses      10266    10266           
  Partials     2327     2327           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/profiling.py](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `74.55% <ø> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `89.99% <ø> (ø)` | |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.07% <ø> (ø)` | |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `87.82% <50.00%> (ø)` | |
| [aesara/tensor/rewriting/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvbWF0aC5weQ==) | `86.11% <60.00%> (ø)` | |
| [aesara/link/jax/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NjYWxhci5weQ==) | `96.72% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.12% <100.00%> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.17% <100.00%> (-0.01%)` | :arrow_down: |
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <100.00%> (ø)` | |
| [aesara/tensor/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9tYXRoLnB5) | `90.67% <100.00%> (-0.01%)` | :arrow_down: |
| ... and [1 more](https://codecov.io/gh/aesara-devs/aesara/pull/1448?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
Smit-create(2023-03-02 14:13:24):Is this good to merge?
brandonwillard(2023-03-02 18:22:01):> Is this good to merge?

Yes, thanks a lot!
FredericWantiez(2023-03-08 20:10:49):Sorry for the spam, rebased the wrong branch. Let me quickly fix it
brandonwillard(2023-02-22 00:06:56):Looks like this is failing in CI because [the Python 3.7 tests are using SciPy 1.61 and not > 1.7.0](https://github.com/aesara-devs/aesara/actions/runs/4237436612/jobs/7363445156#step:5:200).
brandonwillard(2023-02-22 00:31:10):We can probably change the SciPy lower bound to 1.7.0, because our NumPy lower bound is 1.17, and [SciPy recommends a version greater than 1.7.0 for that](https://docs.scipy.org/doc/scipy/dev/toolchain.html#numpy).  The only relevant SciPy constraint of which I'm aware is in `numba-scipy`, which currently upper-bounds SciPy at <= 1.7.3, but allows the desired 1.7.0 lower bound.
rlouf(2023-02-23 14:04:01):I just tried and the tests pass locally with SciPy==1.7.2.
rlouf(2023-02-23 14:43:51):The alternative is to add the test to `test_random_RandomVariable` which uses `stats.cramervonmises`.
FredericWantiez(2023-02-23 20:23:40):I didn't use `stats.cramervonmises` in `test_random_RandomVariable` as it doesn't really allow you to handle named arguments and scipy also uses a different parametrization. I'm happy to change if bumping `scipy` just for this is not an option

rlouf(2023-02-24 06:38:16):You can use a different parametrization in the tests, look at the [test for the gamma distribution for instance](https://github.com/aesara-devs/aesara/blob/c4330719564496f182cc7f8471c03512e76735f3/tests/link/jax/test_random.py#L124). Unless I misunderstood your problem?
FredericWantiez(2023-02-26 13:43:46):Nice, somehow missed that. I've pushed something to use `test_random_RandomVariable` but feels brittle to force the `loc` and `scale` arguments this way. Some details on the issue with `cramervonmisses` here: https://github.com/scipy/scipy/issues/18055
maresb(2023-02-23 19:41:25):Reverts #1408, but if people find it useful to include the docs in the sdist then we might as well.
maresb(2023-02-23 22:00:23):Let's squash-merge when ready
mgorny(2023-02-23 20:05:15):```suggestion
```

This one's used by pytest too.
codecov[bot](2023-03-08 02:47:50):## [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1460?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1460](https://codecov.io/gh/aesara-devs/aesara/pull/1460?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (4c9808c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/984ee55b85bf9d268ee592c9fbb0d969086b58a4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (984ee55) will **decrease** coverage by `0.15%`.
> The diff coverage is `n/a`.

> :exclamation: Current head 4c9808c differs from pull request most recent head 62bb4d1. Consider uploading reports for the commit 62bb4d1 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1460/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1460?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1460      +/-   ##
==========================================
- Coverage   75.02%   74.87%   -0.15%     
==========================================
  Files         194      194              
  Lines       50099    50123      +24     
  Branches    12096    12098       +2     
==========================================
- Hits        37586    37530      -56     
- Misses      10189    10266      +77     
- Partials     2324     2327       +3     
```


[see 17 files with indirect coverage changes](https://codecov.io/gh/aesara-devs/aesara/pull/1460/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

</details>
Smit-create(2023-03-04 15:47:51):Ah, the failure on CI is hard to reproduce on my machine. It says:
```
FAILED tests/link/jax/test_random.py
```

But `pytest` does pass for that on my setup.
brandonwillard(2023-03-04 17:23:27): > But `pytest` does pass for that on my setup.

This is often due to version mismatches between local environments and CI.

I think this issue appeared in another PR as well, so you can add a commit marking it as `xfail` for the time being and we'll get back to it later/elsewhere.
brandonwillard(2023-03-05 20:22:57):The issue should be fixed in https://github.com/aesara-devs/aesara/pull/1464.
codecov[bot](2023-03-09 08:13:36):## [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1461](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (60445b7) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/c4330719564496f182cc7f8471c03512e76735f3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (c433071) will **increase** coverage by `0.01%`.
> The diff coverage is `91.42%`.

> :exclamation: Current head 60445b7 differs from pull request most recent head ffa4d81. Consider uploading reports for the commit ffa4d81 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1461/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1461      +/-   ##
==========================================
+ Coverage   74.86%   74.87%   +0.01%     
==========================================
  Files         194      194              
  Lines       50107    50129      +22     
  Branches    12098    12097       -1     
==========================================
+ Hits        37514    37536      +22     
  Misses      10266    10266              
  Partials     2327     2327              
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/profiling.py](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvcHJvZmlsaW5nLnB5) | `74.55% <ø> (ø)` | |
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <ø> (ø)` | |
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `89.99% <ø> (ø)` | |
| [aesara/tensor/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9lbGVtd2lzZS5weQ==) | `88.07% <ø> (ø)` | |
| [aesara/tensor/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci92YXIucHk=) | `87.82% <50.00%> (ø)` | |
| [aesara/tensor/rewriting/math.py](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yZXdyaXRpbmcvbWF0aC5weQ==) | `86.11% <60.00%> (ø)` | |
| [aesara/link/jax/dispatch/scalar.py](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3NjYWxhci5weQ==) | `96.72% <100.00%> (ø)` | |
| [aesara/link/numba/dispatch/elemwise.py](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvZWxlbXdpc2UucHk=) | `97.12% <100.00%> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.17% <100.00%> (-0.01%)` | :arrow_down: |
| [aesara/tensor/inplace.py](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9pbnBsYWNlLnB5) | `100.00% <100.00%> (ø)` | |
| ... and [2 more](https://codecov.io/gh/aesara-devs/aesara/pull/1461?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
codecov[bot](2023-03-07 23:57:27):# [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1464?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1464](https://codecov.io/gh/aesara-devs/aesara/pull/1464?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (faa579c) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/055ceb18eb4f702050f131bd6b05f9b76949f56e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (055ceb1) will **not change** coverage.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1464/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1464?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1464   +/-   ##
=======================================
  Coverage   74.87%   74.87%           
=======================================
  Files         194      194           
  Lines       50123    50123           
  Branches    12098    12098           
=======================================
  Hits        37530    37530           
  Misses      10266    10266           
  Partials     2327     2327           
```



</details>
PaulScemama(2023-03-07 01:32:10):I had trouble building the documentation myself, but I just used `docutils` to convert `.rst` to `.html` and then rendered the `html` to get an idea of what the changes looked like (since the changes were so small). However, I wouldn't think my local developer (and documentation) environment being troublesome would have an effect on these tests? 


brandonwillard(2023-03-08 00:45:15):> I had trouble building the documentation myself, but I just used `docutils` to convert `.rst` to `.html` and then rendered the `html` to get an idea of what the changes looked like (since the changes were so small). However, I wouldn't think my local developer (and documentation) environment being troublesome would have an effect on these tests?

Sorry, there were unrelated docs and test issues that have just been resolved.
PaulScemama(2023-03-08 17:19:47):Ready for review @brandonwillard @rlouf. No rush!
maresb(2023-03-11 21:39:00):Thanks for bringing this to our attention. We are already aware, and we are already planning to deprecate this. See #1382.

In short, it's been this way for years without anyone complaining. But since it's a terrible structure, we're already phasing it out. Since the beginning of the year, the `bin` package has been a pointer to `aesara.bin` with a deprecation warning, in order to give time to people to fix anything that relies on it.

Given that it's been this way for years without anyone noticing, I'm inclined to think that suddenly removing it is riskier than leaving it in some more months.

Once we decide that enough time has passed (or that it is so offensive that we should delete it immediately), then instead of removing it from the wheel packages, we should delete it entirely. (I've been meaning to prepare a draft PR.)
carlsmedstad(2023-03-11 23:59:05):Got it. Thanks for the quick reply.

I'll patch away the `bin` package in the AUR package in the meantime.
maresb(2023-03-12 00:00:27):@carlsmedstad, sounds good, thanks a lot!!!
maresb(2023-03-12 00:05:28):Closing this in favor of #1469
dgerlanc(2023-03-16 21:02:21):Do we have any links to these documents that need updating?
SauravMaheshkar(2023-03-17 09:54:30):> Do we have any links to these documents that need updating?

@dgerlanc Addressed in a12acba43c204f535b13c4f59fa29673606f38de and e8cd98716ff2fc6dd27c744c8389e9bdca7362c4
SauravMaheshkar(2023-03-19 15:36:15):> Can you squash these all into a single commit and rebase on top of the `main` branch?
> 
> If you're not comfortable doing that feel free to message me and I can walk you through doing it.

Yes thank you, can you walk me through it. 
dgerlanc(2023-03-19 20:02:26):> > Can you squash these all into a single commit and rebase on top of the `main` branch?
> > If you're not comfortable doing that feel free to message me and I can walk you through doing it.
> 
> Yes thank you, can you walk me through it.

Happy to do so - feel free to hit me up on Element (@dgerlanc:matrix.org) or the Aesara Discord room (`dgerlanc`) and we can find a time.
dgerlanc(2023-03-24 17:37:43):> > > Can you squash these all into a single commit and rebase on top of the `main` branch?
> > > If you're not comfortable doing that feel free to message me and I can walk you through doing it.
> > 
> > 
> > Yes thank you, can you walk me through it.
> 
> Happy to do so - feel free to hit me up on Element (@dgerlanc:matrix.org) or the Aesara Discord room (`dgerlanc`) and we can find a time.

I merged these into one commit so that the links aren't broken in any of the commits. Feel free to hit me up still if you want to go over how I did in `git`.
SauravMaheshkar(2023-03-25 12:53:42):> broken in any of the commits. Feel free to hit me up still if you want to go over how I did in `git`.

thank you 😄 
codecov[bot](2023-03-15 00:15:29):## [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1475?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1475](https://codecov.io/gh/aesara-devs/aesara/pull/1475?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (fb57b6e) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/984ee55b85bf9d268ee592c9fbb0d969086b58a4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (984ee55) will **not change** coverage.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1475/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1475?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1475   +/-   ##
=======================================
  Coverage   75.02%   75.02%           
=======================================
  Files         194      194           
  Lines       50099    50099           
  Branches    12096    12096           
=======================================
  Hits        37586    37586           
  Misses      10189    10189           
  Partials     2324     2324           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1475?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1475?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (ø)` | |

</details>
brandonwillard(2023-03-15 00:20:41):Thanks again, @Smit-create!
codecov[bot](2023-03-16 23:54:49):## [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1476?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1476](https://codecov.io/gh/aesara-devs/aesara/pull/1476?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (7fa7024) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/462d8d568976f51fba5b6df175e308e67314b307?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (462d8d5) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1476/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1476   +/-   ##
=======================================
  Coverage   75.02%   75.02%           
=======================================
  Files         194      194           
  Lines       50099    50102    +3     
  Branches    12096    12096           
=======================================
+ Hits        37586    37589    +3     
  Misses      10189    10189           
  Partials     2324     2324           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/compile/sharedvalue.py](https://codecov.io/gh/aesara-devs/aesara/pull/1476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvc2hhcmVkdmFsdWUucHk=) | `93.75% <100.00%> (ø)` | |
| [aesara/tensor/random/var.py](https://codecov.io/gh/aesara-devs/aesara/pull/1476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vdmFyLnB5) | `96.00% <100.00%> (+0.54%)` | :arrow_up: |

</details>
codecov[bot](2023-03-23 01:32:55):## [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1480?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1480](https://codecov.io/gh/aesara-devs/aesara/pull/1480?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (0b66d2a) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/4a687c0b514eef7812b6271899e674d870380c4a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (4a687c0) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 0b66d2a differs from pull request most recent head eda2f50. Consider uploading reports for the commit eda2f50 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1480/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1480?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1480   +/-   ##
=======================================
  Coverage   75.06%   75.06%           
=======================================
  Files         194      194           
  Lines       50091    50101   +10     
  Branches    12096    12097    +1     
=======================================
+ Hits        37600    37610   +10     
  Misses      10170    10170           
  Partials     2321     2321           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1480?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1480?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (ø)` | |

</details>
brandonwillard(2023-03-23 21:57:36):> "the InvGamma(shape, scale) is equivalent to taking the reciprocal of samples from a Gamma(shape, 1 / scale) distribution" in the docs.

Yes, definitely.
brandonwillard(2023-03-23 21:58:40):> This PR is a draft to close #1368. Furthermore, I had to change the `.pre-commit-config.yaml` slightly to pass the `mypy` check. This bug has been discussed in [#1474 (reply in thread)](https://github.com/aesara-devs/aesara/discussions/1474#discussioncomment-5362160).

Is that still an issue now that https://github.com/aesara-devs/aesara/pull/1482 is merged?
PaulScemama(2023-03-23 23:30:22):> > This PR is a draft to close #1368. Furthermore, I had to change the `.pre-commit-config.yaml` slightly to pass the `mypy` check. This bug has been discussed in [#1474 (reply in thread)](https://github.com/aesara-devs/aesara/discussions/1474#discussioncomment-5362160).
> 
> Is that still an issue now that #1482 is merged?

It is not an issue anymore. 
brandonwillard(2023-03-23 23:38:54):Thanks a lot, @PaulScemama!
PaulScemama(2023-03-23 23:44:04):Thank you! @brandonwillard I learned a lot. 
brandonwillard(2023-03-23 22:00:41):Let's move this to line 480; its meaning will be clearer there.
codecov[bot](2023-03-21 01:48:11):## [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1482](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (e137dd8) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/5268d20fb474d41bcc29c846ce72a443fc2231fd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (5268d20) will **not change** coverage.
> The diff coverage is `74.19%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1482/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1482   +/-   ##
=======================================
  Coverage   75.02%   75.02%           
=======================================
  Files         194      194           
  Lines       50102    50102           
  Branches    12096    12096           
=======================================
  Hits        37589    37589           
  Misses      10189    10189           
  Partials     2324     2324           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/breakpoint.py](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2JyZWFrcG9pbnQucHk=) | `55.00% <ø> (ø)` | |
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `79.16% <ø> (ø)` | |
| [aesara/compile/function/types.py](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvZnVuY3Rpb24vdHlwZXMucHk=) | `79.81% <ø> (ø)` | |
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `66.20% <ø> (ø)` | |
| [aesara/gradient.py](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `77.02% <ø> (ø)` | |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `88.24% <ø> (ø)` | |
| [aesara/graph/rewriting/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL3Jld3JpdGluZy9iYXNpYy5weQ==) | `65.03% <0.00%> (ø)` | |
| [aesara/graph/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL3V0aWxzLnB5) | `64.84% <ø> (ø)` | |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `51.14% <ø> (ø)` | |
| [aesara/link/c/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvYy9iYXNpYy5weQ==) | `87.14% <ø> (ø)` | |
| ... and [70 more](https://codecov.io/gh/aesara-devs/aesara/pull/1482?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

</details>
maresb(2023-03-21 09:58:31):@brandonwillard, I rebased on main to fix the mypy failure.

I updated the upper Python version in the test matrix to 3.11. If it was deliberate to have it only at 3.10 then we can remove [0107efc](https://github.com/aesara-devs/aesara/pull/1483/commits/0107efc3e97a94f7202283b21acc6126ad3c0729). Otherwise we might squash it.

Finally I upgraded the flake8 pre-commit version and removed the respective comment in a separate commit.
maresb(2023-03-21 10:22:39):> If it was deliberate to have it only at 3.10 then we can remove [0107efc](https://github.com/aesara-devs/aesara/pull/1483/commits/0107efc3e97a94f7202283b21acc6126ad3c0729).

Ah, right. Numba doesn't yet support 3.11. I'll add a comment.
codecov[bot](2023-03-21 11:33:34):## [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1483?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1483](https://codecov.io/gh/aesara-devs/aesara/pull/1483?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (20fb999) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/1da48b5d0c02bb17902c794cef871178753044d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (1da48b5) will **increase** coverage by `0.04%`.
> The diff coverage is `n/a`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1483/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1483?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1483      +/-   ##
==========================================
+ Coverage   75.02%   75.06%   +0.04%     
==========================================
  Files         194      194              
  Lines       50102    50102              
  Branches    12096    12096              
==========================================
+ Hits        37589    37611      +22     
+ Misses      10189    10170      -19     
+ Partials     2324     2321       -3     
```


[see 11 files with indirect coverage changes](https://codecov.io/gh/aesara-devs/aesara/pull/1483/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

</details>
brandonwillard(2023-03-22 00:50:02):Thanks, as always, @maresb!
codecov[bot](2023-03-21 11:50:24):## [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1484](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (ccca397) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/1da48b5d0c02bb17902c794cef871178753044d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (1da48b5) will **increase** coverage by `0.03%`.
> The diff coverage is `98.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1484/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1484      +/-   ##
==========================================
+ Coverage   75.02%   75.06%   +0.03%     
==========================================
  Files         194      194              
  Lines       50102    50091      -11     
  Branches    12096    12096              
==========================================
+ Hits        37589    37600      +11     
+ Misses      10189    10170      -19     
+ Partials     2324     2321       -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/configparser.py](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbmZpZ3BhcnNlci5weQ==) | `84.94% <ø> (ø)` | |
| [aesara/gradient.py](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `76.99% <ø> (-0.04%)` | :arrow_down: |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `88.24% <ø> (ø)` | |
| [aesara/graph/fg.py](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL2ZnLnB5) | `88.98% <ø> (-0.04%)` | :arrow_down: |
| [aesara/graph/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL3V0aWxzLnB5) | `64.84% <ø> (ø)` | |
| [aesara/link/c/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvYy9iYXNpYy5weQ==) | `87.14% <ø> (ø)` | |
| [aesara/link/c/params\_type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvYy9wYXJhbXNfdHlwZS5weQ==) | `80.41% <ø> (ø)` | |
| [aesara/link/c/type.py](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvYy90eXBlLnB5) | `75.98% <ø> (ø)` | |
| [aesara/link/numba/dispatch/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvbnVtYmEvZGlzcGF0Y2gvYmFzaWMucHk=) | `92.25% <ø> (ø)` | |
| [aesara/scalar/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.17% <ø> (ø)` | |
| ... and [26 more](https://codecov.io/gh/aesara-devs/aesara/pull/1484?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

... and [8 files with indirect coverage changes](https://codecov.io/gh/aesara-devs/aesara/pull/1484/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

</details>
codecov[bot](2023-03-26 16:12:03):## [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1485?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1485](https://codecov.io/gh/aesara-devs/aesara/pull/1485?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (cc6f9f2) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/fa2bbaff7618424a8f3d56cb758e54e064817551?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (fa2bbaf) will **increase** coverage by `0.01%`.
> The diff coverage is `92.00%`.

> :exclamation: Current head cc6f9f2 differs from pull request most recent head f64018b. Consider uploading reports for the commit f64018b to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1485/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1485?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1485      +/-   ##
==========================================
+ Coverage   75.06%   75.08%   +0.01%     
==========================================
  Files         194      194              
  Lines       50101    50151      +50     
  Branches    12097    12107      +10     
==========================================
+ Hits        37610    37656      +46     
- Misses      10170    10172       +2     
- Partials     2321     2323       +2     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1485?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1485?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `90.05% <92.00%> (+0.06%)` | :arrow_up: |

</details>
Smit-create(2023-04-22 14:01:48):I have tried to accommodate the fix that you suggested. I have the following issues:
1. The CI says a failing code-style test but that passes for me locally:
```console
% pre-commit run --show-diff-on-failure --color=always --all-files
debug statements (python)................................................Passed
check for merge conflicts................................................Passed
pyupgrade................................................................Passed
black....................................................................Passed
flake8...................................................................Passed
isort....................................................................Passed
autoflake................................................................Passed
mypy.....................................................................Passed
```

2. Running the tests, there is a failure on the C-compilation side on macOS:
```console
Traceback (most recent call last):
  File "/Users/thebigbool/repos/aesara/b.py", line 160, in <module>
    aesara_sol = convolve(a, v, mode=mode).eval()
  File "/Users/thebigbool/repos/aesara/aesara/graph/basic.py", line 605, in eval
    self._fn_cache[inputs] = function(inputs, self)
  File "/Users/thebigbool/repos/aesara/aesara/compile/function/__init__.py", line 317, in function
    fn = pfunc(
  File "/Users/thebigbool/repos/aesara/aesara/compile/function/pfunc.py", line 367, in pfunc
    return orig_function(
  File "/Users/thebigbool/repos/aesara/aesara/compile/function/types.py", line 1815, in orig_function
    fn = m.create(defaults)
  File "/Users/thebigbool/repos/aesara/aesara/compile/function/types.py", line 1708, in create
    _fn, _i, _o = self.linker.make_thunk(
  File "/Users/thebigbool/repos/aesara/aesara/link/basic.py", line 254, in make_thunk
    return self.make_all(
  File "/Users/thebigbool/repos/aesara/aesara/link/vm.py", line 1252, in make_all
    raise_with_op(fgraph, node)
  File "/Users/thebigbool/repos/aesara/aesara/link/utils.py", line 533, in raise_with_op
    raise exc_value.with_traceback(exc_trace)
  File "/Users/thebigbool/repos/aesara/aesara/link/vm.py", line 1243, in make_all
    node.op.make_thunk(node, storage_map, compute_map, [], impl=impl)
  File "/Users/thebigbool/repos/aesara/aesara/link/c/op.py", line 131, in make_thunk
    return self.make_c_thunk(node, storage_map, compute_map, no_recycling)
  File "/Users/thebigbool/repos/aesara/aesara/link/c/op.py", line 96, in make_c_thunk
    outputs = cl.make_thunk(
  File "/Users/thebigbool/repos/aesara/aesara/link/c/basic.py", line 1200, in make_thunk
    cthunk, module, in_storage, out_storage, error_storage = self.__compile__(
  File "/Users/thebigbool/repos/aesara/aesara/link/c/basic.py", line 1120, in __compile__
    thunk, module = self.cthunk_factory(
  File "/Users/thebigbool/repos/aesara/aesara/link/c/basic.py", line 1644, in cthunk_factory
    module = cache.module_from_key(key=key, lnk=self)
  File "/Users/thebigbool/repos/aesara/aesara/link/c/cmodule.py", line 1240, in module_from_key
    module = lnk.compile_cmodule(location)
  File "/Users/thebigbool/repos/aesara/aesara/link/c/basic.py", line 1543, in compile_cmodule
    module = c_compiler.compile_str(
  File "/Users/thebigbool/repos/aesara/aesara/link/c/cmodule.py", line 2654, in compile_str
    raise CompileError(
aesara.link.c.exceptions.CompileError: Compilation failed (return status=1):
/Users/thebigbool/opt/anaconda3/envs/aesara-dev-1/bin/clang++ -dynamiclib -g -O3 -fno-math-errno -Wno-unused-label -Wno-unused-variable -Wno-write-strings -DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION -m64 -fPIC -undefined dynamic_lookup -Wno-c++11-narrowing -I/Users/thebigbool/opt/anaconda3/envs/aesara-dev-1/lib/python3.10/site-packages/numpy/core/include -I/Users/thebigbool/opt/anaconda3/envs/aesara-dev-1/include/python3.10 -I/Users/thebigbool/repos/aesara/aesara/link/c/c_code -L/Users/thebigbool/opt/anaconda3/envs/aesara-dev-1/lib -fvisibility=hidden -o /Users/thebigbool/.aesara/compiledir_macOS-13.0-x86_64-i386-64bit-i386-3.10.8-64/tmpbb3yfwbq/mf6fae8a01551c3ac2d9a0aaba0ff89f2ec61ceb4a936a76263a7c5d4ea33e204.so /Users/thebigbool/.aesara/compiledir_macOS-13.0-x86_64-i386-64bit-i386-3.10.8-64/tmpbb3yfwbq/mod.cpp
ld: unsupported tapi file type '!tapi-tbd' in YAML file '/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib/libSystem.tbd' for architecture x86_64
clang-14: error: linker command failed with exit code 1 (use -v to see invocation)

Apply node that caused the error: DeepCopyOp(TensorConstant{[ 0  0  1 .. 10 13 10]})
Toposort index: 0
Inputs types: [TensorType(int64, (8,))]

HINT: Use a linker other than the C linker to print the inputs' shapes and strides.
HINT: Re-running with most Aesara optimizations disabled could provide a back-trace showing when this node was created. This can be done by setting the Aesara flag 'optimizer=fast_compile'. If that does not work, Aesara optimizations can be disabled with 'optimizer=None'.
HINT: Use the Aesara flag `exception_verbosity=high` for a debug print-out and storage map footprint of this Apply node.
```
3. Some of the tests do fail after removing the constant abstraction at the make_node level as seen in the following traceback, where it is unable to extract constant shape for mode="valid" and mode="same", where it should if the m, and n are already constant.
```console
TypeError: __trunc__ returned non-Integral (type TensorVariable)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/thebigbool/repos/aesara/b.py", line 160, in <module>
    aesara_sol = convolve(a, v, mode=mode).eval()
  File "/Users/thebigbool/repos/aesara/aesara/graph/basic.py", line 605, in eval
    self._fn_cache[inputs] = function(inputs, self)
  File "/Users/thebigbool/repos/aesara/aesara/compile/function/__init__.py", line 317, in function
    fn = pfunc(
  File "/Users/thebigbool/repos/aesara/aesara/compile/function/pfunc.py", line 367, in pfunc
    return orig_function(
  File "/Users/thebigbool/repos/aesara/aesara/compile/function/types.py", line 1803, in orig_function
    m = Maker(
  File "/Users/thebigbool/repos/aesara/aesara/compile/function/types.py", line 1574, in __init__
    self.prepare_fgraph(inputs, outputs, found_updates, fgraph, mode, profile)
  File "/Users/thebigbool/repos/aesara/aesara/compile/function/types.py", line 1434, in prepare_fgraph
    rewriter_profile = rewriter(fgraph)
  File "/Users/thebigbool/repos/aesara/aesara/graph/rewriting/basic.py", line 133, in __call__
    return self.rewrite(fgraph)
  File "/Users/thebigbool/repos/aesara/aesara/graph/rewriting/basic.py", line 128, in rewrite
    self.add_requirements(fgraph)
  File "/Users/thebigbool/repos/aesara/aesara/graph/rewriting/basic.py", line 349, in add_requirements
    rewrite.add_requirements(fgraph)
  File "/Users/thebigbool/repos/aesara/aesara/tensor/rewriting/shape.py", line 733, in add_requirements
    fgraph.attach_feature(ShapeFeature())
  File "/Users/thebigbool/repos/aesara/aesara/graph/fg.py", line 707, in attach_feature
    feature.on_attach(self)
  File "/Users/thebigbool/repos/aesara/aesara/tensor/rewriting/shape.py", line 525, in on_attach
    self.on_import(fgraph, node, reason="on_attach")
  File "/Users/thebigbool/repos/aesara/aesara/tensor/rewriting/shape.py", line 589, in on_import
    self.set_shape(r, s)
  File "/Users/thebigbool/repos/aesara/aesara/tensor/rewriting/shape.py", line 361, in set_shape
    shape_vars += (constant(r.type.shape[i], dtype="int64", ndim=0),)
  File "/Users/thebigbool/repos/aesara/aesara/tensor/basic.py", line 215, in constant
    x_ = aes.convert(x, dtype=dtype)
  File "/Users/thebigbool/repos/aesara/aesara/scalar/basic.py", line 245, in convert
    x_ = _asarray(x, dtype=dtype)
  File "/Users/thebigbool/repos/aesara/aesara/misc/safe_asarray.py", line 35, in _asarray
    rval = np.asarray(a, dtype=dtype, order=order)
ValueError: setting an array element with a sequence.
```
brandonwillard(2023-04-23 01:14:57):I just pushed a change that should fix some of those issues.  It looks like we need to update the type hints (unrelated to this work), so I'll put in a separate PR for that shortly.
Smit-create(2023-04-23 17:00:14):Thanks @brandonwillard!
maresb(2023-05-03 15:50:56):@Smit-create, let's open a new issue for

```
ld: unsupported tapi file type '!tapi-tbd' in YAML file '/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib/libSystem.tbd' for architecture x86_64
```

and including the output of `mamba list`. It sounds like it may be some sort of Conda-related issue.
brandonwillard(2023-04-09 23:50:41):These are returning Aesara graphs and evaluating to `True` only because they're non-`None`/"empty".  Instead, let's change these to explicit static `Type`-level shape checks (e.g. `z = convolve(a, v)` and `assert z.type.shape == ...`).  Also, we need to check at least one case in which the static shape isn't constant (i.e. when a static shape value should be `None`).

N.B. You can extend `utt.InferShapeTester` and use its `self._compile_and_check` method to test shape inference (i.e. the `Convolve.infer_shape` implementation).
brandonwillard(2023-04-09 23:52:32):If this is only used in one place, we shouldn't need a method.
brandonwillard(2023-04-09 23:53:35):We shouldn't need these member variables either.
Smit-create(2023-04-10 16:18:18):> N.B. You can extend utt.InferShapeTester and use its self._compile_and_check method to test shape inference (i.e. the Convolve.infer_shape implementation).

Done, thanks.

> Instead, let's change these to explicit static Type-level shape checks (e.g. z = convolve(a, v) and assert z.type.shape == ...). 

Is there any way to test two symbolic expressions, as was required in the previous commit? 

> (i.e. when a static shape value should be None).

Can you please provide an example of this? I wasn't able to catch that.
Smit-create(2023-04-10 16:18:53):It's used in all the tester methods.
codecov[bot](2023-04-03 00:29:12):## [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1487?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1487](https://codecov.io/gh/aesara-devs/aesara/pull/1487?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (7a29e43) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/4a687c0b514eef7812b6271899e674d870380c4a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (4a687c0) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 7a29e43 differs from pull request most recent head 9ad4592. Consider uploading reports for the commit 9ad4592 to get more accurate results

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1487/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1487?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1487   +/-   ##
=======================================
  Coverage   75.06%   75.06%           
=======================================
  Files         194      194           
  Lines       50091    50101   +10     
  Branches    12096    12097    +1     
=======================================
+ Hits        37600    37610   +10     
  Misses      10170    10170           
  Partials     2321     2321           
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1487?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/link/jax/dispatch/random.py](https://codecov.io/gh/aesara-devs/aesara/pull/1487?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvamF4L2Rpc3BhdGNoL3JhbmRvbS5weQ==) | `100.00% <100.00%> (ø)` | |

</details>
codecov[bot](2023-04-05 05:20:41):## [Codecov](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1489](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (979d086) into [main](https://codecov.io/gh/aesara-devs/aesara/commit/984ee55b85bf9d268ee592c9fbb0d969086b58a4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (984ee55) will **increase** coverage by `0.04%`.
> The diff coverage is `91.42%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://codecov.io/gh/aesara-devs/aesara/pull/1489/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1489      +/-   ##
==========================================
+ Coverage   75.02%   75.06%   +0.04%     
==========================================
  Files         194      194              
  Lines       50099    50101       +2     
  Branches    12096    12097       +1     
==========================================
+ Hits        37586    37610      +24     
+ Misses      10189    10170      -19     
+ Partials     2324     2321       -3     
```


| [Impacted Files](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/breakpoint.py](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2JyZWFrcG9pbnQucHk=) | `55.00% <ø> (ø)` | |
| [aesara/compile/builders.py](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbXBpbGUvYnVpbGRlcnMucHk=) | `79.16% <ø> (ø)` | |
| [aesara/configdefaults.py](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbmZpZ2RlZmF1bHRzLnB5) | `66.20% <ø> (ø)` | |
| [aesara/configparser.py](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2NvbmZpZ3BhcnNlci5weQ==) | `84.94% <ø> (ø)` | |
| [aesara/gradient.py](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYWRpZW50LnB5) | `76.99% <ø> (-0.04%)` | :arrow_down: |
| [aesara/graph/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL2Jhc2ljLnB5) | `88.24% <ø> (ø)` | |
| [aesara/graph/utils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2dyYXBoL3V0aWxzLnB5) | `64.84% <ø> (ø)` | |
| [aesara/ifelse.py](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2lmZWxzZS5weQ==) | `51.42% <ø> (+0.28%)` | :arrow_up: |
| [aesara/link/c/basic.py](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvYy9iYXNpYy5weQ==) | `87.14% <ø> (ø)` | |
| [aesara/link/c/cutils.py](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL2xpbmsvYy9jdXRpbHMucHk=) | `68.88% <ø> (ø)` | |
| ... and [84 more](https://codecov.io/gh/aesara-devs/aesara/pull/1489?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | |

... and [1 file with indirect coverage changes](https://codecov.io/gh/aesara-devs/aesara/pull/1489/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

</details>
brandonwillard(2023-04-17 19:24:27):Thanks, @Ankit-Dhankhar!
codecov[bot](2023-05-07 00:28:20):## [Codecov](https://app.codecov.io/gh/aesara-devs/aesara/pull/1496?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1496](https://app.codecov.io/gh/aesara-devs/aesara/pull/1496?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (526b185) into [main](https://app.codecov.io/gh/aesara-devs/aesara/commit/ad7a8b78a3a7b0093bb9ac7f9119038cd22a4fa2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (ad7a8b7) will **decrease** coverage by `0.03%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://app.codecov.io/gh/aesara-devs/aesara/pull/1496/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://app.codecov.io/gh/aesara-devs/aesara/pull/1496?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1496      +/-   ##
==========================================
- Coverage   75.09%   75.06%   -0.03%     
==========================================
  Files         194      176      -18     
  Lines       50151    49447     -704     
  Branches    12108    11968     -140     
==========================================
- Hits        37660    37118     -542     
+ Misses      10170    10036     -134     
+ Partials     2321     2293      -28     
```


| [Impacted Files](https://app.codecov.io/gh/aesara-devs/aesara/pull/1496?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/misc/safe\_asarray.py](https://app.codecov.io/gh/aesara-devs/aesara/pull/1496?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL21pc2Mvc2FmZV9hc2FycmF5LnB5) | `69.23% <100.00%> (ø)` | |

... and [19 files with indirect coverage changes](https://app.codecov.io/gh/aesara-devs/aesara/pull/1496/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

</details>
codecov[bot](2023-06-03 23:14:27):## [Codecov](https://app.codecov.io/gh/aesara-devs/aesara/pull/1501?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1501](https://app.codecov.io/gh/aesara-devs/aesara/pull/1501?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (cfe2af7) into [main](https://app.codecov.io/gh/aesara-devs/aesara/commit/4b266671f5b60ba2cf9e435248febfa07f632824?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (4b26667) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://app.codecov.io/gh/aesara-devs/aesara/pull/1501/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://app.codecov.io/gh/aesara-devs/aesara/pull/1501?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1501   +/-   ##
=======================================
  Coverage   74.96%   74.96%           
=======================================
  Files         176      176           
  Lines       49502    49500    -2     
  Branches    11987    11986    -1     
=======================================
+ Hits        37108    37110    +2     
+ Misses      10092    10089    -3     
+ Partials     2302     2301    -1     
```


| [Impacted Files](https://app.codecov.io/gh/aesara-devs/aesara/pull/1501?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/scan/rewriting.py](https://app.codecov.io/gh/aesara-devs/aesara/pull/1501?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYW4vcmV3cml0aW5nLnB5) | `79.37% <100.00%> (+0.14%)` | :arrow_up: |

... and [1 file with indirect coverage changes](https://app.codecov.io/gh/aesara-devs/aesara/pull/1501/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

</details>
codecov[bot](2023-06-29 00:27:44):## [Codecov](https://app.codecov.io/gh/aesara-devs/aesara/pull/1502?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1502](https://app.codecov.io/gh/aesara-devs/aesara/pull/1502?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (0ad16ce) into [main](https://app.codecov.io/gh/aesara-devs/aesara/commit/2368ed3e7f14801785280038094ac99773e876a6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (2368ed3) will **decrease** coverage by `0.01%`.
> The diff coverage is `100.00%`.

<details><summary>Additional details and impacted files</summary>


[![Impacted file tree graph](https://app.codecov.io/gh/aesara-devs/aesara/pull/1502/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://app.codecov.io/gh/aesara-devs/aesara/pull/1502?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@            Coverage Diff             @@
##             main    #1502      +/-   ##
==========================================
- Coverage   74.96%   74.96%   -0.01%     
==========================================
  Files         176      176              
  Lines       49500    49494       -6     
  Branches    11986    11986              
==========================================
- Hits        37110    37104       -6     
  Misses      10089    10089              
  Partials     2301     2301              
```


| [Impacted Files](https://app.codecov.io/gh/aesara-devs/aesara/pull/1502?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/scalar/basic.py](https://app.codecov.io/gh/aesara-devs/aesara/pull/1502?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3NjYWxhci9iYXNpYy5weQ==) | `79.17% <100.00%> (ø)` | |
| [aesara/tensor/nlinalg.py](https://app.codecov.io/gh/aesara-devs/aesara/pull/1502?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9ubGluYWxnLnB5) | `98.54% <100.00%> (-0.03%)` | :arrow_down: |

</details>
Smit-create(2023-07-12 01:04:15):Should I also add my email/affiliation or it's fine?
brandonwillard(2023-07-12 16:13:23):Yeah, feel free to add it or provide the diff/info.
Smit-create(2023-07-12 17:01:24):Sure,
Email: `smitlunagariya.mat18@itbhu.ac.in`
Affiliation: `Indian Institute of Technology (BHU), Varanasi`
Smit-create(2023-07-15 06:15:34):```suggestion
    family-names: Lunagariya
    email: smitlunagariya.mat18@itbhu.ac.in
    affiliation: Indian Institute of Technology (BHU), Varanasi
```
brandonwillard(2023-09-05 18:05:20):Much appreciated @aadya940!
aadya940(2023-09-08 07:45:31):I guess the test's are failing due to an issue in sphinx. Can someone please review the code before we can merge it?
brandonwillard(2023-09-20 19:14:31):I've fixed the formatting issues and squashed the commits.  https://github.com/aesara-devs/aesara/pull/1512 might need to go through before this will pass, though.
codecov[bot](2023-09-21 00:03:47):## [Codecov](https://app.codecov.io/gh/aesara-devs/aesara/pull/1509?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1509](https://app.codecov.io/gh/aesara-devs/aesara/pull/1509?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (e7fc0db) into [main](https://app.codecov.io/gh/aesara-devs/aesara/commit/22e9d6269e536dde7eec3ead523fb3c352b283b2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (22e9d62) will **increase** coverage by `0.00%`.
> Report is 1 commits behind head on main.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://app.codecov.io/gh/aesara-devs/aesara/pull/1509/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://app.codecov.io/gh/aesara-devs/aesara/pull/1509?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1509   +/-   ##
=======================================
  Coverage   74.96%   74.97%           
=======================================
  Files         176      176           
  Lines       49498    49507    +9     
  Branches    11986    11986           
=======================================
+ Hits        37108    37117    +9     
  Misses      10089    10089           
  Partials     2301     2301           
```


| [Files Changed](https://app.codecov.io/gh/aesara-devs/aesara/pull/1509?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage |
|---|---|
| [aesara/tensor/random/basic.py](https://app.codecov.io/gh/aesara-devs/aesara/pull/1509?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9yYW5kb20vYmFzaWMucHk=) | `100.00%` |

brandonwillard(2023-09-21 00:04:08):@aadya940, many thanks for the contribution! 
aadya940(2023-09-21 07:05:50):> @aadya940, many thanks for the contribution!

Welcome :-)
brandonwillard(2023-09-08 13:59:30):```suggestion
    compare_sample_values(f, dfn, dfd)
```
codecov[bot](2023-10-24 23:54:49):## [Codecov](https://app.codecov.io/gh/aesara-devs/aesara/pull/1519?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) Report
> Merging [#1519](https://app.codecov.io/gh/aesara-devs/aesara/pull/1519?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (5d9a965) into [main](https://app.codecov.io/gh/aesara-devs/aesara/commit/ec4821ee4e2d38b09f651b6eae9857104cf4281d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) (ec4821e) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://app.codecov.io/gh/aesara-devs/aesara/pull/1519/graphs/tree.svg?width=650&height=150&src=pr&token=2HNzVWyxrA&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)](https://app.codecov.io/gh/aesara-devs/aesara/pull/1519?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs)

```diff
@@           Coverage Diff           @@
##             main    #1519   +/-   ##
=======================================
  Coverage   74.97%   74.97%           
=======================================
  Files         176      176           
  Lines       49507    49507           
  Branches    11986    11986           
=======================================
  Hits        37117    37117           
  Misses      10089    10089           
  Partials     2301     2301           
```


| [Files](https://app.codecov.io/gh/aesara-devs/aesara/pull/1519?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs) | Coverage Δ | |
|---|---|---|
| [aesara/tensor/basic.py](https://app.codecov.io/gh/aesara-devs/aesara/pull/1519?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=aesara-devs#diff-YWVzYXJhL3RlbnNvci9iYXNpYy5weQ==) | `89.99% <100.00%> (ø)` | |

brandonwillard(2023-10-24 23:59:31):@mattearllongshot, if you can, give this branch a shot and tell me if your profiling results still look good.  They should, but it's worth checking again.
mattearllongshot(2023-10-25 09:50:33):Hello, I can confirm this fixes the leak for me.  Thanks for the fix!
brandonwillard(2024-02-05 16:23:39):Thanks, @zoj613!
